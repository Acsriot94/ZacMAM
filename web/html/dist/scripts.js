/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcz9hMzRhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/jquery-1.11.1.min.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/jquery-1.11.1.min.js ***!
  \********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */\n!function (a, b) {\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}(\"undefined\" != typeof window ? window : this, function (a, b) {\n  var c = [],\n      d = c.slice,\n      e = c.concat,\n      f = c.push,\n      g = c.indexOf,\n      h = {},\n      i = h.toString,\n      j = h.hasOwnProperty,\n      k = {},\n      l = \"1.11.1\",\n      m = function m(a, b) {\n    return new m.fn.init(a, b);\n  },\n      n = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      o = /^-ms-/,\n      p = /-([\\da-z])/gi,\n      q = function q(a, b) {\n    return b.toUpperCase();\n  };\n\n  m.fn = m.prototype = {\n    jquery: l,\n    constructor: m,\n    selector: \"\",\n    length: 0,\n    toArray: function toArray() {\n      return d.call(this);\n    },\n    get: function get(a) {\n      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);\n    },\n    pushStack: function pushStack(a) {\n      var b = m.merge(this.constructor(), a);\n      return b.prevObject = this, b.context = this.context, b;\n    },\n    each: function each(a, b) {\n      return m.each(this, a, b);\n    },\n    map: function map(a) {\n      return this.pushStack(m.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(d.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(a) {\n      var b = this.length,\n          c = +a + (0 > a ? b : 0);\n      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n    push: f,\n    sort: c.sort,\n    splice: c.splice\n  }, m.extend = m.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == _typeof(g) || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {\n      if (null != (e = arguments[h])) for (d in e) {\n        a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));\n      }\n    }\n\n    return g;\n  }, m.extend({\n    expando: \"jQuery\" + (l + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(a) {\n      throw new Error(a);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(a) {\n      return \"function\" === m.type(a);\n    },\n    isArray: Array.isArray || function (a) {\n      return \"array\" === m.type(a);\n    },\n    isWindow: function isWindow(a) {\n      return null != a && a == a.window;\n    },\n    isNumeric: function isNumeric(a) {\n      return !m.isArray(a) && a - parseFloat(a) >= 0;\n    },\n    isEmptyObject: function isEmptyObject(a) {\n      var b;\n\n      for (b in a) {\n        return !1;\n      }\n\n      return !0;\n    },\n    isPlainObject: function isPlainObject(a) {\n      var b;\n      if (!a || \"object\" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;\n\n      try {\n        if (a.constructor && !j.call(a, \"constructor\") && !j.call(a.constructor.prototype, \"isPrototypeOf\")) return !1;\n      } catch (c) {\n        return !1;\n      }\n\n      if (k.ownLast) for (b in a) {\n        return j.call(a, b);\n      }\n\n      for (b in a) {\n        ;\n      }\n\n      return void 0 === b || j.call(a, b);\n    },\n    type: function type(a) {\n      return null == a ? a + \"\" : \"object\" == _typeof(a) || \"function\" == typeof a ? h[i.call(a)] || \"object\" : _typeof(a);\n    },\n    globalEval: function globalEval(b) {\n      b && m.trim(b) && (a.execScript || function (b) {\n        a.eval.call(a, b);\n      })(b);\n    },\n    camelCase: function camelCase(a) {\n      return a.replace(o, \"ms-\").replace(p, q);\n    },\n    nodeName: function nodeName(a, b) {\n      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n    },\n    each: function each(a, b, c) {\n      var d,\n          e = 0,\n          f = a.length,\n          g = r(a);\n\n      if (c) {\n        if (g) {\n          for (; f > e; e++) {\n            if (d = b.apply(a[e], c), d === !1) break;\n          }\n        } else for (e in a) {\n          if (d = b.apply(a[e], c), d === !1) break;\n        }\n      } else if (g) {\n        for (; f > e; e++) {\n          if (d = b.call(a[e], e, a[e]), d === !1) break;\n        }\n      } else for (e in a) {\n        if (d = b.call(a[e], e, a[e]), d === !1) break;\n      }\n\n      return a;\n    },\n    trim: function trim(a) {\n      return null == a ? \"\" : (a + \"\").replace(n, \"\");\n    },\n    makeArray: function makeArray(a, b) {\n      var c = b || [];\n      return null != a && (r(Object(a)) ? m.merge(c, \"string\" == typeof a ? [a] : a) : f.call(c, a)), c;\n    },\n    inArray: function inArray(a, b, c) {\n      var d;\n\n      if (b) {\n        if (g) return g.call(b, a, c);\n\n        for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) {\n          if (c in b && b[c] === a) return c;\n        }\n      }\n\n      return -1;\n    },\n    merge: function merge(a, b) {\n      var c = +b.length,\n          d = 0,\n          e = a.length;\n\n      while (c > d) {\n        a[e++] = b[d++];\n      }\n\n      if (c !== c) while (void 0 !== b[d]) {\n        a[e++] = b[d++];\n      }\n      return a.length = e, a;\n    },\n    grep: function grep(a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {\n        d = !b(a[f], f), d !== h && e.push(a[f]);\n      }\n\n      return e;\n    },\n    map: function map(a, b, c) {\n      var d,\n          f = 0,\n          g = a.length,\n          h = r(a),\n          i = [];\n      if (h) for (; g > f; f++) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      } else for (f in a) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      }\n      return e.apply([], i);\n    },\n    guid: 1,\n    proxy: function proxy(a, b) {\n      var c, e, f;\n      return \"string\" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function e() {\n        return a.apply(b || this, c.concat(d.call(arguments)));\n      }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;\n    },\n    now: function now() {\n      return +new Date();\n    },\n    support: k\n  }), m.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (a, b) {\n    h[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function r(a) {\n    var b = a.length,\n        c = m.type(a);\n    return \"function\" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : \"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a;\n  }\n\n  var s = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + -new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = gb(),\n        z = gb(),\n        A = gb(),\n        B = function B(a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = \"undefined\",\n        D = 1 << 31,\n        E = {}.hasOwnProperty,\n        F = [],\n        G = F.pop,\n        H = F.push,\n        I = F.push,\n        J = F.slice,\n        K = F.indexOf || function (a) {\n      for (var b = 0, c = this.length; c > b; b++) {\n        if (this[b] === a) return b;\n      }\n\n      return -1;\n    },\n        L = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        M = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        N = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n        O = N.replace(\"w\", \"w#\"),\n        P = \"\\\\[\" + M + \"*(\" + N + \")(?:\" + M + \"*([*^$|!~]?=)\" + M + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + O + \"))|)\" + M + \"*\\\\]\",\n        Q = \":(\" + N + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + P + \")*)|.*)\\\\)|)\",\n        R = new RegExp(\"^\" + M + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + M + \"+$\", \"g\"),\n        S = new RegExp(\"^\" + M + \"*,\" + M + \"*\"),\n        T = new RegExp(\"^\" + M + \"*([>+~]|\" + M + \")\" + M + \"*\"),\n        U = new RegExp(\"=\" + M + \"*([^\\\\]'\\\"]*?)\" + M + \"*\\\\]\", \"g\"),\n        V = new RegExp(Q),\n        W = new RegExp(\"^\" + O + \"$\"),\n        X = {\n      ID: new RegExp(\"^#(\" + N + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + N + \")\"),\n      TAG: new RegExp(\"^(\" + N.replace(\"w\", \"w*\") + \")\"),\n      ATTR: new RegExp(\"^\" + P),\n      PSEUDO: new RegExp(\"^\" + Q),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + M + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + M + \"*(?:([+-]|)\" + M + \"*(\\\\d+)|))\" + M + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + L + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + M + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + M + \"*((?:-\\\\d)?\\\\d*)\" + M + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        Y = /^(?:input|select|textarea|button)$/i,\n        Z = /^h\\d$/i,\n        $ = /^[^{]+\\{\\s*\\[native \\w/,\n        _ = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        ab = /[+~]/,\n        bb = /'|\\\\/g,\n        cb = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + M + \"?|(\" + M + \")|.)\", \"ig\"),\n        db = function db(a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    };\n\n    try {\n      I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;\n    } catch (eb) {\n      I = {\n        apply: F.length ? function (a, b) {\n          H.apply(a, J.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]) {\n            ;\n          }\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function fb(a, b, d, e) {\n      var f, h, j, k, l, o, r, s, w, x;\n      if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || \"string\" != typeof a) return d;\n      if (1 !== (k = b.nodeType) && 9 !== k) return [];\n\n      if (p && !e) {\n        if (f = _.exec(a)) if (j = f[1]) {\n          if (9 === k) {\n            if (h = b.getElementById(j), !h || !h.parentNode) return d;\n            if (h.id === j) return d.push(h), d;\n          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;\n        } else {\n          if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;\n          if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;\n        }\n\n        if (c.qsa && (!q || !q.test(a))) {\n          if (s = r = u, w = b, x = 9 === k && a, 1 === k && \"object\" !== b.nodeName.toLowerCase()) {\n            o = g(a), (r = b.getAttribute(\"id\")) ? s = r.replace(bb, \"\\\\$&\") : b.setAttribute(\"id\", s), s = \"[id='\" + s + \"'] \", l = o.length;\n\n            while (l--) {\n              o[l] = s + qb(o[l]);\n            }\n\n            w = ab.test(a) && ob(b.parentNode) || b, x = o.join(\",\");\n          }\n\n          if (x) try {\n            return I.apply(d, w.querySelectorAll(x)), d;\n          } catch (y) {} finally {\n            r || b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(R, \"$1\"), b, d, e);\n    }\n\n    function gb() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function hb(a) {\n      return a[u] = !0, a;\n    }\n\n    function ib(a) {\n      var b = n.createElement(\"div\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function jb(a, b) {\n      var c = a.split(\"|\"),\n          e = a.length;\n\n      while (e--) {\n        d.attrHandle[c[e]] = b;\n      }\n    }\n\n    function kb(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);\n      if (d) return d;\n      if (c) while (c = c.nextSibling) {\n        if (c === b) return -1;\n      }\n      return a ? 1 : -1;\n    }\n\n    function lb(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function mb(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function nb(a) {\n      return hb(function (b) {\n        return b = +b, hb(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) {\n            c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n          }\n        });\n      });\n    }\n\n    function ob(a) {\n      return a && _typeof(a.getElementsByTagName) !== C && a;\n    }\n\n    c = fb.support = {}, f = fb.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return b ? \"HTML\" !== b.nodeName : !1;\n    }, m = fb.setDocument = function (a) {\n      var b,\n          e = a ? a.ownerDocument || a : v,\n          g = e.defaultView;\n      return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener(\"unload\", function () {\n        m();\n      }, !1) : g.attachEvent && g.attachEvent(\"onunload\", function () {\n        m();\n      })), c.attributes = ib(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ib(function (a) {\n        return a.appendChild(e.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {\n        return a.innerHTML = \"<div class='a'></div><div class='a i'></div>\", a.firstChild.className = \"i\", 2 === a.getElementsByClassName(\"i\").length;\n      }), c.getById = ib(function (a) {\n        return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;\n      }), c.getById ? (d.find.ID = function (a, b) {\n        if (_typeof(b.getElementById) !== C && p) {\n          var c = b.getElementById(a);\n          return c && c.parentNode ? [c] : [];\n        }\n      }, d.filter.ID = function (a) {\n        var b = a.replace(cb, db);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }) : (delete d.find.ID, d.filter.ID = function (a) {\n        var b = a.replace(cb, db);\n        return function (a) {\n          var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) {\n            1 === c.nodeType && d.push(c);\n          }\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;\n      }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {\n        a.innerHTML = \"<select msallowclip=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowclip^='']\").length && q.push(\"[*^$]=\" + M + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + M + \"*(?:value|\" + L + \")\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\");\n      }), ib(function (a) {\n        var b = e.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + M + \"*[*^$|!~]?=\"), a.querySelectorAll(\":enabled\").length || q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {\n        c.disconnectedMatch = s.call(a, \"div\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", Q);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) {\n          if (b === a) return !0;\n        }\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            f = a.parentNode,\n            g = b.parentNode,\n            h = [a],\n            i = [b];\n        if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;\n        if (f === g) return kb(a, b);\n        c = a;\n\n        while (c = c.parentNode) {\n          h.unshift(c);\n        }\n\n        c = b;\n\n        while (c = c.parentNode) {\n          i.unshift(c);\n        }\n\n        while (h[d] === i[d]) {\n          d++;\n        }\n\n        return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;\n      }, e) : n;\n    }, fb.matches = function (a, b) {\n      return fb(a, null, null, b);\n    }, fb.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, \"='$1']\"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return fb(b, n, null, [a]).length > 0;\n    }, fb.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, fb.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, fb.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, fb.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) {\n          b === a[f] && (e = d.push(f));\n        }\n\n        while (e--) {\n          a.splice(d[e], 1);\n        }\n      }\n\n      return k = null, a;\n    }, e = fb.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            c += e(a);\n          }\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) {\n        c += e(b);\n      }\n\n      return c;\n    }, d = fb.selectors = {\n      cacheLength: 50,\n      createPseudo: hb,\n      match: X,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(a) {\n          return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || \"\").replace(cb, db), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function CHILD(a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && fb.error(a[0]), a;\n        },\n        PSEUDO: function PSEUDO(a) {\n          var b,\n              c = !a[6] && a[2];\n          return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(a) {\n          var b = a.replace(cb, db).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function CLASS(a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + M + \")\" + a + \"(\" + M + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(a, b, c) {\n          return function (d) {\n            var e = fb.attr(d, a);\n            return null == e ? \"!=\" === b : b ? (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e + \" \").indexOf(c) > -1 : \"|=\" === b ? e === c || e.slice(0, c.length + 1) === c + \"-\" : !1) : !0;\n          };\n        },\n        CHILD: function CHILD(a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  l = b;\n\n                  while (l = l[p]) {\n                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;\n                  }\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];\n\n                while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                  if (1 === l.nodeType && ++m && l === b) {\n                    k[a] = [w, n, m];\n                    break;\n                  }\n                }\n              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;\n              }\n\n              return m -= e, m === d || m % d === 0 && m / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) {\n              d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);\n            }\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: hb(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(R, \"$1\"));\n          return d[u] ? hb(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) {\n              (f = g[h]) && (a[h] = !(b[h] = f));\n            }\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), !c.pop();\n          };\n        }),\n        has: hb(function (a) {\n          return function (b) {\n            return fb(a, b).length > 0;\n          };\n        }),\n        contains: hb(function (a) {\n          return function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: hb(function (a) {\n          return W.test(a || \"\") || fb.error(\"unsupported lang: \" + a), a = a.replace(cb, db).toLowerCase(), function (b) {\n            var c;\n\n            do {\n              if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\");\n            } while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function root(a) {\n          return a === o;\n        },\n        focus: function focus(a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: function enabled(a) {\n          return a.disabled === !1;\n        },\n        disabled: function disabled(a) {\n          return a.disabled === !0;\n        },\n        checked: function checked(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function selected(a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function empty(a) {\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            if (a.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function header(a) {\n          return Z.test(a.nodeName);\n        },\n        input: function input(a) {\n          return Y.test(a.nodeName);\n        },\n        button: function button(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function text(a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: nb(function () {\n          return [0];\n        }),\n        last: nb(function (a, b) {\n          return [b - 1];\n        }),\n        eq: nb(function (a, b, c) {\n          return [0 > c ? c + b : c];\n        }),\n        even: nb(function (a, b) {\n          for (var c = 0; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        odd: nb(function (a, b) {\n          for (var c = 1; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        lt: nb(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; --d >= 0;) {\n            a.push(d);\n          }\n\n          return a;\n        }),\n        gt: nb(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; ++d < b;) {\n            a.push(d);\n          }\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      d.pseudos[b] = lb(b);\n    }\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) {\n      d.pseudos[b] = mb(b);\n    }\n\n    function pb() {}\n\n    pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(R, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) {\n          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n            value: c,\n            type: g,\n            matches: e\n          }), h = h.slice(c.length));\n        }\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);\n    };\n\n    function qb(a) {\n      for (var b = 0, c = a.length, d = \"\"; c > b; b++) {\n        d += a[b].value;\n      }\n\n      return d;\n    }\n\n    function rb(a, b, c) {\n      var d = b.dir,\n          e = c && \"parentNode\" === d,\n          f = x++;\n      return b.first ? function (b, c, f) {\n        while (b = b[d]) {\n          if (1 === b.nodeType || e) return a(b, c, f);\n        }\n      } : function (b, c, g) {\n        var h,\n            i,\n            j = [w, f];\n\n        if (g) {\n          while (b = b[d]) {\n            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;\n          }\n        } else while (b = b[d]) {\n          if (1 === b.nodeType || e) {\n            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];\n            if (i[d] = j, j[2] = a(b, c, g)) return !0;\n          }\n        }\n      };\n    }\n\n    function sb(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) {\n          if (!a[e](b, c, d)) return !1;\n        }\n\n        return !0;\n      } : a[0];\n    }\n\n    function tb(a, b, c) {\n      for (var d = 0, e = b.length; e > d; d++) {\n        fb(a, b[d], c);\n      }\n\n      return c;\n    }\n\n    function ub(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {\n        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));\n      }\n\n      return g;\n    }\n\n    function vb(a, b, c, d, e, f) {\n      return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || tb(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : ub(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = ub(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) {\n            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n          }\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) {\n                (l = r[k]) && j.push(q[k] = l);\n              }\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) {\n              (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n            }\n          }\n        } else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);\n      });\n    }\n\n    function wb(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = rb(function (a) {\n        return a === b;\n      }, h, !0), l = rb(function (a) {\n        return K.call(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n      }]; f > i; i++) {\n        if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {\n          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n            for (e = ++i; f > e; e++) {\n              if (d.relative[a[e].type]) break;\n            }\n\n            return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({\n              value: \" \" === a[i - 2].type ? \"*\" : \"\"\n            })).replace(R, \"$1\"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));\n          }\n\n          m.push(c);\n        }\n      }\n\n      return sb(m);\n    }\n\n    function xb(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function f(_f, g, h, i, k) {\n        var l,\n            m,\n            o,\n            p = 0,\n            q = \"0\",\n            r = _f && [],\n            s = [],\n            t = j,\n            u = _f || e && d.find.TAG(\"*\", k),\n            v = w += null == t ? 1 : Math.random() || .1,\n            x = u.length;\n\n        for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {\n          if (e && l) {\n            m = 0;\n\n            while (o = a[m++]) {\n              if (o(l, g, h)) {\n                i.push(l);\n                break;\n              }\n            }\n\n            k && (w = v);\n          }\n\n          c && ((l = !o && l) && p--, _f && r.push(l));\n        }\n\n        if (p += q, c && q !== p) {\n          m = 0;\n\n          while (o = b[m++]) {\n            o(r, s, g, h);\n          }\n\n          if (_f) {\n            if (p > 0) while (q--) {\n              r[q] || s[q] || (s[q] = G.call(i));\n            }\n            s = ub(s);\n          }\n\n          I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);\n        }\n\n        return k && (w = v, j = t), r;\n      };\n\n      return c ? hb(f) : f;\n    }\n\n    return h = fb.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) {\n          f = wb(b[c]), f[u] ? d.push(f) : e.push(f);\n        }\n\n        f = A(a, xb(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = fb.select = function (a, b, e, f) {\n      var i,\n          j,\n          k,\n          l,\n          m,\n          n = \"function\" == typeof a && a,\n          o = !f && g(a = n.selector || a);\n\n      if (e = e || [], 1 === o.length) {\n        if (j = o[0] = o[0].slice(0), j.length > 2 && \"ID\" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {\n          if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;\n          n && (b = b.parentNode), a = a.slice(j.shift().value.length);\n        }\n\n        i = X.needsContext.test(a) ? 0 : j.length;\n\n        while (i--) {\n          if (k = j[i], d.relative[l = k.type]) break;\n\n          if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {\n            if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;\n            break;\n          }\n        }\n      }\n\n      return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"div\"));\n    }), ib(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || jb(\"type|href|height|width\", function (a, b, c) {\n      return c ? void 0 : a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ib(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || jb(\"value\", function (a, b, c) {\n      return c || \"input\" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;\n    }), ib(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || jb(L, function (a, b, c) {\n      var d;\n      return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), fb;\n  }(a);\n\n  m.find = s, m.expr = s.selectors, m.expr[\":\"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;\n  var t = m.expr.match.needsContext,\n      u = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      v = /^.[^:#\\[\\.,]*$/;\n\n  function w(a, b, c) {\n    if (m.isFunction(b)) return m.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    });\n    if (b.nodeType) return m.grep(a, function (a) {\n      return a === b !== c;\n    });\n\n    if (\"string\" == typeof b) {\n      if (v.test(b)) return m.filter(b, a, c);\n      b = m.filter(b, a);\n    }\n\n    return m.grep(a, function (a) {\n      return m.inArray(a, b) >= 0 !== c;\n    });\n  }\n\n  m.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, m.fn.extend({\n    find: function find(a) {\n      var b,\n          c = [],\n          d = this,\n          e = d.length;\n      if (\"string\" != typeof a) return this.pushStack(m(a).filter(function () {\n        for (b = 0; e > b; b++) {\n          if (m.contains(d[b], this)) return !0;\n        }\n      }));\n\n      for (b = 0; e > b; b++) {\n        m.find(a, d[b], c);\n      }\n\n      return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + \" \" + a : a, c;\n    },\n    filter: function filter(a) {\n      return this.pushStack(w(this, a || [], !1));\n    },\n    not: function not(a) {\n      return this.pushStack(w(this, a || [], !0));\n    },\n    is: function is(a) {\n      return !!w(this, \"string\" == typeof a && t.test(a) ? m(a) : a || [], !1).length;\n    }\n  });\n\n  var x,\n      y = a.document,\n      z = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n      A = m.fn.init = function (a, b) {\n    var c, d;\n    if (!a) return this;\n\n    if (\"string\" == typeof a) {\n      if (c = \"<\" === a.charAt(0) && \">\" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);\n\n      if (c[1]) {\n        if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b)) for (c in b) {\n          m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);\n        }\n        return this;\n      }\n\n      if (d = y.getElementById(c[2]), d && d.parentNode) {\n        if (d.id !== c[2]) return x.find(a);\n        this.length = 1, this[0] = d;\n      }\n\n      return this.context = y, this.selector = a, this;\n    }\n\n    return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? \"undefined\" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));\n  };\n\n  A.prototype = m.fn, x = m(y);\n  var B = /^(?:parents|prev(?:Until|All))/,\n      C = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  m.extend({\n    dir: function dir(a, b, c) {\n      var d = [],\n          e = a[b];\n\n      while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) {\n        1 === e.nodeType && d.push(e), e = e[b];\n      }\n\n      return d;\n    },\n    sibling: function sibling(a, b) {\n      for (var c = []; a; a = a.nextSibling) {\n        1 === a.nodeType && a !== b && c.push(a);\n      }\n\n      return c;\n    }\n  }), m.fn.extend({\n    has: function has(a) {\n      var b,\n          c = m(a, this),\n          d = c.length;\n      return this.filter(function () {\n        for (b = 0; d > b; b++) {\n          if (m.contains(this, c[b])) return !0;\n        }\n      });\n    },\n    closest: function closest(a, b) {\n      for (var c, d = 0, e = this.length, f = [], g = t.test(a) || \"string\" != typeof a ? m(a, b || this.context) : 0; e > d; d++) {\n        for (c = this[d]; c && c !== b; c = c.parentNode) {\n          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {\n            f.push(c);\n            break;\n          }\n        }\n      }\n\n      return this.pushStack(f.length > 1 ? m.unique(f) : f);\n    },\n    index: function index(a) {\n      return a ? \"string\" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(a, b) {\n      return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));\n    },\n    addBack: function addBack(a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function D(a, b) {\n    do {\n      a = a[b];\n    } while (a && 1 !== a.nodeType);\n\n    return a;\n  }\n\n  m.each({\n    parent: function parent(a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function parents(a) {\n      return m.dir(a, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(a, b, c) {\n      return m.dir(a, \"parentNode\", c);\n    },\n    next: function next(a) {\n      return D(a, \"nextSibling\");\n    },\n    prev: function prev(a) {\n      return D(a, \"previousSibling\");\n    },\n    nextAll: function nextAll(a) {\n      return m.dir(a, \"nextSibling\");\n    },\n    prevAll: function prevAll(a) {\n      return m.dir(a, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(a, b, c) {\n      return m.dir(a, \"nextSibling\", c);\n    },\n    prevUntil: function prevUntil(a, b, c) {\n      return m.dir(a, \"previousSibling\", c);\n    },\n    siblings: function siblings(a) {\n      return m.sibling((a.parentNode || {}).firstChild, a);\n    },\n    children: function children(a) {\n      return m.sibling(a.firstChild);\n    },\n    contents: function contents(a) {\n      return m.nodeName(a, \"iframe\") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);\n    }\n  }, function (a, b) {\n    m.fn[a] = function (c, d) {\n      var e = m.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);\n    };\n  });\n  var E = /\\S+/g,\n      F = {};\n\n  function G(a) {\n    var b = F[a] = {};\n    return m.each(a.match(E) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  m.Callbacks = function (a) {\n    a = \"string\" == typeof a ? F[a] || G(a) : m.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = [],\n        i = !a.once && [],\n        j = function j(l) {\n      for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) {\n        if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {\n          c = !1;\n          break;\n        }\n      }\n\n      b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());\n    },\n        k = {\n      add: function add() {\n        if (h) {\n          var d = h.length;\n          !function f(b) {\n            m.each(b, function (b, c) {\n              var d = m.type(c);\n              \"function\" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && \"string\" !== d && f(c);\n            });\n          }(arguments), b ? e = h.length : c && (g = d, j(c));\n        }\n\n        return this;\n      },\n      remove: function remove() {\n        return h && m.each(arguments, function (a, c) {\n          var d;\n\n          while ((d = m.inArray(c, h, d)) > -1) {\n            h.splice(d, 1), b && (e >= d && e--, f >= d && f--);\n          }\n        }), this;\n      },\n      has: function has(a) {\n        return a ? m.inArray(a, h) > -1 : !(!h || !h.length);\n      },\n      empty: function empty() {\n        return h = [], e = 0, this;\n      },\n      disable: function disable() {\n        return h = i = c = void 0, this;\n      },\n      disabled: function disabled() {\n        return !h;\n      },\n      lock: function lock() {\n        return i = void 0, c || k.disable(), this;\n      },\n      locked: function locked() {\n        return !i;\n      },\n      fireWith: function fireWith(a, c) {\n        return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this;\n      },\n      fire: function fire() {\n        return k.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!d;\n      }\n    };\n\n    return k;\n  }, m.extend({\n    Deferred: function Deferred(a) {\n      var b = [[\"resolve\", \"done\", m.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", m.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", m.Callbacks(\"memory\")]],\n          c = \"pending\",\n          d = {\n        state: function state() {\n          return c;\n        },\n        always: function always() {\n          return e.done(arguments).fail(arguments), this;\n        },\n        then: function then() {\n          var a = arguments;\n          return m.Deferred(function (c) {\n            m.each(b, function (b, f) {\n              var g = m.isFunction(a[b]) && a[b];\n              e[f[1]](function () {\n                var a = g && g.apply(this, arguments);\n                a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + \"With\"](this === d ? c.promise() : this, g ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        promise: function promise(a) {\n          return null != a ? m.extend(a, d) : d;\n        }\n      },\n          e = {};\n      return d.pipe = d.then, m.each(b, function (a, f) {\n        var g = f[2],\n            h = f[3];\n        d[f[1]] = g.add, h && g.add(function () {\n          c = h;\n        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {\n          return e[f[0] + \"With\"](this === e ? d : this, arguments), this;\n        }, e[f[0] + \"With\"] = g.fireWith;\n      }), d.promise(e), a && a.call(e, e), e;\n    },\n    when: function when(a) {\n      var b = 0,\n          c = d.call(arguments),\n          e = c.length,\n          f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,\n          g = 1 === f ? a : m.Deferred(),\n          h = function h(a, b, c) {\n        return function (e) {\n          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);\n        };\n      },\n          i,\n          j,\n          k;\n\n      if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {\n        c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;\n      }\n      return f || g.resolveWith(k, c), g.promise();\n    }\n  });\n  var H;\n  m.fn.ready = function (a) {\n    return m.ready.promise().done(a), this;\n  }, m.extend({\n    isReady: !1,\n    readyWait: 1,\n    holdReady: function holdReady(a) {\n      a ? m.readyWait++ : m.ready(!0);\n    },\n    ready: function ready(a) {\n      if (a === !0 ? ! --m.readyWait : !m.isReady) {\n        if (!y.body) return setTimeout(m.ready);\n        m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler(\"ready\"), m(y).off(\"ready\")));\n      }\n    }\n  });\n\n  function I() {\n    y.addEventListener ? (y.removeEventListener(\"DOMContentLoaded\", J, !1), a.removeEventListener(\"load\", J, !1)) : (y.detachEvent(\"onreadystatechange\", J), a.detachEvent(\"onload\", J));\n  }\n\n  function J() {\n    (y.addEventListener || \"load\" === event.type || \"complete\" === y.readyState) && (I(), m.ready());\n  }\n\n  m.ready.promise = function (b) {\n    if (!H) if (H = m.Deferred(), \"complete\" === y.readyState) setTimeout(m.ready);else if (y.addEventListener) y.addEventListener(\"DOMContentLoaded\", J, !1), a.addEventListener(\"load\", J, !1);else {\n      y.attachEvent(\"onreadystatechange\", J), a.attachEvent(\"onload\", J);\n      var c = !1;\n\n      try {\n        c = null == a.frameElement && y.documentElement;\n      } catch (d) {}\n\n      c && c.doScroll && !function e() {\n        if (!m.isReady) {\n          try {\n            c.doScroll(\"left\");\n          } catch (a) {\n            return setTimeout(e, 50);\n          }\n\n          I(), m.ready();\n        }\n      }();\n    }\n    return H.promise(b);\n  };\n\n  var K = \"undefined\",\n      L;\n\n  for (L in m(k)) {\n    break;\n  }\n\n  k.ownLast = \"0\" !== L, k.inlineBlockNeedsLayout = !1, m(function () {\n    var a, b, c, d;\n    c = y.getElementsByTagName(\"body\")[0], c && c.style && (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));\n  }), function () {\n    var a = y.createElement(\"div\");\n\n    if (null == k.deleteExpando) {\n      k.deleteExpando = !0;\n\n      try {\n        delete a.test;\n      } catch (b) {\n        k.deleteExpando = !1;\n      }\n    }\n\n    a = null;\n  }(), m.acceptData = function (a) {\n    var b = m.noData[(a.nodeName + \" \").toLowerCase()],\n        c = +a.nodeType || 1;\n    return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute(\"classid\") === b;\n  };\n  var M = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      N = /([A-Z])/g;\n\n  function O(a, b, c) {\n    if (void 0 === c && 1 === a.nodeType) {\n      var d = \"data-\" + b.replace(N, \"-$1\").toLowerCase();\n\n      if (c = a.getAttribute(d), \"string\" == typeof c) {\n        try {\n          c = \"true\" === c ? !0 : \"false\" === c ? !1 : \"null\" === c ? null : +c + \"\" === c ? +c : M.test(c) ? m.parseJSON(c) : c;\n        } catch (e) {}\n\n        m.data(a, b, c);\n      } else c = void 0;\n    }\n\n    return c;\n  }\n\n  function P(a) {\n    var b;\n\n    for (b in a) {\n      if ((\"data\" !== b || !m.isEmptyObject(a[b])) && \"toJSON\" !== b) return !1;\n    }\n\n    return !0;\n  }\n\n  function Q(a, b, d, e) {\n    if (m.acceptData(a)) {\n      var f,\n          g,\n          h = m.expando,\n          i = a.nodeType,\n          j = i ? m.cache : a,\n          k = i ? a[h] : a[h] && h;\n      if (k && j[k] && (e || j[k].data) || void 0 !== d || \"string\" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : {\n        toJSON: m.noop\n      }), (\"object\" == _typeof(b) || \"function\" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), \"string\" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;\n    }\n  }\n\n  function R(a, b, c) {\n    if (m.acceptData(a)) {\n      var d,\n          e,\n          f = a.nodeType,\n          g = f ? m.cache : a,\n          h = f ? a[m.expando] : m.expando;\n\n      if (g[h]) {\n        if (b && (d = c ? g[h] : g[h].data)) {\n          m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(\" \")), e = b.length;\n\n          while (e--) {\n            delete d[b[e]];\n          }\n\n          if (c ? !P(d) : !m.isEmptyObject(d)) return;\n        }\n\n        (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);\n      }\n    }\n  }\n\n  m.extend({\n    cache: {},\n    noData: {\n      \"applet \": !0,\n      \"embed \": !0,\n      \"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n    },\n    hasData: function hasData(a) {\n      return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);\n    },\n    data: function data(a, b, c) {\n      return Q(a, b, c);\n    },\n    removeData: function removeData(a, b) {\n      return R(a, b);\n    },\n    _data: function _data(a, b, c) {\n      return Q(a, b, c, !0);\n    },\n    _removeData: function _removeData(a, b) {\n      return R(a, b, !0);\n    }\n  }), m.fn.extend({\n    data: function data(a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, \"parsedAttrs\"))) {\n          c = g.length;\n\n          while (c--) {\n            g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));\n          }\n\n          m._data(f, \"parsedAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == _typeof(a) ? this.each(function () {\n        m.data(this, a);\n      }) : arguments.length > 1 ? this.each(function () {\n        m.data(this, a, b);\n      }) : f ? O(f, a, m.data(f, a)) : void 0;\n    },\n    removeData: function removeData(a) {\n      return this.each(function () {\n        m.removeData(this, a);\n      });\n    }\n  }), m.extend({\n    queue: function queue(a, b, c) {\n      var d;\n      return a ? (b = (b || \"fx\") + \"queue\", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;\n    },\n    dequeue: function dequeue(a, b) {\n      b = b || \"fx\";\n\n      var c = m.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = m._queueHooks(a, b),\n          g = function g() {\n        m.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function _queueHooks(a, b) {\n      var c = b + \"queueHooks\";\n      return m._data(a, c) || m._data(a, c, {\n        empty: m.Callbacks(\"once memory\").add(function () {\n          m._removeData(a, b + \"queue\"), m._removeData(a, c);\n        })\n      });\n    }\n  }), m.fn.extend({\n    queue: function queue(a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = m.queue(this, a, b);\n        m._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && m.dequeue(this, a);\n      });\n    },\n    dequeue: function dequeue(a) {\n      return this.each(function () {\n        m.dequeue(this, a);\n      });\n    },\n    clearQueue: function clearQueue(a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function promise(a, b) {\n      var c,\n          d = 1,\n          e = m.Deferred(),\n          f = this,\n          g = this.length,\n          h = function h() {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) {\n        c = m._data(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n      }\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var S = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      T = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      U = function U(a, b) {\n    return a = b || a, \"none\" === m.css(a, \"display\") || !m.contains(a.ownerDocument, a);\n  },\n      V = m.access = function (a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === m.type(c)) {\n      e = !0;\n\n      for (h in c) {\n        m.access(a, b, h, c[h], !0, f, g);\n      }\n    } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {\n      return j.call(m(a), c);\n    })), b)) for (; i > h; h++) {\n      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n    }\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  },\n      W = /^(?:checkbox|radio)$/i;\n\n  !function () {\n    var a = y.createElement(\"input\"),\n        b = y.createElement(\"div\"),\n        c = y.createDocumentFragment();\n\n    if (b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName(\"tbody\").length, k.htmlSerialize = !!b.getElementsByTagName(\"link\").length, k.html5Clone = \"<:nav></:nav>\" !== y.createElement(\"nav\").cloneNode(!0).outerHTML, a.type = \"checkbox\", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = \"<textarea>x</textarea>\", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = \"<input type='radio' checked='checked' name='t'/>\", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent(\"onclick\", function () {\n      k.noCloneEvent = !1;\n    }), b.cloneNode(!0).click()), null == k.deleteExpando) {\n      k.deleteExpando = !0;\n\n      try {\n        delete b.test;\n      } catch (d) {\n        k.deleteExpando = !1;\n      }\n    }\n  }(), function () {\n    var b,\n        c,\n        d = y.createElement(\"div\");\n\n    for (b in {\n      submit: !0,\n      change: !0,\n      focusin: !0\n    }) {\n      c = \"on\" + b, (k[b + \"Bubbles\"] = c in a) || (d.setAttribute(c, \"t\"), k[b + \"Bubbles\"] = d.attributes[c].expando === !1);\n    }\n\n    d = null;\n  }();\n  var X = /^(?:input|select|textarea)$/i,\n      Y = /^key/,\n      Z = /^(?:mouse|pointer|contextmenu)|click/,\n      $ = /^(?:focusinfocus|focusoutblur)$/,\n      _ = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function ab() {\n    return !0;\n  }\n\n  function bb() {\n    return !1;\n  }\n\n  function cb() {\n    try {\n      return y.activeElement;\n    } catch (a) {}\n  }\n\n  m.event = {\n    global: {},\n    add: function add(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          n,\n          o,\n          p,\n          q,\n          r = m._data(a);\n\n      if (r) {\n        c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {\n          return _typeof(m) === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);\n        }, k.elem = a), b = (b || \"\").match(E) || [\"\"], h = b.length;\n\n        while (h--) {\n          f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || \"\").split(\".\").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({\n            type: o,\n            origType: q,\n            data: d,\n            handler: c,\n            guid: c.guid,\n            selector: e,\n            needsContext: e && m.expr.match.needsContext.test(e),\n            namespace: p.join(\".\")\n          }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent(\"on\" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);\n        }\n\n        a = null;\n      }\n    },\n    remove: function remove(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          n,\n          o,\n          p,\n          q,\n          r = m.hasData(a) && m._data(a);\n\n      if (r && (k = r.events)) {\n        b = (b || \"\").match(E) || [\"\"], j = b.length;\n\n        while (j--) {\n          if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || \"\").split(\".\").sort(), o) {\n            l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + p.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), i = f = n.length;\n\n            while (f--) {\n              g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && (\"**\" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));\n            }\n\n            i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);\n          } else for (o in k) {\n            m.event.remove(a, o + b[j], c, d, !0);\n          }\n        }\n\n        m.isEmptyObject(k) && (delete r.handle, m._removeData(a, \"events\"));\n      }\n    },\n    trigger: function trigger(b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          k,\n          l,\n          n,\n          o = [d || y],\n          p = j.call(b, \"type\") ? b.type : b,\n          q = j.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(\".\") >= 0 && (q = p.split(\".\"), p = q.shift(), q.sort()), g = p.indexOf(\":\") < 0 && \"on\" + p, b = b[m.expando] ? b : new m.Event(p, \"object\" == _typeof(b) && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join(\".\"), b.namespace_re = b.namespace ? new RegExp(\"(^|\\\\.)\" + q.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {\n        if (!e && !k.noBubble && !m.isWindow(d)) {\n          for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) {\n            o.push(h), l = h;\n          }\n\n          l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);\n        }\n\n        n = 0;\n\n        while ((h = o[n++]) && !b.isPropagationStopped()) {\n          b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, \"events\") || {})[b.type] && m._data(h, \"handle\"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());\n        }\n\n        if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {\n          l = d[g], l && (d[g] = null), m.event.triggered = p;\n\n          try {\n            d[p]();\n          } catch (r) {}\n\n          m.event.triggered = void 0, l && (d[g] = l);\n        }\n\n        return b.result;\n      }\n    },\n    dispatch: function dispatch(a) {\n      a = m.event.fix(a);\n      var b,\n          c,\n          e,\n          f,\n          g,\n          h = [],\n          i = d.call(arguments),\n          j = (m._data(this, \"events\") || {})[a.type] || [],\n          k = m.event.special[a.type] || {};\n\n      if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {\n        h = m.event.handlers.call(this, a, j), b = 0;\n\n        while ((f = h[b++]) && !a.isPropagationStopped()) {\n          a.currentTarget = f.elem, g = 0;\n\n          while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) {\n            (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));\n          }\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, a), a.result;\n      }\n    },\n    handlers: function handlers(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g = [],\n          h = b.delegateCount,\n          i = a.target;\n      if (h && i.nodeType && (!a.button || \"click\" !== a.type)) for (; i != this; i = i.parentNode || this) {\n        if (1 === i.nodeType && (i.disabled !== !0 || \"click\" !== a.type)) {\n          for (e = [], f = 0; h > f; f++) {\n            d = b[f], c = d.selector + \" \", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);\n          }\n\n          e.length && g.push({\n            elem: i,\n            handlers: e\n          });\n        }\n      }\n      return h < b.length && g.push({\n        elem: this,\n        handlers: b.slice(h)\n      }), g;\n    },\n    fix: function fix(a) {\n      if (a[m.expando]) return a;\n      var b,\n          c,\n          d,\n          e = a.type,\n          f = a,\n          g = this.fixHooks[e];\n      g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;\n\n      while (b--) {\n        c = d[b], a[c] = f[c];\n      }\n\n      return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;\n    },\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n    fixHooks: {},\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(a, b) {\n        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;\n      }\n    },\n    mouseHooks: {\n      props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(a, b) {\n        var c,\n            d,\n            e,\n            f = b.button,\n            g = b.fromElement;\n        return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;\n      }\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function trigger() {\n          if (this !== cb() && this.focus) try {\n            return this.focus(), !1;\n          } catch (a) {}\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          return this === cb() && this.blur ? (this.blur(), !1) : void 0;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function trigger() {\n          return m.nodeName(this, \"input\") && \"checkbox\" === this.type && this.click ? (this.click(), !1) : void 0;\n        },\n        _default: function _default(a) {\n          return m.nodeName(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    },\n    simulate: function simulate(a, b, c, d) {\n      var e = m.extend(new m.Event(), c, {\n        type: a,\n        isSimulated: !0,\n        originalEvent: {}\n      });\n      d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();\n    }\n  }, m.removeEvent = y.removeEventListener ? function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c, !1);\n  } : function (a, b, c) {\n    var d = \"on\" + b;\n    a.detachEvent && (_typeof(a[d]) === K && (a[d] = null), a.detachEvent(d, c));\n  }, m.Event = function (a, b) {\n    return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);\n  }, m.Event.prototype = {\n    isDefaultPrevented: bb,\n    isPropagationStopped: bb,\n    isImmediatePropagationStopped: bb,\n    preventDefault: function preventDefault() {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.originalEvent;\n      this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, m.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    m.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function handle(a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), k.submitBubbles || (m.event.special.submit = {\n    setup: function setup() {\n      return m.nodeName(this, \"form\") ? !1 : void m.event.add(this, \"click._submit keypress._submit\", function (a) {\n        var b = a.target,\n            c = m.nodeName(b, \"input\") || m.nodeName(b, \"button\") ? b.form : void 0;\n        c && !m._data(c, \"submitBubbles\") && (m.event.add(c, \"submit._submit\", function (a) {\n          a._submit_bubble = !0;\n        }), m._data(c, \"submitBubbles\", !0));\n      });\n    },\n    postDispatch: function postDispatch(a) {\n      a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate(\"submit\", this.parentNode, a, !0));\n    },\n    teardown: function teardown() {\n      return m.nodeName(this, \"form\") ? !1 : void m.event.remove(this, \"._submit\");\n    }\n  }), k.changeBubbles || (m.event.special.change = {\n    setup: function setup() {\n      return X.test(this.nodeName) ? ((\"checkbox\" === this.type || \"radio\" === this.type) && (m.event.add(this, \"propertychange._change\", function (a) {\n        \"checked\" === a.originalEvent.propertyName && (this._just_changed = !0);\n      }), m.event.add(this, \"click._change\", function (a) {\n        this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate(\"change\", this, a, !0);\n      })), !1) : void m.event.add(this, \"beforeactivate._change\", function (a) {\n        var b = a.target;\n        X.test(b.nodeName) && !m._data(b, \"changeBubbles\") && (m.event.add(b, \"change._change\", function (a) {\n          !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate(\"change\", this.parentNode, a, !0);\n        }), m._data(b, \"changeBubbles\", !0));\n      });\n    },\n    handle: function handle(a) {\n      var b = a.target;\n      return this !== b || a.isSimulated || a.isTrigger || \"radio\" !== b.type && \"checkbox\" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;\n    },\n    teardown: function teardown() {\n      return m.event.remove(this, \"._change\"), !X.test(this.nodeName);\n    }\n  }), k.focusinBubbles || m.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function c(a) {\n      m.event.simulate(b, a.target, m.event.fix(a), !0);\n    };\n\n    m.event.special[b] = {\n      setup: function setup() {\n        var d = this.ownerDocument || this,\n            e = m._data(d, b);\n\n        e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);\n      },\n      teardown: function teardown() {\n        var d = this.ownerDocument || this,\n            e = m._data(d, b) - 1;\n        e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));\n      }\n    };\n  }), m.fn.extend({\n    on: function on(a, b, c, d, e) {\n      var f, g;\n\n      if (\"object\" == _typeof(a)) {\n        \"string\" != typeof b && (c = c || b, b = void 0);\n\n        for (f in a) {\n          this.on(f, b, c, a[f], e);\n        }\n\n        return this;\n      }\n\n      if (null == c && null == d ? (d = b, c = b = void 0) : null == d && (\"string\" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb;else if (!d) return this;\n      return 1 === e && (g = d, d = function d(a) {\n        return m().off(a), g.apply(this, arguments);\n      }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {\n        m.event.add(this, a, d, c, b);\n      });\n    },\n    one: function one(a, b, c, d) {\n      return this.on(a, b, c, d, 1);\n    },\n    off: function off(a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == _typeof(a)) {\n        for (e in a) {\n          this.off(e, b, a[e]);\n        }\n\n        return this;\n      }\n\n      return (b === !1 || \"function\" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {\n        m.event.remove(this, a, c, b);\n      });\n    },\n    trigger: function trigger(a, b) {\n      return this.each(function () {\n        m.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function triggerHandler(a, b) {\n      var c = this[0];\n      return c ? m.event.trigger(a, b, c, !0) : void 0;\n    }\n  });\n\n  function db(a) {\n    var b = eb.split(\"|\"),\n        c = a.createDocumentFragment();\n    if (c.createElement) while (b.length) {\n      c.createElement(b.pop());\n    }\n    return c;\n  }\n\n  var eb = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n      fb = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n      gb = new RegExp(\"<(?:\" + eb + \")[\\\\s/>]\", \"i\"),\n      hb = /^\\s+/,\n      ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      jb = /<([\\w:]+)/,\n      kb = /<tbody/i,\n      lb = /<|&#?\\w+;/,\n      mb = /<(?:script|style|link)/i,\n      nb = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      ob = /^$|\\/(?:java|ecma)script/i,\n      pb = /^true\\/(.*)/,\n      qb = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n      rb = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    legend: [1, \"<fieldset>\", \"</fieldset>\"],\n    area: [1, \"<map>\", \"</map>\"],\n    param: [1, \"<object>\", \"</object>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: k.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]\n  },\n      sb = db(y),\n      tb = sb.appendChild(y.createElement(\"div\"));\n  rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;\n\n  function ub(a, b) {\n    var c,\n        d,\n        e = 0,\n        f = _typeof(a.getElementsByTagName) !== K ? a.getElementsByTagName(b || \"*\") : _typeof(a.querySelectorAll) !== K ? a.querySelectorAll(b || \"*\") : void 0;\n    if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) {\n      !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));\n    }\n    return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;\n  }\n\n  function vb(a) {\n    W.test(a.type) && (a.defaultChecked = a.checked);\n  }\n\n  function wb(a, b) {\n    return m.nodeName(a, \"table\") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? a.getElementsByTagName(\"tbody\")[0] || a.appendChild(a.ownerDocument.createElement(\"tbody\")) : a;\n  }\n\n  function xb(a) {\n    return a.type = (null !== m.find.attr(a, \"type\")) + \"/\" + a.type, a;\n  }\n\n  function yb(a) {\n    var b = pb.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function zb(a, b) {\n    for (var c, d = 0; null != (c = a[d]); d++) {\n      m._data(c, \"globalEval\", !b || m._data(b[d], \"globalEval\"));\n    }\n  }\n\n  function Ab(a, b) {\n    if (1 === b.nodeType && m.hasData(a)) {\n      var c,\n          d,\n          e,\n          f = m._data(a),\n          g = m._data(b, f),\n          h = f.events;\n\n      if (h) {\n        delete g.handle, g.events = {};\n\n        for (c in h) {\n          for (d = 0, e = h[c].length; e > d; d++) {\n            m.event.add(b, c, h[c][d]);\n          }\n        }\n      }\n\n      g.data && (g.data = m.extend({}, g.data));\n    }\n  }\n\n  function Bb(a, b) {\n    var c, d, e;\n\n    if (1 === b.nodeType) {\n      if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {\n        e = m._data(b);\n\n        for (d in e.events) {\n          m.removeEvent(b, d, e.handle);\n        }\n\n        b.removeAttribute(m.expando);\n      }\n\n      \"script\" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : \"object\" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : \"input\" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : \"option\" === c ? b.defaultSelected = b.selected = a.defaultSelected : (\"input\" === c || \"textarea\" === c) && (b.defaultValue = a.defaultValue);\n    }\n  }\n\n  m.extend({\n    clone: function clone(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i = m.contains(a.ownerDocument, a);\n      if (k.html5Clone || m.isXMLDoc(a) || !gb.test(\"<\" + a.nodeName + \">\") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) {\n        d[g] && Bb(e, d[g]);\n      }\n      if (b) if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) {\n        Ab(e, d[g]);\n      } else Ab(a, f);\n      return d = ub(f, \"script\"), d.length > 0 && zb(d, !i && ub(a, \"script\")), d = h = e = null, f;\n    },\n    buildFragment: function buildFragment(a, b, c, d) {\n      for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++) {\n        if (f = a[q], f || 0 === f) if (\"object\" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);else if (lb.test(f)) {\n          h = h || o.appendChild(b.createElement(\"div\")), i = (jb.exec(f) || [\"\", \"\"])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, \"<$1></$2>\") + l[2], e = l[0];\n\n          while (e--) {\n            h = h.lastChild;\n          }\n\n          if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {\n            f = \"table\" !== i || kb.test(f) ? \"<table>\" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;\n\n            while (e--) {\n              m.nodeName(j = f.childNodes[e], \"tbody\") && !j.childNodes.length && f.removeChild(j);\n            }\n          }\n\n          m.merge(p, h.childNodes), h.textContent = \"\";\n\n          while (h.firstChild) {\n            h.removeChild(h.firstChild);\n          }\n\n          h = o.lastChild;\n        } else p.push(b.createTextNode(f));\n      }\n\n      h && o.removeChild(h), k.appendChecked || m.grep(ub(p, \"input\"), vb), q = 0;\n\n      while (f = p[q++]) {\n        if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), \"script\"), g && zb(h), c)) {\n          e = 0;\n\n          while (f = h[e++]) {\n            ob.test(f.type || \"\") && c.push(f);\n          }\n        }\n      }\n\n      return h = null, o;\n    },\n    cleanData: function cleanData(a, b) {\n      for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) {\n        if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {\n          if (g.events) for (e in g.events) {\n            n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);\n          }\n          j[f] && (delete j[f], l ? delete d[i] : _typeof(d.removeAttribute) !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));\n        }\n      }\n    }\n  }), m.fn.extend({\n    text: function text(a) {\n      return V(this, function (a) {\n        return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));\n      }, null, a, arguments.length);\n    },\n    append: function append() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = wb(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = wb(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function after() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    remove: function remove(a, b) {\n      for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {\n        b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, \"script\")), c.parentNode.removeChild(c));\n      }\n\n      return this;\n    },\n    empty: function empty() {\n      for (var a, b = 0; null != (a = this[b]); b++) {\n        1 === a.nodeType && m.cleanData(ub(a, !1));\n\n        while (a.firstChild) {\n          a.removeChild(a.firstChild);\n        }\n\n        a.options && m.nodeName(a, \"select\") && (a.options.length = 0);\n      }\n\n      return this;\n    },\n    clone: function clone(a, b) {\n      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {\n        return m.clone(this, a, b);\n      });\n    },\n    html: function html(a) {\n      return V(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, \"\") : void 0;\n\n        if (!(\"string\" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || [\"\", \"\"])[1].toLowerCase()])) {\n          a = a.replace(ib, \"<$1></$2>\");\n\n          try {\n            for (; d > c; c++) {\n              b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);\n            }\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var a = arguments[0];\n      return this.domManip(arguments, function (b) {\n        a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);\n      }), a && (a.length || a.nodeType) ? this : this.remove();\n    },\n    detach: function detach(a) {\n      return this.remove(a, !0);\n    },\n    domManip: function domManip(a, b) {\n      a = e.apply([], a);\n      var c,\n          d,\n          f,\n          g,\n          h,\n          i,\n          j = 0,\n          l = this.length,\n          n = this,\n          o = l - 1,\n          p = a[0],\n          q = m.isFunction(p);\n      if (q || l > 1 && \"string\" == typeof p && !k.checkClone && nb.test(p)) return this.each(function (c) {\n        var d = n.eq(c);\n        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);\n      });\n\n      if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {\n        for (g = m.map(ub(i, \"script\"), xb), f = g.length; l > j; j++) {\n          d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, \"script\"))), b.call(this[j], d, j);\n        }\n\n        if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) {\n          d = g[j], ob.test(d.type || \"\") && !m._data(d, \"globalEval\") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || \"\").replace(qb, \"\")));\n        }\n        i = c = null;\n      }\n\n      return this;\n    }\n  }), m.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    m.fn[a] = function (a) {\n      for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) {\n        c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());\n      }\n\n      return this.pushStack(e);\n    };\n  });\n  var Cb,\n      Db = {};\n\n  function Eb(b, c) {\n    var d,\n        e = m(c.createElement(b)).appendTo(c.body),\n        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], \"display\");\n    return e.detach(), f;\n  }\n\n  function Fb(a) {\n    var b = y,\n        c = Db[a];\n    return c || (c = Eb(a, b), \"none\" !== c && c || (Cb = (Cb || m(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c;\n  }\n\n  !function () {\n    var a;\n\n    k.shrinkWrapBlocks = function () {\n      if (null != a) return a;\n      a = !1;\n      var b, c, d;\n      return c = y.getElementsByTagName(\"body\")[0], c && c.style ? (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\", b.appendChild(y.createElement(\"div\")).style.width = \"5px\", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;\n    };\n  }();\n  var Gb = /^margin/,\n      Hb = new RegExp(\"^(\" + S + \")(?!px)[a-z%]+$\", \"i\"),\n      Ib,\n      Jb,\n      Kb = /^(top|right|bottom|left)$/;\n  a.getComputedStyle ? (Ib = function Ib(a) {\n    return a.ownerDocument.defaultView.getComputedStyle(a, null);\n  }, Jb = function Jb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && (\"\" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + \"\";\n  }) : y.documentElement.currentStyle && (Ib = function Ib(a) {\n    return a.currentStyle;\n  }, Jb = function Jb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = \"fontSize\" === b ? \"1em\" : g, g = h.pixelLeft + \"px\", h.left = d, f && (e.left = f)), void 0 === g ? g : g + \"\" || \"auto\";\n  });\n\n  function Lb(a, b) {\n    return {\n      get: function get() {\n        var c = a();\n        if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  !function () {\n    var b, c, d, e, f, g, h;\n\n    if (b = y.createElement(\"div\"), b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", d = b.getElementsByTagName(\"a\")[0], c = d && d.style) {\n      var _i = function _i() {\n        var b, c, d, i;\n        c = y.getElementsByTagName(\"body\")[0], c && c.style && (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), b.style.cssText = \"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\", e = f = !1, h = !0, a.getComputedStyle && (e = \"1%\" !== (a.getComputedStyle(b, null) || {}).top, f = \"4px\" === (a.getComputedStyle(b, null) || {\n          width: \"4px\"\n        }).width, i = b.appendChild(y.createElement(\"div\")), i.style.cssText = b.style.cssText = \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\", i.style.marginRight = i.style.width = \"0\", b.style.width = \"1px\", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight)), b.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\", i = b.getElementsByTagName(\"td\"), i[0].style.cssText = \"margin:0;border:0;padding:0;display:none\", g = 0 === i[0].offsetHeight, g && (i[0].style.display = \"\", i[1].style.display = \"none\", g = 0 === i[0].offsetHeight), c.removeChild(d));\n      };\n\n      c.cssText = \"float:left;opacity:.5\", k.opacity = \"0.5\" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = \"content-box\", b.cloneNode(!0).style.backgroundClip = \"\", k.clearCloneStyle = \"content-box\" === b.style.backgroundClip, k.boxSizing = \"\" === c.boxSizing || \"\" === c.MozBoxSizing || \"\" === c.WebkitBoxSizing, m.extend(k, {\n        reliableHiddenOffsets: function reliableHiddenOffsets() {\n          return null == g && _i(), g;\n        },\n        boxSizingReliable: function boxSizingReliable() {\n          return null == f && _i(), f;\n        },\n        pixelPosition: function pixelPosition() {\n          return null == e && _i(), e;\n        },\n        reliableMarginRight: function reliableMarginRight() {\n          return null == h && _i(), h;\n        }\n      });\n    }\n  }(), m.swap = function (a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) {\n      g[f] = a.style[f], a.style[f] = b[f];\n    }\n\n    e = c.apply(a, d || []);\n\n    for (f in b) {\n      a.style[f] = g[f];\n    }\n\n    return e;\n  };\n  var Mb = /alpha\\([^)]*\\)/i,\n      Nb = /opacity\\s*=\\s*([^)]*)/,\n      Ob = /^(none|table(?!-c[ea]).+)/,\n      Pb = new RegExp(\"^(\" + S + \")(.*)$\", \"i\"),\n      Qb = new RegExp(\"^([+-])=(\" + S + \")\", \"i\"),\n      Rb = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Sb = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Tb = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n  function Ub(a, b) {\n    if (b in a) return b;\n    var c = b.charAt(0).toUpperCase() + b.slice(1),\n        d = b,\n        e = Tb.length;\n\n    while (e--) {\n      if (b = Tb[e] + c, b in a) return b;\n    }\n\n    return d;\n  }\n\n  function Vb(a, b) {\n    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {\n      d = a[g], d.style && (f[g] = m._data(d, \"olddisplay\"), c = d.style.display, b ? (f[g] || \"none\" !== c || (d.style.display = \"\"), \"\" === d.style.display && U(d) && (f[g] = m._data(d, \"olddisplay\", Fb(d.nodeName)))) : (e = U(d), (c && \"none\" !== c || !e) && m._data(d, \"olddisplay\", e ? c : m.css(d, \"display\"))));\n    }\n\n    for (g = 0; h > g; g++) {\n      d = a[g], d.style && (b && \"none\" !== d.style.display && \"\" !== d.style.display || (d.style.display = b ? f[g] || \"\" : \"none\"));\n    }\n\n    return a;\n  }\n\n  function Wb(a, b, c) {\n    var d = Pb.exec(b);\n    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || \"px\") : b;\n  }\n\n  function Xb(a, b, c, d, e) {\n    for (var f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0, g = 0; 4 > f; f += 2) {\n      \"margin\" === c && (g += m.css(a, c + T[f], !0, e)), d ? (\"content\" === c && (g -= m.css(a, \"padding\" + T[f], !0, e)), \"margin\" !== c && (g -= m.css(a, \"border\" + T[f] + \"Width\", !0, e))) : (g += m.css(a, \"padding\" + T[f], !0, e), \"padding\" !== c && (g += m.css(a, \"border\" + T[f] + \"Width\", !0, e)));\n    }\n\n    return g;\n  }\n\n  function Yb(a, b, c) {\n    var d = !0,\n        e = \"width\" === b ? a.offsetWidth : a.offsetHeight,\n        f = Ib(a),\n        g = k.boxSizing && \"border-box\" === m.css(a, \"boxSizing\", !1, f);\n\n    if (0 >= e || null == e) {\n      if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;\n      d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;\n    }\n\n    return e + Xb(a, b, c || (g ? \"border\" : \"content\"), d, f) + \"px\";\n  }\n\n  m.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(a, b) {\n          if (b) {\n            var c = Jb(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": k.cssFloat ? \"cssFloat\" : \"styleFloat\"\n    },\n    style: function style(a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = m.camelCase(b),\n            i = a.style;\n        if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];\n        if (f = _typeof(c), \"string\" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = \"number\"), null != c && c === c && (\"number\" !== f || m.cssNumber[h] || (c += \"px\"), k.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (i[b] = \"inherit\"), !(g && \"set\" in g && void 0 === (c = g.set(a, c, d))))) try {\n          i[b] = c;\n        } catch (j) {}\n      }\n    },\n    css: function css(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = m.camelCase(b);\n      return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && \"get\" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), \"normal\" === f && b in Sb && (f = Sb[b]), \"\" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;\n    }\n  }), m.each([\"height\", \"width\"], function (a, b) {\n    m.cssHooks[b] = {\n      get: function get(a, c, d) {\n        return c ? Ob.test(m.css(a, \"display\")) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {\n          return Yb(a, b, d);\n        }) : Yb(a, b, d) : void 0;\n      },\n      set: function set(a, c, d) {\n        var e = d && Ib(a);\n        return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && \"border-box\" === m.css(a, \"boxSizing\", !1, e), e) : 0);\n      }\n    };\n  }), k.opacity || (m.cssHooks.opacity = {\n    get: function get(a, b) {\n      return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || \"\") ? .01 * parseFloat(RegExp.$1) + \"\" : b ? \"1\" : \"\";\n    },\n    set: function set(a, b) {\n      var c = a.style,\n          d = a.currentStyle,\n          e = m.isNumeric(b) ? \"alpha(opacity=\" + 100 * b + \")\" : \"\",\n          f = d && d.filter || c.filter || \"\";\n      c.zoom = 1, (b >= 1 || \"\" === b) && \"\" === m.trim(f.replace(Mb, \"\")) && c.removeAttribute && (c.removeAttribute(\"filter\"), \"\" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + \" \" + e);\n    }\n  }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {\n    return b ? m.swap(a, {\n      display: \"inline-block\"\n    }, Jb, [a, \"marginRight\"]) : void 0;\n  }), m.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    m.cssHooks[a + b] = {\n      expand: function expand(c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; 4 > d; d++) {\n          e[a + T[d] + b] = f[d] || f[d - 2] || f[0];\n        }\n\n        return e;\n      }\n    }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);\n  }), m.fn.extend({\n    css: function css(a, b) {\n      return V(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (m.isArray(b)) {\n          for (d = Ib(a), e = b.length; e > g; g++) {\n            f[b[g]] = m.css(a, b[g], !1, d);\n          }\n\n          return f;\n        }\n\n        return void 0 !== c ? m.style(a, b, c) : m.css(a, b);\n      }, a, b, arguments.length > 1);\n    },\n    show: function show() {\n      return Vb(this, !0);\n    },\n    hide: function hide() {\n      return Vb(this);\n    },\n    toggle: function toggle(a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        U(this) ? m(this).show() : m(this).hide();\n      });\n    }\n  });\n\n  function Zb(a, b, c, d, e) {\n    return new Zb.prototype.init(a, b, c, d, e);\n  }\n\n  m.Tween = Zb, Zb.prototype = {\n    constructor: Zb,\n    init: function init(a, b, c, d, e, f) {\n      this.elem = a, this.prop = c, this.easing = e || \"swing\", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var a = Zb.propHooks[this.prop];\n      return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);\n    },\n    run: function run(a) {\n      var b,\n          c = Zb.propHooks[this.prop];\n      return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;\n    }\n  }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {\n    _default: {\n      get: function get(a) {\n        var b;\n        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, \"\"), b && \"auto\" !== b ? b : 0) : a.elem[a.prop];\n      },\n      set: function set(a) {\n        m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;\n      }\n    }\n  }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {\n    set: function set(a) {\n      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);\n    }\n  }, m.easing = {\n    linear: function linear(a) {\n      return a;\n    },\n    swing: function swing(a) {\n      return .5 - Math.cos(a * Math.PI) / 2;\n    }\n  }, m.fx = Zb.prototype.init, m.fx.step = {};\n\n  var $b,\n      _b,\n      ac = /^(?:toggle|show|hide)$/,\n      bc = new RegExp(\"^(?:([+-])=|)(\" + S + \")([a-z%]*)$\", \"i\"),\n      cc = /queueHooks$/,\n      dc = [ic],\n      ec = {\n    \"*\": [function (a, b) {\n      var c = this.createTween(a, b),\n          d = c.cur(),\n          e = bc.exec(b),\n          f = e && e[3] || (m.cssNumber[a] ? \"\" : \"px\"),\n          g = (m.cssNumber[a] || \"px\" !== f && +d) && bc.exec(m.css(c.elem, a)),\n          h = 1,\n          i = 20;\n\n      if (g && g[3] !== f) {\n        f = f || g[3], e = e || [], g = +d || 1;\n\n        do {\n          h = h || \".5\", g /= h, m.style(c.elem, a, g + f);\n        } while (h !== (h = c.cur() / d) && 1 !== h && --i);\n      }\n\n      return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;\n    }]\n  };\n\n  function fc() {\n    return setTimeout(function () {\n      $b = void 0;\n    }), $b = m.now();\n  }\n\n  function gc(a, b) {\n    var c,\n        d = {\n      height: a\n    },\n        e = 0;\n\n    for (b = b ? 1 : 0; 4 > e; e += 2 - b) {\n      c = T[e], d[\"margin\" + c] = d[\"padding\" + c] = a;\n    }\n\n    return b && (d.opacity = d.width = a), d;\n  }\n\n  function hc(a, b, c) {\n    for (var d, e = (ec[b] || []).concat(ec[\"*\"]), f = 0, g = e.length; g > f; f++) {\n      if (d = e[f].call(c, b, a)) return d;\n    }\n  }\n\n  function ic(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        l,\n        n = this,\n        o = {},\n        p = a.style,\n        q = a.nodeType && U(a),\n        r = m._data(a, \"fxshow\");\n\n    c.queue || (h = m._queueHooks(a, \"fx\"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {\n      h.unqueued || i();\n    }), h.unqueued++, n.always(function () {\n      n.always(function () {\n        h.unqueued--, m.queue(a, \"fx\").length || h.empty.fire();\n      });\n    })), 1 === a.nodeType && (\"height\" in b || \"width\" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, \"display\"), l = \"none\" === j ? m._data(a, \"olddisplay\") || Fb(a.nodeName) : j, \"inline\" === l && \"none\" === m.css(a, \"float\") && (k.inlineBlockNeedsLayout && \"inline\" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = \"inline-block\")), c.overflow && (p.overflow = \"hidden\", k.shrinkWrapBlocks() || n.always(function () {\n      p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];\n    }));\n\n    for (d in b) {\n      if (e = b[d], ac.exec(e)) {\n        if (delete b[d], f = f || \"toggle\" === e, e === (q ? \"hide\" : \"show\")) {\n          if (\"show\" !== e || !r || void 0 === r[d]) continue;\n          q = !0;\n        }\n\n        o[d] = r && r[d] || m.style(a, d);\n      } else j = void 0;\n    }\n\n    if (m.isEmptyObject(o)) \"inline\" === (\"none\" === j ? Fb(a.nodeName) : j) && (p.display = j);else {\n      r ? \"hidden\" in r && (q = r.hidden) : r = m._data(a, \"fxshow\", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {\n        m(a).hide();\n      }), n.done(function () {\n        var b;\n\n        m._removeData(a, \"fxshow\");\n\n        for (b in o) {\n          m.style(a, b, o[b]);\n        }\n      });\n\n      for (d in o) {\n        g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = \"width\" === d || \"height\" === d ? 1 : 0));\n      }\n    }\n  }\n\n  function jc(a, b) {\n    var c, d, e, f, g;\n\n    for (c in a) {\n      if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && \"expand\" in g) {\n        f = g.expand(f), delete a[d];\n\n        for (c in f) {\n          c in a || (a[c] = f[c], b[c] = e);\n        }\n      } else b[d] = e;\n    }\n  }\n\n  function kc(a, b, c) {\n    var d,\n        e,\n        f = 0,\n        g = dc.length,\n        h = m.Deferred().always(function () {\n      delete i.elem;\n    }),\n        i = function i() {\n      if (e) return !1;\n\n      for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {\n        j.tweens[g].run(f);\n      }\n\n      return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);\n    },\n        j = h.promise({\n      elem: a,\n      props: m.extend({}, b),\n      opts: m.extend(!0, {\n        specialEasing: {}\n      }, c),\n      originalProperties: b,\n      originalOptions: c,\n      startTime: $b || fc(),\n      duration: c.duration,\n      tweens: [],\n      createTween: function createTween(b, c) {\n        var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);\n        return j.tweens.push(d), d;\n      },\n      stop: function stop(b) {\n        var c = 0,\n            d = b ? j.tweens.length : 0;\n        if (e) return this;\n\n        for (e = !0; d > c; c++) {\n          j.tweens[c].run(1);\n        }\n\n        return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;\n      }\n    }),\n        k = j.props;\n\n    for (jc(k, j.opts.specialEasing); g > f; f++) {\n      if (d = dc[f].call(j, a, k, j.opts)) return d;\n    }\n\n    return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {\n      elem: a,\n      anim: j,\n      queue: j.opts.queue\n    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);\n  }\n\n  m.Animation = m.extend(kc, {\n    tweener: function tweener(a, b) {\n      m.isFunction(a) ? (b = a, a = [\"*\"]) : a = a.split(\" \");\n\n      for (var c, d = 0, e = a.length; e > d; d++) {\n        c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);\n      }\n    },\n    prefilter: function prefilter(a, b) {\n      b ? dc.unshift(a) : dc.push(a);\n    }\n  }), m.speed = function (a, b, c) {\n    var d = a && \"object\" == _typeof(a) ? m.extend({}, a) : {\n      complete: c || !c && b || m.isFunction(a) && a,\n      duration: a,\n      easing: c && b || b && !m.isFunction(b) && b\n    };\n    return d.duration = m.fx.off ? 0 : \"number\" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = \"fx\"), d.old = d.complete, d.complete = function () {\n      m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);\n    }, d;\n  }, m.fn.extend({\n    fadeTo: function fadeTo(a, b, c, d) {\n      return this.filter(U).css(\"opacity\", 0).show().end().animate({\n        opacity: b\n      }, a, c, d);\n    },\n    animate: function animate(a, b, c, d) {\n      var e = m.isEmptyObject(a),\n          f = m.speed(b, c, d),\n          g = function g() {\n        var b = kc(this, m.extend({}, a), f);\n        (e || m._data(this, \"finish\")) && b.stop(!0);\n      };\n\n      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);\n    },\n    stop: function stop(a, b, c) {\n      var d = function d(a) {\n        var b = a.stop;\n        delete a.stop, b(c);\n      };\n\n      return \"string\" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || \"fx\", []), this.each(function () {\n        var b = !0,\n            e = null != a && a + \"queueHooks\",\n            f = m.timers,\n            g = m._data(this);\n\n        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {\n          g[e] && g[e].stop && cc.test(e) && d(g[e]);\n        }\n\n        for (e = f.length; e--;) {\n          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));\n        }\n\n        (b || !c) && m.dequeue(this, a);\n      });\n    },\n    finish: function finish(a) {\n      return a !== !1 && (a = a || \"fx\"), this.each(function () {\n        var b,\n            c = m._data(this),\n            d = c[a + \"queue\"],\n            e = c[a + \"queueHooks\"],\n            f = m.timers,\n            g = d ? d.length : 0;\n\n        for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {\n          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));\n        }\n\n        for (b = 0; g > b; b++) {\n          d[b] && d[b].finish && d[b].finish.call(this);\n        }\n\n        delete c.finish;\n      });\n    }\n  }), m.each([\"toggle\", \"show\", \"hide\"], function (a, b) {\n    var c = m.fn[b];\n\n    m.fn[b] = function (a, d, e) {\n      return null == a || \"boolean\" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);\n    };\n  }), m.each({\n    slideDown: gc(\"show\"),\n    slideUp: gc(\"hide\"),\n    slideToggle: gc(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (a, b) {\n    m.fn[a] = function (a, c, d) {\n      return this.animate(b, a, c, d);\n    };\n  }), m.timers = [], m.fx.tick = function () {\n    var a,\n        b = m.timers,\n        c = 0;\n\n    for ($b = m.now(); c < b.length; c++) {\n      a = b[c], a() || b[c] !== a || b.splice(c--, 1);\n    }\n\n    b.length || m.fx.stop(), $b = void 0;\n  }, m.fx.timer = function (a) {\n    m.timers.push(a), a() ? m.fx.start() : m.timers.pop();\n  }, m.fx.interval = 13, m.fx.start = function () {\n    _b || (_b = setInterval(m.fx.tick, m.fx.interval));\n  }, m.fx.stop = function () {\n    clearInterval(_b), _b = null;\n  }, m.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, m.fn.delay = function (a, b) {\n    return a = m.fx ? m.fx.speeds[a] || a : a, b = b || \"fx\", this.queue(b, function (b, c) {\n      var d = setTimeout(b, a);\n\n      c.stop = function () {\n        clearTimeout(d);\n      };\n    });\n  }, function () {\n    var a, b, c, d, e;\n    b = y.createElement(\"div\"), b.setAttribute(\"className\", \"t\"), b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", d = b.getElementsByTagName(\"a\")[0], c = y.createElement(\"select\"), e = c.appendChild(y.createElement(\"option\")), a = b.getElementsByTagName(\"input\")[0], d.style.cssText = \"top:1px\", k.getSetAttribute = \"t\" !== b.className, k.style = /top/.test(d.getAttribute(\"style\")), k.hrefNormalized = \"/a\" === d.getAttribute(\"href\"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement(\"form\").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement(\"input\"), a.setAttribute(\"value\", \"\"), k.input = \"\" === a.getAttribute(\"value\"), a.value = \"t\", a.setAttribute(\"type\", \"radio\"), k.radioValue = \"t\" === a.value;\n  }();\n  var lc = /\\r/g;\n  m.fn.extend({\n    val: function val(a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = m.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : m.isArray(e) && (e = m.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(lc, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), m.extend({\n    valHooks: {\n      option: {\n        get: function get(a) {\n          var b = m.find.attr(a, \"value\");\n          return null != b ? b : m.trim(m.text(a));\n        }\n      },\n      select: {\n        get: function get(a) {\n          for (var b, c, d = a.options, e = a.selectedIndex, f = \"select-one\" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {\n            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute(\"disabled\")) || c.parentNode.disabled && m.nodeName(c.parentNode, \"optgroup\"))) {\n              if (b = m(c).val(), f) return b;\n              g.push(b);\n            }\n          }\n\n          return g;\n        },\n        set: function set(a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = m.makeArray(b),\n              g = e.length;\n\n          while (g--) {\n            if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {\n              d.selected = c = !0;\n            } catch (h) {\n              d.scrollHeight;\n            } else d.selected = !1;\n          }\n\n          return c || (a.selectedIndex = -1), e;\n        }\n      }\n    }\n  }), m.each([\"radio\", \"checkbox\"], function () {\n    m.valHooks[this] = {\n      set: function set(a, b) {\n        return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;\n      }\n    }, k.checkOn || (m.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  });\n  var mc,\n      nc,\n      oc = m.expr.attrHandle,\n      pc = /^(?:checked|selected)$/i,\n      qc = k.getSetAttribute,\n      rc = k.input;\n  m.fn.extend({\n    attr: function attr(a, b) {\n      return V(this, m.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(a) {\n      return this.each(function () {\n        m.removeAttr(this, a);\n      });\n    }\n  }), m.extend({\n    attr: function attr(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && \"get\" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && \"set\" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + \"\"), c) : void m.removeAttr(a, b));\n    },\n    removeAttr: function removeAttr(a, b) {\n      var c,\n          d,\n          e = 0,\n          f = b && b.match(E);\n      if (f && 1 === a.nodeType) while (c = f[e++]) {\n        d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase(\"default-\" + c)] = a[d] = !1 : m.attr(a, c, \"\"), a.removeAttribute(qc ? c : d);\n      }\n    },\n    attrHooks: {\n      type: {\n        set: function set(a, b) {\n          if (!k.radioValue && \"radio\" === b && m.nodeName(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    }\n  }), nc = {\n    set: function set(a, b, c) {\n      return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase(\"default-\" + c)] = a[c] = !0, c;\n    }\n  }, m.each(m.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = oc[b] || m.find.attr;\n    oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {\n      var e, f;\n      return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e;\n    } : function (a, b, c) {\n      return c ? void 0 : a[m.camelCase(\"default-\" + b)] ? b.toLowerCase() : null;\n    };\n  }), rc && qc || (m.attrHooks.value = {\n    set: function set(a, b, c) {\n      return m.nodeName(a, \"input\") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);\n    }\n  }), qc || (mc = {\n    set: function set(a, b, c) {\n      var d = a.getAttributeNode(c);\n      return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += \"\", \"value\" === c || b === a.getAttribute(c) ? b : void 0;\n    }\n  }, oc.id = oc.name = oc.coords = function (a, b, c) {\n    var d;\n    return c ? void 0 : (d = a.getAttributeNode(b)) && \"\" !== d.value ? d.value : null;\n  }, m.valHooks.button = {\n    get: function get(a, b) {\n      var c = a.getAttributeNode(b);\n      return c && c.specified ? c.value : void 0;\n    },\n    set: mc.set\n  }, m.attrHooks.contenteditable = {\n    set: function set(a, b, c) {\n      mc.set(a, \"\" === b ? !1 : b, c);\n    }\n  }, m.each([\"width\", \"height\"], function (a, b) {\n    m.attrHooks[b] = {\n      set: function set(a, c) {\n        return \"\" === c ? (a.setAttribute(b, \"auto\"), c) : void 0;\n      }\n    };\n  })), k.style || (m.attrHooks.style = {\n    get: function get(a) {\n      return a.style.cssText || void 0;\n    },\n    set: function set(a, b) {\n      return a.style.cssText = b + \"\";\n    }\n  });\n  var sc = /^(?:input|select|textarea|button|object)$/i,\n      tc = /^(?:a|area)$/i;\n  m.fn.extend({\n    prop: function prop(a, b) {\n      return V(this, m.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function removeProp(a) {\n      return a = m.propFix[a] || a, this.each(function () {\n        try {\n          this[a] = void 0, delete this[a];\n        } catch (b) {}\n      });\n    }\n  }), m.extend({\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    },\n    prop: function prop(a, b, c) {\n      var d,\n          e,\n          f,\n          g = a.nodeType;\n      if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(a) {\n          var b = m.find.attr(a, \"tabindex\");\n          return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;\n        }\n      }\n    }\n  }), k.hrefNormalized || m.each([\"href\", \"src\"], function (a, b) {\n    m.propHooks[b] = {\n      get: function get(a) {\n        return a.getAttribute(b, 4);\n      }\n    };\n  }), k.optSelected || (m.propHooks.selected = {\n    get: function get(a) {\n      var b = a.parentNode;\n      return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;\n    }\n  }), m.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    m.propFix[this.toLowerCase()] = this;\n  }), k.enctype || (m.propFix.enctype = \"encoding\");\n  var uc = /[\\t\\r\\n\\f]/g;\n  m.fn.extend({\n    addClass: function addClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = 0,\n          i = this.length,\n          j = \"string\" == typeof a && a;\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).addClass(a.call(this, b, this.className));\n      });\n      if (j) for (b = (a || \"\").match(E) || []; i > h; h++) {\n        if (c = this[h], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(uc, \" \") : \" \")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            d.indexOf(\" \" + e + \" \") < 0 && (d += e + \" \");\n          }\n\n          g = m.trim(d), c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = 0,\n          i = this.length,\n          j = 0 === arguments.length || \"string\" == typeof a && a;\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).removeClass(a.call(this, b, this.className));\n      });\n      if (j) for (b = (a || \"\").match(E) || []; i > h; h++) {\n        if (c = this[h], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(uc, \" \") : \"\")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            while (d.indexOf(\" \" + e + \" \") >= 0) {\n              d = d.replace(\" \" + e + \" \", \" \");\n            }\n          }\n\n          g = a ? m.trim(d) : \"\", c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(a, b) {\n      var c = _typeof(a);\n\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {\n        m(this).toggleClass(a.call(this, c, this.className, b), b);\n      } : function () {\n        if (\"string\" === c) {\n          var b,\n              d = 0,\n              e = m(this),\n              f = a.match(E) || [];\n\n          while (b = f[d++]) {\n            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n          }\n        } else (c === K || \"boolean\" === c) && (this.className && m._data(this, \"__className__\", this.className), this.className = this.className || a === !1 ? \"\" : m._data(this, \"__className__\") || \"\");\n      });\n    },\n    hasClass: function hasClass(a) {\n      for (var b = \" \" + a + \" \", c = 0, d = this.length; d > c; c++) {\n        if (1 === this[c].nodeType && (\" \" + this[c].className + \" \").replace(uc, \" \").indexOf(b) >= 0) return !0;\n      }\n\n      return !1;\n    }\n  }), m.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"), function (a, b) {\n    m.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), m.fn.extend({\n    hover: function hover(a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    },\n    bind: function bind(a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function unbind(a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function delegate(a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function undelegate(a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  });\n  var vc = m.now(),\n      wc = /\\?/,\n      xc = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n  m.parseJSON = function (b) {\n    if (a.JSON && a.JSON.parse) return a.JSON.parse(b + \"\");\n    var c,\n        d = null,\n        e = m.trim(b + \"\");\n    return e && !m.trim(e.replace(xc, function (a, b, e, f) {\n      return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, \"\");\n    })) ? Function(\"return \" + e)() : m.error(\"Invalid JSON: \" + b);\n  }, m.parseXML = function (b) {\n    var c, d;\n    if (!b || \"string\" != typeof b) return null;\n\n    try {\n      a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, \"text/xml\")) : (c = new ActiveXObject(\"Microsoft.XMLDOM\"), c.async = \"false\", c.loadXML(b));\n    } catch (e) {\n      c = void 0;\n    }\n\n    return c && c.documentElement && !c.getElementsByTagName(\"parsererror\").length || m.error(\"Invalid XML: \" + b), c;\n  };\n  var yc,\n      zc,\n      Ac = /#.*$/,\n      Bc = /([?&])_=[^&]*/,\n      Cc = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,\n      Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      Ec = /^(?:GET|HEAD)$/,\n      Fc = /^\\/\\//,\n      Gc = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n      Hc = {},\n      Ic = {},\n      Jc = \"*/\".concat(\"*\");\n\n  try {\n    zc = location.href;\n  } catch (Kc) {\n    zc = y.createElement(\"a\"), zc.href = \"\", zc = zc.href;\n  }\n\n  yc = Gc.exec(zc.toLowerCase()) || [];\n\n  function Lc(a) {\n    return function (b, c) {\n      \"string\" != typeof b && (c = b, b = \"*\");\n      var d,\n          e = 0,\n          f = b.toLowerCase().match(E) || [];\n      if (m.isFunction(c)) while (d = f[e++]) {\n        \"+\" === d.charAt(0) ? (d = d.slice(1) || \"*\", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);\n      }\n    };\n  }\n\n  function Mc(a, b, c, d) {\n    var e = {},\n        f = a === Ic;\n\n    function g(h) {\n      var i;\n      return e[h] = !0, m.each(a[h] || [], function (a, h) {\n        var j = h(b, c, d);\n        return \"string\" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);\n      }), i;\n    }\n\n    return g(b.dataTypes[0]) || !e[\"*\"] && g(\"*\");\n  }\n\n  function Nc(a, b) {\n    var c,\n        d,\n        e = m.ajaxSettings.flatOptions || {};\n\n    for (d in b) {\n      void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);\n    }\n\n    return c && m.extend(!0, a, c), a;\n  }\n\n  function Oc(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.contents,\n        i = a.dataTypes;\n\n    while (\"*\" === i[0]) {\n      i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader(\"Content-Type\"));\n    }\n\n    if (e) for (g in h) {\n      if (h[g] && h[g].test(e)) {\n        i.unshift(g);\n        break;\n      }\n    }\n    if (i[0] in c) f = i[0];else {\n      for (g in c) {\n        if (!i[0] || a.converters[g + \" \" + i[0]]) {\n          f = g;\n          break;\n        }\n\n        d || (d = g);\n      }\n\n      f = f || d;\n    }\n    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;\n  }\n\n  function Pc(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = {},\n        k = a.dataTypes.slice();\n    if (k[1]) for (g in a.converters) {\n      j[g.toLowerCase()] = a.converters[g];\n    }\n    f = k.shift();\n\n    while (f) {\n      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if (\"*\" === f) f = i;else if (\"*\" !== i && i !== f) {\n        if (g = j[i + \" \" + f] || j[\"* \" + f], !g) for (e in j) {\n          if (h = e.split(\" \"), h[1] === f && (g = j[i + \" \" + h[0]] || j[\"* \" + h[0]])) {\n            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));\n            break;\n          }\n        }\n        if (g !== !0) if (g && a[\"throws\"]) b = g(b);else try {\n          b = g(b);\n        } catch (l) {\n          return {\n            state: \"parsererror\",\n            error: g ? l : \"No conversion from \" + i + \" to \" + f\n          };\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: b\n    };\n  }\n\n  m.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: zc,\n      type: \"GET\",\n      isLocal: Dc.test(yc[1]),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Jc,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": m.parseJSON,\n        \"text xml\": m.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(a, b) {\n      return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);\n    },\n    ajaxPrefilter: Lc(Hc),\n    ajaxTransport: Lc(Ic),\n    ajax: function ajax(a, b) {\n      \"object\" == _typeof(a) && (b = a, a = void 0), b = b || {};\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = m.ajaxSetup({}, b),\n          l = k.context || k,\n          n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,\n          o = m.Deferred(),\n          p = m.Callbacks(\"once memory\"),\n          q = k.statusCode || {},\n          r = {},\n          s = {},\n          t = 0,\n          u = \"canceled\",\n          v = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(a) {\n          var b;\n\n          if (2 === t) {\n            if (!j) {\n              j = {};\n\n              while (b = Cc.exec(f)) {\n                j[b[1].toLowerCase()] = b[2];\n              }\n            }\n\n            b = j[a.toLowerCase()];\n          }\n\n          return null == b ? null : b;\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return 2 === t ? f : null;\n        },\n        setRequestHeader: function setRequestHeader(a, b) {\n          var c = a.toLowerCase();\n          return t || (a = s[c] = s[c] || a, r[a] = b), this;\n        },\n        overrideMimeType: function overrideMimeType(a) {\n          return t || (k.mimeType = a), this;\n        },\n        statusCode: function statusCode(a) {\n          var b;\n          if (a) if (2 > t) for (b in a) {\n            q[b] = [q[b], a[b]];\n          } else v.always(a[v.status]);\n          return this;\n        },\n        abort: function abort(a) {\n          var b = a || u;\n          return i && i.abort(b), x(0, b), this;\n        }\n      };\n      if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + \"\").replace(Ac, \"\").replace(Fc, yc[1] + \"//\"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || \"*\").toLowerCase().match(E) || [\"\"], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || (\"http:\" === c[1] ? \"80\" : \"443\")) === (yc[3] || (\"http:\" === yc[1] ? \"80\" : \"443\")))), k.data && k.processData && \"string\" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t) return v;\n      h = k.global, h && 0 === m.active++ && m.event.trigger(\"ajaxStart\"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? \"&\" : \"?\") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, \"$1_=\" + vc++) : e + (wc.test(e) ? \"&\" : \"?\") + \"_=\" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader(\"If-Modified-Since\", m.lastModified[e]), m.etag[e] && v.setRequestHeader(\"If-None-Match\", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader(\"Content-Type\", k.contentType), v.setRequestHeader(\"Accept\", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + (\"*\" !== k.dataTypes[0] ? \", \" + Jc + \"; q=0.01\" : \"\") : k.accepts[\"*\"]);\n\n      for (d in k.headers) {\n        v.setRequestHeader(d, k.headers[d]);\n      }\n\n      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();\n      u = \"abort\";\n\n      for (d in {\n        success: 1,\n        error: 1,\n        complete: 1\n      }) {\n        v[d](k[d]);\n      }\n\n      if (i = Mc(Ic, k, b, v)) {\n        v.readyState = 1, h && n.trigger(\"ajaxSend\", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {\n          v.abort(\"timeout\");\n        }, k.timeout));\n\n        try {\n          t = 1, i.send(r, x);\n        } catch (w) {\n          if (!(2 > t)) throw w;\n          x(-1, w);\n        }\n      } else x(-1, \"No Transport\");\n\n      function x(a, b, c, d) {\n        var j,\n            r,\n            s,\n            u,\n            w,\n            x = b;\n        2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || \"\", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader(\"Last-Modified\"), w && (m.lastModified[e] = w), w = v.getResponseHeader(\"etag\"), w && (m.etag[e] = w)), 204 === a || \"HEAD\" === k.type ? x = \"nocontent\" : 304 === a ? x = \"notmodified\" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = \"error\", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + \"\", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? \"ajaxSuccess\" : \"ajaxError\", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger(\"ajaxComplete\", [v, k]), --m.active || m.event.trigger(\"ajaxStop\")));\n      }\n\n      return v;\n    },\n    getJSON: function getJSON(a, b, c) {\n      return m.get(a, b, c, \"json\");\n    },\n    getScript: function getScript(a, b) {\n      return m.get(a, void 0, b, \"script\");\n    }\n  }), m.each([\"get\", \"post\"], function (a, b) {\n    m[b] = function (a, c, d, e) {\n      return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({\n        url: a,\n        type: b,\n        dataType: e,\n        data: c,\n        success: d\n      });\n    };\n  }), m.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (a, b) {\n    m.fn[b] = function (a) {\n      return this.on(b, a);\n    };\n  }), m._evalUrl = function (a) {\n    return m.ajax({\n      url: a,\n      type: \"GET\",\n      dataType: \"script\",\n      async: !1,\n      global: !1,\n      \"throws\": !0\n    });\n  }, m.fn.extend({\n    wrapAll: function wrapAll(a) {\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).wrapAll(a.call(this, b));\n      });\n\n      if (this[0]) {\n        var b = m(a, this[0].ownerDocument).eq(0).clone(!0);\n        this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n          var a = this;\n\n          while (a.firstChild && 1 === a.firstChild.nodeType) {\n            a = a.firstChild;\n          }\n\n          return a;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(a) {\n      return this.each(m.isFunction(a) ? function (b) {\n        m(this).wrapInner(a.call(this, b));\n      } : function () {\n        var b = m(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function wrap(a) {\n      var b = m.isFunction(a);\n      return this.each(function (c) {\n        m(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function unwrap() {\n      return this.parent().each(function () {\n        m.nodeName(this, \"body\") || m(this).replaceWith(this.childNodes);\n      }).end();\n    }\n  }), m.expr.filters.hidden = function (a) {\n    return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && \"none\" === (a.style && a.style.display || m.css(a, \"display\"));\n  }, m.expr.filters.visible = function (a) {\n    return !m.expr.filters.hidden(a);\n  };\n  var Qc = /%20/g,\n      Rc = /\\[\\]$/,\n      Sc = /\\r?\\n/g,\n      Tc = /^(?:submit|button|image|reset|file)$/i,\n      Uc = /^(?:input|select|textarea|keygen)/i;\n\n  function Vc(a, b, c, d) {\n    var e;\n    if (m.isArray(b)) m.each(b, function (b, e) {\n      c || Rc.test(a) ? d(a, e) : Vc(a + \"[\" + (\"object\" == _typeof(e) ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== m.type(b)) d(a, b);else for (e in b) {\n      Vc(a + \"[\" + e + \"]\", b[e], c, d);\n    }\n  }\n\n  m.param = function (a, b) {\n    var c,\n        d = [],\n        e = function e(a, b) {\n      b = m.isFunction(b) ? b() : null == b ? \"\" : b, d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(b);\n    };\n\n    if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) {\n      Vc(c, a[c], b, e);\n    }\n    return d.join(\"&\").replace(Qc, \"+\");\n  }, m.fn.extend({\n    serialize: function serialize() {\n      return m.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var a = m.prop(this, \"elements\");\n        return a ? m.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !m(this).is(\":disabled\") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));\n      }).map(function (a, b) {\n        var c = m(this).val();\n        return null == c ? null : m.isArray(c) ? m.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(Sc, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(Sc, \"\\r\\n\")\n        };\n      }).get();\n    }\n  }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {\n    return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();\n  } : Zc;\n  var Wc = 0,\n      Xc = {},\n      Yc = m.ajaxSettings.xhr();\n  a.ActiveXObject && m(a).on(\"unload\", function () {\n    for (var a in Xc) {\n      Xc[a](void 0, !0);\n    }\n  }), k.cors = !!Yc && \"withCredentials\" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {\n    if (!a.crossDomain || k.cors) {\n      var _b3;\n\n      return {\n        send: function send(c, d) {\n          var e,\n              f = a.xhr(),\n              g = ++Wc;\n          if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {\n            f[e] = a.xhrFields[e];\n          }\n          a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c[\"X-Requested-With\"] || (c[\"X-Requested-With\"] = \"XMLHttpRequest\");\n\n          for (e in c) {\n            void 0 !== c[e] && f.setRequestHeader(e, c[e] + \"\");\n          }\n\n          f.send(a.hasContent && a.data || null), _b3 = function b(c, e) {\n            var h, i, j;\n            if (_b3 && (e || 4 === f.readyState)) if (delete Xc[g], _b3 = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();else {\n              j = {}, h = f.status, \"string\" == typeof f.responseText && (j.text = f.responseText);\n\n              try {\n                i = f.statusText;\n              } catch (k) {\n                i = \"\";\n              }\n\n              h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;\n            }\n            j && d(h, i, j, f.getAllResponseHeaders());\n          }, a.async ? 4 === f.readyState ? setTimeout(_b3) : f.onreadystatechange = Xc[g] = _b3 : _b3();\n        },\n        abort: function abort() {\n          _b3 && _b3(void 0, !0);\n        }\n      };\n    }\n  });\n\n  function Zc() {\n    try {\n      return new a.XMLHttpRequest();\n    } catch (b) {}\n  }\n\n  function $c() {\n    try {\n      return new a.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (b) {}\n  }\n\n  m.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /(?:java|ecma)script/\n    },\n    converters: {\n      \"text script\": function textScript(a) {\n        return m.globalEval(a), a;\n      }\n    }\n  }), m.ajaxPrefilter(\"script\", function (a) {\n    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = \"GET\", a.global = !1);\n  }), m.ajaxTransport(\"script\", function (a) {\n    if (a.crossDomain) {\n      var b,\n          c = y.head || m(\"head\")[0] || y.documentElement;\n      return {\n        send: function send(d, e) {\n          b = y.createElement(\"script\"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {\n            (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, \"success\"));\n          }, c.insertBefore(b, c.firstChild);\n        },\n        abort: function abort() {\n          b && b.onload(void 0, !0);\n        }\n      };\n    }\n  });\n  var _c = [],\n      ad = /(=)\\?(?=&|$)|\\?\\?/;\n  m.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var a = _c.pop() || m.expando + \"_\" + vc++;\n      return this[a] = !0, a;\n    }\n  }), m.ajaxPrefilter(\"json jsonp\", function (b, c, d) {\n    var e,\n        f,\n        g,\n        h = b.jsonp !== !1 && (ad.test(b.url) ? \"url\" : \"string\" == typeof b.data && !(b.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && ad.test(b.data) && \"data\");\n    return h || \"jsonp\" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, \"$1\" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? \"&\" : \"?\") + b.jsonp + \"=\" + e), b.converters[\"script json\"] = function () {\n      return g || m.error(e + \" was not called\"), g[0];\n    }, b.dataTypes[0] = \"json\", f = a[e], a[e] = function () {\n      g = arguments;\n    }, d.always(function () {\n      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;\n    }), \"script\") : void 0;\n  }), m.parseHTML = function (a, b, c) {\n    if (!a || \"string\" != typeof a) return null;\n    \"boolean\" == typeof b && (c = b, b = !1), b = b || y;\n    var d = u.exec(a),\n        e = !c && [];\n    return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));\n  };\n  var bd = m.fn.load;\n  m.fn.load = function (a, b, c) {\n    if (\"string\" != typeof a && bd) return bd.apply(this, arguments);\n    var d,\n        e,\n        f,\n        g = this,\n        h = a.indexOf(\" \");\n    return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && \"object\" == _typeof(b) && (f = \"POST\"), g.length > 0 && m.ajax({\n      url: a,\n      type: f,\n      dataType: \"html\",\n      data: b\n    }).done(function (a) {\n      e = arguments, g.html(d ? m(\"<div>\").append(m.parseHTML(a)).find(d) : a);\n    }).complete(c && function (a, b) {\n      g.each(c, e || [a.responseText, b, a]);\n    }), this;\n  }, m.expr.filters.animated = function (a) {\n    return m.grep(m.timers, function (b) {\n      return a === b.elem;\n    }).length;\n  };\n  var cd = a.document.documentElement;\n\n  function dd(a) {\n    return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;\n  }\n\n  m.offset = {\n    setOffset: function setOffset(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = m.css(a, \"position\"),\n          l = m(a),\n          n = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = m.css(a, \"top\"), i = m.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && m.inArray(\"auto\", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, n) : l.css(n);\n    }\n  }, m.fn.extend({\n    offset: function offset(a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        m.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d = {\n        top: 0,\n        left: 0\n      },\n          e = this[0],\n          f = e && e.ownerDocument;\n      if (f) return b = f.documentElement, m.contains(b, e) ? (_typeof(e.getBoundingClientRect) !== K && (d = e.getBoundingClientRect()), c = dd(f), {\n        top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),\n        left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)\n      }) : d;\n    },\n    position: function position() {\n      if (this[0]) {\n        var a,\n            b,\n            c = {\n          top: 0,\n          left: 0\n        },\n            d = this[0];\n        return \"fixed\" === m.css(d, \"position\") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], \"html\") || (c = a.offset()), c.top += m.css(a[0], \"borderTopWidth\", !0), c.left += m.css(a[0], \"borderLeftWidth\", !0)), {\n          top: b.top - c.top - m.css(d, \"marginTop\", !0),\n          left: b.left - c.left - m.css(d, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var a = this.offsetParent || cd;\n\n        while (a && !m.nodeName(a, \"html\") && \"static\" === m.css(a, \"position\")) {\n          a = a.offsetParent;\n        }\n\n        return a || cd;\n      });\n    }\n  }), m.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (a, b) {\n    var c = /Y/.test(b);\n\n    m.fn[a] = function (d) {\n      return V(this, function (a, d, e) {\n        var f = dd(a);\n        return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);\n      }, a, d, arguments.length, null);\n    };\n  }), m.each([\"top\", \"left\"], function (a, b) {\n    m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {\n      return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + \"px\" : c) : void 0;\n    });\n  }), m.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    m.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      m.fn[d] = function (d, e) {\n        var f = arguments.length && (c || \"boolean\" != typeof d),\n            g = c || (d === !0 || e === !0 ? \"margin\" : \"border\");\n        return V(this, function (b, c, d) {\n          var e;\n          return m.isWindow(b) ? b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body[\"scroll\" + a], e[\"scroll\" + a], b.body[\"offset\" + a], e[\"offset\" + a], e[\"client\" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);\n        }, b, f ? d : void 0, f, null);\n      };\n    });\n  }), m.fn.size = function () {\n    return this.length;\n  }, m.fn.andSelf = m.fn.addBack,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return m;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var ed = a.jQuery,\n      fd = a.$;\n  return m.noConflict = function (b) {\n    return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;\n  }, _typeof(b) === K && (a.jQuery = a.$ = m), m;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/jquery-1.11.1.min.js\n");

/***/ }),

/***/ "./html/js/third_party/jquery-ui-1.10.1.custom.js":
/*!********************************************************!*\
  !*** ./html/js/third_party/jquery-ui-1.10.1.custom.js ***!
  \********************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery UI - v1.10.1 - 2013-03-11\n* http://jqueryui.com\n* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js\n* Copyright (c) 2013 jQuery Foundation and other contributors Licensed MIT */\n(function ($, undefined) {\n  var uuid = 0,\n      runiqueId = /^ui-id-\\d+$/; // prevent duplicate loading\n  // this is only a problem because we proxy existing functions\n  // and we don't want to double proxy them\n\n  $.ui = $.ui || {};\n\n  if ($.ui.version) {\n    return;\n  }\n\n  $.extend($.ui, {\n    version: \"1.10.1\",\n    keyCode: {\n      BACKSPACE: 8,\n      COMMA: 188,\n      DELETE: 46,\n      DOWN: 40,\n      END: 35,\n      ENTER: 13,\n      ESCAPE: 27,\n      HOME: 36,\n      LEFT: 37,\n      NUMPAD_ADD: 107,\n      NUMPAD_DECIMAL: 110,\n      NUMPAD_DIVIDE: 111,\n      NUMPAD_ENTER: 108,\n      NUMPAD_MULTIPLY: 106,\n      NUMPAD_SUBTRACT: 109,\n      PAGE_DOWN: 34,\n      PAGE_UP: 33,\n      PERIOD: 190,\n      RIGHT: 39,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38\n    }\n  }); // plugins\n\n  $.fn.extend({\n    _focus: $.fn.focus,\n    focus: function focus(delay, fn) {\n      return typeof delay === \"number\" ? this.each(function () {\n        var elem = this;\n        setTimeout(function () {\n          $(elem).focus();\n\n          if (fn) {\n            fn.call(elem);\n          }\n        }, delay);\n      }) : this._focus.apply(this, arguments);\n    },\n    scrollParent: function scrollParent() {\n      var scrollParent;\n\n      if ($.ui.ie && /(static|relative)/.test(this.css(\"position\")) || /absolute/.test(this.css(\"position\"))) {\n        scrollParent = this.parents().filter(function () {\n          return /(relative|absolute|fixed)/.test($.css(this, \"position\")) && /(auto|scroll)/.test($.css(this, \"overflow\") + $.css(this, \"overflow-y\") + $.css(this, \"overflow-x\"));\n        }).eq(0);\n      } else {\n        scrollParent = this.parents().filter(function () {\n          return /(auto|scroll)/.test($.css(this, \"overflow\") + $.css(this, \"overflow-y\") + $.css(this, \"overflow-x\"));\n        }).eq(0);\n      }\n\n      return /fixed/.test(this.css(\"position\")) || !scrollParent.length ? $(document) : scrollParent;\n    },\n    zIndex: function zIndex(_zIndex) {\n      if (_zIndex !== undefined) {\n        return this.css(\"zIndex\", _zIndex);\n      }\n\n      if (this.length) {\n        var elem = $(this[0]),\n            position,\n            value;\n\n        while (elem.length && elem[0] !== document) {\n          // Ignore z-index if position is set to a value where z-index is ignored by the browser\n          // This makes behavior of this function consistent across browsers\n          // WebKit always returns auto if the element is positioned\n          position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n            // IE returns 0 when zIndex is not specified\n            // other browsers return a string\n            // we ignore the case of nested elements with an explicit value of 0\n            // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n            value = parseInt(elem.css(\"zIndex\"), 10);\n\n            if (!isNaN(value) && value !== 0) {\n              return value;\n            }\n          }\n\n          elem = elem.parent();\n        }\n      }\n\n      return 0;\n    },\n    uniqueId: function uniqueId() {\n      return this.each(function () {\n        if (!this.id) {\n          this.id = \"ui-id-\" + ++uuid;\n        }\n      });\n    },\n    removeUniqueId: function removeUniqueId() {\n      return this.each(function () {\n        if (runiqueId.test(this.id)) {\n          $(this).removeAttr(\"id\");\n        }\n      });\n    }\n  }); // selectors\n\n  function _focusable(element, isTabIndexNotNaN) {\n    var map,\n        mapName,\n        img,\n        nodeName = element.nodeName.toLowerCase();\n\n    if (\"area\" === nodeName) {\n      map = element.parentNode;\n      mapName = map.name;\n\n      if (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n        return false;\n      }\n\n      img = $(\"img[usemap=#\" + mapName + \"]\")[0];\n      return !!img && visible(img);\n    }\n\n    return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : \"a\" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && // the element and all of its ancestors must be visible\n    visible(element);\n  }\n\n  function visible(element) {\n    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {\n      return $.css(this, \"visibility\") === \"hidden\";\n    }).length;\n  }\n\n  $.extend($.expr[\":\"], {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : // support: jQuery <1.8\n    function (elem, i, match) {\n      return !!$.data(elem, match[3]);\n    },\n    focusable: function focusable(element) {\n      return _focusable(element, !isNaN($.attr(element, \"tabindex\")));\n    },\n    tabbable: function tabbable(element) {\n      var tabIndex = $.attr(element, \"tabindex\"),\n          isTabIndexNaN = isNaN(tabIndex);\n      return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);\n    }\n  }); // support: jQuery <1.8\n\n  if (!$(\"<a>\").outerWidth(1).jquery) {\n    $.each([\"Width\", \"Height\"], function (i, name) {\n      var side = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"],\n          type = name.toLowerCase(),\n          orig = {\n        innerWidth: $.fn.innerWidth,\n        innerHeight: $.fn.innerHeight,\n        outerWidth: $.fn.outerWidth,\n        outerHeight: $.fn.outerHeight\n      };\n\n      function reduce(elem, size, border, margin) {\n        $.each(side, function () {\n          size -= parseFloat($.css(elem, \"padding\" + this)) || 0;\n\n          if (border) {\n            size -= parseFloat($.css(elem, \"border\" + this + \"Width\")) || 0;\n          }\n\n          if (margin) {\n            size -= parseFloat($.css(elem, \"margin\" + this)) || 0;\n          }\n        });\n        return size;\n      }\n\n      $.fn[\"inner\" + name] = function (size) {\n        if (size === undefined) {\n          return orig[\"inner\" + name].call(this);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size) + \"px\");\n        });\n      };\n\n      $.fn[\"outer\" + name] = function (size, margin) {\n        if (typeof size !== \"number\") {\n          return orig[\"outer\" + name].call(this, size);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size, true, margin) + \"px\");\n        });\n      };\n    });\n  } // support: jQuery <1.8\n\n\n  if (!$.fn.addBack) {\n    $.fn.addBack = function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    };\n  } // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)\n\n\n  if ($(\"<a>\").data(\"a-b\", \"a\").removeData(\"a-b\").data(\"a-b\")) {\n    $.fn.removeData = function (removeData) {\n      return function (key) {\n        if (arguments.length) {\n          return removeData.call(this, $.camelCase(key));\n        } else {\n          return removeData.call(this);\n        }\n      };\n    }($.fn.removeData);\n  } // deprecated\n\n\n  $.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n  $.support.selectstart = \"onselectstart\" in document.createElement(\"div\");\n  $.fn.extend({\n    disableSelection: function disableSelection() {\n      return this.bind(($.support.selectstart ? \"selectstart\" : \"mousedown\") + \".ui-disableSelection\", function (event) {\n        event.preventDefault();\n      });\n    },\n    enableSelection: function enableSelection() {\n      return this.unbind(\".ui-disableSelection\");\n    }\n  });\n  $.extend($.ui, {\n    // $.ui.plugin is deprecated.  Use the proxy pattern instead.\n    plugin: {\n      add: function add(module, option, set) {\n        var i,\n            proto = $.ui[module].prototype;\n\n        for (i in set) {\n          proto.plugins[i] = proto.plugins[i] || [];\n          proto.plugins[i].push([option, set[i]]);\n        }\n      },\n      call: function call(instance, name, args) {\n        var i,\n            set = instance.plugins[name];\n\n        if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11) {\n          return;\n        }\n\n        for (i = 0; i < set.length; i++) {\n          if (instance.options[set[i][0]]) {\n            set[i][1].apply(instance.element, args);\n          }\n        }\n      }\n    },\n    // only used by resizable\n    hasScroll: function hasScroll(el, a) {\n      //If overflow is hidden, the element might have extra content, but the user wants to hide it\n      if ($(el).css(\"overflow\") === \"hidden\") {\n        return false;\n      }\n\n      var scroll = a && a === \"left\" ? \"scrollLeft\" : \"scrollTop\",\n          has = false;\n\n      if (el[scroll] > 0) {\n        return true;\n      } // TODO: determine which cases actually cause this to happen\n      // if the element doesn't have the scroll set, see if it's possible to\n      // set the scroll\n\n\n      el[scroll] = 1;\n      has = el[scroll] > 0;\n      el[scroll] = 0;\n      return has;\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  var uuid = 0,\n      slice = Array.prototype.slice,\n      _cleanData = $.cleanData;\n\n  $.cleanData = function (elems) {\n    for (var i = 0, elem; (elem = elems[i]) != null; i++) {\n      try {\n        $(elem).triggerHandler(\"remove\"); // http://bugs.jquery.com/ticket/8235\n      } catch (e) {}\n    }\n\n    _cleanData(elems);\n  };\n\n  $.widget = function (name, base, prototype) {\n    var fullName,\n        existingConstructor,\n        constructor,\n        basePrototype,\n        // proxiedPrototype allows the provided prototype to remain unmodified\n    // so that it can be used as a mixin for multiple widgets (#8876)\n    proxiedPrototype = {},\n        namespace = name.split(\".\")[0];\n    name = name.split(\".\")[1];\n    fullName = namespace + \"-\" + name;\n\n    if (!prototype) {\n      prototype = base;\n      base = $.Widget;\n    } // create selector for plugin\n\n\n    $.expr[\":\"][fullName.toLowerCase()] = function (elem) {\n      return !!$.data(elem, fullName);\n    };\n\n    $[namespace] = $[namespace] || {};\n    existingConstructor = $[namespace][name];\n\n    constructor = $[namespace][name] = function (options, element) {\n      // allow instantiation without \"new\" keyword\n      if (!this._createWidget) {\n        return new constructor(options, element);\n      } // allow instantiation without initializing for simple inheritance\n      // must use \"new\" keyword (the code above always passes args)\n\n\n      if (arguments.length) {\n        this._createWidget(options, element);\n      }\n    }; // extend with the existing constructor to carry over any static properties\n\n\n    $.extend(constructor, existingConstructor, {\n      version: prototype.version,\n      // copy the object used to create the prototype in case we need to\n      // redefine the widget later\n      _proto: $.extend({}, prototype),\n      // track widgets that inherit from this widget in case this widget is\n      // redefined after a widget inherits from it\n      _childConstructors: []\n    });\n    basePrototype = new base(); // we need to make the options hash a property directly on the new instance\n    // otherwise we'll modify the options hash on the prototype that we're\n    // inheriting from\n\n    basePrototype.options = $.widget.extend({}, basePrototype.options);\n    $.each(prototype, function (prop, value) {\n      if (!$.isFunction(value)) {\n        proxiedPrototype[prop] = value;\n        return;\n      }\n\n      proxiedPrototype[prop] = function () {\n        var _super = function _super() {\n          return base.prototype[prop].apply(this, arguments);\n        },\n            _superApply = function _superApply(args) {\n          return base.prototype[prop].apply(this, args);\n        };\n\n        return function () {\n          var __super = this._super,\n              __superApply = this._superApply,\n              returnValue;\n          this._super = _super;\n          this._superApply = _superApply;\n          returnValue = value.apply(this, arguments);\n          this._super = __super;\n          this._superApply = __superApply;\n          return returnValue;\n        };\n      }();\n    });\n    constructor.prototype = $.widget.extend(basePrototype, {\n      // TODO: remove support for widgetEventPrefix\n      // always use the name + a colon as the prefix, e.g., draggable:start\n      // don't prefix for widgets that aren't DOM-based\n      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name\n    }, proxiedPrototype, {\n      constructor: constructor,\n      namespace: namespace,\n      widgetName: name,\n      widgetFullName: fullName\n    }); // If this widget is being redefined then we need to find all widgets that\n    // are inheriting from it and redefine all of them so that they inherit from\n    // the new version of this widget. We're essentially trying to replace one\n    // level in the prototype chain.\n\n    if (existingConstructor) {\n      $.each(existingConstructor._childConstructors, function (i, child) {\n        var childPrototype = child.prototype; // redefine the child widget using the same prototype that was\n        // originally used, but inherit from the new version of the base\n\n        $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n      }); // remove the list of existing child constructors from the old constructor\n      // so the old child constructors can be garbage collected\n\n      delete existingConstructor._childConstructors;\n    } else {\n      base._childConstructors.push(constructor);\n    }\n\n    $.widget.bridge(name, constructor);\n  };\n\n  $.widget.extend = function (target) {\n    var input = slice.call(arguments, 1),\n        inputIndex = 0,\n        inputLength = input.length,\n        key,\n        value;\n\n    for (; inputIndex < inputLength; inputIndex++) {\n      for (key in input[inputIndex]) {\n        value = input[inputIndex][key];\n\n        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n          // Clone objects\n          if ($.isPlainObject(value)) {\n            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : // Don't extend strings, arrays, etc. with objects\n            $.widget.extend({}, value); // Copy everything else by reference\n          } else {\n            target[key] = value;\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  $.widget.bridge = function (name, object) {\n    var fullName = object.prototype.widgetFullName || name;\n\n    $.fn[name] = function (options) {\n      var isMethodCall = typeof options === \"string\",\n          args = slice.call(arguments, 1),\n          returnValue = this; // allow multiple hashes to be passed on init\n\n      options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options;\n\n      if (isMethodCall) {\n        this.each(function () {\n          var methodValue,\n              instance = $.data(this, fullName);\n\n          if (!instance) {\n            return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" + \"attempted to call method '\" + options + \"'\");\n          }\n\n          if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n            return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n          }\n\n          methodValue = instance[options].apply(instance, args);\n\n          if (methodValue !== instance && methodValue !== undefined) {\n            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;\n            return false;\n          }\n        });\n      } else {\n        this.each(function () {\n          var instance = $.data(this, fullName);\n\n          if (instance) {\n            instance.option(options || {})._init();\n          } else {\n            $.data(this, fullName, new object(options, this));\n          }\n        });\n      }\n\n      return returnValue;\n    };\n  };\n\n  $.Widget = function ()\n  /* options, element */\n  {};\n\n  $.Widget._childConstructors = [];\n  $.Widget.prototype = {\n    widgetName: \"widget\",\n    widgetEventPrefix: \"\",\n    defaultElement: \"<div>\",\n    options: {\n      disabled: false,\n      // callbacks\n      create: null\n    },\n    _createWidget: function _createWidget(options, element) {\n      element = $(element || this.defaultElement || this)[0];\n      this.element = $(element);\n      this.uuid = uuid++;\n      this.eventNamespace = \".\" + this.widgetName + this.uuid;\n      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);\n      this.bindings = $();\n      this.hoverable = $();\n      this.focusable = $();\n\n      if (element !== this) {\n        $.data(element, this.widgetFullName, this);\n\n        this._on(true, this.element, {\n          remove: function remove(event) {\n            if (event.target === element) {\n              this.destroy();\n            }\n          }\n        });\n\n        this.document = $(element.style ? // element within the document\n        element.ownerDocument : // element is window or document\n        element.document || element);\n        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n      }\n\n      this._create();\n\n      this._trigger(\"create\", null, this._getCreateEventData());\n\n      this._init();\n    },\n    _getCreateOptions: $.noop,\n    _getCreateEventData: $.noop,\n    _create: $.noop,\n    _init: $.noop,\n    destroy: function destroy() {\n      this._destroy(); // we can probably remove the unbind calls in 2.0\n      // all event bindings should go through this._on()\n\n\n      this.element.unbind(this.eventNamespace) // 1.9 BC for #7810\n      // TODO remove dual storage\n      .removeData(this.widgetName).removeData(this.widgetFullName) // support: jquery <1.6.3\n      // http://bugs.jquery.com/ticket/9413\n      .removeData($.camelCase(this.widgetFullName));\n      this.widget().unbind(this.eventNamespace).removeAttr(\"aria-disabled\").removeClass(this.widgetFullName + \"-disabled \" + \"ui-state-disabled\"); // clean up events and states\n\n      this.bindings.unbind(this.eventNamespace);\n      this.hoverable.removeClass(\"ui-state-hover\");\n      this.focusable.removeClass(\"ui-state-focus\");\n    },\n    _destroy: $.noop,\n    widget: function widget() {\n      return this.element;\n    },\n    option: function option(key, value) {\n      var options = key,\n          parts,\n          curOption,\n          i;\n\n      if (arguments.length === 0) {\n        // don't return a reference to the internal hash\n        return $.widget.extend({}, this.options);\n      }\n\n      if (typeof key === \"string\") {\n        // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n        options = {};\n        parts = key.split(\".\");\n        key = parts.shift();\n\n        if (parts.length) {\n          curOption = options[key] = $.widget.extend({}, this.options[key]);\n\n          for (i = 0; i < parts.length - 1; i++) {\n            curOption[parts[i]] = curOption[parts[i]] || {};\n            curOption = curOption[parts[i]];\n          }\n\n          key = parts.pop();\n\n          if (value === undefined) {\n            return curOption[key] === undefined ? null : curOption[key];\n          }\n\n          curOption[key] = value;\n        } else {\n          if (value === undefined) {\n            return this.options[key] === undefined ? null : this.options[key];\n          }\n\n          options[key] = value;\n        }\n      }\n\n      this._setOptions(options);\n\n      return this;\n    },\n    _setOptions: function _setOptions(options) {\n      var key;\n\n      for (key in options) {\n        this._setOption(key, options[key]);\n      }\n\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      this.options[key] = value;\n\n      if (key === \"disabled\") {\n        this.widget().toggleClass(this.widgetFullName + \"-disabled ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n        this.hoverable.removeClass(\"ui-state-hover\");\n        this.focusable.removeClass(\"ui-state-focus\");\n      }\n\n      return this;\n    },\n    enable: function enable() {\n      return this._setOption(\"disabled\", false);\n    },\n    disable: function disable() {\n      return this._setOption(\"disabled\", true);\n    },\n    _on: function _on(suppressDisabledCheck, element, handlers) {\n      var delegateElement,\n          instance = this; // no suppressDisabledCheck flag, shuffle arguments\n\n      if (typeof suppressDisabledCheck !== \"boolean\") {\n        handlers = element;\n        element = suppressDisabledCheck;\n        suppressDisabledCheck = false;\n      } // no element argument, shuffle and use this.element\n\n\n      if (!handlers) {\n        handlers = element;\n        element = this.element;\n        delegateElement = this.widget();\n      } else {\n        // accept selectors, DOM elements\n        element = delegateElement = $(element);\n        this.bindings = this.bindings.add(element);\n      }\n\n      $.each(handlers, function (event, handler) {\n        function handlerProxy() {\n          // allow widgets to customize the disabled handling\n          // - disabled as an array instead of boolean\n          // - disabled class as method for disabling individual parts\n          if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass(\"ui-state-disabled\"))) {\n            return;\n          }\n\n          return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n        } // copy the guid so direct unbinding works\n\n\n        if (typeof handler !== \"string\") {\n          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;\n        }\n\n        var match = event.match(/^(\\w+)\\s*(.*)$/),\n            eventName = match[1] + instance.eventNamespace,\n            selector = match[2];\n\n        if (selector) {\n          delegateElement.delegate(selector, eventName, handlerProxy);\n        } else {\n          element.bind(eventName, handlerProxy);\n        }\n      });\n    },\n    _off: function _off(element, eventName) {\n      eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n      element.unbind(eventName).undelegate(eventName);\n    },\n    _delay: function _delay(handler, delay) {\n      function handlerProxy() {\n        return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n      }\n\n      var instance = this;\n      return setTimeout(handlerProxy, delay || 0);\n    },\n    _hoverable: function _hoverable(element) {\n      this.hoverable = this.hoverable.add(element);\n\n      this._on(element, {\n        mouseenter: function mouseenter(event) {\n          $(event.currentTarget).addClass(\"ui-state-hover\");\n        },\n        mouseleave: function mouseleave(event) {\n          $(event.currentTarget).removeClass(\"ui-state-hover\");\n        }\n      });\n    },\n    _focusable: function _focusable(element) {\n      this.focusable = this.focusable.add(element);\n\n      this._on(element, {\n        focusin: function focusin(event) {\n          $(event.currentTarget).addClass(\"ui-state-focus\");\n        },\n        focusout: function focusout(event) {\n          $(event.currentTarget).removeClass(\"ui-state-focus\");\n        }\n      });\n    },\n    _trigger: function _trigger(type, event, data) {\n      var prop,\n          orig,\n          callback = this.options[type];\n      data = data || {};\n      event = $.Event(event);\n      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); // the original event may come from any element\n      // so we need to reset the target on the new event\n\n      event.target = this.element[0]; // copy original event properties over to the new event\n\n      orig = event.originalEvent;\n\n      if (orig) {\n        for (prop in orig) {\n          if (!(prop in event)) {\n            event[prop] = orig[prop];\n          }\n        }\n      }\n\n      this.element.trigger(event, data);\n      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());\n    }\n  };\n  $.each({\n    show: \"fadeIn\",\n    hide: \"fadeOut\"\n  }, function (method, defaultEffect) {\n    $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n      if (typeof options === \"string\") {\n        options = {\n          effect: options\n        };\n      }\n\n      var hasOptions,\n          effectName = !options ? method : options === true || typeof options === \"number\" ? defaultEffect : options.effect || defaultEffect;\n      options = options || {};\n\n      if (typeof options === \"number\") {\n        options = {\n          duration: options\n        };\n      }\n\n      hasOptions = !$.isEmptyObject(options);\n      options.complete = callback;\n\n      if (options.delay) {\n        element.delay(options.delay);\n      }\n\n      if (hasOptions && $.effects && $.effects.effect[effectName]) {\n        element[method](options);\n      } else if (effectName !== method && element[effectName]) {\n        element[effectName](options.duration, options.easing, callback);\n      } else {\n        element.queue(function (next) {\n          $(this)[method]();\n\n          if (callback) {\n            callback.call(element[0]);\n          }\n\n          next();\n        });\n      }\n    };\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  var mouseHandled = false;\n  $(document).mouseup(function () {\n    mouseHandled = false;\n  });\n  $.widget(\"ui.mouse\", {\n    version: \"1.10.1\",\n    options: {\n      cancel: \"input,textarea,button,select,option\",\n      distance: 1,\n      delay: 0\n    },\n    _mouseInit: function _mouseInit() {\n      var that = this;\n      this.element.bind(\"mousedown.\" + this.widgetName, function (event) {\n        return that._mouseDown(event);\n      }).bind(\"click.\" + this.widgetName, function (event) {\n        if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n          $.removeData(event.target, that.widgetName + \".preventClickEvent\");\n          event.stopImmediatePropagation();\n          return false;\n        }\n      });\n      this.started = false;\n    },\n    // TODO: make sure destroying one instance of mouse doesn't mess with\n    // other instances of mouse\n    _mouseDestroy: function _mouseDestroy() {\n      this.element.unbind(\".\" + this.widgetName);\n\n      if (this._mouseMoveDelegate) {\n        $(document).unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      }\n    },\n    _mouseDown: function _mouseDown(event) {\n      // don't let more than one widget handle mouseStart\n      if (mouseHandled) {\n        return;\n      } // we may have missed mouseup (out of window)\n\n\n      this._mouseStarted && this._mouseUp(event);\n      this._mouseDownEvent = event;\n      var that = this,\n          btnIsLeft = event.which === 1,\n          // event.target.nodeName works around a bug in IE 8 with\n      // disabled inputs (#7620)\n      elIsCancel = typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;\n\n      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n        return true;\n      }\n\n      this.mouseDelayMet = !this.options.delay;\n\n      if (!this.mouseDelayMet) {\n        this._mouseDelayTimer = setTimeout(function () {\n          that.mouseDelayMet = true;\n        }, this.options.delay);\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(event) !== false;\n\n        if (!this._mouseStarted) {\n          event.preventDefault();\n          return true;\n        }\n      } // Click event may never have fired (Gecko & Opera)\n\n\n      if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n        $.removeData(event.target, this.widgetName + \".preventClickEvent\");\n      } // these delegates are required to keep context\n\n\n      this._mouseMoveDelegate = function (event) {\n        return that._mouseMove(event);\n      };\n\n      this._mouseUpDelegate = function (event) {\n        return that._mouseUp(event);\n      };\n\n      $(document).bind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).bind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      event.preventDefault();\n      mouseHandled = true;\n      return true;\n    },\n    _mouseMove: function _mouseMove(event) {\n      // IE mouseup check - mouseup happened when mouse was out of window\n      if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n        return this._mouseUp(event);\n      }\n\n      if (this._mouseStarted) {\n        this._mouseDrag(event);\n\n        return event.preventDefault();\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;\n        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);\n      }\n\n      return !this._mouseStarted;\n    },\n    _mouseUp: function _mouseUp(event) {\n      $(document).unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n      if (this._mouseStarted) {\n        this._mouseStarted = false;\n\n        if (event.target === this._mouseDownEvent.target) {\n          $.data(event.target, this.widgetName + \".preventClickEvent\", true);\n        }\n\n        this._mouseStop(event);\n      }\n\n      return false;\n    },\n    _mouseDistanceMet: function _mouseDistanceMet(event) {\n      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;\n    },\n    _mouseDelayMet: function _mouseDelayMet()\n    /* event */\n    {\n      return this.mouseDelayMet;\n    },\n    // These are placeholder methods, to be overriden by extending plugin\n    _mouseStart: function _mouseStart()\n    /* event */\n    {},\n    _mouseDrag: function _mouseDrag()\n    /* event */\n    {},\n    _mouseStop: function _mouseStop()\n    /* event */\n    {},\n    _mouseCapture: function _mouseCapture()\n    /* event */\n    {\n      return true;\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  $.ui = $.ui || {};\n  var cachedScrollbarWidth,\n      max = Math.max,\n      abs = Math.abs,\n      round = Math.round,\n      rhorizontal = /left|center|right/,\n      rvertical = /top|center|bottom/,\n      roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\n      rposition = /^\\w+/,\n      rpercent = /%$/,\n      _position = $.fn.position;\n\n  function getOffsets(offsets, width, height) {\n    return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];\n  }\n\n  function parseCss(element, property) {\n    return parseInt($.css(element, property), 10) || 0;\n  }\n\n  function getDimensions(elem) {\n    var raw = elem[0];\n\n    if (raw.nodeType === 9) {\n      return {\n        width: elem.width(),\n        height: elem.height(),\n        offset: {\n          top: 0,\n          left: 0\n        }\n      };\n    }\n\n    if ($.isWindow(raw)) {\n      return {\n        width: elem.width(),\n        height: elem.height(),\n        offset: {\n          top: elem.scrollTop(),\n          left: elem.scrollLeft()\n        }\n      };\n    }\n\n    if (raw.preventDefault) {\n      return {\n        width: 0,\n        height: 0,\n        offset: {\n          top: raw.pageY,\n          left: raw.pageX\n        }\n      };\n    }\n\n    return {\n      width: elem.outerWidth(),\n      height: elem.outerHeight(),\n      offset: elem.offset()\n    };\n  }\n\n  $.position = {\n    scrollbarWidth: function scrollbarWidth() {\n      if (cachedScrollbarWidth !== undefined) {\n        return cachedScrollbarWidth;\n      }\n\n      var w1,\n          w2,\n          div = $(\"<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>\"),\n          innerDiv = div.children()[0];\n      $(\"body\").append(div);\n      w1 = innerDiv.offsetWidth;\n      div.css(\"overflow\", \"scroll\");\n      w2 = innerDiv.offsetWidth;\n\n      if (w1 === w2) {\n        w2 = div[0].clientWidth;\n      }\n\n      div.remove();\n      return cachedScrollbarWidth = w1 - w2;\n    },\n    getScrollInfo: function getScrollInfo(within) {\n      var overflowX = within.isWindow ? \"\" : within.element.css(\"overflow-x\"),\n          overflowY = within.isWindow ? \"\" : within.element.css(\"overflow-y\"),\n          hasOverflowX = overflowX === \"scroll\" || overflowX === \"auto\" && within.width < within.element[0].scrollWidth,\n          hasOverflowY = overflowY === \"scroll\" || overflowY === \"auto\" && within.height < within.element[0].scrollHeight;\n      return {\n        width: hasOverflowX ? $.position.scrollbarWidth() : 0,\n        height: hasOverflowY ? $.position.scrollbarWidth() : 0\n      };\n    },\n    getWithinInfo: function getWithinInfo(element) {\n      var withinElement = $(element || window),\n          isWindow = $.isWindow(withinElement[0]);\n      return {\n        element: withinElement,\n        isWindow: isWindow,\n        offset: withinElement.offset() || {\n          left: 0,\n          top: 0\n        },\n        scrollLeft: withinElement.scrollLeft(),\n        scrollTop: withinElement.scrollTop(),\n        width: isWindow ? withinElement.width() : withinElement.outerWidth(),\n        height: isWindow ? withinElement.height() : withinElement.outerHeight()\n      };\n    }\n  };\n\n  $.fn.position = function (options) {\n    if (!options || !options.of) {\n      return _position.apply(this, arguments);\n    } // make a copy, we don't want to modify arguments\n\n\n    options = $.extend({}, options);\n    var atOffset,\n        targetWidth,\n        targetHeight,\n        targetOffset,\n        basePosition,\n        dimensions,\n        target = $(options.of),\n        within = $.position.getWithinInfo(options.within),\n        scrollInfo = $.position.getScrollInfo(within),\n        collision = (options.collision || \"flip\").split(\" \"),\n        offsets = {};\n    dimensions = getDimensions(target);\n\n    if (target[0].preventDefault) {\n      // force left top to allow flipping\n      options.at = \"left top\";\n    }\n\n    targetWidth = dimensions.width;\n    targetHeight = dimensions.height;\n    targetOffset = dimensions.offset; // clone to reuse original targetOffset later\n\n    basePosition = $.extend({}, targetOffset); // force my and at to have valid horizontal and vertical positions\n    // if a value is missing or invalid, it will be converted to center\n\n    $.each([\"my\", \"at\"], function () {\n      var pos = (options[this] || \"\").split(\" \"),\n          horizontalOffset,\n          verticalOffset;\n\n      if (pos.length === 1) {\n        pos = rhorizontal.test(pos[0]) ? pos.concat([\"center\"]) : rvertical.test(pos[0]) ? [\"center\"].concat(pos) : [\"center\", \"center\"];\n      }\n\n      pos[0] = rhorizontal.test(pos[0]) ? pos[0] : \"center\";\n      pos[1] = rvertical.test(pos[1]) ? pos[1] : \"center\"; // calculate offsets\n\n      horizontalOffset = roffset.exec(pos[0]);\n      verticalOffset = roffset.exec(pos[1]);\n      offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0]; // reduce to just the positions without the offsets\n\n      options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];\n    }); // normalize collision option\n\n    if (collision.length === 1) {\n      collision[1] = collision[0];\n    }\n\n    if (options.at[0] === \"right\") {\n      basePosition.left += targetWidth;\n    } else if (options.at[0] === \"center\") {\n      basePosition.left += targetWidth / 2;\n    }\n\n    if (options.at[1] === \"bottom\") {\n      basePosition.top += targetHeight;\n    } else if (options.at[1] === \"center\") {\n      basePosition.top += targetHeight / 2;\n    }\n\n    atOffset = getOffsets(offsets.at, targetWidth, targetHeight);\n    basePosition.left += atOffset[0];\n    basePosition.top += atOffset[1];\n    return this.each(function () {\n      var collisionPosition,\n          using,\n          elem = $(this),\n          elemWidth = elem.outerWidth(),\n          elemHeight = elem.outerHeight(),\n          marginLeft = parseCss(this, \"marginLeft\"),\n          marginTop = parseCss(this, \"marginTop\"),\n          collisionWidth = elemWidth + marginLeft + parseCss(this, \"marginRight\") + scrollInfo.width,\n          collisionHeight = elemHeight + marginTop + parseCss(this, \"marginBottom\") + scrollInfo.height,\n          position = $.extend({}, basePosition),\n          myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());\n\n      if (options.my[0] === \"right\") {\n        position.left -= elemWidth;\n      } else if (options.my[0] === \"center\") {\n        position.left -= elemWidth / 2;\n      }\n\n      if (options.my[1] === \"bottom\") {\n        position.top -= elemHeight;\n      } else if (options.my[1] === \"center\") {\n        position.top -= elemHeight / 2;\n      }\n\n      position.left += myOffset[0];\n      position.top += myOffset[1]; // if the browser doesn't support fractions, then round for consistent results\n\n      if (!$.support.offsetFractions) {\n        position.left = round(position.left);\n        position.top = round(position.top);\n      }\n\n      collisionPosition = {\n        marginLeft: marginLeft,\n        marginTop: marginTop\n      };\n      $.each([\"left\", \"top\"], function (i, dir) {\n        if ($.ui.position[collision[i]]) {\n          $.ui.position[collision[i]][dir](position, {\n            targetWidth: targetWidth,\n            targetHeight: targetHeight,\n            elemWidth: elemWidth,\n            elemHeight: elemHeight,\n            collisionPosition: collisionPosition,\n            collisionWidth: collisionWidth,\n            collisionHeight: collisionHeight,\n            offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],\n            my: options.my,\n            at: options.at,\n            within: within,\n            elem: elem\n          });\n        }\n      });\n\n      if (options.using) {\n        // adds feedback as second argument to using callback, if present\n        using = function using(props) {\n          var left = targetOffset.left - position.left,\n              right = left + targetWidth - elemWidth,\n              top = targetOffset.top - position.top,\n              bottom = top + targetHeight - elemHeight,\n              feedback = {\n            target: {\n              element: target,\n              left: targetOffset.left,\n              top: targetOffset.top,\n              width: targetWidth,\n              height: targetHeight\n            },\n            element: {\n              element: elem,\n              left: position.left,\n              top: position.top,\n              width: elemWidth,\n              height: elemHeight\n            },\n            horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\n            vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\n          };\n\n          if (targetWidth < elemWidth && abs(left + right) < targetWidth) {\n            feedback.horizontal = \"center\";\n          }\n\n          if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {\n            feedback.vertical = \"middle\";\n          }\n\n          if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {\n            feedback.important = \"horizontal\";\n          } else {\n            feedback.important = \"vertical\";\n          }\n\n          options.using.call(this, props, feedback);\n        };\n      }\n\n      elem.offset($.extend(position, {\n        using: using\n      }));\n    });\n  };\n\n  $.ui.position = {\n    fit: {\n      left: function left(position, data) {\n        var within = data.within,\n            withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\n            outerWidth = within.width,\n            collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n            overLeft = withinOffset - collisionPosLeft,\n            overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\n            newOverRight; // element is wider than within\n\n        if (data.collisionWidth > outerWidth) {\n          // element is initially over the left side of within\n          if (overLeft > 0 && overRight <= 0) {\n            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\n            position.left += overLeft - newOverRight; // element is initially over right side of within\n          } else if (overRight > 0 && overLeft <= 0) {\n            position.left = withinOffset; // element is initially over both left and right sides of within\n          } else {\n            if (overLeft > overRight) {\n              position.left = withinOffset + outerWidth - data.collisionWidth;\n            } else {\n              position.left = withinOffset;\n            }\n          } // too far left -> align with left edge\n\n        } else if (overLeft > 0) {\n          position.left += overLeft; // too far right -> align with right edge\n        } else if (overRight > 0) {\n          position.left -= overRight; // adjust based on position and margin\n        } else {\n          position.left = max(position.left - collisionPosLeft, position.left);\n        }\n      },\n      top: function top(position, data) {\n        var within = data.within,\n            withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\n            outerHeight = data.within.height,\n            collisionPosTop = position.top - data.collisionPosition.marginTop,\n            overTop = withinOffset - collisionPosTop,\n            overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\n            newOverBottom; // element is taller than within\n\n        if (data.collisionHeight > outerHeight) {\n          // element is initially over the top of within\n          if (overTop > 0 && overBottom <= 0) {\n            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\n            position.top += overTop - newOverBottom; // element is initially over bottom of within\n          } else if (overBottom > 0 && overTop <= 0) {\n            position.top = withinOffset; // element is initially over both top and bottom of within\n          } else {\n            if (overTop > overBottom) {\n              position.top = withinOffset + outerHeight - data.collisionHeight;\n            } else {\n              position.top = withinOffset;\n            }\n          } // too far up -> align with top\n\n        } else if (overTop > 0) {\n          position.top += overTop; // too far down -> align with bottom edge\n        } else if (overBottom > 0) {\n          position.top -= overBottom; // adjust based on position and margin\n        } else {\n          position.top = max(position.top - collisionPosTop, position.top);\n        }\n      }\n    },\n    flip: {\n      left: function left(position, data) {\n        var within = data.within,\n            withinOffset = within.offset.left + within.scrollLeft,\n            outerWidth = within.width,\n            offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\n            collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n            overLeft = collisionPosLeft - offsetLeft,\n            overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\n            myOffset = data.my[0] === \"left\" ? -data.elemWidth : data.my[0] === \"right\" ? data.elemWidth : 0,\n            atOffset = data.at[0] === \"left\" ? data.targetWidth : data.at[0] === \"right\" ? -data.targetWidth : 0,\n            offset = -2 * data.offset[0],\n            newOverRight,\n            newOverLeft;\n\n        if (overLeft < 0) {\n          newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\n\n          if (newOverRight < 0 || newOverRight < abs(overLeft)) {\n            position.left += myOffset + atOffset + offset;\n          }\n        } else if (overRight > 0) {\n          newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\n\n          if (newOverLeft > 0 || abs(newOverLeft) < overRight) {\n            position.left += myOffset + atOffset + offset;\n          }\n        }\n      },\n      top: function top(position, data) {\n        var within = data.within,\n            withinOffset = within.offset.top + within.scrollTop,\n            outerHeight = within.height,\n            offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\n            collisionPosTop = position.top - data.collisionPosition.marginTop,\n            overTop = collisionPosTop - offsetTop,\n            overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\n            top = data.my[1] === \"top\",\n            myOffset = top ? -data.elemHeight : data.my[1] === \"bottom\" ? data.elemHeight : 0,\n            atOffset = data.at[1] === \"top\" ? data.targetHeight : data.at[1] === \"bottom\" ? -data.targetHeight : 0,\n            offset = -2 * data.offset[1],\n            newOverTop,\n            newOverBottom;\n\n        if (overTop < 0) {\n          newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\n\n          if (position.top + myOffset + atOffset + offset > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) {\n            position.top += myOffset + atOffset + offset;\n          }\n        } else if (overBottom > 0) {\n          newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\n\n          if (position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) {\n            position.top += myOffset + atOffset + offset;\n          }\n        }\n      }\n    },\n    flipfit: {\n      left: function left() {\n        $.ui.position.flip.left.apply(this, arguments);\n        $.ui.position.fit.left.apply(this, arguments);\n      },\n      top: function top() {\n        $.ui.position.flip.top.apply(this, arguments);\n        $.ui.position.fit.top.apply(this, arguments);\n      }\n    }\n  }; // fraction support test\n\n  (function () {\n    var testElement,\n        testElementParent,\n        testElementStyle,\n        offsetLeft,\n        i,\n        body = document.getElementsByTagName(\"body\")[0],\n        div = document.createElement(\"div\"); //Create a \"fake body\" for testing based on method used in jQuery.support\n\n    testElement = document.createElement(body ? \"div\" : \"body\");\n    testElementStyle = {\n      visibility: \"hidden\",\n      width: 0,\n      height: 0,\n      border: 0,\n      margin: 0,\n      background: \"none\"\n    };\n\n    if (body) {\n      $.extend(testElementStyle, {\n        position: \"absolute\",\n        left: \"-1000px\",\n        top: \"-1000px\"\n      });\n    }\n\n    for (i in testElementStyle) {\n      testElement.style[i] = testElementStyle[i];\n    }\n\n    testElement.appendChild(div);\n    testElementParent = body || document.documentElement;\n    testElementParent.insertBefore(testElement, testElementParent.firstChild);\n    div.style.cssText = \"position: absolute; left: 10.7432222px;\";\n    offsetLeft = $(div).offset().left;\n    $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;\n    testElement.innerHTML = \"\";\n    testElementParent.removeChild(testElement);\n  })();\n})(jQuery);\n\n(function ($, undefined) {\n  $.widget(\"ui.draggable\", $.ui.mouse, {\n    version: \"1.10.1\",\n    widgetEventPrefix: \"drag\",\n    options: {\n      addClasses: true,\n      appendTo: \"parent\",\n      axis: false,\n      connectToSortable: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      iframeFix: false,\n      opacity: false,\n      refreshPositions: false,\n      revert: false,\n      revertDuration: 500,\n      scope: \"default\",\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      snap: false,\n      snapMode: \"both\",\n      snapTolerance: 20,\n      stack: false,\n      zIndex: false,\n      // callbacks\n      drag: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      if (this.options.helper === \"original\" && !/^(?:r|a|f)/.test(this.element.css(\"position\"))) {\n        this.element[0].style.position = \"relative\";\n      }\n\n      if (this.options.addClasses) {\n        this.element.addClass(\"ui-draggable\");\n      }\n\n      if (this.options.disabled) {\n        this.element.addClass(\"ui-draggable-disabled\");\n      }\n\n      this._mouseInit();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-draggable ui-draggable-dragging ui-draggable-disabled\");\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var o = this.options; // among others, prevent a drag on a resizable-handle\n\n      if (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n        return false;\n      } //Quit if we're not on a valid handle\n\n\n      this.handle = this._getHandle(event);\n\n      if (!this.handle) {\n        return false;\n      }\n\n      $(o.iframeFix === true ? \"iframe\" : o.iframeFix).each(function () {\n        $(\"<div class='ui-draggable-iframeFix' style='background: #fff;'></div>\").css({\n          width: this.offsetWidth + \"px\",\n          height: this.offsetHeight + \"px\",\n          position: \"absolute\",\n          opacity: \"0.001\",\n          zIndex: 1000\n        }).css($(this).offset()).appendTo(\"body\");\n      });\n      return true;\n    },\n    _mouseStart: function _mouseStart(event) {\n      var o = this.options; //Create and append the visible helper\n\n      this.helper = this._createHelper(event);\n      this.helper.addClass(\"ui-draggable-dragging\"); //Cache the helper size\n\n      this._cacheHelperProportions(); //If ddmanager is used for droppables, set the global draggable\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n      /*\n       * - Position generation -\n       * This block generates everything position related - it's the core of draggables.\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Store the helper's css position\n\n\n      this.cssPosition = this.helper.css(\"position\");\n      this.scrollParent = this.helper.scrollParent(); //The element's absolute position on the page minus margins\n\n      this.offset = this.positionAbs = this.element.offset();\n      this.offset = {\n        top: this.offset.top - this.margins.top,\n        left: this.offset.left - this.margins.left\n      };\n      $.extend(this.offset, {\n        click: {\n          //Where the click happened, relative to the element\n          left: event.pageX - this.offset.left,\n          top: event.pageY - this.offset.top\n        },\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\n\n      }); //Generate the original position\n\n      this.originalPosition = this.position = this._generatePosition(event);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Set a containment if given in the options\n\n      if (o.containment) {\n        this._setContainment();\n      } //Trigger event + callbacks\n\n\n      if (this._trigger(\"start\", event) === false) {\n        this._clear();\n\n        return false;\n      } //Recache the helper size\n\n\n      this._cacheHelperProportions(); //Prepare the droppable offsets\n\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      }\n\n      this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n      //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStart(this, event);\n      }\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event, noPropagation) {\n      //Compute the helpers position\n      this.position = this._generatePosition(event);\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Call plugins and callbacks and use the resulting position if something is returned\n\n      if (!noPropagation) {\n        var ui = this._uiHash();\n\n        if (this._trigger(\"drag\", event, ui) === false) {\n          this._mouseUp({});\n\n          return false;\n        }\n\n        this.position = ui.position;\n      }\n\n      if (!this.options.axis || this.options.axis !== \"y\") {\n        this.helper[0].style.left = this.position.left + \"px\";\n      }\n\n      if (!this.options.axis || this.options.axis !== \"x\") {\n        this.helper[0].style.top = this.position.top + \"px\";\n      }\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      //If we are using droppables, inform the manager about the drop\n      var element,\n          that = this,\n          elementInDom = false,\n          dropped = false;\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        dropped = $.ui.ddmanager.drop(this, event);\n      } //if a drop comes from outside (a sortable)\n\n\n      if (this.dropped) {\n        dropped = this.dropped;\n        this.dropped = false;\n      } //if the original element is no longer in the DOM don't bother to continue (see #8269)\n\n\n      element = this.element[0];\n\n      while (element && (element = element.parentNode)) {\n        if (element === document) {\n          elementInDom = true;\n        }\n      }\n\n      if (!elementInDom && this.options.helper === \"original\") {\n        return false;\n      }\n\n      if (this.options.revert === \"invalid\" && !dropped || this.options.revert === \"valid\" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {\n        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n          if (that._trigger(\"stop\", event) !== false) {\n            that._clear();\n          }\n        });\n      } else {\n        if (this._trigger(\"stop\", event) !== false) {\n          this._clear();\n        }\n      }\n\n      return false;\n    },\n    _mouseUp: function _mouseUp(event) {\n      //Remove frame helpers\n      $(\"div.ui-draggable-iframeFix\").each(function () {\n        this.parentNode.removeChild(this);\n      }); //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStop(this, event);\n      }\n\n      return $.ui.mouse.prototype._mouseUp.call(this, event);\n    },\n    cancel: function cancel() {\n      if (this.helper.is(\".ui-draggable-dragging\")) {\n        this._mouseUp({});\n      } else {\n        this._clear();\n      }\n\n      return this;\n    },\n    _getHandle: function _getHandle(event) {\n      var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;\n      $(this.options.handle, this.element).find(\"*\").addBack().each(function () {\n        if (this === event.target) {\n          handle = true;\n        }\n      });\n      return handle;\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element;\n\n      if (!helper.parents(\"body\").length) {\n        helper.appendTo(o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo);\n      }\n\n      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css(\"position\"))) {\n        helper.css(\"position\", \"absolute\");\n      }\n\n      return helper;\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      this.offsetParent = this.helper.offsetParent();\n      var po = this.offsetParent.offset(); // This is a special case where we need to modify a offset calculated on start, since the following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      } //This needs to be actually done for all browsers, since pageX/pageY includes this information\n      //Ugly IE fix\n\n\n      if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition === \"relative\") {\n        var p = this.element.position();\n        return {\n          top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n          left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n        };\n      } else {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.element.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.element.css(\"marginTop\"), 10) || 0,\n        right: parseInt(this.element.css(\"marginRight\"), 10) || 0,\n        bottom: parseInt(this.element.css(\"marginBottom\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var over,\n          c,\n          ce,\n          o = this.options;\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      if (o.containment === \"document\" || o.containment === \"window\") {\n        this.containment = [o.containment === \"document\" ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, o.containment === \"document\" ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, (o.containment === \"document\" ? 0 : $(window).scrollLeft()) + $(o.containment === \"document\" ? document : window).width() - this.helperProportions.width - this.margins.left, (o.containment === \"document\" ? 0 : $(window).scrollTop()) + ($(o.containment === \"document\" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n      }\n\n      if (!/^(document|window|parent)$/.test(o.containment) && o.containment.constructor !== Array) {\n        c = $(o.containment);\n        ce = c[0];\n\n        if (!ce) {\n          return;\n        }\n\n        over = $(ce).css(\"overflow\") !== \"hidden\";\n        this.containment = [(parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0), (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];\n        this.relative_container = c;\n      } else if (o.containment.constructor === Array) {\n        this.containment = o.containment;\n      }\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n      return {\n        top: pos.top + // The absolute mouse position\n        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,\n        left: pos.left + // The absolute mouse position\n        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event) {\n      var containment,\n          co,\n          top,\n          left,\n          o = this.options,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName),\n          pageX = event.pageX,\n          pageY = event.pageY;\n      /*\n       * - Position constraining -\n       * Constrain the position to a mix of grid, containment.\n       */\n\n      if (this.originalPosition) {\n        //If we are not dragging yet, we won't check for options\n        if (this.containment) {\n          if (this.relative_container) {\n            co = this.relative_container.offset();\n            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];\n          } else {\n            containment = this.containment;\n          }\n\n          if (event.pageX - this.offset.click.left < containment[0]) {\n            pageX = containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < containment[1]) {\n            pageY = containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > containment[2]) {\n            pageX = containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > containment[3]) {\n            pageY = containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)\n          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n      }\n\n      return {\n        top: pageY - // The absolute mouse position\n        this.offset.click.top - // Click offset (relative to the element)\n        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),\n        left: pageX - // The absolute mouse position\n        this.offset.click.left - // Click offset (relative to the element)\n        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())\n      };\n    },\n    _clear: function _clear() {\n      this.helper.removeClass(\"ui-draggable-dragging\");\n\n      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n        this.helper.remove();\n      }\n\n      this.helper = null;\n      this.cancelHelperRemoval = false;\n    },\n    // From now on bulk stuff - mainly helpers\n    _trigger: function _trigger(type, event, ui) {\n      ui = ui || this._uiHash();\n      $.ui.plugin.call(this, type, [event, ui]); //The absolute position has to be recalculated after plugins\n\n      if (type === \"drag\") {\n        this.positionAbs = this._convertPositionTo(\"absolute\");\n      }\n\n      return $.Widget.prototype._trigger.call(this, type, event, ui);\n    },\n    plugins: {},\n    _uiHash: function _uiHash() {\n      return {\n        helper: this.helper,\n        position: this.position,\n        originalPosition: this.originalPosition,\n        offset: this.positionAbs\n      };\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n    start: function start(event, ui) {\n      var inst = $(this).data(\"ui-draggable\"),\n          o = inst.options,\n          uiSortable = $.extend({}, ui, {\n        item: inst.element\n      });\n      inst.sortables = [];\n      $(o.connectToSortable).each(function () {\n        var sortable = $.data(this, \"ui-sortable\");\n\n        if (sortable && !sortable.options.disabled) {\n          inst.sortables.push({\n            instance: sortable,\n            shouldRevert: sortable.options.revert\n          });\n          sortable.refreshPositions(); // Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).\n\n          sortable._trigger(\"activate\", event, uiSortable);\n        }\n      });\n    },\n    stop: function stop(event, ui) {\n      //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper\n      var inst = $(this).data(\"ui-draggable\"),\n          uiSortable = $.extend({}, ui, {\n        item: inst.element\n      });\n      $.each(inst.sortables, function () {\n        if (this.instance.isOver) {\n          this.instance.isOver = 0;\n          inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance\n\n          this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)\n          //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: \"valid/invalid\"\n\n          if (this.shouldRevert) {\n            this.instance.options.revert = true;\n          } //Trigger the stop of the sortable\n\n\n          this.instance._mouseStop(event);\n\n          this.instance.options.helper = this.instance.options._helper; //If the helper has been the original item, restore properties in the sortable\n\n          if (inst.options.helper === \"original\") {\n            this.instance.currentItem.css({\n              top: \"auto\",\n              left: \"auto\"\n            });\n          }\n        } else {\n          this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance\n\n          this.instance._trigger(\"deactivate\", event, uiSortable);\n        }\n      });\n    },\n    drag: function drag(event, ui) {\n      var inst = $(this).data(\"ui-draggable\"),\n          that = this;\n      $.each(inst.sortables, function () {\n        var innermostIntersecting = false,\n            thisSortable = this; //Copy over some variables to allow calling the sortable's native _intersectsWith\n\n        this.instance.positionAbs = inst.positionAbs;\n        this.instance.helperProportions = inst.helperProportions;\n        this.instance.offset.click = inst.offset.click;\n\n        if (this.instance._intersectsWith(this.instance.containerCache)) {\n          innermostIntersecting = true;\n          $.each(inst.sortables, function () {\n            this.instance.positionAbs = inst.positionAbs;\n            this.instance.helperProportions = inst.helperProportions;\n            this.instance.offset.click = inst.offset.click;\n\n            if (this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0])) {\n              innermostIntersecting = false;\n            }\n\n            return innermostIntersecting;\n          });\n        }\n\n        if (innermostIntersecting) {\n          //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once\n          if (!this.instance.isOver) {\n            this.instance.isOver = 1; //Now we fake the start of dragging for the sortable instance,\n            //by cloning the list group item, appending it to the sortable and using it as inst.currentItem\n            //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)\n\n            this.instance.currentItem = $(that).clone().removeAttr(\"id\").appendTo(this.instance.element).data(\"ui-sortable-item\", true);\n            this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it\n\n            this.instance.options.helper = function () {\n              return ui.helper[0];\n            };\n\n            event.target = this.instance.currentItem[0];\n\n            this.instance._mouseCapture(event, true);\n\n            this.instance._mouseStart(event, true, true); //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes\n\n\n            this.instance.offset.click.top = inst.offset.click.top;\n            this.instance.offset.click.left = inst.offset.click.left;\n            this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;\n            this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;\n\n            inst._trigger(\"toSortable\", event);\n\n            inst.dropped = this.instance.element; //draggable revert needs that\n            //hack so receive/update callbacks work (mostly)\n\n            inst.currentItem = inst.element;\n            this.instance.fromOutside = inst;\n          } //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable\n\n\n          if (this.instance.currentItem) {\n            this.instance._mouseDrag(event);\n          }\n        } else {\n          //If it doesn't intersect with the sortable, and it intersected before,\n          //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval\n          if (this.instance.isOver) {\n            this.instance.isOver = 0;\n            this.instance.cancelHelperRemoval = true; //Prevent reverting on this forced stop\n\n            this.instance.options.revert = false; // The out event needs to be triggered independently\n\n            this.instance._trigger(\"out\", event, this.instance._uiHash(this.instance));\n\n            this.instance._mouseStop(event, true);\n\n            this.instance.options.helper = this.instance.options._helper; //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size\n\n            this.instance.currentItem.remove();\n\n            if (this.instance.placeholder) {\n              this.instance.placeholder.remove();\n            }\n\n            inst._trigger(\"fromSortable\", event);\n\n            inst.dropped = false; //draggable revert needs that\n          }\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"cursor\", {\n    start: function start() {\n      var t = $(\"body\"),\n          o = $(this).data(\"ui-draggable\").options;\n\n      if (t.css(\"cursor\")) {\n        o._cursor = t.css(\"cursor\");\n      }\n\n      t.css(\"cursor\", o.cursor);\n    },\n    stop: function stop() {\n      var o = $(this).data(\"ui-draggable\").options;\n\n      if (o._cursor) {\n        $(\"body\").css(\"cursor\", o._cursor);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"opacity\", {\n    start: function start(event, ui) {\n      var t = $(ui.helper),\n          o = $(this).data(\"ui-draggable\").options;\n\n      if (t.css(\"opacity\")) {\n        o._opacity = t.css(\"opacity\");\n      }\n\n      t.css(\"opacity\", o.opacity);\n    },\n    stop: function stop(event, ui) {\n      var o = $(this).data(\"ui-draggable\").options;\n\n      if (o._opacity) {\n        $(ui.helper).css(\"opacity\", o._opacity);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"scroll\", {\n    start: function start() {\n      var i = $(this).data(\"ui-draggable\");\n\n      if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== \"HTML\") {\n        i.overflowOffset = i.scrollParent.offset();\n      }\n    },\n    drag: function drag(event) {\n      var i = $(this).data(\"ui-draggable\"),\n          o = i.options,\n          scrolled = false;\n\n      if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== \"HTML\") {\n        if (!o.axis || o.axis !== \"x\") {\n          if (i.overflowOffset.top + i.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {\n            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;\n          } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (i.overflowOffset.left + i.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {\n            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;\n          }\n        }\n      } else {\n        if (!o.axis || o.axis !== \"x\") {\n          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n          }\n        }\n      }\n\n      if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(i, event);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"snap\", {\n    start: function start() {\n      var i = $(this).data(\"ui-draggable\"),\n          o = i.options;\n      i.snapElements = [];\n      $(o.snap.constructor !== String ? o.snap.items || \":data(ui-draggable)\" : o.snap).each(function () {\n        var $t = $(this),\n            $o = $t.offset();\n\n        if (this !== i.element[0]) {\n          i.snapElements.push({\n            item: this,\n            width: $t.outerWidth(),\n            height: $t.outerHeight(),\n            top: $o.top,\n            left: $o.left\n          });\n        }\n      });\n    },\n    drag: function drag(event, ui) {\n      var ts,\n          bs,\n          ls,\n          rs,\n          l,\n          r,\n          t,\n          b,\n          i,\n          first,\n          inst = $(this).data(\"ui-draggable\"),\n          o = inst.options,\n          d = o.snapTolerance,\n          x1 = ui.offset.left,\n          x2 = x1 + inst.helperProportions.width,\n          y1 = ui.offset.top,\n          y2 = y1 + inst.helperProportions.height;\n\n      for (i = inst.snapElements.length - 1; i >= 0; i--) {\n        l = inst.snapElements[i].left;\n        r = l + inst.snapElements[i].width;\n        t = inst.snapElements[i].top;\n        b = t + inst.snapElements[i].height; //Yes, I know, this is insane ;)\n\n        if (!(l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d || l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d || l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d || l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d)) {\n          if (inst.snapElements[i].snapping) {\n            inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {\n              snapItem: inst.snapElements[i].item\n            }));\n          }\n\n          inst.snapElements[i].snapping = false;\n          continue;\n        }\n\n        if (o.snapMode !== \"inner\") {\n          ts = Math.abs(t - y2) <= d;\n          bs = Math.abs(b - y1) <= d;\n          ls = Math.abs(l - x2) <= d;\n          rs = Math.abs(r - x1) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t - inst.helperProportions.height,\n              left: 0\n            }).top - inst.margins.top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b,\n              left: 0\n            }).top - inst.margins.top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l - inst.helperProportions.width\n            }).left - inst.margins.left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r\n            }).left - inst.margins.left;\n          }\n        }\n\n        first = ts || bs || ls || rs;\n\n        if (o.snapMode !== \"outer\") {\n          ts = Math.abs(t - y1) <= d;\n          bs = Math.abs(b - y2) <= d;\n          ls = Math.abs(l - x1) <= d;\n          rs = Math.abs(r - x2) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t,\n              left: 0\n            }).top - inst.margins.top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b - inst.helperProportions.height,\n              left: 0\n            }).top - inst.margins.top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l\n            }).left - inst.margins.left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r - inst.helperProportions.width\n            }).left - inst.margins.left;\n          }\n        }\n\n        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n          inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {\n            snapItem: inst.snapElements[i].item\n          }));\n        }\n\n        inst.snapElements[i].snapping = ts || bs || ls || rs || first;\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"stack\", {\n    start: function start() {\n      var min,\n          o = this.data(\"ui-draggable\").options,\n          group = $.makeArray($(o.stack)).sort(function (a, b) {\n        return (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n      });\n\n      if (!group.length) {\n        return;\n      }\n\n      min = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n      $(group).each(function (i) {\n        $(this).css(\"zIndex\", min + i);\n      });\n      this.css(\"zIndex\", min + group.length);\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"zIndex\", {\n    start: function start(event, ui) {\n      var t = $(ui.helper),\n          o = $(this).data(\"ui-draggable\").options;\n\n      if (t.css(\"zIndex\")) {\n        o._zIndex = t.css(\"zIndex\");\n      }\n\n      t.css(\"zIndex\", o.zIndex);\n    },\n    stop: function stop(event, ui) {\n      var o = $(this).data(\"ui-draggable\").options;\n\n      if (o._zIndex) {\n        $(ui.helper).css(\"zIndex\", o._zIndex);\n      }\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  function isOverAxis(x, reference, size) {\n    return x > reference && x < reference + size;\n  }\n\n  $.widget(\"ui.droppable\", {\n    version: \"1.10.1\",\n    widgetEventPrefix: \"drop\",\n    options: {\n      accept: \"*\",\n      activeClass: false,\n      addClasses: true,\n      greedy: false,\n      hoverClass: false,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      // callbacks\n      activate: null,\n      deactivate: null,\n      drop: null,\n      out: null,\n      over: null\n    },\n    _create: function _create() {\n      var o = this.options,\n          accept = o.accept;\n      this.isover = false;\n      this.isout = true;\n      this.accept = $.isFunction(accept) ? accept : function (d) {\n        return d.is(accept);\n      }; //Store the droppable's proportions\n\n      this.proportions = {\n        width: this.element[0].offsetWidth,\n        height: this.element[0].offsetHeight\n      }; // Add the reference and positions to the manager\n\n      $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];\n      $.ui.ddmanager.droppables[o.scope].push(this);\n      o.addClasses && this.element.addClass(\"ui-droppable\");\n    },\n    _destroy: function _destroy() {\n      var i = 0,\n          drop = $.ui.ddmanager.droppables[this.options.scope];\n\n      for (; i < drop.length; i++) {\n        if (drop[i] === this) {\n          drop.splice(i, 1);\n        }\n      }\n\n      this.element.removeClass(\"ui-droppable ui-droppable-disabled\");\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"accept\") {\n        this.accept = $.isFunction(value) ? value : function (d) {\n          return d.is(value);\n        };\n      }\n\n      $.Widget.prototype._setOption.apply(this, arguments);\n    },\n    _activate: function _activate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      if (this.options.activeClass) {\n        this.element.addClass(this.options.activeClass);\n      }\n\n      if (draggable) {\n        this._trigger(\"activate\", event, this.ui(draggable));\n      }\n    },\n    _deactivate: function _deactivate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      if (this.options.activeClass) {\n        this.element.removeClass(this.options.activeClass);\n      }\n\n      if (draggable) {\n        this._trigger(\"deactivate\", event, this.ui(draggable));\n      }\n    },\n    _over: function _over(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.hoverClass) {\n          this.element.addClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"over\", event, this.ui(draggable));\n      }\n    },\n    _out: function _out(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"out\", event, this.ui(draggable));\n      }\n    },\n    _drop: function _drop(event, custom) {\n      var draggable = custom || $.ui.ddmanager.current,\n          childrenIntersection = false; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return false;\n      }\n\n      this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n        var inst = $.data(this, \"ui-droppable\");\n\n        if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {\n          offset: inst.element.offset()\n        }), inst.options.tolerance)) {\n          childrenIntersection = true;\n          return false;\n        }\n      });\n\n      if (childrenIntersection) {\n        return false;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.activeClass) {\n          this.element.removeClass(this.options.activeClass);\n        }\n\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"drop\", event, this.ui(draggable));\n\n        return this.element;\n      }\n\n      return false;\n    },\n    ui: function ui(c) {\n      return {\n        draggable: c.currentItem || c.element,\n        helper: c.helper,\n        position: c.position,\n        offset: c.positionAbs\n      };\n    }\n  });\n\n  $.ui.intersect = function (draggable, droppable, toleranceMode) {\n    if (!droppable.offset) {\n      return false;\n    }\n\n    var draggableLeft,\n        draggableTop,\n        x1 = (draggable.positionAbs || draggable.position.absolute).left,\n        x2 = x1 + draggable.helperProportions.width,\n        y1 = (draggable.positionAbs || draggable.position.absolute).top,\n        y2 = y1 + draggable.helperProportions.height,\n        l = droppable.offset.left,\n        r = l + droppable.proportions.width,\n        t = droppable.offset.top,\n        b = t + droppable.proportions.height;\n\n    switch (toleranceMode) {\n      case \"fit\":\n        return l <= x1 && x2 <= r && t <= y1 && y2 <= b;\n\n      case \"intersect\":\n        return l < x1 + draggable.helperProportions.width / 2 && // Right Half\n        x2 - draggable.helperProportions.width / 2 < r && // Left Half\n        t < y1 + draggable.helperProportions.height / 2 && // Bottom Half\n        y2 - draggable.helperProportions.height / 2 < b;\n      // Top Half\n\n      case \"pointer\":\n        draggableLeft = (draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left;\n        draggableTop = (draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top;\n        return isOverAxis(draggableTop, t, droppable.proportions.height) && isOverAxis(draggableLeft, l, droppable.proportions.width);\n\n      case \"touch\":\n        return (y1 >= t && y1 <= b || // Top edge touching\n        y2 >= t && y2 <= b || // Bottom edge touching\n        y1 < t && y2 > b // Surrounded vertically\n        ) && (x1 >= l && x1 <= r || // Left edge touching\n        x2 >= l && x2 <= r || // Right edge touching\n        x1 < l && x2 > r // Surrounded horizontally\n        );\n\n      default:\n        return false;\n    }\n  };\n  /*\n  \tThis manager tracks offsets of draggables and droppables\n  */\n\n\n  $.ui.ddmanager = {\n    current: null,\n    droppables: {\n      \"default\": []\n    },\n    prepareOffsets: function prepareOffsets(t, event) {\n      var i,\n          j,\n          m = $.ui.ddmanager.droppables[t.options.scope] || [],\n          type = event ? event.type : null,\n          // workaround for #2317\n      list = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n\n      droppablesLoop: for (i = 0; i < m.length; i++) {\n        //No disabled and non-accepted\n        if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {\n          continue;\n        } // Filter out elements in the current dragged item\n\n\n        for (j = 0; j < list.length; j++) {\n          if (list[j] === m[i].element[0]) {\n            m[i].proportions.height = 0;\n            continue droppablesLoop;\n          }\n        }\n\n        m[i].visible = m[i].element.css(\"display\") !== \"none\";\n\n        if (!m[i].visible) {\n          continue;\n        } //Activate the droppable if used directly from draggables\n\n\n        if (type === \"mousedown\") {\n          m[i]._activate.call(m[i], event);\n        }\n\n        m[i].offset = m[i].element.offset();\n        m[i].proportions = {\n          width: m[i].element[0].offsetWidth,\n          height: m[i].element[0].offsetHeight\n        };\n      }\n    },\n    drop: function drop(draggable, event) {\n      var dropped = false;\n      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n        if (!this.options) {\n          return;\n        }\n\n        if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {\n          dropped = this._drop.call(this, event) || dropped;\n        }\n\n        if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n          this.isout = true;\n          this.isover = false;\n\n          this._deactivate.call(this, event);\n        }\n      });\n      return dropped;\n    },\n    dragStart: function dragStart(draggable, event) {\n      //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)\n      draggable.element.parentsUntil(\"body\").bind(\"scroll.droppable\", function () {\n        if (!draggable.options.refreshPositions) {\n          $.ui.ddmanager.prepareOffsets(draggable, event);\n        }\n      });\n    },\n    drag: function drag(draggable, event) {\n      //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.\n      if (draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      } //Run through all droppables and check their positions based on specific tolerance options\n\n\n      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n        if (this.options.disabled || this.greedyChild || !this.visible) {\n          return;\n        }\n\n        var parentInstance,\n            scope,\n            parent,\n            intersects = $.ui.intersect(draggable, this, this.options.tolerance),\n            c = !intersects && this.isover ? \"isout\" : intersects && !this.isover ? \"isover\" : null;\n\n        if (!c) {\n          return;\n        }\n\n        if (this.options.greedy) {\n          // find droppable parents with same scope\n          scope = this.options.scope;\n          parent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n            return $.data(this, \"ui-droppable\").options.scope === scope;\n          });\n\n          if (parent.length) {\n            parentInstance = $.data(parent[0], \"ui-droppable\");\n            parentInstance.greedyChild = c === \"isover\";\n          }\n        } // we just moved into a greedy child\n\n\n        if (parentInstance && c === \"isover\") {\n          parentInstance.isover = false;\n          parentInstance.isout = true;\n\n          parentInstance._out.call(parentInstance, event);\n        }\n\n        this[c] = true;\n        this[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n        this[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event); // we just moved out of a greedy child\n\n        if (parentInstance && c === \"isout\") {\n          parentInstance.isout = false;\n          parentInstance.isover = true;\n\n          parentInstance._over.call(parentInstance, event);\n        }\n      });\n    },\n    dragStop: function dragStop(draggable, event) {\n      draggable.element.parentsUntil(\"body\").unbind(\"scroll.droppable\"); //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)\n\n      if (!draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      }\n    }\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  function num(v) {\n    return parseInt(v, 10) || 0;\n  }\n\n  function isNumber(value) {\n    return !isNaN(parseInt(value, 10));\n  }\n\n  $.widget(\"ui.resizable\", $.ui.mouse, {\n    version: \"1.10.1\",\n    widgetEventPrefix: \"resize\",\n    options: {\n      alsoResize: false,\n      animate: false,\n      animateDuration: \"slow\",\n      animateEasing: \"swing\",\n      aspectRatio: false,\n      autoHide: false,\n      containment: false,\n      ghost: false,\n      grid: false,\n      handles: \"e,s,se\",\n      helper: false,\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 10,\n      minWidth: 10,\n      // See #7960\n      zIndex: 90,\n      // callbacks\n      resize: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      var n,\n          i,\n          handle,\n          axis,\n          hname,\n          that = this,\n          o = this.options;\n      this.element.addClass(\"ui-resizable\");\n      $.extend(this, {\n        _aspectRatio: !!o.aspectRatio,\n        aspectRatio: o.aspectRatio,\n        originalElement: this.element,\n        _proportionallyResizeElements: [],\n        _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n      }); //Wrap the element if it cannot hold child nodes\n\n      if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {\n        //Create a wrapper element and set the wrapper to the new current internal element\n        this.element.wrap($(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\n          position: this.element.css(\"position\"),\n          width: this.element.outerWidth(),\n          height: this.element.outerHeight(),\n          top: this.element.css(\"top\"),\n          left: this.element.css(\"left\")\n        })); //Overwrite the original this.element\n\n        this.element = this.element.parent().data(\"ui-resizable\", this.element.data(\"ui-resizable\"));\n        this.elementIsWrapper = true; //Move margins to the wrapper\n\n        this.element.css({\n          marginLeft: this.originalElement.css(\"marginLeft\"),\n          marginTop: this.originalElement.css(\"marginTop\"),\n          marginRight: this.originalElement.css(\"marginRight\"),\n          marginBottom: this.originalElement.css(\"marginBottom\")\n        });\n        this.originalElement.css({\n          marginLeft: 0,\n          marginTop: 0,\n          marginRight: 0,\n          marginBottom: 0\n        }); //Prevent Safari textarea resize\n\n        this.originalResizeStyle = this.originalElement.css(\"resize\");\n        this.originalElement.css(\"resize\", \"none\"); //Push the actual element to our proportionallyResize internal array\n\n        this._proportionallyResizeElements.push(this.originalElement.css({\n          position: \"static\",\n          zoom: 1,\n          display: \"block\"\n        })); // avoid IE jump (hard set the margin)\n\n\n        this.originalElement.css({\n          margin: this.originalElement.css(\"margin\")\n        }); // fix handlers offset\n\n        this._proportionallyResize();\n      }\n\n      this.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\n        n: \".ui-resizable-n\",\n        e: \".ui-resizable-e\",\n        s: \".ui-resizable-s\",\n        w: \".ui-resizable-w\",\n        se: \".ui-resizable-se\",\n        sw: \".ui-resizable-sw\",\n        ne: \".ui-resizable-ne\",\n        nw: \".ui-resizable-nw\"\n      });\n\n      if (this.handles.constructor === String) {\n        if (this.handles === \"all\") {\n          this.handles = \"n,e,s,w,se,sw,ne,nw\";\n        }\n\n        n = this.handles.split(\",\");\n        this.handles = {};\n\n        for (i = 0; i < n.length; i++) {\n          handle = $.trim(n[i]);\n          hname = \"ui-resizable-\" + handle;\n          axis = $(\"<div class='ui-resizable-handle \" + hname + \"'></div>\"); // Apply zIndex to all handles - see #7960\n\n          axis.css({\n            zIndex: o.zIndex\n          }); //TODO : What's going on here?\n\n          if (\"se\" === handle) {\n            axis.addClass(\"ui-icon ui-icon-gripsmall-diagonal-se\");\n          } //Insert into internal handles object and append to element\n\n\n          this.handles[handle] = \".ui-resizable-\" + handle;\n          this.element.append(axis);\n        }\n      }\n\n      this._renderAxis = function (target) {\n        var i, axis, padPos, padWrapper;\n        target = target || this.element;\n\n        for (i in this.handles) {\n          if (this.handles[i].constructor === String) {\n            this.handles[i] = $(this.handles[i], this.element).show();\n          } //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)\n\n\n          if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {\n            axis = $(this.handles[i], this.element); //Checking the correct pad and border\n\n            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth(); //The padding type i have to apply...\n\n            padPos = [\"padding\", /ne|nw|n/.test(i) ? \"Top\" : /se|sw|s/.test(i) ? \"Bottom\" : /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\n            target.css(padPos, padWrapper);\n\n            this._proportionallyResize();\n          } //TODO: What's that good for? There's not anything to be executed left\n\n\n          if (!$(this.handles[i]).length) {\n            continue;\n          }\n        }\n      }; //TODO: make renderAxis a prototype function\n\n\n      this._renderAxis(this.element);\n\n      this._handles = $(\".ui-resizable-handle\", this.element).disableSelection(); //Matching axis name\n\n      this._handles.mouseover(function () {\n        if (!that.resizing) {\n          if (this.className) {\n            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\n          } //Axis, default = se\n\n\n          that.axis = axis && axis[1] ? axis[1] : \"se\";\n        }\n      }); //If we want to auto hide the elements\n\n\n      if (o.autoHide) {\n        this._handles.hide();\n\n        $(this.element).addClass(\"ui-resizable-autohide\").mouseenter(function () {\n          if (o.disabled) {\n            return;\n          }\n\n          $(this).removeClass(\"ui-resizable-autohide\");\n\n          that._handles.show();\n        }).mouseleave(function () {\n          if (o.disabled) {\n            return;\n          }\n\n          if (!that.resizing) {\n            $(this).addClass(\"ui-resizable-autohide\");\n\n            that._handles.hide();\n          }\n        });\n      } //Initialize the mouse interaction\n\n\n      this._mouseInit();\n    },\n    _destroy: function _destroy() {\n      this._mouseDestroy();\n\n      var wrapper,\n          _destroy = function _destroy(exp) {\n        $(exp).removeClass(\"ui-resizable ui-resizable-disabled ui-resizable-resizing\").removeData(\"resizable\").removeData(\"ui-resizable\").unbind(\".resizable\").find(\".ui-resizable-handle\").remove();\n      }; //TODO: Unwrap at same DOM position\n\n\n      if (this.elementIsWrapper) {\n        _destroy(this.element);\n\n        wrapper = this.element;\n        this.originalElement.css({\n          position: wrapper.css(\"position\"),\n          width: wrapper.outerWidth(),\n          height: wrapper.outerHeight(),\n          top: wrapper.css(\"top\"),\n          left: wrapper.css(\"left\")\n        }).insertAfter(wrapper);\n        wrapper.remove();\n      }\n\n      this.originalElement.css(\"resize\", this.originalResizeStyle);\n\n      _destroy(this.originalElement);\n\n      return this;\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var i,\n          handle,\n          capture = false;\n\n      for (i in this.handles) {\n        handle = $(this.handles[i])[0];\n\n        if (handle === event.target || $.contains(handle, event.target)) {\n          capture = true;\n        }\n      }\n\n      return !this.options.disabled && capture;\n    },\n    _mouseStart: function _mouseStart(event) {\n      var curleft,\n          curtop,\n          cursor,\n          o = this.options,\n          iniPos = this.element.position(),\n          el = this.element;\n      this.resizing = true; // bugfix for http://dev.jquery.com/ticket/1749\n\n      if (/absolute/.test(el.css(\"position\"))) {\n        el.css({\n          position: \"absolute\",\n          top: el.css(\"top\"),\n          left: el.css(\"left\")\n        });\n      } else if (el.is(\".ui-draggable\")) {\n        el.css({\n          position: \"absolute\",\n          top: iniPos.top,\n          left: iniPos.left\n        });\n      }\n\n      this._renderProxy();\n\n      curleft = num(this.helper.css(\"left\"));\n      curtop = num(this.helper.css(\"top\"));\n\n      if (o.containment) {\n        curleft += $(o.containment).scrollLeft() || 0;\n        curtop += $(o.containment).scrollTop() || 0;\n      } //Store needed variables\n\n\n      this.offset = this.helper.offset();\n      this.position = {\n        left: curleft,\n        top: curtop\n      };\n      this.size = this._helper ? {\n        width: el.outerWidth(),\n        height: el.outerHeight()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.originalSize = this._helper ? {\n        width: el.outerWidth(),\n        height: el.outerHeight()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.originalPosition = {\n        left: curleft,\n        top: curtop\n      };\n      this.sizeDiff = {\n        width: el.outerWidth() - el.width(),\n        height: el.outerHeight() - el.height()\n      };\n      this.originalMousePosition = {\n        left: event.pageX,\n        top: event.pageY\n      }; //Aspect Ratio\n\n      this.aspectRatio = typeof o.aspectRatio === \"number\" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;\n      cursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\n      $(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\n      el.addClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"start\", event);\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      //Increase performance, avoid regex\n      var data,\n          el = this.helper,\n          props = {},\n          smp = this.originalMousePosition,\n          a = this.axis,\n          prevTop = this.position.top,\n          prevLeft = this.position.left,\n          prevWidth = this.size.width,\n          prevHeight = this.size.height,\n          dx = event.pageX - smp.left || 0,\n          dy = event.pageY - smp.top || 0,\n          trigger = this._change[a];\n\n      if (!trigger) {\n        return false;\n      } // Calculate the attrs that will be change\n\n\n      data = trigger.apply(this, [event, dx, dy]); // Put this in the mouseDrag handler since the user can start pressing shift while resizing\n\n      this._updateVirtualBoundaries(event.shiftKey);\n\n      if (this._aspectRatio || event.shiftKey) {\n        data = this._updateRatio(data, event);\n      }\n\n      data = this._respectSize(data, event);\n\n      this._updateCache(data); // plugins callbacks need to be called first\n\n\n      this._propagate(\"resize\", event);\n\n      if (this.position.top !== prevTop) {\n        props.top = this.position.top + \"px\";\n      }\n\n      if (this.position.left !== prevLeft) {\n        props.left = this.position.left + \"px\";\n      }\n\n      if (this.size.width !== prevWidth) {\n        props.width = this.size.width + \"px\";\n      }\n\n      if (this.size.height !== prevHeight) {\n        props.height = this.size.height + \"px\";\n      }\n\n      el.css(props);\n\n      if (!this._helper && this._proportionallyResizeElements.length) {\n        this._proportionallyResize();\n      } // Call the user callback if the element was resized\n\n\n      if (!$.isEmptyObject(props)) {\n        this._trigger(\"resize\", event, this.ui());\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this.resizing = false;\n      var pr,\n          ista,\n          soffseth,\n          soffsetw,\n          s,\n          left,\n          top,\n          o = this.options,\n          that = this;\n\n      if (this._helper) {\n        pr = this._proportionallyResizeElements;\n        ista = pr.length && /textarea/i.test(pr[0].nodeName);\n        soffseth = ista && $.ui.hasScroll(pr[0], \"left\")\n        /* TODO - jump height */\n        ? 0 : that.sizeDiff.height;\n        soffsetw = ista ? 0 : that.sizeDiff.width;\n        s = {\n          width: that.helper.width() - soffsetw,\n          height: that.helper.height() - soffseth\n        };\n        left = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null;\n        top = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n\n        if (!o.animate) {\n          this.element.css($.extend(s, {\n            top: top,\n            left: left\n          }));\n        }\n\n        that.helper.height(that.size.height);\n        that.helper.width(that.size.width);\n\n        if (this._helper && !o.animate) {\n          this._proportionallyResize();\n        }\n      }\n\n      $(\"body\").css(\"cursor\", \"auto\");\n      this.element.removeClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"stop\", event);\n\n      if (this._helper) {\n        this.helper.remove();\n      }\n\n      return false;\n    },\n    _updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {\n      var pMinWidth,\n          pMaxWidth,\n          pMinHeight,\n          pMaxHeight,\n          b,\n          o = this.options;\n      b = {\n        minWidth: isNumber(o.minWidth) ? o.minWidth : 0,\n        maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,\n        minHeight: isNumber(o.minHeight) ? o.minHeight : 0,\n        maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity\n      };\n\n      if (this._aspectRatio || forceAspectRatio) {\n        // We want to create an enclosing box whose aspect ration is the requested one\n        // First, compute the \"projected\" size for each dimension based on the aspect ratio and other dimension\n        pMinWidth = b.minHeight * this.aspectRatio;\n        pMinHeight = b.minWidth / this.aspectRatio;\n        pMaxWidth = b.maxHeight * this.aspectRatio;\n        pMaxHeight = b.maxWidth / this.aspectRatio;\n\n        if (pMinWidth > b.minWidth) {\n          b.minWidth = pMinWidth;\n        }\n\n        if (pMinHeight > b.minHeight) {\n          b.minHeight = pMinHeight;\n        }\n\n        if (pMaxWidth < b.maxWidth) {\n          b.maxWidth = pMaxWidth;\n        }\n\n        if (pMaxHeight < b.maxHeight) {\n          b.maxHeight = pMaxHeight;\n        }\n      }\n\n      this._vBoundaries = b;\n    },\n    _updateCache: function _updateCache(data) {\n      this.offset = this.helper.offset();\n\n      if (isNumber(data.left)) {\n        this.position.left = data.left;\n      }\n\n      if (isNumber(data.top)) {\n        this.position.top = data.top;\n      }\n\n      if (isNumber(data.height)) {\n        this.size.height = data.height;\n      }\n\n      if (isNumber(data.width)) {\n        this.size.width = data.width;\n      }\n    },\n    _updateRatio: function _updateRatio(data) {\n      var cpos = this.position,\n          csize = this.size,\n          a = this.axis;\n\n      if (isNumber(data.height)) {\n        data.width = data.height * this.aspectRatio;\n      } else if (isNumber(data.width)) {\n        data.height = data.width / this.aspectRatio;\n      }\n\n      if (a === \"sw\") {\n        data.left = cpos.left + (csize.width - data.width);\n        data.top = null;\n      }\n\n      if (a === \"nw\") {\n        data.top = cpos.top + (csize.height - data.height);\n        data.left = cpos.left + (csize.width - data.width);\n      }\n\n      return data;\n    },\n    _respectSize: function _respectSize(data) {\n      var o = this._vBoundaries,\n          a = this.axis,\n          ismaxw = isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,\n          ismaxh = isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,\n          isminw = isNumber(data.width) && o.minWidth && o.minWidth > data.width,\n          isminh = isNumber(data.height) && o.minHeight && o.minHeight > data.height,\n          dw = this.originalPosition.left + this.originalSize.width,\n          dh = this.position.top + this.size.height,\n          cw = /sw|nw|w/.test(a),\n          ch = /nw|ne|n/.test(a);\n\n      if (isminw) {\n        data.width = o.minWidth;\n      }\n\n      if (isminh) {\n        data.height = o.minHeight;\n      }\n\n      if (ismaxw) {\n        data.width = o.maxWidth;\n      }\n\n      if (ismaxh) {\n        data.height = o.maxHeight;\n      }\n\n      if (isminw && cw) {\n        data.left = dw - o.minWidth;\n      }\n\n      if (ismaxw && cw) {\n        data.left = dw - o.maxWidth;\n      }\n\n      if (isminh && ch) {\n        data.top = dh - o.minHeight;\n      }\n\n      if (ismaxh && ch) {\n        data.top = dh - o.maxHeight;\n      } // fixing jump error on top/left - bug #2330\n\n\n      if (!data.width && !data.height && !data.left && data.top) {\n        data.top = null;\n      } else if (!data.width && !data.height && !data.top && data.left) {\n        data.left = null;\n      }\n\n      return data;\n    },\n    _proportionallyResize: function _proportionallyResize() {\n      if (!this._proportionallyResizeElements.length) {\n        return;\n      }\n\n      var i,\n          j,\n          borders,\n          paddings,\n          prel,\n          element = this.helper || this.element;\n\n      for (i = 0; i < this._proportionallyResizeElements.length; i++) {\n        prel = this._proportionallyResizeElements[i];\n\n        if (!this.borderDif) {\n          this.borderDif = [];\n          borders = [prel.css(\"borderTopWidth\"), prel.css(\"borderRightWidth\"), prel.css(\"borderBottomWidth\"), prel.css(\"borderLeftWidth\")];\n          paddings = [prel.css(\"paddingTop\"), prel.css(\"paddingRight\"), prel.css(\"paddingBottom\"), prel.css(\"paddingLeft\")];\n\n          for (j = 0; j < borders.length; j++) {\n            this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);\n          }\n        }\n\n        prel.css({\n          height: element.height() - this.borderDif[0] - this.borderDif[2] || 0,\n          width: element.width() - this.borderDif[1] - this.borderDif[3] || 0\n        });\n      }\n    },\n    _renderProxy: function _renderProxy() {\n      var el = this.element,\n          o = this.options;\n      this.elementOffset = el.offset();\n\n      if (this._helper) {\n        this.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\n        this.helper.addClass(this._helper).css({\n          width: this.element.outerWidth() - 1,\n          height: this.element.outerHeight() - 1,\n          position: \"absolute\",\n          left: this.elementOffset.left + \"px\",\n          top: this.elementOffset.top + \"px\",\n          zIndex: ++o.zIndex //TODO: Don't modify option\n\n        });\n        this.helper.appendTo(\"body\").disableSelection();\n      } else {\n        this.helper = this.element;\n      }\n    },\n    _change: {\n      e: function e(event, dx) {\n        return {\n          width: this.originalSize.width + dx\n        };\n      },\n      w: function w(event, dx) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          left: sp.left + dx,\n          width: cs.width - dx\n        };\n      },\n      n: function n(event, dx, dy) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          top: sp.top + dy,\n          height: cs.height - dy\n        };\n      },\n      s: function s(event, dx, dy) {\n        return {\n          height: this.originalSize.height + dy\n        };\n      },\n      se: function se(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      sw: function sw(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      },\n      ne: function ne(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      nw: function nw(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      }\n    },\n    _propagate: function _propagate(n, event) {\n      $.ui.plugin.call(this, n, [event, this.ui()]);\n      n !== \"resize\" && this._trigger(n, event, this.ui());\n    },\n    plugins: {},\n    ui: function ui() {\n      return {\n        originalElement: this.originalElement,\n        element: this.element,\n        helper: this.helper,\n        position: this.position,\n        size: this.size,\n        originalSize: this.originalSize,\n        originalPosition: this.originalPosition\n      };\n    }\n  });\n  /*\n   * Resizable Extensions\n   */\n\n  $.ui.plugin.add(\"resizable\", \"animate\", {\n    stop: function stop(event) {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          pr = that._proportionallyResizeElements,\n          ista = pr.length && /textarea/i.test(pr[0].nodeName),\n          soffseth = ista && $.ui.hasScroll(pr[0], \"left\")\n      /* TODO - jump height */\n      ? 0 : that.sizeDiff.height,\n          soffsetw = ista ? 0 : that.sizeDiff.width,\n          style = {\n        width: that.size.width - soffsetw,\n        height: that.size.height - soffseth\n      },\n          left = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null,\n          top = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n      that.element.animate($.extend(style, top && left ? {\n        top: top,\n        left: left\n      } : {}), {\n        duration: o.animateDuration,\n        easing: o.animateEasing,\n        step: function step() {\n          var data = {\n            width: parseInt(that.element.css(\"width\"), 10),\n            height: parseInt(that.element.css(\"height\"), 10),\n            top: parseInt(that.element.css(\"top\"), 10),\n            left: parseInt(that.element.css(\"left\"), 10)\n          };\n\n          if (pr && pr.length) {\n            $(pr[0]).css({\n              width: data.width,\n              height: data.height\n            });\n          } // propagating resize, and updating values for each animation step\n\n\n          that._updateCache(data);\n\n          that._propagate(\"resize\", event);\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"containment\", {\n    start: function start() {\n      var element,\n          p,\n          co,\n          ch,\n          cw,\n          width,\n          height,\n          that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          el = that.element,\n          oc = o.containment,\n          ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;\n\n      if (!ce) {\n        return;\n      }\n\n      that.containerElement = $(ce);\n\n      if (/document/.test(oc) || oc === document) {\n        that.containerOffset = {\n          left: 0,\n          top: 0\n        };\n        that.containerPosition = {\n          left: 0,\n          top: 0\n        };\n        that.parentData = {\n          element: $(document),\n          left: 0,\n          top: 0,\n          width: $(document).width(),\n          height: $(document).height() || document.body.parentNode.scrollHeight\n        };\n      } // i'm a node, so compute top, left, right, bottom\n      else {\n          element = $(ce);\n          p = [];\n          $([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\n            p[i] = num(element.css(\"padding\" + name));\n          });\n          that.containerOffset = element.offset();\n          that.containerPosition = element.position();\n          that.containerSize = {\n            height: element.innerHeight() - p[3],\n            width: element.innerWidth() - p[1]\n          };\n          co = that.containerOffset;\n          ch = that.containerSize.height;\n          cw = that.containerSize.width;\n          width = $.ui.hasScroll(ce, \"left\") ? ce.scrollWidth : cw;\n          height = $.ui.hasScroll(ce) ? ce.scrollHeight : ch;\n          that.parentData = {\n            element: ce,\n            left: co.left,\n            top: co.top,\n            width: width,\n            height: height\n          };\n        }\n    },\n    resize: function resize(event) {\n      var woset,\n          hoset,\n          isParent,\n          isOffsetRelative,\n          that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          co = that.containerOffset,\n          cp = that.position,\n          pRatio = that._aspectRatio || event.shiftKey,\n          cop = {\n        top: 0,\n        left: 0\n      },\n          ce = that.containerElement;\n\n      if (ce[0] !== document && /static/.test(ce.css(\"position\"))) {\n        cop = co;\n      }\n\n      if (cp.left < (that._helper ? co.left : 0)) {\n        that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n        }\n\n        that.position.left = o.helper ? co.left : 0;\n      }\n\n      if (cp.top < (that._helper ? co.top : 0)) {\n        that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n        }\n\n        that.position.top = that._helper ? co.top : 0;\n      }\n\n      that.offset.left = that.parentData.left + that.position.left;\n      that.offset.top = that.parentData.top + that.position.top;\n      woset = Math.abs((that._helper ? that.offset.left - cop.left : that.offset.left - cop.left) + that.sizeDiff.width);\n      hoset = Math.abs((that._helper ? that.offset.top - cop.top : that.offset.top - co.top) + that.sizeDiff.height);\n      isParent = that.containerElement.get(0) === that.element.parent().get(0);\n      isOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\n\n      if (isParent && isOffsetRelative) {\n        woset -= that.parentData.left;\n      }\n\n      if (woset + that.size.width >= that.parentData.width) {\n        that.size.width = that.parentData.width - woset;\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n        }\n      }\n\n      if (hoset + that.size.height >= that.parentData.height) {\n        that.size.height = that.parentData.height - hoset;\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n        }\n      }\n    },\n    stop: function stop() {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          co = that.containerOffset,\n          cop = that.containerPosition,\n          ce = that.containerElement,\n          helper = $(that.helper),\n          ho = helper.offset(),\n          w = helper.outerWidth() - that.sizeDiff.width,\n          h = helper.outerHeight() - that.sizeDiff.height;\n\n      if (that._helper && !o.animate && /relative/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n\n      if (that._helper && !o.animate && /static/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"alsoResize\", {\n    start: function start() {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          _store = function _store(exp) {\n        $(exp).each(function () {\n          var el = $(this);\n          el.data(\"ui-resizable-alsoresize\", {\n            width: parseInt(el.width(), 10),\n            height: parseInt(el.height(), 10),\n            left: parseInt(el.css(\"left\"), 10),\n            top: parseInt(el.css(\"top\"), 10)\n          });\n        });\n      };\n\n      if (_typeof(o.alsoResize) === \"object\" && !o.alsoResize.parentNode) {\n        if (o.alsoResize.length) {\n          o.alsoResize = o.alsoResize[0];\n\n          _store(o.alsoResize);\n        } else {\n          $.each(o.alsoResize, function (exp) {\n            _store(exp);\n          });\n        }\n      } else {\n        _store(o.alsoResize);\n      }\n    },\n    resize: function resize(event, ui) {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          os = that.originalSize,\n          op = that.originalPosition,\n          delta = {\n        height: that.size.height - os.height || 0,\n        width: that.size.width - os.width || 0,\n        top: that.position.top - op.top || 0,\n        left: that.position.left - op.left || 0\n      },\n          _alsoResize = function _alsoResize(exp, c) {\n        $(exp).each(function () {\n          var el = $(this),\n              start = $(this).data(\"ui-resizable-alsoresize\"),\n              style = {},\n              css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\n          $.each(css, function (i, prop) {\n            var sum = (start[prop] || 0) + (delta[prop] || 0);\n\n            if (sum && sum >= 0) {\n              style[prop] = sum || null;\n            }\n          });\n          el.css(style);\n        });\n      };\n\n      if (_typeof(o.alsoResize) === \"object\" && !o.alsoResize.nodeType) {\n        $.each(o.alsoResize, function (exp, c) {\n          _alsoResize(exp, c);\n        });\n      } else {\n        _alsoResize(o.alsoResize);\n      }\n    },\n    stop: function stop() {\n      $(this).removeData(\"resizable-alsoresize\");\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"ghost\", {\n    start: function start() {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          cs = that.size;\n      that.ghost = that.originalElement.clone();\n      that.ghost.css({\n        opacity: 0.25,\n        display: \"block\",\n        position: \"relative\",\n        height: cs.height,\n        width: cs.width,\n        margin: 0,\n        left: 0,\n        top: 0\n      }).addClass(\"ui-resizable-ghost\").addClass(typeof o.ghost === \"string\" ? o.ghost : \"\");\n      that.ghost.appendTo(that.helper);\n    },\n    resize: function resize() {\n      var that = $(this).data(\"ui-resizable\");\n\n      if (that.ghost) {\n        that.ghost.css({\n          position: \"relative\",\n          height: that.size.height,\n          width: that.size.width\n        });\n      }\n    },\n    stop: function stop() {\n      var that = $(this).data(\"ui-resizable\");\n\n      if (that.ghost && that.helper) {\n        that.helper.get(0).removeChild(that.ghost.get(0));\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"grid\", {\n    resize: function resize() {\n      var that = $(this).data(\"ui-resizable\"),\n          o = that.options,\n          cs = that.size,\n          os = that.originalSize,\n          op = that.originalPosition,\n          a = that.axis,\n          grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\n          gridX = grid[0] || 1,\n          gridY = grid[1] || 1,\n          ox = Math.round((cs.width - os.width) / gridX) * gridX,\n          oy = Math.round((cs.height - os.height) / gridY) * gridY,\n          newWidth = os.width + ox,\n          newHeight = os.height + oy,\n          isMaxWidth = o.maxWidth && o.maxWidth < newWidth,\n          isMaxHeight = o.maxHeight && o.maxHeight < newHeight,\n          isMinWidth = o.minWidth && o.minWidth > newWidth,\n          isMinHeight = o.minHeight && o.minHeight > newHeight;\n      o.grid = grid;\n\n      if (isMinWidth) {\n        newWidth = newWidth + gridX;\n      }\n\n      if (isMinHeight) {\n        newHeight = newHeight + gridY;\n      }\n\n      if (isMaxWidth) {\n        newWidth = newWidth - gridX;\n      }\n\n      if (isMaxHeight) {\n        newHeight = newHeight - gridY;\n      }\n\n      if (/^(se|s|e)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n      } else if (/^(ne)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.top = op.top - oy;\n      } else if (/^(sw)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.left = op.left - ox;\n      } else {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.top = op.top - oy;\n        that.position.left = op.left - ox;\n      }\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  $.widget(\"ui.selectable\", $.ui.mouse, {\n    version: \"1.10.1\",\n    options: {\n      appendTo: \"body\",\n      autoRefresh: true,\n      distance: 0,\n      filter: \"*\",\n      tolerance: \"touch\",\n      // callbacks\n      selected: null,\n      selecting: null,\n      start: null,\n      stop: null,\n      unselected: null,\n      unselecting: null\n    },\n    _create: function _create() {\n      var selectees,\n          that = this;\n      this.element.addClass(\"ui-selectable\");\n      this.dragged = false; // cache selectee children based on filter\n\n      this.refresh = function () {\n        selectees = $(that.options.filter, that.element[0]);\n        selectees.addClass(\"ui-selectee\");\n        selectees.each(function () {\n          var $this = $(this),\n              pos = $this.offset();\n          $.data(this, \"selectable-item\", {\n            element: this,\n            $element: $this,\n            left: pos.left,\n            top: pos.top,\n            right: pos.left + $this.outerWidth(),\n            bottom: pos.top + $this.outerHeight(),\n            startselected: false,\n            selected: $this.hasClass(\"ui-selected\"),\n            selecting: $this.hasClass(\"ui-selecting\"),\n            unselecting: $this.hasClass(\"ui-unselecting\")\n          });\n        });\n      };\n\n      this.refresh();\n      this.selectees = selectees.addClass(\"ui-selectee\");\n\n      this._mouseInit();\n\n      this.helper = $(\"<div class='ui-selectable-helper'></div>\");\n    },\n    _destroy: function _destroy() {\n      this.selectees.removeClass(\"ui-selectee\").removeData(\"selectable-item\");\n      this.element.removeClass(\"ui-selectable ui-selectable-disabled\");\n\n      this._mouseDestroy();\n    },\n    _mouseStart: function _mouseStart(event) {\n      var that = this,\n          options = this.options;\n      this.opos = [event.pageX, event.pageY];\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      this.selectees = $(options.filter, this.element[0]);\n\n      this._trigger(\"start\", event);\n\n      $(options.appendTo).append(this.helper); // position helper (lasso)\n\n      this.helper.css({\n        \"left\": event.pageX,\n        \"top\": event.pageY,\n        \"width\": 0,\n        \"height\": 0\n      });\n\n      if (options.autoRefresh) {\n        this.refresh();\n      }\n\n      this.selectees.filter(\".ui-selected\").each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.startselected = true;\n\n        if (!event.metaKey && !event.ctrlKey) {\n          selectee.$element.removeClass(\"ui-selected\");\n          selectee.selected = false;\n          selectee.$element.addClass(\"ui-unselecting\");\n          selectee.unselecting = true; // selectable UNSELECTING callback\n\n          that._trigger(\"unselecting\", event, {\n            unselecting: selectee.element\n          });\n        }\n      });\n      $(event.target).parents().addBack().each(function () {\n        var doSelect,\n            selectee = $.data(this, \"selectable-item\");\n\n        if (selectee) {\n          doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass(\"ui-selected\");\n          selectee.$element.removeClass(doSelect ? \"ui-unselecting\" : \"ui-selected\").addClass(doSelect ? \"ui-selecting\" : \"ui-unselecting\");\n          selectee.unselecting = !doSelect;\n          selectee.selecting = doSelect;\n          selectee.selected = doSelect; // selectable (UN)SELECTING callback\n\n          if (doSelect) {\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          } else {\n            that._trigger(\"unselecting\", event, {\n              unselecting: selectee.element\n            });\n          }\n\n          return false;\n        }\n      });\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      this.dragged = true;\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      var tmp,\n          that = this,\n          options = this.options,\n          x1 = this.opos[0],\n          y1 = this.opos[1],\n          x2 = event.pageX,\n          y2 = event.pageY;\n\n      if (x1 > x2) {\n        tmp = x2;\n        x2 = x1;\n        x1 = tmp;\n      }\n\n      if (y1 > y2) {\n        tmp = y2;\n        y2 = y1;\n        y1 = tmp;\n      }\n\n      this.helper.css({\n        left: x1,\n        top: y1,\n        width: x2 - x1,\n        height: y2 - y1\n      });\n      this.selectees.each(function () {\n        var selectee = $.data(this, \"selectable-item\"),\n            hit = false; //prevent helper from being selected if appendTo: selectable\n\n        if (!selectee || selectee.element === that.element[0]) {\n          return;\n        }\n\n        if (options.tolerance === \"touch\") {\n          hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);\n        } else if (options.tolerance === \"fit\") {\n          hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;\n        }\n\n        if (hit) {\n          // SELECT\n          if (selectee.selected) {\n            selectee.$element.removeClass(\"ui-selected\");\n            selectee.selected = false;\n          }\n\n          if (selectee.unselecting) {\n            selectee.$element.removeClass(\"ui-unselecting\");\n            selectee.unselecting = false;\n          }\n\n          if (!selectee.selecting) {\n            selectee.$element.addClass(\"ui-selecting\");\n            selectee.selecting = true; // selectable SELECTING callback\n\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          }\n        } else {\n          // UNSELECT\n          if (selectee.selecting) {\n            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {\n              selectee.$element.removeClass(\"ui-selecting\");\n              selectee.selecting = false;\n              selectee.$element.addClass(\"ui-selected\");\n              selectee.selected = true;\n            } else {\n              selectee.$element.removeClass(\"ui-selecting\");\n              selectee.selecting = false;\n\n              if (selectee.startselected) {\n                selectee.$element.addClass(\"ui-unselecting\");\n                selectee.unselecting = true;\n              } // selectable UNSELECTING callback\n\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n\n          if (selectee.selected) {\n            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\n              selectee.$element.removeClass(\"ui-selected\");\n              selectee.selected = false;\n              selectee.$element.addClass(\"ui-unselecting\");\n              selectee.unselecting = true; // selectable UNSELECTING callback\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n        }\n      });\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      var that = this;\n      this.dragged = false;\n      $(\".ui-unselecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.$element.removeClass(\"ui-unselecting\");\n        selectee.unselecting = false;\n        selectee.startselected = false;\n\n        that._trigger(\"unselected\", event, {\n          unselected: selectee.element\n        });\n      });\n      $(\".ui-selecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.$element.removeClass(\"ui-selecting\").addClass(\"ui-selected\");\n        selectee.selecting = false;\n        selectee.selected = true;\n        selectee.startselected = true;\n\n        that._trigger(\"selected\", event, {\n          selected: selectee.element\n        });\n      });\n\n      this._trigger(\"stop\", event);\n\n      this.helper.remove();\n      return false;\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  /*jshint loopfunc: true */\n  function isOverAxis(x, reference, size) {\n    return x > reference && x < reference + size;\n  }\n\n  $.widget(\"ui.sortable\", $.ui.mouse, {\n    version: \"1.10.1\",\n    widgetEventPrefix: \"sort\",\n    ready: false,\n    options: {\n      appendTo: \"parent\",\n      axis: false,\n      connectWith: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      dropOnEmpty: true,\n      forcePlaceholderSize: false,\n      forceHelperSize: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      items: \"> *\",\n      opacity: false,\n      placeholder: false,\n      revert: false,\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      zIndex: 1000,\n      // callbacks\n      activate: null,\n      beforeStop: null,\n      change: null,\n      deactivate: null,\n      out: null,\n      over: null,\n      receive: null,\n      remove: null,\n      sort: null,\n      start: null,\n      stop: null,\n      update: null\n    },\n    _create: function _create() {\n      var o = this.options;\n      this.containerCache = {};\n      this.element.addClass(\"ui-sortable\"); //Get the items\n\n      this.refresh(); //Let's determine if the items are being displayed horizontally\n\n      this.floating = this.items.length ? o.axis === \"x\" || /left|right/.test(this.items[0].item.css(\"float\")) || /inline|table-cell/.test(this.items[0].item.css(\"display\")) : false; //Let's determine the parent's offset\n\n      this.offset = this.element.offset(); //Initialize mouse events for interaction\n\n      this._mouseInit(); //We're ready to go\n\n\n      this.ready = true;\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-sortable ui-sortable-disabled\");\n\n      this._mouseDestroy();\n\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        this.items[i].item.removeData(this.widgetName + \"-item\");\n      }\n\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"disabled\") {\n        this.options[key] = value;\n        this.widget().toggleClass(\"ui-sortable-disabled\", !!value);\n      } else {\n        // Don't call widget base _setOption for disable as it adds ui-state-disabled class\n        $.Widget.prototype._setOption.apply(this, arguments);\n      }\n    },\n    _mouseCapture: function _mouseCapture(event, overrideHandle) {\n      var currentItem = null,\n          validHandle = false,\n          that = this;\n\n      if (this.reverting) {\n        return false;\n      }\n\n      if (this.options.disabled || this.options.type === \"static\") {\n        return false;\n      } //We have to refresh the items data once first\n\n\n      this._refreshItems(event); //Find out if the clicked node (or one of its parents) is a actual item in this.items\n\n\n      $(event.target).parents().each(function () {\n        if ($.data(this, that.widgetName + \"-item\") === that) {\n          currentItem = $(this);\n          return false;\n        }\n      });\n\n      if ($.data(event.target, that.widgetName + \"-item\") === that) {\n        currentItem = $(event.target);\n      }\n\n      if (!currentItem) {\n        return false;\n      }\n\n      if (this.options.handle && !overrideHandle) {\n        $(this.options.handle, currentItem).find(\"*\").addBack().each(function () {\n          if (this === event.target) {\n            validHandle = true;\n          }\n        });\n\n        if (!validHandle) {\n          return false;\n        }\n      }\n\n      this.currentItem = currentItem;\n\n      this._removeCurrentsFromItems();\n\n      return true;\n    },\n    _mouseStart: function _mouseStart(event, overrideHandle, noActivation) {\n      var i,\n          o = this.options;\n      this.currentContainer = this; //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture\n\n      this.refreshPositions(); //Create and append the visible helper\n\n      this.helper = this._createHelper(event); //Cache the helper size\n\n      this._cacheHelperProportions();\n      /*\n       * - Position generation -\n       * This block generates everything position related - it's the core of draggables.\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Get the next scrolling parent\n\n\n      this.scrollParent = this.helper.scrollParent(); //The element's absolute position on the page minus margins\n\n      this.offset = this.currentItem.offset();\n      this.offset = {\n        top: this.offset.top - this.margins.top,\n        left: this.offset.left - this.margins.left\n      };\n      $.extend(this.offset, {\n        click: {\n          //Where the click happened, relative to the element\n          left: event.pageX - this.offset.left,\n          top: event.pageY - this.offset.top\n        },\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\n\n      }); // Only after we got the offset, we can change the helper's position to absolute\n      // TODO: Still need to figure out a way to make relative sorting possible\n\n      this.helper.css(\"position\", \"absolute\");\n      this.cssPosition = this.helper.css(\"position\"); //Generate the original position\n\n      this.originalPosition = this._generatePosition(event);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Cache the former DOM position\n\n      this.domPosition = {\n        prev: this.currentItem.prev()[0],\n        parent: this.currentItem.parent()[0]\n      }; //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way\n\n      if (this.helper[0] !== this.currentItem[0]) {\n        this.currentItem.hide();\n      } //Create the placeholder\n\n\n      this._createPlaceholder(); //Set a containment if given in the options\n\n\n      if (o.containment) {\n        this._setContainment();\n      }\n\n      if (o.cursor) {\n        // cursor option\n        if ($(\"body\").css(\"cursor\")) {\n          this._storedCursor = $(\"body\").css(\"cursor\");\n        }\n\n        $(\"body\").css(\"cursor\", o.cursor);\n      }\n\n      if (o.opacity) {\n        // opacity option\n        if (this.helper.css(\"opacity\")) {\n          this._storedOpacity = this.helper.css(\"opacity\");\n        }\n\n        this.helper.css(\"opacity\", o.opacity);\n      }\n\n      if (o.zIndex) {\n        // zIndex option\n        if (this.helper.css(\"zIndex\")) {\n          this._storedZIndex = this.helper.css(\"zIndex\");\n        }\n\n        this.helper.css(\"zIndex\", o.zIndex);\n      } //Prepare scrolling\n\n\n      if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== \"HTML\") {\n        this.overflowOffset = this.scrollParent.offset();\n      } //Call callbacks\n\n\n      this._trigger(\"start\", event, this._uiHash()); //Recache the helper size\n\n\n      if (!this._preserveHelperProportions) {\n        this._cacheHelperProportions();\n      } //Post \"activate\" events to possible containers\n\n\n      if (!noActivation) {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"activate\", event, this._uiHash(this));\n        }\n      } //Prepare possible droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      }\n\n      this.dragging = true;\n      this.helper.addClass(\"ui-sortable-helper\");\n\n      this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var i,\n          item,\n          itemElement,\n          intersection,\n          o = this.options,\n          scrolled = false; //Compute the helpers position\n\n      this.position = this._generatePosition(event);\n      this.positionAbs = this._convertPositionTo(\"absolute\");\n\n      if (!this.lastPositionAbs) {\n        this.lastPositionAbs = this.positionAbs;\n      } //Do scrolling\n\n\n      if (this.options.scroll) {\n        if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== \"HTML\") {\n          if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;\n          } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;\n          }\n\n          if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;\n          }\n        } else {\n          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n          }\n\n          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n          }\n        }\n\n        if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n          $.ui.ddmanager.prepareOffsets(this, event);\n        }\n      } //Regenerate the absolute position used for position checks\n\n\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Set the helper position\n\n      if (!this.options.axis || this.options.axis !== \"y\") {\n        this.helper[0].style.left = this.position.left + \"px\";\n      }\n\n      if (!this.options.axis || this.options.axis !== \"x\") {\n        this.helper[0].style.top = this.position.top + \"px\";\n      } //Rearrange\n\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        //Cache variables and intersection, continue if no intersection\n        item = this.items[i];\n        itemElement = item.item[0];\n        intersection = this._intersectsWithPointer(item);\n\n        if (!intersection) {\n          continue;\n        } // Only put the placeholder inside the current Container, skip all\n        // items form other containers. This works because when moving\n        // an item from one container to another the\n        // currentContainer is switched before the placeholder is moved.\n        //\n        // Without this moving items in \"sub-sortables\" can cause the placeholder to jitter\n        // beetween the outer and inner container.\n\n\n        if (item.instance !== this.currentContainer) {\n          continue;\n        } // cannot intersect with itself\n        // no useless actions that have been done before\n        // no action if the item moved is the parent of the item checked\n\n\n        if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? \"next\" : \"prev\"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === \"semi-dynamic\" ? !$.contains(this.element[0], itemElement) : true)) {\n          this.direction = intersection === 1 ? \"down\" : \"up\";\n\n          if (this.options.tolerance === \"pointer\" || this._intersectsWithSides(item)) {\n            this._rearrange(event, item);\n          } else {\n            break;\n          }\n\n          this._trigger(\"change\", event, this._uiHash());\n\n          break;\n        }\n      } //Post events to containers\n\n\n      this._contactContainers(event); //Interconnect with droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      } //Call callbacks\n\n\n      this._trigger(\"sort\", event, this._uiHash());\n\n      this.lastPositionAbs = this.positionAbs;\n      return false;\n    },\n    _mouseStop: function _mouseStop(event, noPropagation) {\n      if (!event) {\n        return;\n      } //If we are using droppables, inform the manager about the drop\n\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        $.ui.ddmanager.drop(this, event);\n      }\n\n      if (this.options.revert) {\n        var that = this,\n            cur = this.placeholder.offset();\n        this.reverting = true;\n        $(this.helper).animate({\n          left: cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft),\n          top: cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop)\n        }, parseInt(this.options.revert, 10) || 500, function () {\n          that._clear(event);\n        });\n      } else {\n        this._clear(event, noPropagation);\n      }\n\n      return false;\n    },\n    cancel: function cancel() {\n      if (this.dragging) {\n        this._mouseUp({\n          target: null\n        });\n\n        if (this.options.helper === \"original\") {\n          this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n        } else {\n          this.currentItem.show();\n        } //Post deactivating events to containers\n\n\n        for (var i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"deactivate\", null, this._uiHash(this));\n\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", null, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      }\n\n      if (this.placeholder) {\n        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n        if (this.placeholder[0].parentNode) {\n          this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n        }\n\n        if (this.options.helper !== \"original\" && this.helper && this.helper[0].parentNode) {\n          this.helper.remove();\n        }\n\n        $.extend(this, {\n          helper: null,\n          dragging: false,\n          reverting: false,\n          _noFinalSort: null\n        });\n\n        if (this.domPosition.prev) {\n          $(this.domPosition.prev).after(this.currentItem);\n        } else {\n          $(this.domPosition.parent).prepend(this.currentItem);\n        }\n      }\n\n      return this;\n    },\n    serialize: function serialize(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          str = [];\n\n      o = o || {};\n      $(items).each(function () {\n        var res = ($(o.item || this).attr(o.attribute || \"id\") || \"\").match(o.expression || /(.+)[\\-=_](.+)/);\n\n        if (res) {\n          str.push((o.key || res[1] + \"[]\") + \"=\" + (o.key && o.expression ? res[1] : res[2]));\n        }\n      });\n\n      if (!str.length && o.key) {\n        str.push(o.key + \"=\");\n      }\n\n      return str.join(\"&\");\n    },\n    toArray: function toArray(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          ret = [];\n\n      o = o || {};\n      items.each(function () {\n        ret.push($(o.item || this).attr(o.attribute || \"id\") || \"\");\n      });\n      return ret;\n    },\n\n    /* Be careful with the following core functions */\n    _intersectsWith: function _intersectsWith(item) {\n      var x1 = this.positionAbs.left,\n          x2 = x1 + this.helperProportions.width,\n          y1 = this.positionAbs.top,\n          y2 = y1 + this.helperProportions.height,\n          l = item.left,\n          r = l + item.width,\n          t = item.top,\n          b = t + item.height,\n          dyClick = this.offset.click.top,\n          dxClick = this.offset.click.left,\n          isOverElement = y1 + dyClick > t && y1 + dyClick < b && x1 + dxClick > l && x1 + dxClick < r;\n\n      if (this.options.tolerance === \"pointer\" || this.options.forcePointerForContainers || this.options.tolerance !== \"pointer\" && this.helperProportions[this.floating ? \"width\" : \"height\"] > item[this.floating ? \"width\" : \"height\"]) {\n        return isOverElement;\n      } else {\n        return l < x1 + this.helperProportions.width / 2 && // Right Half\n        x2 - this.helperProportions.width / 2 < r && // Left Half\n        t < y1 + this.helperProportions.height / 2 && // Bottom Half\n        y2 - this.helperProportions.height / 2 < b; // Top Half\n      }\n    },\n    _intersectsWithPointer: function _intersectsWithPointer(item) {\n      var isOverElementHeight = this.options.axis === \"x\" || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),\n          isOverElementWidth = this.options.axis === \"y\" || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),\n          isOverElement = isOverElementHeight && isOverElementWidth,\n          verticalDirection = this._getDragVerticalDirection(),\n          horizontalDirection = this._getDragHorizontalDirection();\n\n      if (!isOverElement) {\n        return false;\n      }\n\n      return this.floating ? horizontalDirection && horizontalDirection === \"right\" || verticalDirection === \"down\" ? 2 : 1 : verticalDirection && (verticalDirection === \"down\" ? 2 : 1);\n    },\n    _intersectsWithSides: function _intersectsWithSides(item) {\n      var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height),\n          isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width),\n          verticalDirection = this._getDragVerticalDirection(),\n          horizontalDirection = this._getDragHorizontalDirection();\n\n      if (this.floating && horizontalDirection) {\n        return horizontalDirection === \"right\" && isOverRightHalf || horizontalDirection === \"left\" && !isOverRightHalf;\n      } else {\n        return verticalDirection && (verticalDirection === \"down\" && isOverBottomHalf || verticalDirection === \"up\" && !isOverBottomHalf);\n      }\n    },\n    _getDragVerticalDirection: function _getDragVerticalDirection() {\n      var delta = this.positionAbs.top - this.lastPositionAbs.top;\n      return delta !== 0 && (delta > 0 ? \"down\" : \"up\");\n    },\n    _getDragHorizontalDirection: function _getDragHorizontalDirection() {\n      var delta = this.positionAbs.left - this.lastPositionAbs.left;\n      return delta !== 0 && (delta > 0 ? \"right\" : \"left\");\n    },\n    refresh: function refresh(event) {\n      this._refreshItems(event);\n\n      this.refreshPositions();\n      return this;\n    },\n    _connectWith: function _connectWith() {\n      var options = this.options;\n      return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;\n    },\n    _getItemsAsjQuery: function _getItemsAsjQuery(connected) {\n      var i,\n          j,\n          cur,\n          inst,\n          items = [],\n          queries = [],\n          connectWith = this._connectWith();\n\n      if (connectWith && connected) {\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), inst]);\n            }\n          }\n        }\n      }\n\n      queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {\n        options: this.options,\n        item: this.currentItem\n      }) : $(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]);\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        queries[i][0].each(function () {\n          items.push(this);\n        });\n      }\n\n      return $(items);\n    },\n    _removeCurrentsFromItems: function _removeCurrentsFromItems() {\n      var list = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\n      this.items = $.grep(this.items, function (item) {\n        for (var j = 0; j < list.length; j++) {\n          if (list[j] === item.item[0]) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    },\n    _refreshItems: function _refreshItems(event) {\n      this.items = [];\n      this.containers = [this];\n\n      var i,\n          j,\n          cur,\n          inst,\n          targetData,\n          _queries,\n          item,\n          queriesLength,\n          items = this.items,\n          queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {\n        item: this.currentItem\n      }) : $(this.options.items, this.element), this]],\n          connectWith = this._connectWith();\n\n      if (connectWith && this.ready) {\n        //Shouldn't be run the first time through due to massive slow-down\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {\n                item: this.currentItem\n              }) : $(inst.options.items, inst.element), inst]);\n              this.containers.push(inst);\n            }\n          }\n        }\n      }\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        targetData = queries[i][1];\n        _queries = queries[i][0];\n\n        for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {\n          item = $(_queries[j]);\n          item.data(this.widgetName + \"-item\", targetData); // Data for target checking (mouse manager)\n\n          items.push({\n            item: item,\n            instance: targetData,\n            width: 0,\n            height: 0,\n            left: 0,\n            top: 0\n          });\n        }\n      }\n    },\n    refreshPositions: function refreshPositions(fast) {\n      //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change\n      if (this.offsetParent && this.helper) {\n        this.offset.parent = this._getParentOffset();\n      }\n\n      var i, item, t, p;\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        item = this.items[i]; //We ignore calculating positions of all connected containers when we're not over them\n\n        if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {\n          continue;\n        }\n\n        t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;\n\n        if (!fast) {\n          item.width = t.outerWidth();\n          item.height = t.outerHeight();\n        }\n\n        p = t.offset();\n        item.left = p.left;\n        item.top = p.top;\n      }\n\n      if (this.options.custom && this.options.custom.refreshContainers) {\n        this.options.custom.refreshContainers.call(this);\n      } else {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          p = this.containers[i].element.offset();\n          this.containers[i].containerCache.left = p.left;\n          this.containers[i].containerCache.top = p.top;\n          this.containers[i].containerCache.width = this.containers[i].element.outerWidth();\n          this.containers[i].containerCache.height = this.containers[i].element.outerHeight();\n        }\n      }\n\n      return this;\n    },\n    _createPlaceholder: function _createPlaceholder(that) {\n      that = that || this;\n      var className,\n          o = that.options;\n\n      if (!o.placeholder || o.placeholder.constructor === String) {\n        className = o.placeholder;\n        o.placeholder = {\n          element: function element() {\n            var el = $(document.createElement(that.currentItem[0].nodeName)).addClass(className || that.currentItem[0].className + \" ui-sortable-placeholder\").removeClass(\"ui-sortable-helper\")[0];\n\n            if (!className) {\n              el.style.visibility = \"hidden\";\n            }\n\n            return el;\n          },\n          update: function update(container, p) {\n            // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that\n            // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified\n            if (className && !o.forcePlaceholderSize) {\n              return;\n            } //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item\n\n\n            if (!p.height()) {\n              p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(that.currentItem.css(\"paddingBottom\") || 0, 10));\n            }\n\n            if (!p.width()) {\n              p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(that.currentItem.css(\"paddingRight\") || 0, 10));\n            }\n          }\n        };\n      } //Create the placeholder\n\n\n      that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem)); //Append it after the actual current item\n\n      that.currentItem.after(that.placeholder); //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\n\n      o.placeholder.update(that, that.placeholder);\n    },\n    _contactContainers: function _contactContainers(event) {\n      var i,\n          j,\n          dist,\n          itemWithLeastDistance,\n          posProperty,\n          sizeProperty,\n          base,\n          cur,\n          nearBottom,\n          innermostContainer = null,\n          innermostIndex = null; // get innermost container that intersects with item\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        // never consider a container that's located within the item itself\n        if ($.contains(this.currentItem[0], this.containers[i].element[0])) {\n          continue;\n        }\n\n        if (this._intersectsWith(this.containers[i].containerCache)) {\n          // if we've already found a container and it's more \"inner\" than this, then continue\n          if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {\n            continue;\n          }\n\n          innermostContainer = this.containers[i];\n          innermostIndex = i;\n        } else {\n          // container doesn't intersect. trigger \"out\" event if necessary\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", event, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      } // if no intersecting containers found, return\n\n\n      if (!innermostContainer) {\n        return;\n      } // move the item into the container if it's not there already\n\n\n      if (this.containers.length === 1) {\n        this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n        this.containers[innermostIndex].containerCache.over = 1;\n      } else {\n        //When entering a new container, we will find the item with the least distance and append our item near it\n        dist = 10000;\n        itemWithLeastDistance = null;\n        posProperty = this.containers[innermostIndex].floating ? \"left\" : \"top\";\n        sizeProperty = this.containers[innermostIndex].floating ? \"width\" : \"height\";\n        base = this.positionAbs[posProperty] + this.offset.click[posProperty];\n\n        for (j = this.items.length - 1; j >= 0; j--) {\n          if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {\n            continue;\n          }\n\n          if (this.items[j].item[0] === this.currentItem[0]) {\n            continue;\n          }\n\n          cur = this.items[j].item.offset()[posProperty];\n          nearBottom = false;\n\n          if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {\n            nearBottom = true;\n            cur += this.items[j][sizeProperty];\n          }\n\n          if (Math.abs(cur - base) < dist) {\n            dist = Math.abs(cur - base);\n            itemWithLeastDistance = this.items[j];\n            this.direction = nearBottom ? \"up\" : \"down\";\n          }\n        } //Check if dropOnEmpty is enabled\n\n\n        if (!itemWithLeastDistance && !this.options.dropOnEmpty) {\n          return;\n        }\n\n        this.currentContainer = this.containers[innermostIndex];\n        itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);\n\n        this._trigger(\"change\", event, this._uiHash());\n\n        this.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this)); //Update the placeholder\n\n\n        this.options.placeholder.update(this.currentContainer, this.placeholder);\n\n        this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n        this.containers[innermostIndex].containerCache.over = 1;\n      }\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem; //Add the helper to the DOM if that didn't happen already\n\n      if (!helper.parents(\"body\").length) {\n        $(o.appendTo !== \"parent\" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);\n      }\n\n      if (helper[0] === this.currentItem[0]) {\n        this._storedCSS = {\n          width: this.currentItem[0].style.width,\n          height: this.currentItem[0].style.height,\n          position: this.currentItem.css(\"position\"),\n          top: this.currentItem.css(\"top\"),\n          left: this.currentItem.css(\"left\")\n        };\n      }\n\n      if (!helper[0].style.width || o.forceHelperSize) {\n        helper.width(this.currentItem.width());\n      }\n\n      if (!helper[0].style.height || o.forceHelperSize) {\n        helper.height(this.currentItem.height());\n      }\n\n      return helper;\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      this.offsetParent = this.helper.offsetParent();\n      var po = this.offsetParent.offset(); // This is a special case where we need to modify a offset calculated on start, since the following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      } // This needs to be actually done for all browsers, since pageX/pageY includes this information\n      // with an ugly IE fix\n\n\n      if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition === \"relative\") {\n        var p = this.currentItem.position();\n        return {\n          top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n          left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n        };\n      } else {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.currentItem.css(\"marginTop\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var ce,\n          co,\n          over,\n          o = this.options;\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      if (o.containment === \"document\" || o.containment === \"window\") {\n        this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $(o.containment === \"document\" ? document : window).width() - this.helperProportions.width - this.margins.left, ($(o.containment === \"document\" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n      }\n\n      if (!/^(document|window|parent)$/.test(o.containment)) {\n        ce = $(o.containment)[0];\n        co = $(o.containment).offset();\n        over = $(ce).css(\"overflow\") !== \"hidden\";\n        this.containment = [co.left + (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top];\n      }\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n      return {\n        top: pos.top + // The absolute mouse position\n        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,\n        left: pos.left + // The absolute mouse position\n        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event) {\n      var top,\n          left,\n          o = this.options,\n          pageX = event.pageX,\n          pageY = event.pageY,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName); // This is another very weird special case that only happens for relative elements:\n      // 1. If the css position is relative\n      // 2. and the scroll parent is the document or similar to the offset parent\n      // we have to refresh the relative offset during the scroll so there are no jumps\n\n      if (this.cssPosition === \"relative\" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {\n        this.offset.relative = this._getRelativeOffset();\n      }\n      /*\n       * - Position constraining -\n       * Constrain the position to a mix of grid, containment.\n       */\n\n\n      if (this.originalPosition) {\n        //If we are not dragging yet, we won't check for options\n        if (this.containment) {\n          if (event.pageX - this.offset.click.left < this.containment[0]) {\n            pageX = this.containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < this.containment[1]) {\n            pageY = this.containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > this.containment[2]) {\n            pageX = this.containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > this.containment[3]) {\n            pageY = this.containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];\n          pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];\n          pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n      }\n\n      return {\n        top: pageY - // The absolute mouse position\n        this.offset.click.top - // Click offset (relative to the element)\n        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),\n        left: pageX - // The absolute mouse position\n        this.offset.click.left - // Click offset (relative to the element)\n        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())\n      };\n    },\n    _rearrange: function _rearrange(event, i, a, hardRefresh) {\n      a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === \"down\" ? i.item[0] : i.item[0].nextSibling); //Various things done here to improve the performance:\n      // 1. we create a setTimeout, that calls refreshPositions\n      // 2. on the instance, we have a counter variable, that get's higher after every append\n      // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same\n      // 4. this lets only the last addition to the timeout stack through\n\n      this.counter = this.counter ? ++this.counter : 1;\n      var counter = this.counter;\n\n      this._delay(function () {\n        if (counter === this.counter) {\n          this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove\n        }\n      });\n    },\n    _clear: function _clear(event, noPropagation) {\n      this.reverting = false; // We delay all events that have to be triggered to after the point where the placeholder has been removed and\n      // everything else normalized again\n\n      var i,\n          delayedTriggers = []; // We first have to update the dom position of the actual currentItem\n      // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)\n\n      if (!this._noFinalSort && this.currentItem.parent().length) {\n        this.placeholder.before(this.currentItem);\n      }\n\n      this._noFinalSort = null;\n\n      if (this.helper[0] === this.currentItem[0]) {\n        for (i in this._storedCSS) {\n          if (this._storedCSS[i] === \"auto\" || this._storedCSS[i] === \"static\") {\n            this._storedCSS[i] = \"\";\n          }\n        }\n\n        this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n      } else {\n        this.currentItem.show();\n      }\n\n      if (this.fromOutside && !noPropagation) {\n        delayedTriggers.push(function (event) {\n          this._trigger(\"receive\", event, this._uiHash(this.fromOutside));\n        });\n      }\n\n      if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(\".ui-sortable-helper\")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {\n        delayedTriggers.push(function (event) {\n          this._trigger(\"update\", event, this._uiHash());\n        }); //Trigger update callback if the DOM position has changed\n      } // Check if the items Container has Changed and trigger appropriate\n      // events.\n\n\n      if (this !== this.currentContainer) {\n        if (!noPropagation) {\n          delayedTriggers.push(function (event) {\n            this._trigger(\"remove\", event, this._uiHash());\n          });\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"receive\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"update\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n        }\n      } //Post events to containers\n\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        if (!noPropagation) {\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"deactivate\", event, this._uiHash(this));\n            };\n          }.call(this, this.containers[i]));\n        }\n\n        if (this.containers[i].containerCache.over) {\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"out\", event, this._uiHash(this));\n            };\n          }.call(this, this.containers[i]));\n          this.containers[i].containerCache.over = 0;\n        }\n      } //Do what was originally in plugins\n\n\n      if (this._storedCursor) {\n        $(\"body\").css(\"cursor\", this._storedCursor);\n      }\n\n      if (this._storedOpacity) {\n        this.helper.css(\"opacity\", this._storedOpacity);\n      }\n\n      if (this._storedZIndex) {\n        this.helper.css(\"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex);\n      }\n\n      this.dragging = false;\n\n      if (this.cancelHelperRemoval) {\n        if (!noPropagation) {\n          this._trigger(\"beforeStop\", event, this._uiHash());\n\n          for (i = 0; i < delayedTriggers.length; i++) {\n            delayedTriggers[i].call(this, event);\n          } //Trigger all delayed events\n\n\n          this._trigger(\"stop\", event, this._uiHash());\n        }\n\n        this.fromOutside = false;\n        return false;\n      }\n\n      if (!noPropagation) {\n        this._trigger(\"beforeStop\", event, this._uiHash());\n      } //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n\n\n      this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n\n      if (this.helper[0] !== this.currentItem[0]) {\n        this.helper.remove();\n      }\n\n      this.helper = null;\n\n      if (!noPropagation) {\n        for (i = 0; i < delayedTriggers.length; i++) {\n          delayedTriggers[i].call(this, event);\n        } //Trigger all delayed events\n\n\n        this._trigger(\"stop\", event, this._uiHash());\n      }\n\n      this.fromOutside = false;\n      return true;\n    },\n    _trigger: function _trigger() {\n      if ($.Widget.prototype._trigger.apply(this, arguments) === false) {\n        this.cancel();\n      }\n    },\n    _uiHash: function _uiHash(_inst) {\n      var inst = _inst || this;\n      return {\n        helper: inst.helper,\n        placeholder: inst.placeholder || $([]),\n        position: inst.position,\n        originalPosition: inst.originalPosition,\n        offset: inst.positionAbs,\n        item: inst.currentItem,\n        sender: _inst ? _inst.element : null\n      };\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  var uid = 0,\n      hideProps = {},\n      showProps = {};\n  hideProps.height = hideProps.paddingTop = hideProps.paddingBottom = hideProps.borderTopWidth = hideProps.borderBottomWidth = \"hide\";\n  showProps.height = showProps.paddingTop = showProps.paddingBottom = showProps.borderTopWidth = showProps.borderBottomWidth = \"show\";\n  $.widget(\"ui.accordion\", {\n    version: \"1.10.1\",\n    options: {\n      active: 0,\n      animate: {},\n      collapsible: false,\n      event: \"click\",\n      header: \"> li > :first-child,> :not(li):even\",\n      heightStyle: \"auto\",\n      icons: {\n        activeHeader: \"ui-icon-triangle-1-s\",\n        header: \"ui-icon-triangle-1-e\"\n      },\n      // callbacks\n      activate: null,\n      beforeActivate: null\n    },\n    _create: function _create() {\n      var options = this.options;\n      this.prevShow = this.prevHide = $();\n      this.element.addClass(\"ui-accordion ui-widget ui-helper-reset\") // ARIA\n      .attr(\"role\", \"tablist\"); // don't allow collapsible: false and active: false / null\n\n      if (!options.collapsible && (options.active === false || options.active == null)) {\n        options.active = 0;\n      }\n\n      this._processPanels(); // handle negative values\n\n\n      if (options.active < 0) {\n        options.active += this.headers.length;\n      }\n\n      this._refresh();\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        header: this.active,\n        panel: !this.active.length ? $() : this.active.next(),\n        content: !this.active.length ? $() : this.active.next()\n      };\n    },\n    _createIcons: function _createIcons() {\n      var icons = this.options.icons;\n\n      if (icons) {\n        $(\"<span>\").addClass(\"ui-accordion-header-icon ui-icon \" + icons.header).prependTo(this.headers);\n        this.active.children(\".ui-accordion-header-icon\").removeClass(icons.header).addClass(icons.activeHeader);\n        this.headers.addClass(\"ui-accordion-icons\");\n      }\n    },\n    _destroyIcons: function _destroyIcons() {\n      this.headers.removeClass(\"ui-accordion-icons\").children(\".ui-accordion-header-icon\").remove();\n    },\n    _destroy: function _destroy() {\n      var contents; // clean up main element\n\n      this.element.removeClass(\"ui-accordion ui-widget ui-helper-reset\").removeAttr(\"role\"); // clean up headers\n\n      this.headers.removeClass(\"ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top\").removeAttr(\"role\").removeAttr(\"aria-selected\").removeAttr(\"aria-controls\").removeAttr(\"tabIndex\").each(function () {\n        if (/^ui-accordion/.test(this.id)) {\n          this.removeAttribute(\"id\");\n        }\n      });\n\n      this._destroyIcons(); // clean up content panels\n\n\n      contents = this.headers.next().css(\"display\", \"\").removeAttr(\"role\").removeAttr(\"aria-expanded\").removeAttr(\"aria-hidden\").removeAttr(\"aria-labelledby\").removeClass(\"ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled\").each(function () {\n        if (/^ui-accordion/.test(this.id)) {\n          this.removeAttribute(\"id\");\n        }\n      });\n\n      if (this.options.heightStyle !== \"content\") {\n        contents.css(\"height\", \"\");\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      if (key === \"event\") {\n        if (this.options.event) {\n          this._off(this.headers, this.options.event);\n        }\n\n        this._setupEvents(value);\n      }\n\n      this._super(key, value); // setting collapsible: false while collapsed; open first panel\n\n\n      if (key === \"collapsible\" && !value && this.options.active === false) {\n        this._activate(0);\n      }\n\n      if (key === \"icons\") {\n        this._destroyIcons();\n\n        if (value) {\n          this._createIcons();\n        }\n      } // #5332 - opacity doesn't cascade to positioned elements in IE\n      // so we need to add the disabled class to the headers and panels\n\n\n      if (key === \"disabled\") {\n        this.headers.add(this.headers.next()).toggleClass(\"ui-state-disabled\", !!value);\n      }\n    },\n    _keydown: function _keydown(event) {\n      /*jshint maxcomplexity:15*/\n      if (event.altKey || event.ctrlKey) {\n        return;\n      }\n\n      var keyCode = $.ui.keyCode,\n          length = this.headers.length,\n          currentIndex = this.headers.index(event.target),\n          toFocus = false;\n\n      switch (event.keyCode) {\n        case keyCode.RIGHT:\n        case keyCode.DOWN:\n          toFocus = this.headers[(currentIndex + 1) % length];\n          break;\n\n        case keyCode.LEFT:\n        case keyCode.UP:\n          toFocus = this.headers[(currentIndex - 1 + length) % length];\n          break;\n\n        case keyCode.SPACE:\n        case keyCode.ENTER:\n          this._eventHandler(event);\n\n          break;\n\n        case keyCode.HOME:\n          toFocus = this.headers[0];\n          break;\n\n        case keyCode.END:\n          toFocus = this.headers[length - 1];\n          break;\n      }\n\n      if (toFocus) {\n        $(event.target).attr(\"tabIndex\", -1);\n        $(toFocus).attr(\"tabIndex\", 0);\n        toFocus.focus();\n        event.preventDefault();\n      }\n    },\n    _panelKeyDown: function _panelKeyDown(event) {\n      if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {\n        $(event.currentTarget).prev().focus();\n      }\n    },\n    refresh: function refresh() {\n      var options = this.options;\n\n      this._processPanels(); // was collapsed or no panel\n\n\n      if (options.active === false && options.collapsible === true || !this.headers.length) {\n        options.active = false;\n        this.active = $(); // active false only when collapsible is true\n      }\n\n      if (options.active === false) {\n        this._activate(0); // was active, but active panel is gone\n\n      } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {\n        // all remaining panel are disabled\n        if (this.headers.length === this.headers.find(\".ui-state-disabled\").length) {\n          options.active = false;\n          this.active = $(); // activate previous panel\n        } else {\n          this._activate(Math.max(0, options.active - 1));\n        } // was active, active panel still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.headers.index(this.active);\n      }\n\n      this._destroyIcons();\n\n      this._refresh();\n    },\n    _processPanels: function _processPanels() {\n      this.headers = this.element.find(this.options.header).addClass(\"ui-accordion-header ui-helper-reset ui-state-default ui-corner-all\");\n      this.headers.next().addClass(\"ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\").filter(\":not(.ui-accordion-content-active)\").hide();\n    },\n    _refresh: function _refresh() {\n      var maxHeight,\n          options = this.options,\n          heightStyle = options.heightStyle,\n          parent = this.element.parent(),\n          accordionId = this.accordionId = \"ui-accordion-\" + (this.element.attr(\"id\") || ++uid);\n      this.active = this._findActive(options.active).addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\").removeClass(\"ui-corner-all\");\n      this.active.next().addClass(\"ui-accordion-content-active\").show();\n      this.headers.attr(\"role\", \"tab\").each(function (i) {\n        var header = $(this),\n            headerId = header.attr(\"id\"),\n            panel = header.next(),\n            panelId = panel.attr(\"id\");\n\n        if (!headerId) {\n          headerId = accordionId + \"-header-\" + i;\n          header.attr(\"id\", headerId);\n        }\n\n        if (!panelId) {\n          panelId = accordionId + \"-panel-\" + i;\n          panel.attr(\"id\", panelId);\n        }\n\n        header.attr(\"aria-controls\", panelId);\n        panel.attr(\"aria-labelledby\", headerId);\n      }).next().attr(\"role\", \"tabpanel\");\n      this.headers.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        tabIndex: -1\n      }).next().attr({\n        \"aria-expanded\": \"false\",\n        \"aria-hidden\": \"true\"\n      }).hide(); // make sure at least one header is in the tab order\n\n      if (!this.active.length) {\n        this.headers.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.attr({\n          \"aria-selected\": \"true\",\n          tabIndex: 0\n        }).next().attr({\n          \"aria-expanded\": \"true\",\n          \"aria-hidden\": \"false\"\n        });\n      }\n\n      this._createIcons();\n\n      this._setupEvents(options.event);\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.headers.each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.headers.next().each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.headers.next().each(function () {\n          maxHeight = Math.max(maxHeight, $(this).css(\"height\", \"\").height());\n        }).height(maxHeight);\n      }\n    },\n    _activate: function _activate(index) {\n      var active = this._findActive(index)[0]; // trying to activate the already active panel\n\n\n      if (active === this.active[0]) {\n        return;\n      } // trying to collapse, simulate a click on the currently active header\n\n\n      active = active || this.active[0];\n\n      this._eventHandler({\n        target: active,\n        currentTarget: active,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(selector) {\n      return typeof selector === \"number\" ? this.headers.eq(selector) : $();\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {\n        keydown: \"_keydown\"\n      };\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.headers.add(this.headers.next()));\n\n      this._on(this.headers, events);\n\n      this._on(this.headers.next(), {\n        keydown: \"_panelKeyDown\"\n      });\n\n      this._hoverable(this.headers);\n\n      this._focusable(this.headers);\n    },\n    _eventHandler: function _eventHandler(event) {\n      var options = this.options,\n          active = this.active,\n          clicked = $(event.currentTarget),\n          clickedIsActive = clicked[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : clicked.next(),\n          toHide = active.next(),\n          eventData = {\n        oldHeader: active,\n        oldPanel: toHide,\n        newHeader: collapsing ? $() : clicked,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if ( // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.headers.index(clicked); // when the call to ._toggle() comes after the class changes\n      // it causes a very odd bug in IE 8 (see #6720)\n\n      this.active = clickedIsActive ? $() : clicked;\n\n      this._toggle(eventData); // switch classes\n      // corner classes on the previously active header stay after the animation\n\n\n      active.removeClass(\"ui-accordion-header-active ui-state-active\");\n\n      if (options.icons) {\n        active.children(\".ui-accordion-header-icon\").removeClass(options.icons.activeHeader).addClass(options.icons.header);\n      }\n\n      if (!clickedIsActive) {\n        clicked.removeClass(\"ui-corner-all\").addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\");\n\n        if (options.icons) {\n          clicked.children(\".ui-accordion-header-icon\").removeClass(options.icons.header).addClass(options.icons.activeHeader);\n        }\n\n        clicked.next().addClass(\"ui-accordion-content-active\");\n      }\n    },\n    _toggle: function _toggle(data) {\n      var toShow = data.newPanel,\n          toHide = this.prevShow.length ? this.prevShow : data.oldPanel; // handle activating a panel during the animation for another activation\n\n      this.prevShow.add(this.prevHide).stop(true, true);\n      this.prevShow = toShow;\n      this.prevHide = toHide;\n\n      if (this.options.animate) {\n        this._animate(toShow, toHide, data);\n      } else {\n        toHide.hide();\n        toShow.show();\n\n        this._toggleComplete(data);\n      }\n\n      toHide.attr({\n        \"aria-expanded\": \"false\",\n        \"aria-hidden\": \"true\"\n      });\n      toHide.prev().attr(\"aria-selected\", \"false\"); // if we're switching panels, remove the old header from the tab order\n      // if we're opening from collapsed state, remove the previous header from the tab order\n      // if we're collapsing, then keep the collapsing header in the tab order\n\n      if (toShow.length && toHide.length) {\n        toHide.prev().attr(\"tabIndex\", -1);\n      } else if (toShow.length) {\n        this.headers.filter(function () {\n          return $(this).attr(\"tabIndex\") === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr({\n        \"aria-expanded\": \"true\",\n        \"aria-hidden\": \"false\"\n      }).prev().attr({\n        \"aria-selected\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _animate: function _animate(toShow, toHide, data) {\n      var total,\n          easing,\n          duration,\n          that = this,\n          adjust = 0,\n          down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),\n          animate = this.options.animate || {},\n          options = down && animate.down || animate,\n          complete = function complete() {\n        that._toggleComplete(data);\n      };\n\n      if (typeof options === \"number\") {\n        duration = options;\n      }\n\n      if (typeof options === \"string\") {\n        easing = options;\n      } // fall back from options to animation in case of partial down settings\n\n\n      easing = easing || options.easing || animate.easing;\n      duration = duration || options.duration || animate.duration;\n\n      if (!toHide.length) {\n        return toShow.animate(showProps, duration, easing, complete);\n      }\n\n      if (!toShow.length) {\n        return toHide.animate(hideProps, duration, easing, complete);\n      }\n\n      total = toShow.show().outerHeight();\n      toHide.animate(hideProps, {\n        duration: duration,\n        easing: easing,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n        }\n      });\n      toShow.hide().animate(showProps, {\n        duration: duration,\n        easing: easing,\n        complete: complete,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n\n          if (fx.prop !== \"height\") {\n            adjust += fx.now;\n          } else if (that.options.heightStyle !== \"content\") {\n            fx.now = Math.round(total - toHide.outerHeight() - adjust);\n            adjust = 0;\n          }\n        }\n      });\n    },\n    _toggleComplete: function _toggleComplete(data) {\n      var toHide = data.oldPanel;\n      toHide.removeClass(\"ui-accordion-content-active\").prev().removeClass(\"ui-corner-top\").addClass(\"ui-corner-all\"); // Work around for rendering bug in IE (#5421)\n\n      if (toHide.length) {\n        toHide.parent()[0].className = toHide.parent()[0].className;\n      }\n\n      this._trigger(\"activate\", null, data);\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  // used to prevent race conditions with remote data sources\n  var requestIndex = 0;\n  $.widget(\"ui.autocomplete\", {\n    version: \"1.10.1\",\n    defaultElement: \"<input>\",\n    options: {\n      appendTo: null,\n      autoFocus: false,\n      delay: 300,\n      minLength: 1,\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      source: null,\n      // callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      response: null,\n      search: null,\n      select: null\n    },\n    pending: 0,\n    _create: function _create() {\n      // Some browsers only repeat keydown events, not keypress events,\n      // so we use the suppressKeyPress flag to determine if we've already\n      // handled the keydown event. #7269\n      // Unfortunately the code for & in keypress is the same as the up arrow,\n      // so we use the suppressKeyPressRepeat flag to avoid handling keypress\n      // events when we know the keydown event was used to modify the\n      // search term. #7799\n      var suppressKeyPress,\n          suppressKeyPressRepeat,\n          suppressInput,\n          nodeName = this.element[0].nodeName.toLowerCase(),\n          isTextarea = nodeName === \"textarea\",\n          isInput = nodeName === \"input\";\n      this.isMultiLine = // Textareas are always multi-line\n      isTextarea ? true : // Inputs are always single-line, even if inside a contentEditable element\n      // IE also treats inputs as contentEditable\n      isInput ? false : // All other element types are determined by whether or not they're contentEditable\n      this.element.prop(\"isContentEditable\");\n      this.valueMethod = this.element[isTextarea || isInput ? \"val\" : \"text\"];\n      this.isNewMenu = true;\n      this.element.addClass(\"ui-autocomplete-input\").attr(\"autocomplete\", \"off\");\n\n      this._on(this.element, {\n        keydown: function keydown(event) {\n          /*jshint maxcomplexity:15*/\n          if (this.element.prop(\"readOnly\")) {\n            suppressKeyPress = true;\n            suppressInput = true;\n            suppressKeyPressRepeat = true;\n            return;\n          }\n\n          suppressKeyPress = false;\n          suppressInput = false;\n          suppressKeyPressRepeat = false;\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              suppressKeyPress = true;\n\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              suppressKeyPress = true;\n\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"next\", event);\n\n              break;\n\n            case keyCode.ENTER:\n            case keyCode.NUMPAD_ENTER:\n              // when menu is open and has focus\n              if (this.menu.active) {\n                // #6055 - Opera still allows the keypress to occur\n                // which causes forms to submit\n                suppressKeyPress = true;\n                event.preventDefault();\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.TAB:\n              if (this.menu.active) {\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.ESCAPE:\n              if (this.menu.element.is(\":visible\")) {\n                this._value(this.term);\n\n                this.close(event); // Different browsers have different default behavior for escape\n                // Single press can mean undo or clear\n                // Double press in IE means clear the whole form\n\n                event.preventDefault();\n              }\n\n              break;\n\n            default:\n              suppressKeyPressRepeat = true; // search timeout should be triggered before the input value is changed\n\n              this._searchTimeout(event);\n\n              break;\n          }\n        },\n        keypress: function keypress(event) {\n          if (suppressKeyPress) {\n            suppressKeyPress = false;\n            event.preventDefault();\n            return;\n          }\n\n          if (suppressKeyPressRepeat) {\n            return;\n          } // replicate some key handlers to allow them to repeat in Firefox and Opera\n\n\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              this._keyEvent(\"next\", event);\n\n              break;\n          }\n        },\n        input: function input(event) {\n          if (suppressInput) {\n            suppressInput = false;\n            event.preventDefault();\n            return;\n          }\n\n          this._searchTimeout(event);\n        },\n        focus: function focus() {\n          this.selectedItem = null;\n          this.previous = this._value();\n        },\n        blur: function blur(event) {\n          if (this.cancelBlur) {\n            delete this.cancelBlur;\n            return;\n          }\n\n          clearTimeout(this.searching);\n          this.close(event);\n\n          this._change(event);\n        }\n      });\n\n      this._initSource();\n\n      this.menu = $(\"<ul>\").addClass(\"ui-autocomplete ui-front\").appendTo(this._appendTo()).menu({\n        // custom key handling for now\n        input: $(),\n        // disable ARIA support, the live region takes care of that\n        role: null\n      }).hide().data(\"ui-menu\");\n\n      this._on(this.menu.element, {\n        mousedown: function mousedown(event) {\n          // prevent moving focus out of the text field\n          event.preventDefault(); // IE doesn't prevent moving focus even with event.preventDefault()\n          // so we set a flag to know when we should ignore the blur event\n\n          this.cancelBlur = true;\n\n          this._delay(function () {\n            delete this.cancelBlur;\n          }); // clicking on the scrollbar causes focus to shift to the body\n          // but we can't detect a mouseup or a click immediately afterward\n          // so we have to track the next mousedown and close the menu if\n          // the user clicks somewhere outside of the autocomplete\n\n\n          var menuElement = this.menu.element[0];\n\n          if (!$(event.target).closest(\".ui-menu-item\").length) {\n            this._delay(function () {\n              var that = this;\n              this.document.one(\"mousedown\", function (event) {\n                if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {\n                  that.close();\n                }\n              });\n            });\n          }\n        },\n        menufocus: function menufocus(event, ui) {\n          // #7024 - Prevent accidental activation of menu items in Firefox\n          if (this.isNewMenu) {\n            this.isNewMenu = false;\n\n            if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {\n              this.menu.blur();\n              this.document.one(\"mousemove\", function () {\n                $(event.target).trigger(event.originalEvent);\n              });\n              return;\n            }\n          }\n\n          var item = ui.item.data(\"ui-autocomplete-item\");\n\n          if (false !== this._trigger(\"focus\", event, {\n            item: item\n          })) {\n            // use value to match what will end up in the input, if it was a key event\n            if (event.originalEvent && /^key/.test(event.originalEvent.type)) {\n              this._value(item.value);\n            }\n          } else {\n            // Normally the input is populated with the item's value as the\n            // menu is navigated, causing screen readers to notice a change and\n            // announce the item. Since the focus event was canceled, this doesn't\n            // happen, so we update the live region so that screen readers can\n            // still notice the change and announce it.\n            this.liveRegion.text(item.value);\n          }\n        },\n        menuselect: function menuselect(event, ui) {\n          var item = ui.item.data(\"ui-autocomplete-item\"),\n              previous = this.previous; // only trigger when focus was lost (click on menu)\n\n          if (this.element[0] !== this.document[0].activeElement) {\n            this.element.focus();\n            this.previous = previous; // #6109 - IE triggers two focus events and the second\n            // is asynchronous, so we need to reset the previous\n            // term synchronously and asynchronously :-(\n\n            this._delay(function () {\n              this.previous = previous;\n              this.selectedItem = item;\n            });\n          }\n\n          if (false !== this._trigger(\"select\", event, {\n            item: item\n          })) {\n            this._value(item.value);\n          } // reset the term after the select event\n          // this allows custom select handling to work properly\n\n\n          this.term = this._value();\n          this.close(event);\n          this.selectedItem = item;\n        }\n      });\n\n      this.liveRegion = $(\"<span>\", {\n        role: \"status\",\n        \"aria-live\": \"polite\"\n      }).addClass(\"ui-helper-hidden-accessible\").insertAfter(this.element); // turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      clearTimeout(this.searching);\n      this.element.removeClass(\"ui-autocomplete-input\").removeAttr(\"autocomplete\");\n      this.menu.element.remove();\n      this.liveRegion.remove();\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"source\") {\n        this._initSource();\n      }\n\n      if (key === \"appendTo\") {\n        this.menu.element.appendTo(this._appendTo());\n      }\n\n      if (key === \"disabled\" && value && this.xhr) {\n        this.xhr.abort();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element) {\n        element = this.element.closest(\".ui-front\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _initSource: function _initSource() {\n      var array,\n          url,\n          that = this;\n\n      if ($.isArray(this.options.source)) {\n        array = this.options.source;\n\n        this.source = function (request, response) {\n          response($.ui.autocomplete.filter(array, request.term));\n        };\n      } else if (typeof this.options.source === \"string\") {\n        url = this.options.source;\n\n        this.source = function (request, response) {\n          if (that.xhr) {\n            that.xhr.abort();\n          }\n\n          that.xhr = $.ajax({\n            url: url,\n            data: request,\n            dataType: \"json\",\n            success: function success(data) {\n              response(data);\n            },\n            error: function error() {\n              response([]);\n            }\n          });\n        };\n      } else {\n        this.source = this.options.source;\n      }\n    },\n    _searchTimeout: function _searchTimeout(event) {\n      clearTimeout(this.searching);\n      this.searching = this._delay(function () {\n        // only search if the value has changed\n        if (this.term !== this._value()) {\n          this.selectedItem = null;\n          this.search(null, event);\n        }\n      }, this.options.delay);\n    },\n    search: function search(value, event) {\n      value = value != null ? value : this._value(); // always save the actual value, not the one passed as an argument\n\n      this.term = this._value();\n\n      if (value.length < this.options.minLength) {\n        return this.close(event);\n      }\n\n      if (this._trigger(\"search\", event) === false) {\n        return;\n      }\n\n      return this._search(value);\n    },\n    _search: function _search(value) {\n      this.pending++;\n      this.element.addClass(\"ui-autocomplete-loading\");\n      this.cancelSearch = false;\n      this.source({\n        term: value\n      }, this._response());\n    },\n    _response: function _response() {\n      var that = this,\n          index = ++requestIndex;\n      return function (content) {\n        if (index === requestIndex) {\n          that.__response(content);\n        }\n\n        that.pending--;\n\n        if (!that.pending) {\n          that.element.removeClass(\"ui-autocomplete-loading\");\n        }\n      };\n    },\n    __response: function __response(content) {\n      if (content) {\n        content = this._normalize(content);\n      }\n\n      this._trigger(\"response\", null, {\n        content: content\n      });\n\n      if (!this.options.disabled && content && content.length && !this.cancelSearch) {\n        this._suggest(content);\n\n        this._trigger(\"open\");\n      } else {\n        // use ._close() instead of .close() so we don't cancel future searches\n        this._close();\n      }\n    },\n    close: function close(event) {\n      this.cancelSearch = true;\n\n      this._close(event);\n    },\n    _close: function _close(event) {\n      if (this.menu.element.is(\":visible\")) {\n        this.menu.element.hide();\n        this.menu.blur();\n        this.isNewMenu = true;\n\n        this._trigger(\"close\", event);\n      }\n    },\n    _change: function _change(event) {\n      if (this.previous !== this._value()) {\n        this._trigger(\"change\", event, {\n          item: this.selectedItem\n        });\n      }\n    },\n    _normalize: function _normalize(items) {\n      // assume all items have the right format when the first item is complete\n      if (items.length && items[0].label && items[0].value) {\n        return items;\n      }\n\n      return $.map(items, function (item) {\n        if (typeof item === \"string\") {\n          return {\n            label: item,\n            value: item\n          };\n        }\n\n        return $.extend({\n          label: item.label || item.value,\n          value: item.value || item.label\n        }, item);\n      });\n    },\n    _suggest: function _suggest(items) {\n      var ul = this.menu.element.empty();\n\n      this._renderMenu(ul, items);\n\n      this.menu.refresh(); // size and position menu\n\n      ul.show();\n\n      this._resizeMenu();\n\n      ul.position($.extend({\n        of: this.element\n      }, this.options.position));\n\n      if (this.options.autoFocus) {\n        this.menu.next();\n      }\n    },\n    _resizeMenu: function _resizeMenu() {\n      var ul = this.menu.element;\n      ul.outerWidth(Math.max( // Firefox wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping (#7513)\n      ul.width(\"\").outerWidth() + 1, this.element.outerWidth()));\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this;\n      $.each(items, function (index, item) {\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-autocomplete-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      return $(\"<li>\").append($(\"<a>\").text(item.label)).appendTo(ul);\n    },\n    _move: function _move(direction, event) {\n      if (!this.menu.element.is(\":visible\")) {\n        this.search(null, event);\n        return;\n      }\n\n      if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {\n        this._value(this.term);\n\n        this.menu.blur();\n        return;\n      }\n\n      this.menu[direction](event);\n    },\n    widget: function widget() {\n      return this.menu.element;\n    },\n    _value: function _value() {\n      return this.valueMethod.apply(this.element, arguments);\n    },\n    _keyEvent: function _keyEvent(keyEvent, event) {\n      if (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n        this._move(keyEvent, event); // prevents moving cursor to beginning/end of the text field in some browsers\n\n\n        event.preventDefault();\n      }\n    }\n  });\n  $.extend($.ui.autocomplete, {\n    escapeRegex: function escapeRegex(value) {\n      return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n    },\n    filter: function filter(array, term) {\n      var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), \"i\");\n      return $.grep(array, function (value) {\n        return matcher.test(value.label || value.value || value);\n      });\n    }\n  }); // live region extension, adding a `messages` option\n  // NOTE: This is an experimental API. We are still investigating\n  // a full solution for string manipulation and internationalization.\n\n  $.widget(\"ui.autocomplete\", $.ui.autocomplete, {\n    options: {\n      messages: {\n        noResults: \"No search results.\",\n        results: function results(amount) {\n          return amount + (amount > 1 ? \" results are\" : \" result is\") + \" available, use up and down arrow keys to navigate.\";\n        }\n      }\n    },\n    __response: function __response(content) {\n      var message;\n\n      this._superApply(arguments);\n\n      if (this.options.disabled || this.cancelSearch) {\n        return;\n      }\n\n      if (content && content.length) {\n        message = this.options.messages.results(content.length);\n      } else {\n        message = this.options.messages.noResults;\n      }\n\n      this.liveRegion.text(message);\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  var lastActive,\n      startXPos,\n      startYPos,\n      clickDragged,\n      baseClasses = \"ui-button ui-widget ui-state-default ui-corner-all\",\n      stateClasses = \"ui-state-hover ui-state-active \",\n      typeClasses = \"ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only\",\n      formResetHandler = function formResetHandler() {\n    var buttons = $(this).find(\":ui-button\");\n    setTimeout(function () {\n      buttons.button(\"refresh\");\n    }, 1);\n  },\n      radioGroup = function radioGroup(radio) {\n    var name = radio.name,\n        form = radio.form,\n        radios = $([]);\n\n    if (name) {\n      name = name.replace(/'/g, \"\\\\'\");\n\n      if (form) {\n        radios = $(form).find(\"[name='\" + name + \"']\");\n      } else {\n        radios = $(\"[name='\" + name + \"']\", radio.ownerDocument).filter(function () {\n          return !this.form;\n        });\n      }\n    }\n\n    return radios;\n  };\n\n  $.widget(\"ui.button\", {\n    version: \"1.10.1\",\n    defaultElement: \"<button>\",\n    options: {\n      disabled: null,\n      text: true,\n      label: null,\n      icons: {\n        primary: null,\n        secondary: null\n      }\n    },\n    _create: function _create() {\n      this.element.closest(\"form\").unbind(\"reset\" + this.eventNamespace).bind(\"reset\" + this.eventNamespace, formResetHandler);\n\n      if (typeof this.options.disabled !== \"boolean\") {\n        this.options.disabled = !!this.element.prop(\"disabled\");\n      } else {\n        this.element.prop(\"disabled\", this.options.disabled);\n      }\n\n      this._determineButtonType();\n\n      this.hasTitle = !!this.buttonElement.attr(\"title\");\n      var that = this,\n          options = this.options,\n          toggleButton = this.type === \"checkbox\" || this.type === \"radio\",\n          activeClass = !toggleButton ? \"ui-state-active\" : \"\",\n          focusClass = \"ui-state-focus\";\n\n      if (options.label === null) {\n        options.label = this.type === \"input\" ? this.buttonElement.val() : this.buttonElement.html();\n      }\n\n      this._hoverable(this.buttonElement);\n\n      this.buttonElement.addClass(baseClasses).attr(\"role\", \"button\").bind(\"mouseenter\" + this.eventNamespace, function () {\n        if (options.disabled) {\n          return;\n        }\n\n        if (this === lastActive) {\n          $(this).addClass(\"ui-state-active\");\n        }\n      }).bind(\"mouseleave\" + this.eventNamespace, function () {\n        if (options.disabled) {\n          return;\n        }\n\n        $(this).removeClass(activeClass);\n      }).bind(\"click\" + this.eventNamespace, function (event) {\n        if (options.disabled) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n      });\n      this.element.bind(\"focus\" + this.eventNamespace, function () {\n        // no need to check disabled, focus won't be triggered anyway\n        that.buttonElement.addClass(focusClass);\n      }).bind(\"blur\" + this.eventNamespace, function () {\n        that.buttonElement.removeClass(focusClass);\n      });\n\n      if (toggleButton) {\n        this.element.bind(\"change\" + this.eventNamespace, function () {\n          if (clickDragged) {\n            return;\n          }\n\n          that.refresh();\n        }); // if mouse moves between mousedown and mouseup (drag) set clickDragged flag\n        // prevents issue where button state changes but checkbox/radio checked state\n        // does not in Firefox (see ticket #6970)\n\n        this.buttonElement.bind(\"mousedown\" + this.eventNamespace, function (event) {\n          if (options.disabled) {\n            return;\n          }\n\n          clickDragged = false;\n          startXPos = event.pageX;\n          startYPos = event.pageY;\n        }).bind(\"mouseup\" + this.eventNamespace, function (event) {\n          if (options.disabled) {\n            return;\n          }\n\n          if (startXPos !== event.pageX || startYPos !== event.pageY) {\n            clickDragged = true;\n          }\n        });\n      }\n\n      if (this.type === \"checkbox\") {\n        this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n          if (options.disabled || clickDragged) {\n            return false;\n          }\n        });\n      } else if (this.type === \"radio\") {\n        this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n          if (options.disabled || clickDragged) {\n            return false;\n          }\n\n          $(this).addClass(\"ui-state-active\");\n          that.buttonElement.attr(\"aria-pressed\", \"true\");\n          var radio = that.element[0];\n          radioGroup(radio).not(radio).map(function () {\n            return $(this).button(\"widget\")[0];\n          }).removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n        });\n      } else {\n        this.buttonElement.bind(\"mousedown\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n\n          $(this).addClass(\"ui-state-active\");\n          lastActive = this;\n          that.document.one(\"mouseup\", function () {\n            lastActive = null;\n          });\n        }).bind(\"mouseup\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n\n          $(this).removeClass(\"ui-state-active\");\n        }).bind(\"keydown\" + this.eventNamespace, function (event) {\n          if (options.disabled) {\n            return false;\n          }\n\n          if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {\n            $(this).addClass(\"ui-state-active\");\n          }\n        }) // see #8559, we bind to blur here in case the button element loses\n        // focus between keydown and keyup, it would be left in an \"active\" state\n        .bind(\"keyup\" + this.eventNamespace + \" blur\" + this.eventNamespace, function () {\n          $(this).removeClass(\"ui-state-active\");\n        });\n\n        if (this.buttonElement.is(\"a\")) {\n          this.buttonElement.keyup(function (event) {\n            if (event.keyCode === $.ui.keyCode.SPACE) {\n              // TODO pass through original event correctly (just as 2nd argument doesn't work)\n              $(this).click();\n            }\n          });\n        }\n      } // TODO: pull out $.Widget's handling for the disabled option into\n      // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can\n      // be overridden by individual plugins\n\n\n      this._setOption(\"disabled\", options.disabled);\n\n      this._resetButton();\n    },\n    _determineButtonType: function _determineButtonType() {\n      var ancestor, labelSelector, checked;\n\n      if (this.element.is(\"[type=checkbox]\")) {\n        this.type = \"checkbox\";\n      } else if (this.element.is(\"[type=radio]\")) {\n        this.type = \"radio\";\n      } else if (this.element.is(\"input\")) {\n        this.type = \"input\";\n      } else {\n        this.type = \"button\";\n      }\n\n      if (this.type === \"checkbox\" || this.type === \"radio\") {\n        // we don't search against the document in case the element\n        // is disconnected from the DOM\n        ancestor = this.element.parents().last();\n        labelSelector = \"label[for='\" + this.element.attr(\"id\") + \"']\";\n        this.buttonElement = ancestor.find(labelSelector);\n\n        if (!this.buttonElement.length) {\n          ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();\n          this.buttonElement = ancestor.filter(labelSelector);\n\n          if (!this.buttonElement.length) {\n            this.buttonElement = ancestor.find(labelSelector);\n          }\n        }\n\n        this.element.addClass(\"ui-helper-hidden-accessible\");\n        checked = this.element.is(\":checked\");\n\n        if (checked) {\n          this.buttonElement.addClass(\"ui-state-active\");\n        }\n\n        this.buttonElement.prop(\"aria-pressed\", checked);\n      } else {\n        this.buttonElement = this.element;\n      }\n    },\n    widget: function widget() {\n      return this.buttonElement;\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-helper-hidden-accessible\");\n      this.buttonElement.removeClass(baseClasses + \" \" + stateClasses + \" \" + typeClasses).removeAttr(\"role\").removeAttr(\"aria-pressed\").html(this.buttonElement.find(\".ui-button-text\").html());\n\n      if (!this.hasTitle) {\n        this.buttonElement.removeAttr(\"title\");\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        if (value) {\n          this.element.prop(\"disabled\", true);\n        } else {\n          this.element.prop(\"disabled\", false);\n        }\n\n        return;\n      }\n\n      this._resetButton();\n    },\n    refresh: function refresh() {\n      //See #8237 & #8828\n      var isDisabled = this.element.is(\"input, button\") ? this.element.is(\":disabled\") : this.element.hasClass(\"ui-button-disabled\");\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOption(\"disabled\", isDisabled);\n      }\n\n      if (this.type === \"radio\") {\n        radioGroup(this.element[0]).each(function () {\n          if ($(this).is(\":checked\")) {\n            $(this).button(\"widget\").addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n          } else {\n            $(this).button(\"widget\").removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n          }\n        });\n      } else if (this.type === \"checkbox\") {\n        if (this.element.is(\":checked\")) {\n          this.buttonElement.addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n        } else {\n          this.buttonElement.removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n        }\n      }\n    },\n    _resetButton: function _resetButton() {\n      if (this.type === \"input\") {\n        if (this.options.label) {\n          this.element.val(this.options.label);\n        }\n\n        return;\n      }\n\n      var buttonElement = this.buttonElement.removeClass(typeClasses),\n          buttonText = $(\"<span></span>\", this.document[0]).addClass(\"ui-button-text\").html(this.options.label).appendTo(buttonElement.empty()).text(),\n          icons = this.options.icons,\n          multipleIcons = icons.primary && icons.secondary,\n          buttonClasses = [];\n\n      if (icons.primary || icons.secondary) {\n        if (this.options.text) {\n          buttonClasses.push(\"ui-button-text-icon\" + (multipleIcons ? \"s\" : icons.primary ? \"-primary\" : \"-secondary\"));\n        }\n\n        if (icons.primary) {\n          buttonElement.prepend(\"<span class='ui-button-icon-primary ui-icon \" + icons.primary + \"'></span>\");\n        }\n\n        if (icons.secondary) {\n          buttonElement.append(\"<span class='ui-button-icon-secondary ui-icon \" + icons.secondary + \"'></span>\");\n        }\n\n        if (!this.options.text) {\n          buttonClasses.push(multipleIcons ? \"ui-button-icons-only\" : \"ui-button-icon-only\");\n\n          if (!this.hasTitle) {\n            buttonElement.attr(\"title\", $.trim(buttonText));\n          }\n        }\n      } else {\n        buttonClasses.push(\"ui-button-text-only\");\n      }\n\n      buttonElement.addClass(buttonClasses.join(\" \"));\n    }\n  });\n  $.widget(\"ui.buttonset\", {\n    version: \"1.10.1\",\n    options: {\n      items: \"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)\"\n    },\n    _create: function _create() {\n      this.element.addClass(\"ui-buttonset\");\n    },\n    _init: function _init() {\n      this.refresh();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"disabled\") {\n        this.buttons.button(\"option\", key, value);\n      }\n\n      this._super(key, value);\n    },\n    refresh: function refresh() {\n      var rtl = this.element.css(\"direction\") === \"rtl\";\n      this.buttons = this.element.find(this.options.items).filter(\":ui-button\").button(\"refresh\").end().not(\":ui-button\").button().end().map(function () {\n        return $(this).button(\"widget\")[0];\n      }).removeClass(\"ui-corner-all ui-corner-left ui-corner-right\").filter(\":first\").addClass(rtl ? \"ui-corner-right\" : \"ui-corner-left\").end().filter(\":last\").addClass(rtl ? \"ui-corner-left\" : \"ui-corner-right\").end().end();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-buttonset\");\n      this.buttons.map(function () {\n        return $(this).button(\"widget\")[0];\n      }).removeClass(\"ui-corner-left ui-corner-right\").end().button(\"destroy\");\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  $.extend($.ui, {\n    datepicker: {\n      version: \"1.10.1\"\n    }\n  });\n  var PROP_NAME = \"datepicker\",\n      dpuuid = new Date().getTime(),\n      instActive;\n  /* Date picker manager.\n     Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n     Settings for (groups of) date pickers are maintained in an instance object,\n     allowing multiple different settings on the same page. */\n\n  function Datepicker() {\n    this._curInst = null; // The current instance in use\n\n    this._keyEvent = false; // If the last event was a key event\n\n    this._disabledInputs = []; // List of date picker inputs that have been disabled\n\n    this._datepickerShowing = false; // True if the popup picker is showing , false if not\n\n    this._inDialog = false; // True if showing within a \"dialog\", false if not\n\n    this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n\n    this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n\n    this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n\n    this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n\n    this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n\n    this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n\n    this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n\n    this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n\n    this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n\n    this.regional = []; // Available regional settings, indexed by language code\n\n    this.regional[\"\"] = {\n      // Default regional settings\n      closeText: \"Done\",\n      // Display text for close link\n      prevText: \"Prev\",\n      // Display text for previous month link\n      nextText: \"Next\",\n      // Display text for next month link\n      currentText: \"Today\",\n      // Display text for current month link\n      monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      // Names of months for drop-down and formatting\n      monthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      // For formatting\n      dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      // For formatting\n      dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      // For formatting\n      dayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n      // Column headings for days starting at Sunday\n      weekHeader: \"Wk\",\n      // Column header for week of the year\n      dateFormat: \"mm/dd/yy\",\n      // See format options on parseDate\n      firstDay: 0,\n      // The first day of the week, Sun = 0, Mon = 1, ...\n      isRTL: false,\n      // True if right-to-left language, false if left-to-right\n      showMonthAfterYear: false,\n      // True if the year select precedes month, false for month then year\n      yearSuffix: \"\" // Additional text to append to the year in the month headers\n\n    };\n    this._defaults = {\n      // Global defaults for all the date picker instances\n      showOn: \"focus\",\n      // \"focus\" for popup on focus,\n      // \"button\" for trigger button, or \"both\" for either\n      showAnim: \"fadeIn\",\n      // Name of jQuery animation for popup\n      showOptions: {},\n      // Options for enhanced animations\n      defaultDate: null,\n      // Used when field is blank: actual date,\n      // +/-number for offset from today, null for today\n      appendText: \"\",\n      // Display text following the input box, e.g. showing the format\n      buttonText: \"...\",\n      // Text for trigger button\n      buttonImage: \"\",\n      // URL for trigger button image\n      buttonImageOnly: false,\n      // True if the image appears alone, false if it appears on a button\n      hideIfNoPrevNext: false,\n      // True to hide next/previous month links\n      // if not applicable, false to just disable them\n      navigationAsDateFormat: false,\n      // True if date formatting applied to prev/today/next links\n      gotoCurrent: false,\n      // True if today link goes back to current selection instead\n      changeMonth: false,\n      // True if month can be selected directly, false if only prev/next\n      changeYear: false,\n      // True if year can be selected directly, false if only prev/next\n      yearRange: \"c-10:c+10\",\n      // Range of years to display in drop-down,\n      // either relative to today's year (-nn:+nn), relative to currently displayed year\n      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n      showOtherMonths: false,\n      // True to show dates in other months, false to leave blank\n      selectOtherMonths: false,\n      // True to allow selection of dates in other months, false for unselectable\n      showWeek: false,\n      // True to show week of the year, false to not show it\n      calculateWeek: this.iso8601Week,\n      // How to calculate the week of the year,\n      // takes a Date and returns the number of the week for it\n      shortYearCutoff: \"+10\",\n      // Short year values < this are in the current century,\n      // > this are in the previous century,\n      // string value starting with \"+\" for current year + value\n      minDate: null,\n      // The earliest selectable date, or null for no limit\n      maxDate: null,\n      // The latest selectable date, or null for no limit\n      duration: \"fast\",\n      // Duration of display/closure\n      beforeShowDay: null,\n      // Function that takes a date and returns an array with\n      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n      // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n      beforeShow: null,\n      // Function that takes an input field and\n      // returns a set of custom settings for the date picker\n      onSelect: null,\n      // Define a callback function when a date is selected\n      onChangeMonthYear: null,\n      // Define a callback function when the month or year is changed\n      onClose: null,\n      // Define a callback function when the datepicker is closed\n      numberOfMonths: 1,\n      // Number of months to show at a time\n      showCurrentAtPos: 0,\n      // The position in multipe months at which to show the current month (starting at 0)\n      stepMonths: 1,\n      // Number of months to step back/forward\n      stepBigMonths: 12,\n      // Number of months to step back/forward for the big links\n      altField: \"\",\n      // Selector for an alternate field to store selected dates into\n      altFormat: \"\",\n      // The date format to use for the alternate field\n      constrainInput: true,\n      // The input is constrained by the current date format\n      showButtonPanel: false,\n      // True to show button panel, false to not show it\n      autoSize: false,\n      // True to size the input for the date format, false to leave as is\n      disabled: false // The initial disabled state\n\n    };\n    $.extend(this._defaults, this.regional[\"\"]);\n    this.dpDiv = bindHover($(\"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));\n  }\n\n  $.extend(Datepicker.prototype, {\n    /* Class name added to elements to indicate already configured with a date picker. */\n    markerClassName: \"hasDatepicker\",\n    //Keep track of the maximum number of rows displayed (see #7043)\n    maxRows: 4,\n    // TODO rename to \"widget\" when switching to widget factory\n    _widgetDatepicker: function _widgetDatepicker() {\n      return this.dpDiv;\n    },\n\n    /* Override the default settings for all instances of the date picker.\n     * @param  settings  object - the new settings to use as defaults (anonymous object)\n     * @return the manager object\n     */\n    setDefaults: function setDefaults(settings) {\n      extendRemove(this._defaults, settings || {});\n      return this;\n    },\n\n    /* Attach the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n     */\n    _attachDatepicker: function _attachDatepicker(target, settings) {\n      var nodeName, inline, inst;\n      nodeName = target.nodeName.toLowerCase();\n      inline = nodeName === \"div\" || nodeName === \"span\";\n\n      if (!target.id) {\n        this.uuid += 1;\n        target.id = \"dp\" + this.uuid;\n      }\n\n      inst = this._newInst($(target), inline);\n      inst.settings = $.extend({}, settings || {});\n\n      if (nodeName === \"input\") {\n        this._connectDatepicker(target, inst);\n      } else if (inline) {\n        this._inlineDatepicker(target, inst);\n      }\n    },\n\n    /* Create a new instance object. */\n    _newInst: function _newInst(target, inline) {\n      var id = target[0].id.replace(/([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\"); // escape jQuery meta chars\n\n      return {\n        id: id,\n        input: target,\n        // associated target\n        selectedDay: 0,\n        selectedMonth: 0,\n        selectedYear: 0,\n        // current selection\n        drawMonth: 0,\n        drawYear: 0,\n        // month being drawn\n        inline: inline,\n        // is datepicker inline or not\n        dpDiv: !inline ? this.dpDiv : // presentation div\n        bindHover($(\"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"))\n      };\n    },\n\n    /* Attach the date picker to an input field. */\n    _connectDatepicker: function _connectDatepicker(target, inst) {\n      var input = $(target);\n      inst.append = $([]);\n      inst.trigger = $([]);\n\n      if (input.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      this._attachments(input, inst);\n\n      input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);\n\n      this._autoSize(inst);\n\n      $.data(target, PROP_NAME, inst); //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      }\n    },\n\n    /* Make attachments based on settings. */\n    _attachments: function _attachments(input, inst) {\n      var showOn,\n          buttonText,\n          buttonImage,\n          appendText = this._get(inst, \"appendText\"),\n          isRTL = this._get(inst, \"isRTL\");\n\n      if (inst.append) {\n        inst.append.remove();\n      }\n\n      if (appendText) {\n        inst.append = $(\"<span class='\" + this._appendClass + \"'>\" + appendText + \"</span>\");\n        input[isRTL ? \"before\" : \"after\"](inst.append);\n      }\n\n      input.unbind(\"focus\", this._showDatepicker);\n\n      if (inst.trigger) {\n        inst.trigger.remove();\n      }\n\n      showOn = this._get(inst, \"showOn\");\n\n      if (showOn === \"focus\" || showOn === \"both\") {\n        // pop-up date picker when in the marked field\n        input.focus(this._showDatepicker);\n      }\n\n      if (showOn === \"button\" || showOn === \"both\") {\n        // pop-up date picker when button clicked\n        buttonText = this._get(inst, \"buttonText\");\n        buttonImage = this._get(inst, \"buttonImage\");\n        inst.trigger = $(this._get(inst, \"buttonImageOnly\") ? $(\"<img/>\").addClass(this._triggerClass).attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        }) : $(\"<button type='button'></button>\").addClass(this._triggerClass).html(!buttonImage ? buttonText : $(\"<img/>\").attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        })));\n        input[isRTL ? \"before\" : \"after\"](inst.trigger);\n        inst.trigger.click(function () {\n          if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {\n            $.datepicker._hideDatepicker();\n          } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {\n            $.datepicker._hideDatepicker();\n\n            $.datepicker._showDatepicker(input[0]);\n          } else {\n            $.datepicker._showDatepicker(input[0]);\n          }\n\n          return false;\n        });\n      }\n    },\n\n    /* Apply the maximum length for the date format. */\n    _autoSize: function _autoSize(inst) {\n      if (this._get(inst, \"autoSize\") && !inst.inline) {\n        var findMax,\n            max,\n            maxI,\n            i,\n            date = new Date(2009, 12 - 1, 20),\n            // Ensure double digits\n        dateFormat = this._get(inst, \"dateFormat\");\n\n        if (dateFormat.match(/[DM]/)) {\n          findMax = function findMax(names) {\n            max = 0;\n            maxI = 0;\n\n            for (i = 0; i < names.length; i++) {\n              if (names[i].length > max) {\n                max = names[i].length;\n                maxI = i;\n              }\n            }\n\n            return maxI;\n          };\n\n          date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? \"monthNames\" : \"monthNamesShort\")));\n          date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? \"dayNames\" : \"dayNamesShort\")) + 20 - date.getDay());\n        }\n\n        inst.input.attr(\"size\", this._formatDate(inst, date).length);\n      }\n    },\n\n    /* Attach an inline date picker to a div. */\n    _inlineDatepicker: function _inlineDatepicker(target, inst) {\n      var divSpan = $(target);\n\n      if (divSpan.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      divSpan.addClass(this.markerClassName).append(inst.dpDiv);\n      $.data(target, PROP_NAME, inst);\n\n      this._setDate(inst, this._getDefaultDate(inst), true);\n\n      this._updateDatepicker(inst);\n\n      this._updateAlternate(inst); //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      } // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n      // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n\n\n      inst.dpDiv.css(\"display\", \"block\");\n    },\n\n    /* Pop-up the date picker in a \"dialog\" box.\n     * @param  input element - ignored\n     * @param  date\tstring or Date - the initial date to display\n     * @param  onSelect  function - the function to call when a date is selected\n     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n     * @param  pos int[2] - coordinates for the dialog's position within the screen or\n     *\t\t\t\t\tevent - with x/y coordinates or\n     *\t\t\t\t\tleave empty for default (screen centre)\n     * @return the manager object\n     */\n    _dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {\n      var id,\n          browserWidth,\n          browserHeight,\n          scrollX,\n          scrollY,\n          inst = this._dialogInst; // internal instance\n\n      if (!inst) {\n        this.uuid += 1;\n        id = \"dp\" + this.uuid;\n        this._dialogInput = $(\"<input type='text' id='\" + id + \"' style='position: absolute; top: -100px; width: 0px;'/>\");\n\n        this._dialogInput.keydown(this._doKeyDown);\n\n        $(\"body\").append(this._dialogInput);\n        inst = this._dialogInst = this._newInst(this._dialogInput, false);\n        inst.settings = {};\n        $.data(this._dialogInput[0], PROP_NAME, inst);\n      }\n\n      extendRemove(inst.settings, settings || {});\n      date = date && date.constructor === Date ? this._formatDate(inst, date) : date;\n\n      this._dialogInput.val(date);\n\n      this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;\n\n      if (!this._pos) {\n        browserWidth = document.documentElement.clientWidth;\n        browserHeight = document.documentElement.clientHeight;\n        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n        scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n        this._pos = // should use actual width/height below\n        [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];\n      } // move input on screen for focus, but hidden behind dialog\n\n\n      this._dialogInput.css(\"left\", this._pos[0] + 20 + \"px\").css(\"top\", this._pos[1] + \"px\");\n\n      inst.settings.onSelect = onSelect;\n      this._inDialog = true;\n      this.dpDiv.addClass(this._dialogClass);\n\n      this._showDatepicker(this._dialogInput[0]);\n\n      if ($.blockUI) {\n        $.blockUI(this.dpDiv);\n      }\n\n      $.data(this._dialogInput[0], PROP_NAME, inst);\n      return this;\n    },\n\n    /* Detach a datepicker from its control.\n     * @param  target\telement - the target input field or division or span\n     */\n    _destroyDatepicker: function _destroyDatepicker(target) {\n      var nodeName,\n          $target = $(target),\n          inst = $.data(target, PROP_NAME);\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n      $.removeData(target, PROP_NAME);\n\n      if (nodeName === \"input\") {\n        inst.append.remove();\n        inst.trigger.remove();\n        $target.removeClass(this.markerClassName).unbind(\"focus\", this._showDatepicker).unbind(\"keydown\", this._doKeyDown).unbind(\"keypress\", this._doKeyPress).unbind(\"keyup\", this._doKeyUp);\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        $target.removeClass(this.markerClassName).empty();\n      }\n    },\n\n    /* Enable the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     */\n    _enableDatepicker: function _enableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, PROP_NAME);\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = false;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = false;\n        }).end().filter(\"img\").css({\n          opacity: \"1.0\",\n          cursor: \"\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().removeClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", false);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n    },\n\n    /* Disable the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     */\n    _disableDatepicker: function _disableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, PROP_NAME);\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = true;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = true;\n        }).end().filter(\"img\").css({\n          opacity: \"0.5\",\n          cursor: \"default\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().addClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", true);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n\n      this._disabledInputs[this._disabledInputs.length] = target;\n    },\n\n    /* Is the first field in a jQuery collection disabled as a datepicker?\n     * @param  target\telement - the target input field or division or span\n     * @return boolean - true if disabled, false if enabled\n     */\n    _isDisabledDatepicker: function _isDisabledDatepicker(target) {\n      if (!target) {\n        return false;\n      }\n\n      for (var i = 0; i < this._disabledInputs.length; i++) {\n        if (this._disabledInputs[i] === target) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /* Retrieve the instance data for the target control.\n     * @param  target  element - the target input field or division or span\n     * @return  object - the associated instance data\n     * @throws  error if a jQuery problem getting data\n     */\n    _getInst: function _getInst(target) {\n      try {\n        return $.data(target, PROP_NAME);\n      } catch (err) {\n        throw \"Missing instance data for this datepicker\";\n      }\n    },\n\n    /* Update or retrieve the settings for a date picker attached to an input field or division.\n     * @param  target  element - the target input field or division or span\n     * @param  name\tobject - the new settings to update or\n     *\t\t\t\tstring - the name of the setting to change or retrieve,\n     *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n     *\t\t\t\t\"defaults\" for all global defaults\n     * @param  value   any - the new value for the setting\n     *\t\t\t\t(omit if above is an object or to retrieve a value)\n     */\n    _optionDatepicker: function _optionDatepicker(target, name, value) {\n      var settings,\n          date,\n          minDate,\n          maxDate,\n          inst = this._getInst(target);\n\n      if (arguments.length === 2 && typeof name === \"string\") {\n        return name === \"defaults\" ? $.extend({}, $.datepicker._defaults) : inst ? name === \"all\" ? $.extend({}, inst.settings) : this._get(inst, name) : null;\n      }\n\n      settings = name || {};\n\n      if (typeof name === \"string\") {\n        settings = {};\n        settings[name] = value;\n      }\n\n      if (inst) {\n        if (this._curInst === inst) {\n          this._hideDatepicker();\n        }\n\n        date = this._getDateDatepicker(target, true);\n        minDate = this._getMinMaxDate(inst, \"min\");\n        maxDate = this._getMinMaxDate(inst, \"max\");\n        extendRemove(inst.settings, settings); // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n\n        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {\n          inst.settings.minDate = this._formatDate(inst, minDate);\n        }\n\n        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {\n          inst.settings.maxDate = this._formatDate(inst, maxDate);\n        }\n\n        if (\"disabled\" in settings) {\n          if (settings.disabled) {\n            this._disableDatepicker(target);\n          } else {\n            this._enableDatepicker(target);\n          }\n        }\n\n        this._attachments($(target), inst);\n\n        this._autoSize(inst);\n\n        this._setDate(inst, date);\n\n        this._updateAlternate(inst);\n\n        this._updateDatepicker(inst);\n      }\n    },\n    // change method deprecated\n    _changeDatepicker: function _changeDatepicker(target, name, value) {\n      this._optionDatepicker(target, name, value);\n    },\n\n    /* Redraw the date picker attached to an input field or division.\n     * @param  target  element - the target input field or division or span\n     */\n    _refreshDatepicker: function _refreshDatepicker(target) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._updateDatepicker(inst);\n      }\n    },\n\n    /* Set the dates for a jQuery selection.\n     * @param  target element - the target input field or division or span\n     * @param  date\tDate - the new date\n     */\n    _setDateDatepicker: function _setDateDatepicker(target, date) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._setDate(inst, date);\n\n        this._updateDatepicker(inst);\n\n        this._updateAlternate(inst);\n      }\n    },\n\n    /* Get the date(s) for the first entry in a jQuery selection.\n     * @param  target element - the target input field or division or span\n     * @param  noDefault boolean - true if no default date is to be used\n     * @return Date - the current date\n     */\n    _getDateDatepicker: function _getDateDatepicker(target, noDefault) {\n      var inst = this._getInst(target);\n\n      if (inst && !inst.inline) {\n        this._setDateFromField(inst, noDefault);\n      }\n\n      return inst ? this._getDate(inst) : null;\n    },\n\n    /* Handle keystrokes. */\n    _doKeyDown: function _doKeyDown(event) {\n      var onSelect,\n          dateStr,\n          sel,\n          inst = $.datepicker._getInst(event.target),\n          handled = true,\n          isRTL = inst.dpDiv.is(\".ui-datepicker-rtl\");\n\n      inst._keyEvent = true;\n\n      if ($.datepicker._datepickerShowing) {\n        switch (event.keyCode) {\n          case 9:\n            $.datepicker._hideDatepicker();\n\n            handled = false;\n            break;\n          // hide on tab out\n\n          case 13:\n            sel = $(\"td.\" + $.datepicker._dayOverClass + \":not(.\" + $.datepicker._currentClass + \")\", inst.dpDiv);\n\n            if (sel[0]) {\n              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\n            }\n\n            onSelect = $.datepicker._get(inst, \"onSelect\");\n\n            if (onSelect) {\n              dateStr = $.datepicker._formatDate(inst); // trigger custom callback\n\n              onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);\n            } else {\n              $.datepicker._hideDatepicker();\n            }\n\n            return false;\n          // don't submit the form\n\n          case 27:\n            $.datepicker._hideDatepicker();\n\n            break;\n          // hide on escape\n\n          case 33:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // previous month/year on page up/+ ctrl\n\n          case 34:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // next month/year on page down/+ ctrl\n\n          case 35:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._clearDate(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // clear on ctrl or command +end\n\n          case 36:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._gotoToday(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // current on ctrl or command +home\n\n          case 37:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // -1 day on ctrl or command +left\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +left on Mac\n\n\n            break;\n\n          case 38:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, -7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // -1 week on ctrl or command +up\n\n          case 39:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // +1 day on ctrl or command +right\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +right\n\n\n            break;\n\n          case 40:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, +7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // +1 week on ctrl or command +down\n\n          default:\n            handled = false;\n        }\n      } else if (event.keyCode === 36 && event.ctrlKey) {\n        // display the date picker on ctrl+home\n        $.datepicker._showDatepicker(this);\n      } else {\n        handled = false;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n\n    /* Filter entered characters - based on date format. */\n    _doKeyPress: function _doKeyPress(event) {\n      var chars,\n          chr,\n          inst = $.datepicker._getInst(event.target);\n\n      if ($.datepicker._get(inst, \"constrainInput\")) {\n        chars = $.datepicker._possibleChars($.datepicker._get(inst, \"dateFormat\"));\n        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);\n        return event.ctrlKey || event.metaKey || chr < \" \" || !chars || chars.indexOf(chr) > -1;\n      }\n    },\n\n    /* Synchronise manual entry and field/alternate field. */\n    _doKeyUp: function _doKeyUp(event) {\n      var date,\n          inst = $.datepicker._getInst(event.target);\n\n      if (inst.input.val() !== inst.lastVal) {\n        try {\n          date = $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));\n\n          if (date) {\n            // only if valid\n            $.datepicker._setDateFromField(inst);\n\n            $.datepicker._updateAlternate(inst);\n\n            $.datepicker._updateDatepicker(inst);\n          }\n        } catch (err) {}\n      }\n\n      return true;\n    },\n\n    /* Pop-up the date picker for a given input field.\n     * If false returned from beforeShow event handler do not show.\n     * @param  input  element - the input field attached to the date picker or\n     *\t\t\t\t\tevent - if triggered by focus\n     */\n    _showDatepicker: function _showDatepicker(input) {\n      input = input.target || input;\n\n      if (input.nodeName.toLowerCase() !== \"input\") {\n        // find from button/image trigger\n        input = $(\"input\", input.parentNode)[0];\n      }\n\n      if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {\n        // already here\n        return;\n      }\n\n      var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;\n      inst = $.datepicker._getInst(input);\n\n      if ($.datepicker._curInst && $.datepicker._curInst !== inst) {\n        $.datepicker._curInst.dpDiv.stop(true, true);\n\n        if (inst && $.datepicker._datepickerShowing) {\n          $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\n        }\n      }\n\n      beforeShow = $.datepicker._get(inst, \"beforeShow\");\n      beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\n\n      if (beforeShowSettings === false) {\n        return;\n      }\n\n      extendRemove(inst.settings, beforeShowSettings);\n      inst.lastVal = null;\n      $.datepicker._lastInput = input;\n\n      $.datepicker._setDateFromField(inst);\n\n      if ($.datepicker._inDialog) {\n        // hide cursor\n        input.value = \"\";\n      }\n\n      if (!$.datepicker._pos) {\n        // position below input\n        $.datepicker._pos = $.datepicker._findPos(input);\n        $.datepicker._pos[1] += input.offsetHeight; // add the height\n      }\n\n      isFixed = false;\n      $(input).parents().each(function () {\n        isFixed |= $(this).css(\"position\") === \"fixed\";\n        return !isFixed;\n      });\n      offset = {\n        left: $.datepicker._pos[0],\n        top: $.datepicker._pos[1]\n      };\n      $.datepicker._pos = null; //to avoid flashes on Firefox\n\n      inst.dpDiv.empty(); // determine sizing offscreen\n\n      inst.dpDiv.css({\n        position: \"absolute\",\n        display: \"block\",\n        top: \"-1000px\"\n      });\n\n      $.datepicker._updateDatepicker(inst); // fix width for dynamic number of date pickers\n      // and adjust position before showing\n\n\n      offset = $.datepicker._checkOffset(inst, offset, isFixed);\n      inst.dpDiv.css({\n        position: $.datepicker._inDialog && $.blockUI ? \"static\" : isFixed ? \"fixed\" : \"absolute\",\n        display: \"none\",\n        left: offset.left + \"px\",\n        top: offset.top + \"px\"\n      });\n\n      if (!inst.inline) {\n        showAnim = $.datepicker._get(inst, \"showAnim\");\n        duration = $.datepicker._get(inst, \"duration\");\n        inst.dpDiv.zIndex($(input).zIndex() + 1);\n        $.datepicker._datepickerShowing = true;\n\n        if ($.effects && $.effects.effect[showAnim]) {\n          inst.dpDiv.show(showAnim, $.datepicker._get(inst, \"showOptions\"), duration);\n        } else {\n          inst.dpDiv[showAnim || \"show\"](showAnim ? duration : null);\n        }\n\n        if (inst.input.is(\":visible\") && !inst.input.is(\":disabled\")) {\n          inst.input.focus();\n        }\n\n        $.datepicker._curInst = inst;\n      }\n    },\n\n    /* Generate the date picker content. */\n    _updateDatepicker: function _updateDatepicker(inst) {\n      this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n\n      instActive = inst; // for delegate hover events\n\n      inst.dpDiv.empty().append(this._generateHTML(inst));\n\n      this._attachHandlers(inst);\n\n      inst.dpDiv.find(\".\" + this._dayOverClass + \" a\").mouseover();\n\n      var origyearshtml,\n          numMonths = this._getNumberOfMonths(inst),\n          cols = numMonths[1],\n          width = 17;\n\n      inst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");\n\n      if (cols > 1) {\n        inst.dpDiv.addClass(\"ui-datepicker-multi-\" + cols).css(\"width\", width * cols + \"em\");\n      }\n\n      inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-multi\");\n      inst.dpDiv[(this._get(inst, \"isRTL\") ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-rtl\"); // #6694 - don't focus the input if it's already focused\n      // this breaks the change event in IE\n\n      if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input && inst.input.is(\":visible\") && !inst.input.is(\":disabled\") && inst.input[0] !== document.activeElement) {\n        inst.input.focus();\n      } // deffered render of the years select (to avoid flashes on Firefox)\n\n\n      if (inst.yearshtml) {\n        origyearshtml = inst.yearshtml;\n        setTimeout(function () {\n          //assure that inst.yearshtml didn't change.\n          if (origyearshtml === inst.yearshtml && inst.yearshtml) {\n            inst.dpDiv.find(\"select.ui-datepicker-year:first\").replaceWith(inst.yearshtml);\n          }\n\n          origyearshtml = inst.yearshtml = null;\n        }, 0);\n      }\n    },\n\n    /* Retrieve the size of left and top borders for an element.\n     * @param  elem  (jQuery object) the element of interest\n     * @return  (number[2]) the left and top borders\n     */\n    _getBorders: function _getBorders(elem) {\n      var convert = function convert(value) {\n        return {\n          thin: 1,\n          medium: 2,\n          thick: 3\n        }[value] || value;\n      };\n\n      return [parseFloat(convert(elem.css(\"border-left-width\"))), parseFloat(convert(elem.css(\"border-top-width\")))];\n    },\n\n    /* Check positioning to remain on screen. */\n    _checkOffset: function _checkOffset(inst, offset, isFixed) {\n      var dpWidth = inst.dpDiv.outerWidth(),\n          dpHeight = inst.dpDiv.outerHeight(),\n          inputWidth = inst.input ? inst.input.outerWidth() : 0,\n          inputHeight = inst.input ? inst.input.outerHeight() : 0,\n          viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),\n          viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\n      offset.left -= this._get(inst, \"isRTL\") ? dpWidth - inputWidth : 0;\n      offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;\n      offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0; // now check if datepicker is showing outside window viewport - move to a better place if so.\n\n      offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n      offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);\n      return offset;\n    },\n\n    /* Find an object's position on the screen. */\n    _findPos: function _findPos(obj) {\n      var position,\n          inst = this._getInst(obj),\n          isRTL = this._get(inst, \"isRTL\");\n\n      while (obj && (obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {\n        obj = obj[isRTL ? \"previousSibling\" : \"nextSibling\"];\n      }\n\n      position = $(obj).offset();\n      return [position.left, position.top];\n    },\n\n    /* Hide the date picker from view.\n     * @param  input  element - the input field attached to the date picker\n     */\n    _hideDatepicker: function _hideDatepicker(input) {\n      var showAnim,\n          duration,\n          postProcess,\n          onClose,\n          inst = this._curInst;\n\n      if (!inst || input && inst !== $.data(input, PROP_NAME)) {\n        return;\n      }\n\n      if (this._datepickerShowing) {\n        showAnim = this._get(inst, \"showAnim\");\n        duration = this._get(inst, \"duration\");\n\n        postProcess = function postProcess() {\n          $.datepicker._tidyDialog(inst);\n        }; // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n\n\n        if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {\n          inst.dpDiv.hide(showAnim, $.datepicker._get(inst, \"showOptions\"), duration, postProcess);\n        } else {\n          inst.dpDiv[showAnim === \"slideDown\" ? \"slideUp\" : showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\"](showAnim ? duration : null, postProcess);\n        }\n\n        if (!showAnim) {\n          postProcess();\n        }\n\n        this._datepickerShowing = false;\n        onClose = this._get(inst, \"onClose\");\n\n        if (onClose) {\n          onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : \"\", inst]);\n        }\n\n        this._lastInput = null;\n\n        if (this._inDialog) {\n          this._dialogInput.css({\n            position: \"absolute\",\n            left: \"0\",\n            top: \"-100px\"\n          });\n\n          if ($.blockUI) {\n            $.unblockUI();\n            $(\"body\").append(this.dpDiv);\n          }\n        }\n\n        this._inDialog = false;\n      }\n    },\n\n    /* Tidy up after a dialog display. */\n    _tidyDialog: function _tidyDialog(inst) {\n      inst.dpDiv.removeClass(this._dialogClass).unbind(\".ui-datepicker-calendar\");\n    },\n\n    /* Close date picker if clicked elsewhere. */\n    _checkExternalClick: function _checkExternalClick(event) {\n      if (!$.datepicker._curInst) {\n        return;\n      }\n\n      var $target = $(event.target),\n          inst = $.datepicker._getInst($target[0]);\n\n      if ($target[0].id !== $.datepicker._mainDivId && $target.parents(\"#\" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest(\".\" + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {\n        $.datepicker._hideDatepicker();\n      }\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustDate: function _adjustDate(id, offset, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      this._adjustInstDate(inst, offset + (period === \"M\" ? this._get(inst, \"showCurrentAtPos\") : 0), // undo positioning\n      period);\n\n      this._updateDatepicker(inst);\n    },\n\n    /* Action for current link. */\n    _gotoToday: function _gotoToday(id) {\n      var date,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._get(inst, \"gotoCurrent\") && inst.currentDay) {\n        inst.selectedDay = inst.currentDay;\n        inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n        inst.drawYear = inst.selectedYear = inst.currentYear;\n      } else {\n        date = new Date();\n        inst.selectedDay = date.getDate();\n        inst.drawMonth = inst.selectedMonth = date.getMonth();\n        inst.drawYear = inst.selectedYear = date.getFullYear();\n      }\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a new month/year. */\n    _selectMonthYear: function _selectMonthYear(id, select, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      inst[\"selected\" + (period === \"M\" ? \"Month\" : \"Year\")] = inst[\"draw\" + (period === \"M\" ? \"Month\" : \"Year\")] = parseInt(select.options[select.selectedIndex].value, 10);\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a day. */\n    _selectDay: function _selectDay(id, month, year, td) {\n      var inst,\n          target = $(id);\n\n      if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      inst = this._getInst(target[0]);\n      inst.selectedDay = inst.currentDay = $(\"a\", td).html();\n      inst.selectedMonth = inst.currentMonth = month;\n      inst.selectedYear = inst.currentYear = year;\n\n      this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));\n    },\n\n    /* Erase the input field and hide the date picker. */\n    _clearDate: function _clearDate(id) {\n      var target = $(id);\n\n      this._selectDate(target, \"\");\n    },\n\n    /* Update the input field with the selected date. */\n    _selectDate: function _selectDate(id, dateStr) {\n      var onSelect,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      dateStr = dateStr != null ? dateStr : this._formatDate(inst);\n\n      if (inst.input) {\n        inst.input.val(dateStr);\n      }\n\n      this._updateAlternate(inst);\n\n      onSelect = this._get(inst, \"onSelect\");\n\n      if (onSelect) {\n        onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback\n      } else if (inst.input) {\n        inst.input.trigger(\"change\"); // fire the change event\n      }\n\n      if (inst.inline) {\n        this._updateDatepicker(inst);\n      } else {\n        this._hideDatepicker();\n\n        this._lastInput = inst.input[0];\n\n        if (_typeof(inst.input[0]) !== \"object\") {\n          inst.input.focus(); // restore focus\n        }\n\n        this._lastInput = null;\n      }\n    },\n\n    /* Update any alternate field to synchronise with the main field. */\n    _updateAlternate: function _updateAlternate(inst) {\n      var altFormat,\n          date,\n          dateStr,\n          altField = this._get(inst, \"altField\");\n\n      if (altField) {\n        // update alternate field too\n        altFormat = this._get(inst, \"altFormat\") || this._get(inst, \"dateFormat\");\n        date = this._getDate(inst);\n        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\n        $(altField).each(function () {\n          $(this).val(dateStr);\n        });\n      }\n    },\n\n    /* Set as beforeShowDay function to prevent selection of weekends.\n     * @param  date  Date - the date to customise\n     * @return [boolean, string] - is this date selectable?, what is its CSS class?\n     */\n    noWeekends: function noWeekends(date) {\n      var day = date.getDay();\n      return [day > 0 && day < 6, \"\"];\n    },\n\n    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n     * @param  date  Date - the date to get the week for\n     * @return  number - the number of the week within the year that contains this date\n     */\n    iso8601Week: function iso8601Week(date) {\n      var time,\n          checkDate = new Date(date.getTime()); // Find Thursday of this week starting on Monday\n\n      checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n      time = checkDate.getTime();\n      checkDate.setMonth(0); // Compare with Jan 1\n\n      checkDate.setDate(1);\n      return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n    },\n\n    /* Parse a string value into a date object.\n     * See formatDate below for the possible formats.\n     *\n     * @param  format string - the expected format of the date\n     * @param  value string - the date in the above format\n     * @param  settings Object - attributes include:\n     *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n     * @return  Date - the extracted date value or null if value is blank\n     */\n    parseDate: function parseDate(format, value, settings) {\n      if (format == null || value == null) {\n        throw \"Invalid arguments\";\n      }\n\n      value = _typeof(value) === \"object\" ? value.toString() : value + \"\";\n\n      if (value === \"\") {\n        return null;\n      }\n\n      var iFormat,\n          dim,\n          extra,\n          iValue = 0,\n          shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,\n          shortYearCutoff = typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          year = -1,\n          month = -1,\n          day = -1,\n          doy = -1,\n          literal = false,\n          date,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Extract a number from the string value\n      getNumber = function getNumber(match) {\n        var isDoubled = lookAhead(match),\n            size = match === \"@\" ? 14 : match === \"!\" ? 20 : match === \"y\" && isDoubled ? 4 : match === \"o\" ? 3 : 2,\n            digits = new RegExp(\"^\\\\d{1,\" + size + \"}\"),\n            num = value.substring(iValue).match(digits);\n\n        if (!num) {\n          throw \"Missing number at position \" + iValue;\n        }\n\n        iValue += num[0].length;\n        return parseInt(num[0], 10);\n      },\n          // Extract a name from the string value and convert to an index\n      getName = function getName(match, shortNames, longNames) {\n        var index = -1,\n            names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\n          return [[k, v]];\n        }).sort(function (a, b) {\n          return -(a[1].length - b[1].length);\n        });\n        $.each(names, function (i, pair) {\n          var name = pair[1];\n\n          if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n            index = pair[0];\n            iValue += name.length;\n            return false;\n          }\n        });\n\n        if (index !== -1) {\n          return index + 1;\n        } else {\n          throw \"Unknown name at position \" + iValue;\n        }\n      },\n          // Confirm that a literal character matches the string value\n      checkLiteral = function checkLiteral() {\n        if (value.charAt(iValue) !== format.charAt(iFormat)) {\n          throw \"Unexpected literal at position \" + iValue;\n        }\n\n        iValue++;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            checkLiteral();\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n              day = getNumber(\"d\");\n              break;\n\n            case \"D\":\n              getName(\"D\", dayNamesShort, dayNames);\n              break;\n\n            case \"o\":\n              doy = getNumber(\"o\");\n              break;\n\n            case \"m\":\n              month = getNumber(\"m\");\n              break;\n\n            case \"M\":\n              month = getName(\"M\", monthNamesShort, monthNames);\n              break;\n\n            case \"y\":\n              year = getNumber(\"y\");\n              break;\n\n            case \"@\":\n              date = new Date(getNumber(\"@\"));\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"!\":\n              date = new Date((getNumber(\"!\") - this._ticksTo1970) / 10000);\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                checkLiteral();\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              checkLiteral();\n          }\n        }\n      }\n\n      if (iValue < value.length) {\n        extra = value.substr(iValue);\n\n        if (!/^\\s+/.test(extra)) {\n          throw \"Extra/unparsed characters found in date: \" + extra;\n        }\n      }\n\n      if (year === -1) {\n        year = new Date().getFullYear();\n      } else if (year < 100) {\n        year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);\n      }\n\n      if (doy > -1) {\n        month = 1;\n        day = doy;\n\n        do {\n          dim = this._getDaysInMonth(year, month - 1);\n\n          if (day <= dim) {\n            break;\n          }\n\n          month++;\n          day -= dim;\n        } while (true);\n      }\n\n      date = this._daylightSavingAdjust(new Date(year, month - 1, day));\n\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n        throw \"Invalid date\"; // E.g. 31/02/00\n      }\n\n      return date;\n    },\n\n    /* Standard date formats. */\n    ATOM: \"yy-mm-dd\",\n    // RFC 3339 (ISO 8601)\n    COOKIE: \"D, dd M yy\",\n    ISO_8601: \"yy-mm-dd\",\n    RFC_822: \"D, d M y\",\n    RFC_850: \"DD, dd-M-y\",\n    RFC_1036: \"D, d M y\",\n    RFC_1123: \"D, d M yy\",\n    RFC_2822: \"D, d M yy\",\n    RSS: \"D, d M y\",\n    // RFC 822\n    TICKS: \"!\",\n    TIMESTAMP: \"@\",\n    W3C: \"yy-mm-dd\",\n    // ISO 8601\n    _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,\n\n    /* Format a date object into a string value.\n     * The format can be combinations of the following:\n     * d  - day of month (no leading zero)\n     * dd - day of month (two digit)\n     * o  - day of year (no leading zeros)\n     * oo - day of year (three digit)\n     * D  - day name short\n     * DD - day name long\n     * m  - month of year (no leading zero)\n     * mm - month of year (two digit)\n     * M  - month name short\n     * MM - month name long\n     * y  - year (two digit)\n     * yy - year (four digit)\n     * @ - Unix timestamp (ms since 01/01/1970)\n     * ! - Windows ticks (100ns since 01/01/0001)\n     * \"...\" - literal text\n     * '' - single quote\n     *\n     * @param  format string - the desired format of the date\n     * @param  date Date - the date value to format\n     * @param  settings Object - attributes include:\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n     * @return  string - the date in the above format\n     */\n    formatDate: function formatDate(format, date, settings) {\n      if (!date) {\n        return \"\";\n      }\n\n      var iFormat,\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Format a number, with leading zero if necessary\n      formatNumber = function formatNumber(match, value, len) {\n        var num = \"\" + value;\n\n        if (lookAhead(match)) {\n          while (num.length < len) {\n            num = \"0\" + num;\n          }\n        }\n\n        return num;\n      },\n          // Format a name, short or long as requested\n      formatName = function formatName(match, value, shortNames, longNames) {\n        return lookAhead(match) ? longNames[value] : shortNames[value];\n      },\n          output = \"\",\n          literal = false;\n\n      if (date) {\n        for (iFormat = 0; iFormat < format.length; iFormat++) {\n          if (literal) {\n            if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n              literal = false;\n            } else {\n              output += format.charAt(iFormat);\n            }\n          } else {\n            switch (format.charAt(iFormat)) {\n              case \"d\":\n                output += formatNumber(\"d\", date.getDate(), 2);\n                break;\n\n              case \"D\":\n                output += formatName(\"D\", date.getDay(), dayNamesShort, dayNames);\n                break;\n\n              case \"o\":\n                output += formatNumber(\"o\", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n                break;\n\n              case \"m\":\n                output += formatNumber(\"m\", date.getMonth() + 1, 2);\n                break;\n\n              case \"M\":\n                output += formatName(\"M\", date.getMonth(), monthNamesShort, monthNames);\n                break;\n\n              case \"y\":\n                output += lookAhead(\"y\") ? date.getFullYear() : (date.getYear() % 100 < 10 ? \"0\" : \"\") + date.getYear() % 100;\n                break;\n\n              case \"@\":\n                output += date.getTime();\n                break;\n\n              case \"!\":\n                output += date.getTime() * 10000 + this._ticksTo1970;\n                break;\n\n              case \"'\":\n                if (lookAhead(\"'\")) {\n                  output += \"'\";\n                } else {\n                  literal = true;\n                }\n\n                break;\n\n              default:\n                output += format.charAt(iFormat);\n            }\n          }\n        }\n      }\n\n      return output;\n    },\n\n    /* Extract all possible characters from the date format. */\n    _possibleChars: function _possibleChars(format) {\n      var iFormat,\n          chars = \"\",\n          literal = false,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            chars += format.charAt(iFormat);\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n            case \"m\":\n            case \"y\":\n            case \"@\":\n              chars += \"0123456789\";\n              break;\n\n            case \"D\":\n            case \"M\":\n              return null;\n            // Accept anything\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                chars += \"'\";\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              chars += format.charAt(iFormat);\n          }\n        }\n      }\n\n      return chars;\n    },\n\n    /* Get a setting value, defaulting if necessary. */\n    _get: function _get(inst, name) {\n      return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];\n    },\n\n    /* Parse existing date and initialise date picker. */\n    _setDateFromField: function _setDateFromField(inst, noDefault) {\n      if (inst.input.val() === inst.lastVal) {\n        return;\n      }\n\n      var dateFormat = this._get(inst, \"dateFormat\"),\n          dates = inst.lastVal = inst.input ? inst.input.val() : null,\n          defaultDate = this._getDefaultDate(inst),\n          date = defaultDate,\n          settings = this._getFormatConfig(inst);\n\n      try {\n        date = this.parseDate(dateFormat, dates, settings) || defaultDate;\n      } catch (event) {\n        dates = noDefault ? \"\" : dates;\n      }\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n      inst.currentDay = dates ? date.getDate() : 0;\n      inst.currentMonth = dates ? date.getMonth() : 0;\n      inst.currentYear = dates ? date.getFullYear() : 0;\n\n      this._adjustInstDate(inst);\n    },\n\n    /* Retrieve the default date shown on opening. */\n    _getDefaultDate: function _getDefaultDate(inst) {\n      return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, \"defaultDate\"), new Date()));\n    },\n\n    /* A date may be specified as an exact value or a relative one. */\n    _determineDate: function _determineDate(inst, date, defaultDate) {\n      var offsetNumeric = function offsetNumeric(offset) {\n        var date = new Date();\n        date.setDate(date.getDate() + offset);\n        return date;\n      },\n          offsetString = function offsetString(offset) {\n        try {\n          return $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), offset, $.datepicker._getFormatConfig(inst));\n        } catch (e) {// Ignore\n        }\n\n        var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),\n            year = date.getFullYear(),\n            month = date.getMonth(),\n            day = date.getDate(),\n            pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n            matches = pattern.exec(offset);\n\n        while (matches) {\n          switch (matches[2] || \"d\") {\n            case \"d\":\n            case \"D\":\n              day += parseInt(matches[1], 10);\n              break;\n\n            case \"w\":\n            case \"W\":\n              day += parseInt(matches[1], 10) * 7;\n              break;\n\n            case \"m\":\n            case \"M\":\n              month += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n\n            case \"y\":\n            case \"Y\":\n              year += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n          }\n\n          matches = pattern.exec(offset);\n        }\n\n        return new Date(year, month, day);\n      },\n          newDate = date == null || date === \"\" ? defaultDate : typeof date === \"string\" ? offsetString(date) : typeof date === \"number\" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());\n\n      newDate = newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate;\n\n      if (newDate) {\n        newDate.setHours(0);\n        newDate.setMinutes(0);\n        newDate.setSeconds(0);\n        newDate.setMilliseconds(0);\n      }\n\n      return this._daylightSavingAdjust(newDate);\n    },\n\n    /* Handle switch to/from daylight saving.\n     * Hours may be non-zero on daylight saving cut-over:\n     * > 12 when midnight changeover, but then cannot generate\n     * midnight datetime, so jump to 1AM, otherwise reset.\n     * @param  date  (Date) the date to check\n     * @return  (Date) the corrected date\n     */\n    _daylightSavingAdjust: function _daylightSavingAdjust(date) {\n      if (!date) {\n        return null;\n      }\n\n      date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n      return date;\n    },\n\n    /* Set the date(s) directly. */\n    _setDate: function _setDate(inst, date, noChange) {\n      var clear = !date,\n          origMonth = inst.selectedMonth,\n          origYear = inst.selectedYear,\n          newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\n\n      inst.selectedDay = inst.currentDay = newDate.getDate();\n      inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n      inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n\n      if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {\n        this._notifyChange(inst);\n      }\n\n      this._adjustInstDate(inst);\n\n      if (inst.input) {\n        inst.input.val(clear ? \"\" : this._formatDate(inst));\n      }\n    },\n\n    /* Retrieve the date(s) directly. */\n    _getDate: function _getDate(inst) {\n      var startDate = !inst.currentYear || inst.input && inst.input.val() === \"\" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return startDate;\n    },\n\n    /* Attach the onxxx handlers.  These are declared statically so\n     * they work with static code transformers like Caja.\n     */\n    _attachHandlers: function _attachHandlers(inst) {\n      var stepMonths = this._get(inst, \"stepMonths\"),\n          id = \"#\" + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\n\n      inst.dpDiv.find(\"[data-handler]\").map(function () {\n        var handler = {\n          prev: function prev() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._adjustDate(id, -stepMonths, \"M\");\n          },\n          next: function next() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._adjustDate(id, +stepMonths, \"M\");\n          },\n          hide: function hide() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._hideDatepicker();\n          },\n          today: function today() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._gotoToday(id);\n          },\n          selectDay: function selectDay() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._selectDay(id, +this.getAttribute(\"data-month\"), +this.getAttribute(\"data-year\"), this);\n\n            return false;\n          },\n          selectMonth: function selectMonth() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._selectMonthYear(id, this, \"M\");\n\n            return false;\n          },\n          selectYear: function selectYear() {\n            window[\"DP_jQuery_\" + dpuuid].datepicker._selectMonthYear(id, this, \"Y\");\n\n            return false;\n          }\n        };\n        $(this).bind(this.getAttribute(\"data-event\"), handler[this.getAttribute(\"data-handler\")]);\n      });\n    },\n\n    /* Generate the HTML for the current state of the date picker. */\n    _generateHTML: function _generateHTML(inst) {\n      var maxDraw,\n          prevText,\n          prev,\n          nextText,\n          next,\n          currentText,\n          gotoDate,\n          controls,\n          buttonPanel,\n          firstDay,\n          showWeek,\n          dayNames,\n          dayNamesMin,\n          monthNames,\n          monthNamesShort,\n          beforeShowDay,\n          showOtherMonths,\n          selectOtherMonths,\n          defaultDate,\n          html,\n          dow,\n          row,\n          group,\n          col,\n          selectedDate,\n          cornerClass,\n          calender,\n          thead,\n          day,\n          daysInMonth,\n          leadDays,\n          curRows,\n          numRows,\n          printDate,\n          dRow,\n          tbody,\n          daySettings,\n          otherMonth,\n          unselectable,\n          tempDate = new Date(),\n          today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),\n          // clear time\n      isRTL = this._get(inst, \"isRTL\"),\n          showButtonPanel = this._get(inst, \"showButtonPanel\"),\n          hideIfNoPrevNext = this._get(inst, \"hideIfNoPrevNext\"),\n          navigationAsDateFormat = this._get(inst, \"navigationAsDateFormat\"),\n          numMonths = this._getNumberOfMonths(inst),\n          showCurrentAtPos = this._get(inst, \"showCurrentAtPos\"),\n          stepMonths = this._get(inst, \"stepMonths\"),\n          isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,\n          currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          drawMonth = inst.drawMonth - showCurrentAtPos,\n          drawYear = inst.drawYear;\n\n      if (drawMonth < 0) {\n        drawMonth += 12;\n        drawYear--;\n      }\n\n      if (maxDate) {\n        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\n        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\n\n        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\n          drawMonth--;\n\n          if (drawMonth < 0) {\n            drawMonth = 11;\n            drawYear--;\n          }\n        }\n      }\n\n      inst.drawMonth = drawMonth;\n      inst.drawYear = drawYear;\n      prevText = this._get(inst, \"prevText\");\n      prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));\n      prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? \"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'\" + \" title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\";\n      nextText = this._get(inst, \"nextText\");\n      nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));\n      next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? \"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'\" + \" title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\";\n      currentText = this._get(inst, \"currentText\");\n      gotoDate = this._get(inst, \"gotoCurrent\") && inst.currentDay ? currentDate : today;\n      currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\n      controls = !inst.inline ? \"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>\" + this._get(inst, \"closeText\") + \"</button>\" : \"\";\n      buttonPanel = showButtonPanel ? \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" + (isRTL ? controls : \"\") + (this._isInRange(inst, gotoDate) ? \"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'\" + \">\" + currentText + \"</button>\" : \"\") + (isRTL ? \"\" : controls) + \"</div>\" : \"\";\n      firstDay = parseInt(this._get(inst, \"firstDay\"), 10);\n      firstDay = isNaN(firstDay) ? 0 : firstDay;\n      showWeek = this._get(inst, \"showWeek\");\n      dayNames = this._get(inst, \"dayNames\");\n      dayNamesMin = this._get(inst, \"dayNamesMin\");\n      monthNames = this._get(inst, \"monthNames\");\n      monthNamesShort = this._get(inst, \"monthNamesShort\");\n      beforeShowDay = this._get(inst, \"beforeShowDay\");\n      showOtherMonths = this._get(inst, \"showOtherMonths\");\n      selectOtherMonths = this._get(inst, \"selectOtherMonths\");\n      defaultDate = this._getDefaultDate(inst);\n      html = \"\";\n      dow;\n\n      for (row = 0; row < numMonths[0]; row++) {\n        group = \"\";\n        this.maxRows = 4;\n\n        for (col = 0; col < numMonths[1]; col++) {\n          selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\n          cornerClass = \" ui-corner-all\";\n          calender = \"\";\n\n          if (isMultiMonth) {\n            calender += \"<div class='ui-datepicker-group\";\n\n            if (numMonths[1] > 1) {\n              switch (col) {\n                case 0:\n                  calender += \" ui-datepicker-group-first\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"right\" : \"left\");\n                  break;\n\n                case numMonths[1] - 1:\n                  calender += \" ui-datepicker-group-last\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"left\" : \"right\");\n                  break;\n\n                default:\n                  calender += \" ui-datepicker-group-middle\";\n                  cornerClass = \"\";\n                  break;\n              }\n            }\n\n            calender += \"'>\";\n          }\n\n          calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : \"\") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : \"\") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\n          \"</div><table class='ui-datepicker-calendar'><thead>\" + \"<tr>\";\n          thead = showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get(inst, \"weekHeader\") + \"</th>\" : \"\";\n\n          for (dow = 0; dow < 7; dow++) {\n            // days of the week\n            day = (dow + firstDay) % 7;\n            thead += \"<th\" + ((dow + firstDay + 6) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\") + \">\" + \"<span title='\" + dayNames[day] + \"'>\" + dayNamesMin[day] + \"</span></th>\";\n          }\n\n          calender += thead + \"</tr></thead><tbody>\";\n          daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\n\n          if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\n            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\n          }\n\n          leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\n          curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\n\n          numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)\n\n          this.maxRows = numRows;\n          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\n\n          for (dRow = 0; dRow < numRows; dRow++) {\n            // create date picker rows\n            calender += \"<tr>\";\n            tbody = !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" + this._get(inst, \"calculateWeek\")(printDate) + \"</td>\";\n\n            for (dow = 0; dow < 7; dow++) {\n              // create date picker days\n              daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, \"\"];\n              otherMonth = printDate.getMonth() !== drawMonth;\n              unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;\n              tbody += \"<td class='\" + ((dow + firstDay + 6) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\") + ( // highlight weekends\n              otherMonth ? \" ui-datepicker-other-month\" : \"\") + ( // highlight days from other months\n              printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\n              defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? // or defaultDate is current printedDate and defaultDate is selectedDate\n              \" \" + this._dayOverClass : \"\") + ( // highlight selected day\n              unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\") + ( // highlight unselectable days\n              otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[1] + ( // highlight custom dates\n              printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\") + ( // highlight selected day\n              printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\")) + \"'\" + ( // highlight today (if different)\n              (!otherMonth || showOtherMonths) && daySettings[2] ? \" title='\" + daySettings[2].replace(/'/g, \"&#39;\") + \"'\" : \"\") + ( // cell title\n              unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\") + \">\" + ( // actions\n              otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n              unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" + (printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\") + (printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\") + ( // highlight selected day\n              otherMonth ? \" ui-priority-secondary\" : \"\") + // distinguish dates from other months\n              \"' href='#'>\" + printDate.getDate() + \"</a>\") + \"</td>\"; // display selectable date\n\n              printDate.setDate(printDate.getDate() + 1);\n              printDate = this._daylightSavingAdjust(printDate);\n            }\n\n            calender += tbody + \"</tr>\";\n          }\n\n          drawMonth++;\n\n          if (drawMonth > 11) {\n            drawMonth = 0;\n            drawYear++;\n          }\n\n          calender += \"</tbody></table>\" + (isMultiMonth ? \"</div>\" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? \"<div class='ui-datepicker-row-break'></div>\" : \"\") : \"\");\n          group += calender;\n        }\n\n        html += group;\n      }\n\n      html += buttonPanel;\n      inst._keyEvent = false;\n      return html;\n    },\n\n    /* Generate the month and year header. */\n    _generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {\n      var inMinYear,\n          inMaxYear,\n          month,\n          years,\n          thisYear,\n          determineYear,\n          year,\n          endYear,\n          changeMonth = this._get(inst, \"changeMonth\"),\n          changeYear = this._get(inst, \"changeYear\"),\n          showMonthAfterYear = this._get(inst, \"showMonthAfterYear\"),\n          html = \"<div class='ui-datepicker-title'>\",\n          monthHtml = \"\"; // month selection\n\n\n      if (secondary || !changeMonth) {\n        monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[drawMonth] + \"</span>\";\n      } else {\n        inMinYear = minDate && minDate.getFullYear() === drawYear;\n        inMaxYear = maxDate && maxDate.getFullYear() === drawYear;\n        monthHtml += \"<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>\";\n\n        for (month = 0; month < 12; month++) {\n          if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {\n            monthHtml += \"<option value='\" + month + \"'\" + (month === drawMonth ? \" selected='selected'\" : \"\") + \">\" + monthNamesShort[month] + \"</option>\";\n          }\n        }\n\n        monthHtml += \"</select>\";\n      }\n\n      if (!showMonthAfterYear) {\n        html += monthHtml + (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\");\n      } // year selection\n\n\n      if (!inst.yearshtml) {\n        inst.yearshtml = \"\";\n\n        if (secondary || !changeYear) {\n          html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n        } else {\n          // determine range of years to display\n          years = this._get(inst, \"yearRange\").split(\":\");\n          thisYear = new Date().getFullYear();\n\n          determineYear = function determineYear(value) {\n            var year = value.match(/c[+\\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);\n            return isNaN(year) ? thisYear : year;\n          };\n\n          year = determineYear(years[0]);\n          endYear = Math.max(year, determineYear(years[1] || \"\"));\n          year = minDate ? Math.max(year, minDate.getFullYear()) : year;\n          endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;\n          inst.yearshtml += \"<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>\";\n\n          for (; year <= endYear; year++) {\n            inst.yearshtml += \"<option value='\" + year + \"'\" + (year === drawYear ? \" selected='selected'\" : \"\") + \">\" + year + \"</option>\";\n          }\n\n          inst.yearshtml += \"</select>\";\n          html += inst.yearshtml;\n          inst.yearshtml = null;\n        }\n      }\n\n      html += this._get(inst, \"yearSuffix\");\n\n      if (showMonthAfterYear) {\n        html += (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\") + monthHtml;\n      }\n\n      html += \"</div>\"; // Close datepicker_header\n\n      return html;\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustInstDate: function _adjustInstDate(inst, offset, period) {\n      var year = inst.drawYear + (period === \"Y\" ? offset : 0),\n          month = inst.drawMonth + (period === \"M\" ? offset : 0),\n          day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === \"D\" ? offset : 0),\n          date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n\n      if (period === \"M\" || period === \"Y\") {\n        this._notifyChange(inst);\n      }\n    },\n\n    /* Ensure a date is within any min/max bounds. */\n    _restrictMinMax: function _restrictMinMax(inst, date) {\n      var minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          newDate = minDate && date < minDate ? minDate : date;\n\n      return maxDate && newDate > maxDate ? maxDate : newDate;\n    },\n\n    /* Notify change of month/year. */\n    _notifyChange: function _notifyChange(inst) {\n      var onChange = this._get(inst, \"onChangeMonthYear\");\n\n      if (onChange) {\n        onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);\n      }\n    },\n\n    /* Determine the number of months to show. */\n    _getNumberOfMonths: function _getNumberOfMonths(inst) {\n      var numMonths = this._get(inst, \"numberOfMonths\");\n\n      return numMonths == null ? [1, 1] : typeof numMonths === \"number\" ? [1, numMonths] : numMonths;\n    },\n\n    /* Determine the current maximum date - ensure no time components are set. */\n    _getMinMaxDate: function _getMinMaxDate(inst, minMax) {\n      return this._determineDate(inst, this._get(inst, minMax + \"Date\"), null);\n    },\n\n    /* Find the number of days in a given month. */\n    _getDaysInMonth: function _getDaysInMonth(year, month) {\n      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\n    },\n\n    /* Find the day of the week of the first of a month. */\n    _getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {\n      return new Date(year, month, 1).getDay();\n    },\n\n    /* Determines if we should allow a \"next/prev\" month display change. */\n    _canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {\n      var numMonths = this._getNumberOfMonths(inst),\n          date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\n\n      if (offset < 0) {\n        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\n      }\n\n      return this._isInRange(inst, date);\n    },\n\n    /* Is the given date in the accepted range? */\n    _isInRange: function _isInRange(inst, date) {\n      var yearSplit,\n          currentYear,\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          minYear = null,\n          maxYear = null,\n          years = this._get(inst, \"yearRange\");\n\n      if (years) {\n        yearSplit = years.split(\":\");\n        currentYear = new Date().getFullYear();\n        minYear = parseInt(yearSplit[0], 10);\n        maxYear = parseInt(yearSplit[1], 10);\n\n        if (yearSplit[0].match(/[+\\-].*/)) {\n          minYear += currentYear;\n        }\n\n        if (yearSplit[1].match(/[+\\-].*/)) {\n          maxYear += currentYear;\n        }\n      }\n\n      return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);\n    },\n\n    /* Provide the configuration settings for formatting/parsing. */\n    _getFormatConfig: function _getFormatConfig(inst) {\n      var shortYearCutoff = this._get(inst, \"shortYearCutoff\");\n\n      shortYearCutoff = typeof shortYearCutoff !== \"string\" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);\n      return {\n        shortYearCutoff: shortYearCutoff,\n        dayNamesShort: this._get(inst, \"dayNamesShort\"),\n        dayNames: this._get(inst, \"dayNames\"),\n        monthNamesShort: this._get(inst, \"monthNamesShort\"),\n        monthNames: this._get(inst, \"monthNames\")\n      };\n    },\n\n    /* Format the given date for display. */\n    _formatDate: function _formatDate(inst, day, month, year) {\n      if (!day) {\n        inst.currentDay = inst.selectedDay;\n        inst.currentMonth = inst.selectedMonth;\n        inst.currentYear = inst.selectedYear;\n      }\n\n      var date = day ? _typeof(day) === \"object\" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return this.formatDate(this._get(inst, \"dateFormat\"), date, this._getFormatConfig(inst));\n    }\n  });\n  /*\n   * Bind hover events for datepicker elements.\n   * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n   * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n   */\n\n  function bindHover(dpDiv) {\n    var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n    return dpDiv.delegate(selector, \"mouseout\", function () {\n      $(this).removeClass(\"ui-state-hover\");\n\n      if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-prev-hover\");\n      }\n\n      if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-next-hover\");\n      }\n    }).delegate(selector, \"mouseover\", function () {\n      if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {\n        $(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");\n        $(this).addClass(\"ui-state-hover\");\n\n        if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n          $(this).addClass(\"ui-datepicker-prev-hover\");\n        }\n\n        if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n          $(this).addClass(\"ui-datepicker-next-hover\");\n        }\n      }\n    });\n  }\n  /* jQuery extend now ignores nulls! */\n\n\n  function extendRemove(target, props) {\n    $.extend(target, props);\n\n    for (var name in props) {\n      if (props[name] == null) {\n        target[name] = props[name];\n      }\n    }\n\n    return target;\n  }\n  /* Invoke the datepicker functionality.\n     @param  options  string - a command, optionally followed by additional parameters or\n  \t\t\t\t\tObject - settings for attaching new datepicker functionality\n     @return  jQuery object */\n\n\n  $.fn.datepicker = function (options) {\n    /* Verify an empty collection wasn't passed - Fixes #6976 */\n    if (!this.length) {\n      return this;\n    }\n    /* Initialise the date picker. */\n\n\n    if (!$.datepicker.initialized) {\n      $(document).mousedown($.datepicker._checkExternalClick);\n      $.datepicker.initialized = true;\n    }\n    /* Append datepicker main container to body if not exist. */\n\n\n    if ($(\"#\" + $.datepicker._mainDivId).length === 0) {\n      $(\"body\").append($.datepicker.dpDiv);\n    }\n\n    var otherArgs = Array.prototype.slice.call(arguments, 1);\n\n    if (typeof options === \"string\" && (options === \"isDisabled\" || options === \"getDate\" || options === \"widget\")) {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    if (options === \"option\" && arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    return this.each(function () {\n      typeof options === \"string\" ? $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);\n    });\n  };\n\n  $.datepicker = new Datepicker(); // singleton instance\n\n  $.datepicker.initialized = false;\n  $.datepicker.uuid = new Date().getTime();\n  $.datepicker.version = \"1.10.1\"; // Workaround for #4055\n  // Add another global to avoid noConflict issues with inline event handlers\n\n  window[\"DP_jQuery_\" + dpuuid] = $;\n})(jQuery);\n\n(function ($, undefined) {\n  var sizeRelatedOptions = {\n    buttons: true,\n    height: true,\n    maxHeight: true,\n    maxWidth: true,\n    minHeight: true,\n    minWidth: true,\n    width: true\n  },\n      resizableRelatedOptions = {\n    maxHeight: true,\n    maxWidth: true,\n    minHeight: true,\n    minWidth: true\n  };\n  $.widget(\"ui.dialog\", {\n    version: \"1.10.1\",\n    options: {\n      appendTo: \"body\",\n      autoOpen: true,\n      buttons: [],\n      closeOnEscape: true,\n      closeText: \"\",\n      dialogClass: \"\",\n      draggable: true,\n      hide: null,\n      height: \"auto\",\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 150,\n      minWidth: 150,\n      modal: false,\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: window,\n        collision: \"fit\",\n        // Ensure the titlebar is always visible\n        using: function using(pos) {\n          var topOffset = $(this).css(pos).offset().top;\n\n          if (topOffset < 0) {\n            $(this).css(\"top\", pos.top - topOffset);\n          }\n        }\n      },\n      resizable: true,\n      show: null,\n      title: null,\n      width: 300,\n      // callbacks\n      beforeClose: null,\n      close: null,\n      drag: null,\n      dragStart: null,\n      dragStop: null,\n      focus: null,\n      open: null,\n      resize: null,\n      resizeStart: null,\n      resizeStop: null\n    },\n    _create: function _create() {\n      this.originalCss = {\n        display: this.element[0].style.display,\n        width: this.element[0].style.width,\n        minHeight: this.element[0].style.minHeight,\n        maxHeight: this.element[0].style.maxHeight,\n        height: this.element[0].style.height\n      };\n      this.originalPosition = {\n        parent: this.element.parent(),\n        index: this.element.parent().children().index(this.element)\n      };\n      this.originalTitle = this.element.attr(\"title\");\n      this.options.title = this.options.title || this.originalTitle;\n\n      this._createWrapper();\n\n      this.element.show().removeAttr(\"title\").addClass(\"ui-dialog-content ui-widget-content\").appendTo(this.uiDialog);\n\n      this._createTitlebar();\n\n      this._createButtonPane();\n\n      if (this.options.draggable && $.fn.draggable) {\n        this._makeDraggable();\n      }\n\n      if (this.options.resizable && $.fn.resizable) {\n        this._makeResizable();\n      }\n\n      this._isOpen = false;\n    },\n    _init: function _init() {\n      if (this.options.autoOpen) {\n        this.open();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element && (element.jquery || element.nodeType)) {\n        return $(element);\n      }\n\n      return this.document.find(element || \"body\").eq(0);\n    },\n    _destroy: function _destroy() {\n      var next,\n          originalPosition = this.originalPosition;\n\n      this._destroyOverlay();\n\n      this.element.removeUniqueId().removeClass(\"ui-dialog-content ui-widget-content\").css(this.originalCss) // Without detaching first, the following becomes really slow\n      .detach();\n      this.uiDialog.stop(true, true).remove();\n\n      if (this.originalTitle) {\n        this.element.attr(\"title\", this.originalTitle);\n      }\n\n      next = originalPosition.parent.children().eq(originalPosition.index); // Don't try to place the dialog next to itself (#8613)\n\n      if (next.length && next[0] !== this.element[0]) {\n        next.before(this.element);\n      } else {\n        originalPosition.parent.append(this.element);\n      }\n    },\n    widget: function widget() {\n      return this.uiDialog;\n    },\n    disable: $.noop,\n    enable: $.noop,\n    close: function close(event) {\n      var that = this;\n\n      if (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n        return;\n      }\n\n      this._isOpen = false;\n\n      this._destroyOverlay();\n\n      if (!this.opener.filter(\":focusable\").focus().length) {\n        // Hiding a focused element doesn't trigger blur in WebKit\n        // so in case we have nothing to focus on, explicitly blur the active element\n        // https://bugs.webkit.org/show_bug.cgi?id=47182\n        $(this.document[0].activeElement).blur();\n      }\n\n      this._hide(this.uiDialog, this.options.hide, function () {\n        that._trigger(\"close\", event);\n      });\n    },\n    isOpen: function isOpen() {\n      return this._isOpen;\n    },\n    moveToTop: function moveToTop() {\n      this._moveToTop();\n    },\n    _moveToTop: function _moveToTop(event, silent) {\n      var moved = !!this.uiDialog.nextAll(\":visible\").insertBefore(this.uiDialog).length;\n\n      if (moved && !silent) {\n        this._trigger(\"focus\", event);\n      }\n\n      return moved;\n    },\n    open: function open() {\n      var that = this;\n\n      if (this._isOpen) {\n        if (this._moveToTop()) {\n          this._focusTabbable();\n        }\n\n        return;\n      }\n\n      this._isOpen = true;\n      this.opener = $(this.document[0].activeElement);\n\n      this._size();\n\n      this._position();\n\n      this._createOverlay();\n\n      this._moveToTop(null, true);\n\n      this._show(this.uiDialog, this.options.show, function () {\n        that._focusTabbable();\n\n        that._trigger(\"focus\");\n      });\n\n      this._trigger(\"open\");\n    },\n    _focusTabbable: function _focusTabbable() {\n      // Set focus to the first match:\n      // 1. First element inside the dialog matching [autofocus]\n      // 2. Tabbable element inside the content element\n      // 3. Tabbable element inside the buttonpane\n      // 4. The close button\n      // 5. The dialog itself\n      var hasFocus = this.element.find(\"[autofocus]\");\n\n      if (!hasFocus.length) {\n        hasFocus = this.element.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialog;\n      }\n\n      hasFocus.eq(0).focus();\n    },\n    _keepFocus: function _keepFocus(event) {\n      function checkFocus() {\n        var activeElement = this.document[0].activeElement,\n            isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);\n\n        if (!isActive) {\n          this._focusTabbable();\n        }\n      }\n\n      event.preventDefault();\n      checkFocus.call(this); // support: IE\n      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n      // so we check again later\n\n      this._delay(checkFocus);\n    },\n    _createWrapper: function _createWrapper() {\n      this.uiDialog = $(\"<div>\").addClass(\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front \" + this.options.dialogClass).hide().attr({\n        // Setting tabIndex makes the div focusable\n        tabIndex: -1,\n        role: \"dialog\"\n      }).appendTo(this._appendTo());\n\n      this._on(this.uiDialog, {\n        keydown: function keydown(event) {\n          if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {\n            event.preventDefault();\n            this.close(event);\n            return;\n          } // prevent tabbing out of dialogs\n\n\n          if (event.keyCode !== $.ui.keyCode.TAB) {\n            return;\n          }\n\n          var tabbables = this.uiDialog.find(\":tabbable\"),\n              first = tabbables.filter(\":first\"),\n              last = tabbables.filter(\":last\");\n\n          if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n            first.focus(1);\n            event.preventDefault();\n          } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n            last.focus(1);\n            event.preventDefault();\n          }\n        },\n        mousedown: function mousedown(event) {\n          if (this._moveToTop(event)) {\n            this._focusTabbable();\n          }\n        }\n      }); // We assume that any existing aria-describedby attribute means\n      // that the dialog content is marked up properly\n      // otherwise we brute force the content as the description\n\n\n      if (!this.element.find(\"[aria-describedby]\").length) {\n        this.uiDialog.attr({\n          \"aria-describedby\": this.element.uniqueId().attr(\"id\")\n        });\n      }\n    },\n    _createTitlebar: function _createTitlebar() {\n      var uiDialogTitle;\n      this.uiDialogTitlebar = $(\"<div>\").addClass(\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\").prependTo(this.uiDialog);\n\n      this._on(this.uiDialogTitlebar, {\n        mousedown: function mousedown(event) {\n          // Don't prevent click on close button (#8838)\n          // Focusing a dialog that is partially scrolled out of view\n          // causes the browser to scroll it into view, preventing the click event\n          if (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n            // Dialog isn't getting focus when dragging (#8063)\n            this.uiDialog.focus();\n          }\n        }\n      });\n\n      this.uiDialogTitlebarClose = $(\"<button></button>\").button({\n        label: this.options.closeText,\n        icons: {\n          primary: \"ui-icon-closethick\"\n        },\n        text: false\n      }).addClass(\"ui-dialog-titlebar-close\").appendTo(this.uiDialogTitlebar);\n\n      this._on(this.uiDialogTitlebarClose, {\n        click: function click(event) {\n          event.preventDefault();\n          this.close(event);\n        }\n      });\n\n      uiDialogTitle = $(\"<span>\").uniqueId().addClass(\"ui-dialog-title\").prependTo(this.uiDialogTitlebar);\n\n      this._title(uiDialogTitle);\n\n      this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr(\"id\")\n      });\n    },\n    _title: function _title(title) {\n      if (!this.options.title) {\n        title.html(\"&#160;\");\n      }\n\n      title.text(this.options.title);\n    },\n    _createButtonPane: function _createButtonPane() {\n      this.uiDialogButtonPane = $(\"<div>\").addClass(\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\");\n      this.uiButtonSet = $(\"<div>\").addClass(\"ui-dialog-buttonset\").appendTo(this.uiDialogButtonPane);\n\n      this._createButtons();\n    },\n    _createButtons: function _createButtons() {\n      var that = this,\n          buttons = this.options.buttons; // if we already have a button pane, remove it\n\n      this.uiDialogButtonPane.remove();\n      this.uiButtonSet.empty();\n\n      if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {\n        this.uiDialog.removeClass(\"ui-dialog-buttons\");\n        return;\n      }\n\n      $.each(buttons, function (name, props) {\n        var click, buttonOptions;\n        props = $.isFunction(props) ? {\n          click: props,\n          text: name\n        } : props; // Default to a non-submitting button\n\n        props = $.extend({\n          type: \"button\"\n        }, props); // Change the context for the click callback to be the main element\n\n        click = props.click;\n\n        props.click = function () {\n          click.apply(that.element[0], arguments);\n        };\n\n        buttonOptions = {\n          icons: props.icons,\n          text: props.showText\n        };\n        delete props.icons;\n        delete props.showText;\n        $(\"<button></button>\", props).button(buttonOptions).appendTo(that.uiButtonSet);\n      });\n      this.uiDialog.addClass(\"ui-dialog-buttons\");\n      this.uiDialogButtonPane.appendTo(this.uiDialog);\n    },\n    _makeDraggable: function _makeDraggable() {\n      var that = this,\n          options = this.options;\n\n      function filteredUi(ui) {\n        return {\n          position: ui.position,\n          offset: ui.offset\n        };\n      }\n\n      this.uiDialog.draggable({\n        cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n        handle: \".ui-dialog-titlebar\",\n        containment: \"document\",\n        start: function start(event, ui) {\n          $(this).addClass(\"ui-dialog-dragging\");\n\n          that._blockFrames();\n\n          that._trigger(\"dragStart\", event, filteredUi(ui));\n        },\n        drag: function drag(event, ui) {\n          that._trigger(\"drag\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          options.position = [ui.position.left - that.document.scrollLeft(), ui.position.top - that.document.scrollTop()];\n          $(this).removeClass(\"ui-dialog-dragging\");\n\n          that._unblockFrames();\n\n          that._trigger(\"dragStop\", event, filteredUi(ui));\n        }\n      });\n    },\n    _makeResizable: function _makeResizable() {\n      var that = this,\n          options = this.options,\n          handles = options.resizable,\n          // .ui-resizable has position: relative defined in the stylesheet\n      // but dialogs have to use absolute or fixed positioning\n      position = this.uiDialog.css(\"position\"),\n          resizeHandles = typeof handles === \"string\" ? handles : \"n,e,s,w,se,sw,ne,nw\";\n\n      function filteredUi(ui) {\n        return {\n          originalPosition: ui.originalPosition,\n          originalSize: ui.originalSize,\n          position: ui.position,\n          size: ui.size\n        };\n      }\n\n      this.uiDialog.resizable({\n        cancel: \".ui-dialog-content\",\n        containment: \"document\",\n        alsoResize: this.element,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        minWidth: options.minWidth,\n        minHeight: this._minHeight(),\n        handles: resizeHandles,\n        start: function start(event, ui) {\n          $(this).addClass(\"ui-dialog-resizing\");\n\n          that._blockFrames();\n\n          that._trigger(\"resizeStart\", event, filteredUi(ui));\n        },\n        resize: function resize(event, ui) {\n          that._trigger(\"resize\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          options.height = $(this).height();\n          options.width = $(this).width();\n          $(this).removeClass(\"ui-dialog-resizing\");\n\n          that._unblockFrames();\n\n          that._trigger(\"resizeStop\", event, filteredUi(ui));\n        }\n      }).css(\"position\", position);\n    },\n    _minHeight: function _minHeight() {\n      var options = this.options;\n      return options.height === \"auto\" ? options.minHeight : Math.min(options.minHeight, options.height);\n    },\n    _position: function _position() {\n      // Need to show the dialog to get the actual offset in the position plugin\n      var isVisible = this.uiDialog.is(\":visible\");\n\n      if (!isVisible) {\n        this.uiDialog.show();\n      }\n\n      this.uiDialog.position(this.options.position);\n\n      if (!isVisible) {\n        this.uiDialog.hide();\n      }\n    },\n    _setOptions: function _setOptions(options) {\n      var that = this,\n          resize = false,\n          resizableOptions = {};\n      $.each(options, function (key, value) {\n        that._setOption(key, value);\n\n        if (key in sizeRelatedOptions) {\n          resize = true;\n        }\n\n        if (key in resizableRelatedOptions) {\n          resizableOptions[key] = value;\n        }\n      });\n\n      if (resize) {\n        this._size();\n\n        this._position();\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", resizableOptions);\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      /*jshint maxcomplexity:15*/\n      var isDraggable,\n          isResizable,\n          uiDialog = this.uiDialog;\n\n      if (key === \"dialogClass\") {\n        uiDialog.removeClass(this.options.dialogClass).addClass(value);\n      }\n\n      if (key === \"disabled\") {\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.uiDialog.appendTo(this._appendTo());\n      }\n\n      if (key === \"buttons\") {\n        this._createButtons();\n      }\n\n      if (key === \"closeText\") {\n        this.uiDialogTitlebarClose.button({\n          // Ensure that we always pass a string\n          label: \"\" + value\n        });\n      }\n\n      if (key === \"draggable\") {\n        isDraggable = uiDialog.is(\":data(ui-draggable)\");\n\n        if (isDraggable && !value) {\n          uiDialog.draggable(\"destroy\");\n        }\n\n        if (!isDraggable && value) {\n          this._makeDraggable();\n        }\n      }\n\n      if (key === \"position\") {\n        this._position();\n      }\n\n      if (key === \"resizable\") {\n        // currently resizable, becoming non-resizable\n        isResizable = uiDialog.is(\":data(ui-resizable)\");\n\n        if (isResizable && !value) {\n          uiDialog.resizable(\"destroy\");\n        } // currently resizable, changing handles\n\n\n        if (isResizable && typeof value === \"string\") {\n          uiDialog.resizable(\"option\", \"handles\", value);\n        } // currently non-resizable, becoming resizable\n\n\n        if (!isResizable && value !== false) {\n          this._makeResizable();\n        }\n      }\n\n      if (key === \"title\") {\n        this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n      }\n    },\n    _size: function _size() {\n      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n      // divs will both have width and height set, so we need to reset them\n      var nonContentHeight,\n          minContentHeight,\n          maxContentHeight,\n          options = this.options; // Reset content sizing\n\n      this.element.show().css({\n        width: \"auto\",\n        minHeight: 0,\n        maxHeight: \"none\",\n        height: 0\n      });\n\n      if (options.minWidth > options.width) {\n        options.width = options.minWidth;\n      } // reset wrapper sizing\n      // determine the height of all the non-content elements\n\n\n      nonContentHeight = this.uiDialog.css({\n        height: \"auto\",\n        width: options.width\n      }).outerHeight();\n      minContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n      maxContentHeight = typeof options.maxHeight === \"number\" ? Math.max(0, options.maxHeight - nonContentHeight) : \"none\";\n\n      if (options.height === \"auto\") {\n        this.element.css({\n          minHeight: minContentHeight,\n          maxHeight: maxContentHeight,\n          height: \"auto\"\n        });\n      } else {\n        this.element.height(Math.max(0, options.height - nonContentHeight));\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n      }\n    },\n    _blockFrames: function _blockFrames() {\n      this.iframeBlocks = this.document.find(\"iframe\").map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css({\n          position: \"absolute\",\n          width: iframe.outerWidth(),\n          height: iframe.outerHeight()\n        }).appendTo(iframe.parent()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function _unblockFrames() {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _createOverlay: function _createOverlay() {\n      if (!this.options.modal) {\n        return;\n      }\n\n      if (!$.ui.dialog.overlayInstances) {\n        // Prevent use of anchors and inputs.\n        // We use a delay in case the overlay is created from an\n        // event that we're going to be cancelling. (#2804)\n        this._delay(function () {\n          // Handle .dialog().dialog(\"close\") (#4065)\n          if ($.ui.dialog.overlayInstances) {\n            this.document.bind(\"focusin.dialog\", function (event) {\n              if (!$(event.target).closest(\".ui-dialog\").length && // TODO: Remove hack when datepicker implements\n              // the .ui-front logic (#8989)\n              !$(event.target).closest(\".ui-datepicker\").length) {\n                event.preventDefault();\n\n                $(\".ui-dialog:visible:last .ui-dialog-content\").data(\"ui-dialog\")._focusTabbable();\n              }\n            });\n          }\n        });\n      }\n\n      this.overlay = $(\"<div>\").addClass(\"ui-widget-overlay ui-front\").appendTo(this._appendTo());\n\n      this._on(this.overlay, {\n        mousedown: \"_keepFocus\"\n      });\n\n      $.ui.dialog.overlayInstances++;\n    },\n    _destroyOverlay: function _destroyOverlay() {\n      if (!this.options.modal) {\n        return;\n      }\n\n      if (this.overlay) {\n        $.ui.dialog.overlayInstances--;\n\n        if (!$.ui.dialog.overlayInstances) {\n          this.document.unbind(\"focusin.dialog\");\n        }\n\n        this.overlay.remove();\n        this.overlay = null;\n      }\n    }\n  });\n  $.ui.dialog.overlayInstances = 0; // DEPRECATED\n\n  if ($.uiBackCompat !== false) {\n    // position option with array notation\n    // just override with old implementation\n    $.widget(\"ui.dialog\", $.ui.dialog, {\n      _position: function _position() {\n        var position = this.options.position,\n            myAt = [],\n            offset = [0, 0],\n            isVisible;\n\n        if (position) {\n          if (typeof position === \"string\" || _typeof(position) === \"object\" && \"0\" in position) {\n            myAt = position.split ? position.split(\" \") : [position[0], position[1]];\n\n            if (myAt.length === 1) {\n              myAt[1] = myAt[0];\n            }\n\n            $.each([\"left\", \"top\"], function (i, offsetPosition) {\n              if (+myAt[i] === myAt[i]) {\n                offset[i] = myAt[i];\n                myAt[i] = offsetPosition;\n              }\n            });\n            position = {\n              my: myAt[0] + (offset[0] < 0 ? offset[0] : \"+\" + offset[0]) + \" \" + myAt[1] + (offset[1] < 0 ? offset[1] : \"+\" + offset[1]),\n              at: myAt.join(\" \")\n            };\n          }\n\n          position = $.extend({}, $.ui.dialog.prototype.options.position, position);\n        } else {\n          position = $.ui.dialog.prototype.options.position;\n        } // need to show the dialog to get the actual offset in the position plugin\n\n\n        isVisible = this.uiDialog.is(\":visible\");\n\n        if (!isVisible) {\n          this.uiDialog.show();\n        }\n\n        this.uiDialog.position(position);\n\n        if (!isVisible) {\n          this.uiDialog.hide();\n        }\n      }\n    });\n  }\n})(jQuery);\n\n(function ($, undefined) {\n  $.widget(\"ui.menu\", {\n    version: \"1.10.1\",\n    defaultElement: \"<ul>\",\n    delay: 300,\n    options: {\n      icons: {\n        submenu: \"ui-icon-carat-1-e\"\n      },\n      menus: \"ul\",\n      position: {\n        my: \"left top\",\n        at: \"right top\"\n      },\n      role: \"menu\",\n      // callbacks\n      blur: null,\n      focus: null,\n      select: null\n    },\n    _create: function _create() {\n      this.activeMenu = this.element; // flag used to prevent firing of the click handler\n      // as the event bubbles up through nested menus\n\n      this.mouseHandled = false;\n      this.element.uniqueId().addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\").toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length).attr({\n        role: this.options.role,\n        tabIndex: 0\n      }) // need to catch all clicks on disabled menu\n      // not possible through _on\n      .bind(\"click\" + this.eventNamespace, $.proxy(function (event) {\n        if (this.options.disabled) {\n          event.preventDefault();\n        }\n      }, this));\n\n      if (this.options.disabled) {\n        this.element.addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n      }\n\n      this._on({\n        // Prevent focus from sticking to links inside menu after clicking\n        // them (focus should always stay on UL during navigation).\n        \"mousedown .ui-menu-item > a\": function mousedownUiMenuItemA(event) {\n          event.preventDefault();\n        },\n        \"click .ui-state-disabled > a\": function clickUiStateDisabledA(event) {\n          event.preventDefault();\n        },\n        \"click .ui-menu-item:has(a)\": function clickUiMenuItemHasA(event) {\n          var target = $(event.target).closest(\".ui-menu-item\");\n\n          if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n            this.mouseHandled = true;\n            this.select(event); // Open submenu on click\n\n            if (target.has(\".ui-menu\").length) {\n              this.expand(event);\n            } else if (!this.element.is(\":focus\")) {\n              // Redirect focus to the menu\n              this.element.trigger(\"focus\", [true]); // If the active item is on the top level, let it stay active.\n              // Otherwise, blur the active item since it is no longer visible.\n\n              if (this.active && this.active.parents(\".ui-menu\").length === 1) {\n                clearTimeout(this.timer);\n              }\n            }\n          }\n        },\n        \"mouseenter .ui-menu-item\": function mouseenterUiMenuItem(event) {\n          var target = $(event.currentTarget); // Remove ui-state-active class from siblings of the newly focused menu item\n          // to avoid a jump caused by adjacent elements both having a class with a border\n\n          target.siblings().children(\".ui-state-active\").removeClass(\"ui-state-active\");\n          this.focus(event, target);\n        },\n        mouseleave: \"collapseAll\",\n        \"mouseleave .ui-menu\": \"collapseAll\",\n        focus: function focus(event, keepActiveItem) {\n          // If there's already an active item, keep it active\n          // If not, activate the first item\n          var item = this.active || this.element.children(\".ui-menu-item\").eq(0);\n\n          if (!keepActiveItem) {\n            this.focus(event, item);\n          }\n        },\n        blur: function blur(event) {\n          this._delay(function () {\n            if (!$.contains(this.element[0], this.document[0].activeElement)) {\n              this.collapseAll(event);\n            }\n          });\n        },\n        keydown: \"_keydown\"\n      });\n\n      this.refresh(); // Clicks outside of a menu collapse any open menus\n\n      this._on(this.document, {\n        click: function click(event) {\n          if (!$(event.target).closest(\".ui-menu\").length) {\n            this.collapseAll(event);\n          } // Reset the mouseHandled flag\n\n\n          this.mouseHandled = false;\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      // Destroy (sub)menus\n      this.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeClass(\"ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-expanded\").removeAttr(\"aria-hidden\").removeAttr(\"aria-disabled\").removeUniqueId().show(); // Destroy menu items\n\n      this.element.find(\".ui-menu-item\").removeClass(\"ui-menu-item\").removeAttr(\"role\").removeAttr(\"aria-disabled\").children(\"a\").removeUniqueId().removeClass(\"ui-corner-all ui-state-hover\").removeAttr(\"tabIndex\").removeAttr(\"role\").removeAttr(\"aria-haspopup\").children().each(function () {\n        var elem = $(this);\n\n        if (elem.data(\"ui-menu-submenu-carat\")) {\n          elem.remove();\n        }\n      }); // Destroy menu dividers\n\n      this.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\n    },\n    _keydown: function _keydown(event) {\n      /*jshint maxcomplexity:20*/\n      var match,\n          prev,\n          character,\n          skip,\n          regex,\n          preventDefault = true;\n\n      function escape(value) {\n        return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n      }\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.PAGE_UP:\n          this.previousPage(event);\n          break;\n\n        case $.ui.keyCode.PAGE_DOWN:\n          this.nextPage(event);\n          break;\n\n        case $.ui.keyCode.HOME:\n          this._move(\"first\", \"first\", event);\n\n          break;\n\n        case $.ui.keyCode.END:\n          this._move(\"last\", \"last\", event);\n\n          break;\n\n        case $.ui.keyCode.UP:\n          this.previous(event);\n          break;\n\n        case $.ui.keyCode.DOWN:\n          this.next(event);\n          break;\n\n        case $.ui.keyCode.LEFT:\n          this.collapse(event);\n          break;\n\n        case $.ui.keyCode.RIGHT:\n          if (this.active && !this.active.is(\".ui-state-disabled\")) {\n            this.expand(event);\n          }\n\n          break;\n\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n          this._activate(event);\n\n          break;\n\n        case $.ui.keyCode.ESCAPE:\n          this.collapse(event);\n          break;\n\n        default:\n          preventDefault = false;\n          prev = this.previousFilter || \"\";\n          character = String.fromCharCode(event.keyCode);\n          skip = false;\n          clearTimeout(this.filterTimer);\n\n          if (character === prev) {\n            skip = true;\n          } else {\n            character = prev + character;\n          }\n\n          regex = new RegExp(\"^\" + escape(character), \"i\");\n          match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\n            return regex.test($(this).children(\"a\").text());\n          });\n          match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(\".ui-menu-item\") : match; // If no matches on the current filter, reset to the last character pressed\n          // to move down the menu to the first item that starts with that character\n\n          if (!match.length) {\n            character = String.fromCharCode(event.keyCode);\n            regex = new RegExp(\"^\" + escape(character), \"i\");\n            match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\n              return regex.test($(this).children(\"a\").text());\n            });\n          }\n\n          if (match.length) {\n            this.focus(event, match);\n\n            if (match.length > 1) {\n              this.previousFilter = character;\n              this.filterTimer = this._delay(function () {\n                delete this.previousFilter;\n              }, 1000);\n            } else {\n              delete this.previousFilter;\n            }\n          } else {\n            delete this.previousFilter;\n          }\n\n      }\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    _activate: function _activate(event) {\n      if (!this.active.is(\".ui-state-disabled\")) {\n        if (this.active.children(\"a[aria-haspopup='true']\").length) {\n          this.expand(event);\n        } else {\n          this.select(event);\n        }\n      }\n    },\n    refresh: function refresh() {\n      var menus,\n          icon = this.options.icons.submenu,\n          submenus = this.element.find(this.options.menus); // Initialize nested menus\n\n      submenus.filter(\":not(.ui-menu)\").addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\").hide().attr({\n        role: this.options.role,\n        \"aria-hidden\": \"true\",\n        \"aria-expanded\": \"false\"\n      }).each(function () {\n        var menu = $(this),\n            item = menu.prev(\"a\"),\n            submenuCarat = $(\"<span>\").addClass(\"ui-menu-icon ui-icon \" + icon).data(\"ui-menu-submenu-carat\", true);\n        item.attr(\"aria-haspopup\", \"true\").prepend(submenuCarat);\n        menu.attr(\"aria-labelledby\", item.attr(\"id\"));\n      });\n      menus = submenus.add(this.element); // Don't refresh list items that are already adapted\n\n      menus.children(\":not(.ui-menu-item):has(a)\").addClass(\"ui-menu-item\").attr(\"role\", \"presentation\").children(\"a\").uniqueId().addClass(\"ui-corner-all\").attr({\n        tabIndex: -1,\n        role: this._itemRole()\n      }); // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\n\n      menus.children(\":not(.ui-menu-item)\").each(function () {\n        var item = $(this); // hyphen, em dash, en dash\n\n        if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\n          item.addClass(\"ui-widget-content ui-menu-divider\");\n        }\n      }); // Add aria-disabled attribute to any disabled menu item\n\n      menus.children(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\"); // If the active item has been removed, blur the menu\n\n      if (this.active && !$.contains(this.element[0], this.active[0])) {\n        this.blur();\n      }\n    },\n    _itemRole: function _itemRole() {\n      return {\n        menu: \"menuitem\",\n        listbox: \"option\"\n      }[this.options.role];\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        this.element.find(\".ui-menu-icon\").removeClass(this.options.icons.submenu).addClass(value.submenu);\n      }\n\n      this._super(key, value);\n    },\n    focus: function focus(event, item) {\n      var nested, focused;\n      this.blur(event, event && event.type === \"focus\");\n\n      this._scrollIntoView(item);\n\n      this.active = item.first();\n      focused = this.active.children(\"a\").addClass(\"ui-state-focus\"); // Only update aria-activedescendant if there's a role\n      // otherwise we assume focus is managed elsewhere\n\n      if (this.options.role) {\n        this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n      } // Highlight active parent menu item, if any\n\n\n      this.active.parent().closest(\".ui-menu-item\").children(\"a:first\").addClass(\"ui-state-active\");\n\n      if (event && event.type === \"keydown\") {\n        this._close();\n      } else {\n        this.timer = this._delay(function () {\n          this._close();\n        }, this.delay);\n      }\n\n      nested = item.children(\".ui-menu\");\n\n      if (nested.length && /^mouse/.test(event.type)) {\n        this._startOpening(nested);\n      }\n\n      this.activeMenu = item.parent();\n\n      this._trigger(\"focus\", event, {\n        item: item\n      });\n    },\n    _scrollIntoView: function _scrollIntoView(item) {\n      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n\n      if (this._hasScroll()) {\n        borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n        paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n        scroll = this.activeMenu.scrollTop();\n        elementHeight = this.activeMenu.height();\n        itemHeight = item.height();\n\n        if (offset < 0) {\n          this.activeMenu.scrollTop(scroll + offset);\n        } else if (offset + itemHeight > elementHeight) {\n          this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n        }\n      }\n    },\n    blur: function blur(event, fromFocus) {\n      if (!fromFocus) {\n        clearTimeout(this.timer);\n      }\n\n      if (!this.active) {\n        return;\n      }\n\n      this.active.children(\"a\").removeClass(\"ui-state-focus\");\n      this.active = null;\n\n      this._trigger(\"blur\", event, {\n        item: this.active\n      });\n    },\n    _startOpening: function _startOpening(submenu) {\n      clearTimeout(this.timer); // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n      // shift in the submenu position when mousing over the carat icon\n\n      if (submenu.attr(\"aria-hidden\") !== \"true\") {\n        return;\n      }\n\n      this.timer = this._delay(function () {\n        this._close();\n\n        this._open(submenu);\n      }, this.delay);\n    },\n    _open: function _open(submenu) {\n      var position = $.extend({\n        of: this.active\n      }, this.options.position);\n      clearTimeout(this.timer);\n      this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\", \"true\");\n      submenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\", \"true\").position(position);\n    },\n    collapseAll: function collapseAll(event, all) {\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        // If we were passed an event, look for the submenu that contains the event\n        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(\".ui-menu\")); // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\n\n        if (!currentMenu.length) {\n          currentMenu = this.element;\n        }\n\n        this._close(currentMenu);\n\n        this.blur(event);\n        this.activeMenu = currentMenu;\n      }, this.delay);\n    },\n    // With no arguments, closes the currently active menu - if nothing is active\n    // it closes all menus.  If passed an argument, it will search for menus BELOW\n    _close: function _close(startMenu) {\n      if (!startMenu) {\n        startMenu = this.active ? this.active.parent() : this.element;\n      }\n\n      startMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\", \"true\").attr(\"aria-expanded\", \"false\").end().find(\"a.ui-state-active\").removeClass(\"ui-state-active\");\n    },\n    collapse: function collapse(event) {\n      var newItem = this.active && this.active.parent().closest(\".ui-menu-item\", this.element);\n\n      if (newItem && newItem.length) {\n        this._close();\n\n        this.focus(event, newItem);\n      }\n    },\n    expand: function expand(event) {\n      var newItem = this.active && this.active.children(\".ui-menu \").children(\".ui-menu-item\").first();\n\n      if (newItem && newItem.length) {\n        this._open(newItem.parent()); // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n\n\n        this._delay(function () {\n          this.focus(event, newItem);\n        });\n      }\n    },\n    next: function next(event) {\n      this._move(\"next\", \"first\", event);\n    },\n    previous: function previous(event) {\n      this._move(\"prev\", \"last\", event);\n    },\n    isFirstItem: function isFirstItem() {\n      return this.active && !this.active.prevAll(\".ui-menu-item\").length;\n    },\n    isLastItem: function isLastItem() {\n      return this.active && !this.active.nextAll(\".ui-menu-item\").length;\n    },\n    _move: function _move(direction, filter, event) {\n      var next;\n\n      if (this.active) {\n        if (direction === \"first\" || direction === \"last\") {\n          next = this.active[direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\").eq(-1);\n        } else {\n          next = this.active[direction + \"All\"](\".ui-menu-item\").eq(0);\n        }\n      }\n\n      if (!next || !next.length || !this.active) {\n        next = this.activeMenu.children(\".ui-menu-item\")[filter]();\n      }\n\n      this.focus(event, next);\n    },\n    nextPage: function nextPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isLastItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.nextAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base - height < 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.children(\".ui-menu-item\")[!this.active ? \"first\" : \"last\"]());\n      }\n    },\n    previousPage: function previousPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isFirstItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.prevAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base + height > 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.children(\".ui-menu-item\").first());\n      }\n    },\n    _hasScroll: function _hasScroll() {\n      return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n    },\n    select: function select(event) {\n      // TODO: It should never be possible to not have an active item at this\n      // point, but the tests don't trigger mouseenter before click.\n      this.active = this.active || $(event.target).closest(\".ui-menu-item\");\n      var ui = {\n        item: this.active\n      };\n\n      if (!this.active.has(\".ui-menu\").length) {\n        this.collapseAll(event, true);\n      }\n\n      this._trigger(\"select\", event, ui);\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  $.widget(\"ui.progressbar\", {\n    version: \"1.10.1\",\n    options: {\n      max: 100,\n      value: 0,\n      change: null,\n      complete: null\n    },\n    min: 0,\n    _create: function _create() {\n      // Constrain initial value\n      this.oldValue = this.options.value = this._constrainedValue();\n      this.element.addClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").attr({\n        // Only set static values, aria-valuenow and aria-valuemax are\n        // set inside _refreshValue()\n        role: \"progressbar\",\n        \"aria-valuemin\": this.min\n      });\n      this.valueDiv = $(\"<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>\").appendTo(this.element);\n\n      this._refreshValue();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n      this.valueDiv.remove();\n    },\n    value: function value(newValue) {\n      if (newValue === undefined) {\n        return this.options.value;\n      }\n\n      this.options.value = this._constrainedValue(newValue);\n\n      this._refreshValue();\n    },\n    _constrainedValue: function _constrainedValue(newValue) {\n      if (newValue === undefined) {\n        newValue = this.options.value;\n      }\n\n      this.indeterminate = newValue === false; // sanitize value\n\n      if (typeof newValue !== \"number\") {\n        newValue = 0;\n      }\n\n      return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));\n    },\n    _setOptions: function _setOptions(options) {\n      // Ensure \"value\" option is set after other values (like max)\n      var value = options.value;\n      delete options.value;\n\n      this._super(options);\n\n      this.options.value = this._constrainedValue(value);\n\n      this._refreshValue();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"max\") {\n        // Don't allow a max less than min\n        value = Math.max(this.min, value);\n      }\n\n      this._super(key, value);\n    },\n    _percentage: function _percentage() {\n      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n    },\n    _refreshValue: function _refreshValue() {\n      var value = this.options.value,\n          percentage = this._percentage();\n\n      this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass(\"ui-corner-right\", value === this.options.max).width(percentage.toFixed(0) + \"%\");\n      this.element.toggleClass(\"ui-progressbar-indeterminate\", this.indeterminate);\n\n      if (this.indeterminate) {\n        this.element.removeAttr(\"aria-valuenow\");\n\n        if (!this.overlayDiv) {\n          this.overlayDiv = $(\"<div class='ui-progressbar-overlay'></div>\").appendTo(this.valueDiv);\n        }\n      } else {\n        this.element.attr({\n          \"aria-valuemax\": this.options.max,\n          \"aria-valuenow\": value\n        });\n\n        if (this.overlayDiv) {\n          this.overlayDiv.remove();\n          this.overlayDiv = null;\n        }\n      }\n\n      if (this.oldValue !== value) {\n        this.oldValue = value;\n\n        this._trigger(\"change\");\n      }\n\n      if (value === this.options.max) {\n        this._trigger(\"complete\");\n      }\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  // number of pages in a slider\n  // (how many times can you page up/down to go through the whole range)\n  var numPages = 5;\n  $.widget(\"ui.slider\", $.ui.mouse, {\n    version: \"1.10.1\",\n    widgetEventPrefix: \"slide\",\n    options: {\n      animate: false,\n      distance: 0,\n      max: 100,\n      min: 0,\n      orientation: \"horizontal\",\n      range: false,\n      step: 1,\n      value: 0,\n      values: null,\n      // callbacks\n      change: null,\n      slide: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      this._keySliding = false;\n      this._mouseSliding = false;\n      this._animateOff = true;\n      this._handleIndex = null;\n\n      this._detectOrientation();\n\n      this._mouseInit();\n\n      this.element.addClass(\"ui-slider\" + \" ui-slider-\" + this.orientation + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n      this._refresh();\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._animateOff = false;\n    },\n    _refresh: function _refresh() {\n      this._createRange();\n\n      this._createHandles();\n\n      this._setupEvents();\n\n      this._refreshValue();\n    },\n    _createHandles: function _createHandles() {\n      var i,\n          handleCount,\n          options = this.options,\n          existingHandles = this.element.find(\".ui-slider-handle\").addClass(\"ui-state-default ui-corner-all\"),\n          handle = \"<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>\",\n          handles = [];\n      handleCount = options.values && options.values.length || 1;\n\n      if (existingHandles.length > handleCount) {\n        existingHandles.slice(handleCount).remove();\n        existingHandles = existingHandles.slice(0, handleCount);\n      }\n\n      for (i = existingHandles.length; i < handleCount; i++) {\n        handles.push(handle);\n      }\n\n      this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n      this.handle = this.handles.eq(0);\n      this.handles.each(function (i) {\n        $(this).data(\"ui-slider-handle-index\", i);\n      });\n    },\n    _createRange: function _createRange() {\n      var options = this.options,\n          classes = \"\";\n\n      if (options.range) {\n        if (options.range === true) {\n          if (!options.values) {\n            options.values = [this._valueMin(), this._valueMin()];\n          } else if (options.values.length && options.values.length !== 2) {\n            options.values = [options.values[0], options.values[0]];\n          } else if ($.isArray(options.values)) {\n            options.values = options.values.slice(0);\n          }\n        }\n\n        if (!this.range || !this.range.length) {\n          this.range = $(\"<div></div>\").appendTo(this.element);\n          classes = \"ui-slider-range\" + // note: this isn't the most fittingly semantic framework class for this element,\n          // but worked best visually with a variety of themes\n          \" ui-widget-header ui-corner-all\";\n        } else {\n          this.range.removeClass(\"ui-slider-range-min ui-slider-range-max\") // Handle range switching from true to min/max\n          .css({\n            \"left\": \"\",\n            \"bottom\": \"\"\n          });\n        }\n\n        this.range.addClass(classes + (options.range === \"min\" || options.range === \"max\" ? \" ui-slider-range-\" + options.range : \"\"));\n      } else {\n        this.range = $([]);\n      }\n    },\n    _setupEvents: function _setupEvents() {\n      var elements = this.handles.add(this.range).filter(\"a\");\n\n      this._off(elements);\n\n      this._on(elements, this._handleEvents);\n\n      this._hoverable(elements);\n\n      this._focusable(elements);\n    },\n    _destroy: function _destroy() {\n      this.handles.remove();\n      this.range.remove();\n      this.element.removeClass(\"ui-slider\" + \" ui-slider-horizontal\" + \" ui-slider-vertical\" + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var position,\n          normValue,\n          distance,\n          closestHandle,\n          index,\n          allowed,\n          offset,\n          mouseOverHandle,\n          that = this,\n          o = this.options;\n\n      if (o.disabled) {\n        return false;\n      }\n\n      this.elementSize = {\n        width: this.element.outerWidth(),\n        height: this.element.outerHeight()\n      };\n      this.elementOffset = this.element.offset();\n      position = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      normValue = this._normValueFromMouse(position);\n      distance = this._valueMax() - this._valueMin() + 1;\n      this.handles.each(function (i) {\n        var thisDistance = Math.abs(normValue - that.values(i));\n\n        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {\n          distance = thisDistance;\n          closestHandle = $(this);\n          index = i;\n        }\n      });\n      allowed = this._start(event, index);\n\n      if (allowed === false) {\n        return false;\n      }\n\n      this._mouseSliding = true;\n      this._handleIndex = index;\n      if (typeof closestHandle === \"undefined\" || closestHandle === null) return false;\n      closestHandle.addClass(\"ui-state-active\").focus();\n      offset = closestHandle.offset();\n      mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n      this._clickOffset = mouseOverHandle ? {\n        left: 0,\n        top: 0\n      } : {\n        left: event.pageX - offset.left - closestHandle.width() / 2,\n        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) - (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) + (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n      };\n\n      if (!this.handles.hasClass(\"ui-state-hover\")) {\n        this._slide(event, index, normValue);\n      }\n\n      this._animateOff = true;\n      return true;\n    },\n    _mouseStart: function _mouseStart() {\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var position = {\n        x: event.pageX,\n        y: event.pageY\n      },\n          normValue = this._normValueFromMouse(position);\n\n      this._slide(event, this._handleIndex, normValue);\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this.handles.removeClass(\"ui-state-active\");\n      this._mouseSliding = false;\n\n      this._stop(event, this._handleIndex);\n\n      this._change(event, this._handleIndex);\n\n      this._handleIndex = null;\n      this._clickOffset = null;\n      this._animateOff = false;\n      return false;\n    },\n    _detectOrientation: function _detectOrientation() {\n      this.orientation = this.options.orientation === \"vertical\" ? \"vertical\" : \"horizontal\";\n    },\n    _normValueFromMouse: function _normValueFromMouse(position) {\n      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;\n\n      if (this.orientation === \"horizontal\") {\n        pixelTotal = this.elementSize.width;\n        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n      } else {\n        pixelTotal = this.elementSize.height;\n        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n      }\n\n      percentMouse = pixelMouse / pixelTotal;\n\n      if (percentMouse > 1) {\n        percentMouse = 1;\n      }\n\n      if (percentMouse < 0) {\n        percentMouse = 0;\n      }\n\n      if (this.orientation === \"vertical\") {\n        percentMouse = 1 - percentMouse;\n      }\n\n      valueTotal = this._valueMax() - this._valueMin();\n      valueMouse = this._valueMin() + percentMouse * valueTotal;\n      return this._trimAlignValue(valueMouse);\n    },\n    _start: function _start(event, index) {\n      var uiHash = {\n        handle: this.handles[index],\n        value: this.value()\n      };\n\n      if (this.options.values && this.options.values.length) {\n        uiHash.value = this.values(index);\n        uiHash.values = this.values();\n      }\n\n      return this._trigger(\"start\", event, uiHash);\n    },\n    _slide: function _slide(event, index, newVal) {\n      var otherVal, newValues, allowed;\n\n      if (this.options.values && this.options.values.length) {\n        otherVal = this.values(index ? 0 : 1);\n\n        if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {\n          newVal = otherVal;\n        }\n\n        if (newVal !== this.values(index)) {\n          newValues = this.values();\n          newValues[index] = newVal; // A slide can be canceled by returning false from the slide callback\n\n          allowed = this._trigger(\"slide\", event, {\n            handle: this.handles[index],\n            value: newVal,\n            values: newValues\n          });\n          otherVal = this.values(index ? 0 : 1);\n\n          if (allowed !== false) {\n            this.values(index, newVal, true);\n          }\n        }\n      } else {\n        if (newVal !== this.value()) {\n          // A slide can be canceled by returning false from the slide callback\n          allowed = this._trigger(\"slide\", event, {\n            handle: this.handles[index],\n            value: newVal\n          });\n\n          if (allowed !== false) {\n            this.value(newVal);\n          }\n        }\n      }\n    },\n    _stop: function _stop(event, index) {\n      var uiHash = {\n        handle: this.handles[index],\n        value: this.value()\n      };\n\n      if (this.options.values && this.options.values.length) {\n        uiHash.value = this.values(index);\n        uiHash.values = this.values();\n      }\n\n      this._trigger(\"stop\", event, uiHash);\n    },\n    _change: function _change(event, index) {\n      if (!this._keySliding && !this._mouseSliding) {\n        var uiHash = {\n          handle: this.handles[index],\n          value: this.value()\n        };\n\n        if (this.options.values && this.options.values.length) {\n          uiHash.value = this.values(index);\n          uiHash.values = this.values();\n        } //store the last changed value index for reference when handles overlap\n\n\n        this._lastChangedValue = index;\n\n        this._trigger(\"change\", event, uiHash);\n      }\n    },\n    value: function value(newValue) {\n      if (arguments.length) {\n        this.options.value = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, 0);\n\n        return;\n      }\n\n      return this._value();\n    },\n    values: function values(index, newValue) {\n      var vals, newValues, i;\n\n      if (arguments.length > 1) {\n        this.options.values[index] = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, index);\n\n        return;\n      }\n\n      if (arguments.length) {\n        if ($.isArray(arguments[0])) {\n          vals = this.options.values;\n          newValues = arguments[0];\n\n          for (i = 0; i < vals.length; i += 1) {\n            vals[i] = this._trimAlignValue(newValues[i]);\n\n            this._change(null, i);\n          }\n\n          this._refreshValue();\n        } else {\n          if (this.options.values && this.options.values.length) {\n            return this._values(index);\n          } else {\n            return this.value();\n          }\n        }\n      } else {\n        return this._values();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var i,\n          valsLength = 0;\n\n      if (key === \"range\" && this.options.range === true) {\n        if (value === \"min\") {\n          this.options.value = this._values(0);\n          this.options.values = null;\n        } else if (value === \"max\") {\n          this.options.value = this._values(this.options.values.length - 1);\n          this.options.values = null;\n        }\n      }\n\n      if ($.isArray(this.options.values)) {\n        valsLength = this.options.values.length;\n      }\n\n      $.Widget.prototype._setOption.apply(this, arguments);\n\n      switch (key) {\n        case \"orientation\":\n          this._detectOrientation();\n\n          this.element.removeClass(\"ui-slider-horizontal ui-slider-vertical\").addClass(\"ui-slider-\" + this.orientation);\n\n          this._refreshValue();\n\n          break;\n\n        case \"value\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          this._change(null, 0);\n\n          this._animateOff = false;\n          break;\n\n        case \"values\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          for (i = 0; i < valsLength; i += 1) {\n            this._change(null, i);\n          }\n\n          this._animateOff = false;\n          break;\n\n        case \"min\":\n        case \"max\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          this._animateOff = false;\n          break;\n\n        case \"range\":\n          this._animateOff = true;\n\n          this._refresh();\n\n          this._animateOff = false;\n          break;\n      }\n    },\n    //internal value getter\n    // _value() returns value trimmed by min and max, aligned by step\n    _value: function _value() {\n      var val = this.options.value;\n      val = this._trimAlignValue(val);\n      return val;\n    },\n    //internal values getter\n    // _values() returns array of values trimmed by min and max, aligned by step\n    // _values( index ) returns single value trimmed by min and max, aligned by step\n    _values: function _values(index) {\n      var val, vals, i;\n\n      if (arguments.length) {\n        val = this.options.values[index];\n        val = this._trimAlignValue(val);\n        return val;\n      } else if (this.options.values && this.options.values.length) {\n        // .slice() creates a copy of the array\n        // this copy gets trimmed by min and max and then returned\n        vals = this.options.values.slice();\n\n        for (i = 0; i < vals.length; i += 1) {\n          vals[i] = this._trimAlignValue(vals[i]);\n        }\n\n        return vals;\n      } else {\n        return [];\n      }\n    },\n    // returns the step-aligned value that val is closest to, between (inclusive) min and max\n    _trimAlignValue: function _trimAlignValue(val) {\n      if (val <= this._valueMin()) {\n        return this._valueMin();\n      }\n\n      if (val >= this._valueMax()) {\n        return this._valueMax();\n      }\n\n      var step = this.options.step > 0 ? this.options.step : 1,\n          valModStep = (val - this._valueMin()) % step,\n          alignValue = val - valModStep;\n\n      if (Math.abs(valModStep) * 2 >= step) {\n        alignValue += valModStep > 0 ? step : -step;\n      } // Since JavaScript has problems with large floats, round\n      // the final value to 5 digits after the decimal point (see #4124)\n\n\n      return parseFloat(alignValue.toFixed(5));\n    },\n    _valueMin: function _valueMin() {\n      return this.options.min;\n    },\n    _valueMax: function _valueMax() {\n      return this.options.max;\n    },\n    _refreshValue: function _refreshValue() {\n      var lastValPercent,\n          valPercent,\n          value,\n          valueMin,\n          valueMax,\n          oRange = this.options.range,\n          o = this.options,\n          that = this,\n          animate = !this._animateOff ? o.animate : false,\n          _set = {};\n\n      if (this.options.values && this.options.values.length) {\n        this.handles.each(function (i) {\n          valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n          _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n          $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n          if (that.options.range === true) {\n            if (that.orientation === \"horizontal\") {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  left: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  width: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            } else {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  bottom: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  height: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            }\n          }\n\n          lastValPercent = valPercent;\n        });\n      } else {\n        value = this.value();\n        valueMin = this._valueMin();\n        valueMax = this._valueMax();\n        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;\n        _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n        this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n        if (oRange === \"min\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"horizontal\") {\n          this.range[animate ? \"animate\" : \"css\"]({\n            width: 100 - valPercent + \"%\"\n          }, {\n            queue: false,\n            duration: o.animate\n          });\n        }\n\n        if (oRange === \"min\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"vertical\") {\n          this.range[animate ? \"animate\" : \"css\"]({\n            height: 100 - valPercent + \"%\"\n          }, {\n            queue: false,\n            duration: o.animate\n          });\n        }\n      }\n    },\n    _handleEvents: {\n      keydown: function keydown(event) {\n        /*jshint maxcomplexity:25*/\n        var allowed,\n            curVal,\n            newVal,\n            step,\n            index = $(event.target).data(\"ui-slider-handle-index\");\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_UP:\n          case $.ui.keyCode.PAGE_DOWN:\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            event.preventDefault();\n\n            if (!this._keySliding) {\n              this._keySliding = true;\n              $(event.target).addClass(\"ui-state-active\");\n              allowed = this._start(event, index);\n\n              if (allowed === false) {\n                return;\n              }\n            }\n\n            break;\n        }\n\n        step = this.options.step;\n\n        if (this.options.values && this.options.values.length) {\n          curVal = newVal = this.values(index);\n        } else {\n          curVal = newVal = this.value();\n        }\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n            newVal = this._valueMin();\n            break;\n\n          case $.ui.keyCode.END:\n            newVal = this._valueMax();\n            break;\n\n          case $.ui.keyCode.PAGE_UP:\n            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / numPages);\n            break;\n\n          case $.ui.keyCode.PAGE_DOWN:\n            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / numPages);\n            break;\n\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n            if (curVal === this._valueMax()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal + step);\n            break;\n\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            if (curVal === this._valueMin()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal - step);\n            break;\n        }\n\n        this._slide(event, index, newVal);\n      },\n      click: function click(event) {\n        event.preventDefault();\n      },\n      keyup: function keyup(event) {\n        var index = $(event.target).data(\"ui-slider-handle-index\");\n\n        if (this._keySliding) {\n          this._keySliding = false;\n\n          this._stop(event, index);\n\n          this._change(event, index);\n\n          $(event.target).removeClass(\"ui-state-active\");\n        }\n      }\n    }\n  });\n})(jQuery);\n\n(function ($) {\n  function modifier(fn) {\n    return function () {\n      var previous = this.element.val();\n      fn.apply(this, arguments);\n\n      this._refresh();\n\n      if (previous !== this.element.val()) {\n        this._trigger(\"change\");\n      }\n    };\n  }\n\n  $.widget(\"ui.spinner\", {\n    version: \"1.10.1\",\n    defaultElement: \"<input>\",\n    widgetEventPrefix: \"spin\",\n    options: {\n      culture: null,\n      icons: {\n        down: \"ui-icon-triangle-1-s\",\n        up: \"ui-icon-triangle-1-n\"\n      },\n      incremental: true,\n      max: null,\n      min: null,\n      numberFormat: null,\n      page: 10,\n      step: 1,\n      change: null,\n      spin: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      // handle string values that need to be parsed\n      this._setOption(\"max\", this.options.max);\n\n      this._setOption(\"min\", this.options.min);\n\n      this._setOption(\"step\", this.options.step); // format the value, but don't constrain\n\n\n      this._value(this.element.val(), true);\n\n      this._draw();\n\n      this._on(this._events);\n\n      this._refresh(); // turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = {},\n          element = this.element;\n      $.each([\"min\", \"max\", \"step\"], function (i, option) {\n        var value = element.attr(option);\n\n        if (value !== undefined && value.length) {\n          options[option] = value;\n        }\n      });\n      return options;\n    },\n    _events: {\n      keydown: function keydown(event) {\n        if (this._start(event) && this._keydown(event)) {\n          event.preventDefault();\n        }\n      },\n      keyup: \"_stop\",\n      focus: function focus() {\n        this.previous = this.element.val();\n      },\n      blur: function blur(event) {\n        if (this.cancelBlur) {\n          delete this.cancelBlur;\n          return;\n        }\n\n        this._refresh();\n\n        if (this.previous !== this.element.val()) {\n          this._trigger(\"change\", event);\n        }\n      },\n      mousewheel: function mousewheel(event, delta) {\n        if (!delta) {\n          return;\n        }\n\n        if (!this.spinning && !this._start(event)) {\n          return false;\n        }\n\n        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n\n        clearTimeout(this.mousewheelTimer);\n        this.mousewheelTimer = this._delay(function () {\n          if (this.spinning) {\n            this._stop(event);\n          }\n        }, 100);\n        event.preventDefault();\n      },\n      \"mousedown .ui-spinner-button\": function mousedownUiSpinnerButton(event) {\n        var previous; // We never want the buttons to have focus; whenever the user is\n        // interacting with the spinner, the focus should be on the input.\n        // If the input is focused then this.previous is properly set from\n        // when the input first received focus. If the input is not focused\n        // then we need to set this.previous based on the value before spinning.\n\n        previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();\n\n        function checkFocus() {\n          var isActive = this.element[0] === this.document[0].activeElement;\n\n          if (!isActive) {\n            this.element.focus();\n            this.previous = previous; // support: IE\n            // IE sets focus asynchronously, so we need to check if focus\n            // moved off of the input because the user clicked on the button.\n\n            this._delay(function () {\n              this.previous = previous;\n            });\n          }\n        } // ensure focus is on (or stays on) the text field\n\n\n        event.preventDefault();\n        checkFocus.call(this); // support: IE\n        // IE doesn't prevent moving focus even with event.preventDefault()\n        // so we set a flag to know when we should ignore the blur event\n        // and check (again) if focus moved off of the input.\n\n        this.cancelBlur = true;\n\n        this._delay(function () {\n          delete this.cancelBlur;\n          checkFocus.call(this);\n        });\n\n        if (this._start(event) === false) {\n          return;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      \"mouseup .ui-spinner-button\": \"_stop\",\n      \"mouseenter .ui-spinner-button\": function mouseenterUiSpinnerButton(event) {\n        // button will add ui-state-active if mouse was down while mouseleave and kept down\n        if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n          return;\n        }\n\n        if (this._start(event) === false) {\n          return false;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      // TODO: do we really want to consider this a stop?\n      // shouldn't we just stop the repeater and wait until mouseup before\n      // we trigger the stop event?\n      \"mouseleave .ui-spinner-button\": \"_stop\"\n    },\n    _draw: function _draw() {\n      var uiSpinner = this.uiSpinner = this.element.addClass(\"ui-spinner-input\").attr(\"autocomplete\", \"off\").wrap(this._uiSpinnerHtml()).parent() // add buttons\n      .append(this._buttonHtml());\n      this.element.attr(\"role\", \"spinbutton\"); // button bindings\n\n      this.buttons = uiSpinner.find(\".ui-spinner-button\").attr(\"tabIndex\", -1).button().removeClass(\"ui-corner-all\"); // IE 6 doesn't understand height: 50% for the buttons\n      // unless the wrapper has an explicit height\n\n      if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {\n        uiSpinner.height(uiSpinner.height());\n      } // disable spinner if element was already disabled\n\n\n      if (this.options.disabled) {\n        this.disable();\n      }\n    },\n    _keydown: function _keydown(event) {\n      var options = this.options,\n          keyCode = $.ui.keyCode;\n\n      switch (event.keyCode) {\n        case keyCode.UP:\n          this._repeat(null, 1, event);\n\n          return true;\n\n        case keyCode.DOWN:\n          this._repeat(null, -1, event);\n\n          return true;\n\n        case keyCode.PAGE_UP:\n          this._repeat(null, options.page, event);\n\n          return true;\n\n        case keyCode.PAGE_DOWN:\n          this._repeat(null, -options.page, event);\n\n          return true;\n      }\n\n      return false;\n    },\n    _uiSpinnerHtml: function _uiSpinnerHtml() {\n      return \"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>\";\n    },\n    _buttonHtml: function _buttonHtml() {\n      return \"\" + \"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>\" + \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" + \"</a>\" + \"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>\" + \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" + \"</a>\";\n    },\n    _start: function _start(event) {\n      if (!this.spinning && this._trigger(\"start\", event) === false) {\n        return false;\n      }\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      this.spinning = true;\n      return true;\n    },\n    _repeat: function _repeat(i, steps, event) {\n      i = i || 500;\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        this._repeat(40, steps, event);\n      }, i);\n\n      this._spin(steps * this.options.step, event);\n    },\n    _spin: function _spin(step, event) {\n      var value = this.value() || 0;\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      value = this._adjustValue(value + step * this._increment(this.counter));\n\n      if (!this.spinning || this._trigger(\"spin\", event, {\n        value: value\n      }) !== false) {\n        this._value(value);\n\n        this.counter++;\n      }\n    },\n    _increment: function _increment(i) {\n      var incremental = this.options.incremental;\n\n      if (incremental) {\n        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n      }\n\n      return 1;\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _adjustValue: function _adjustValue(value) {\n      var base,\n          aboveMin,\n          options = this.options; // make sure we're at a valid step\n      // - find out where we are relative to the base (min or 0)\n\n      base = options.min !== null ? options.min : 0;\n      aboveMin = value - base; // - round to the nearest step\n\n      aboveMin = Math.round(aboveMin / options.step) * options.step; // - rounding is based on 0, so adjust back to our base\n\n      value = base + aboveMin; // fix precision from bad JS floating point math\n\n      value = parseFloat(value.toFixed(this._precision())); // clamp the value\n\n      if (options.max !== null && value > options.max) {\n        return options.max;\n      }\n\n      if (options.min !== null && value < options.min) {\n        return options.min;\n      }\n\n      return value;\n    },\n    _stop: function _stop(event) {\n      if (!this.spinning) {\n        return;\n      }\n\n      clearTimeout(this.timer);\n      clearTimeout(this.mousewheelTimer);\n      this.counter = 0;\n      this.spinning = false;\n\n      this._trigger(\"stop\", event);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"culture\" || key === \"numberFormat\") {\n        var prevValue = this._parse(this.element.val());\n\n        this.options[key] = value;\n        this.element.val(this._format(prevValue));\n        return;\n      }\n\n      if (key === \"max\" || key === \"min\" || key === \"step\") {\n        if (typeof value === \"string\") {\n          value = this._parse(value);\n        }\n      }\n\n      if (key === \"icons\") {\n        this.buttons.first().find(\".ui-icon\").removeClass(this.options.icons.up).addClass(value.up);\n        this.buttons.last().find(\".ui-icon\").removeClass(this.options.icons.down).addClass(value.down);\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        if (value) {\n          this.element.prop(\"disabled\", true);\n          this.buttons.button(\"disable\");\n        } else {\n          this.element.prop(\"disabled\", false);\n          this.buttons.button(\"enable\");\n        }\n      }\n    },\n    _setOptions: modifier(function (options) {\n      this._super(options);\n\n      this._value(this.element.val());\n    }),\n    _parse: function _parse(val) {\n      if (typeof val === \"string\" && val !== \"\") {\n        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;\n      }\n\n      return val === \"\" || isNaN(val) ? null : val;\n    },\n    _format: function _format(value) {\n      if (value === \"\") {\n        return \"\";\n      }\n\n      return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;\n    },\n    _refresh: function _refresh() {\n      this.element.attr({\n        \"aria-valuemin\": this.options.min,\n        \"aria-valuemax\": this.options.max,\n        // TODO: what should we do with values that can't be parsed?\n        \"aria-valuenow\": this._parse(this.element.val())\n      });\n    },\n    // update the value without triggering change\n    _value: function _value(value, allowAny) {\n      var parsed;\n\n      if (value !== \"\") {\n        parsed = this._parse(value);\n\n        if (parsed !== null) {\n          if (!allowAny) {\n            parsed = this._adjustValue(parsed);\n          }\n\n          value = this._format(parsed);\n        }\n      }\n\n      this.element.val(value);\n\n      this._refresh();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-spinner-input\").prop(\"disabled\", false).removeAttr(\"autocomplete\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n      this.uiSpinner.replaceWith(this.element);\n    },\n    stepUp: modifier(function (steps) {\n      this._stepUp(steps);\n    }),\n    _stepUp: function _stepUp(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * this.options.step);\n\n        this._stop();\n      }\n    },\n    stepDown: modifier(function (steps) {\n      this._stepDown(steps);\n    }),\n    _stepDown: function _stepDown(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * -this.options.step);\n\n        this._stop();\n      }\n    },\n    pageUp: modifier(function (pages) {\n      this._stepUp((pages || 1) * this.options.page);\n    }),\n    pageDown: modifier(function (pages) {\n      this._stepDown((pages || 1) * this.options.page);\n    }),\n    value: function value(newVal) {\n      if (!arguments.length) {\n        return this._parse(this.element.val());\n      }\n\n      modifier(this._value).call(this, newVal);\n    },\n    widget: function widget() {\n      return this.uiSpinner;\n    }\n  });\n})(jQuery);\n\n(function ($, undefined) {\n  var tabId = 0,\n      rhash = /#.*$/;\n\n  function getNextTabId() {\n    return ++tabId;\n  }\n\n  function isLocal(anchor) {\n    return anchor.hash.length > 1 && decodeURIComponent(anchor.href.replace(rhash, \"\")) === decodeURIComponent(location.href.replace(rhash, \"\"));\n  }\n\n  $.widget(\"ui.tabs\", {\n    version: \"1.10.1\",\n    delay: 300,\n    options: {\n      active: null,\n      collapsible: false,\n      event: \"click\",\n      heightStyle: \"content\",\n      hide: null,\n      show: null,\n      // callbacks\n      activate: null,\n      beforeActivate: null,\n      beforeLoad: null,\n      load: null\n    },\n    _create: function _create() {\n      var that = this,\n          options = this.options;\n      this.running = false;\n      this.element.addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\").toggleClass(\"ui-tabs-collapsible\", options.collapsible) // Prevent users from focusing disabled tabs via click\n      .delegate(\".ui-tabs-nav > li\", \"mousedown\" + this.eventNamespace, function (event) {\n        if ($(this).is(\".ui-state-disabled\")) {\n          event.preventDefault();\n        }\n      }) // support: IE <9\n      // Preventing the default action in mousedown doesn't prevent IE\n      // from focusing the element, so if the anchor gets focused, blur.\n      // We don't have to worry about focusing the previously focused\n      // element since clicking on a non-focusable element should focus\n      // the body anyway.\n      .delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\n        if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n          this.blur();\n        }\n      });\n\n      this._processTabs();\n\n      options.active = this._initialActive(); // Take disabling tabs via class attribute from HTML\n      // into account and update option properly.\n\n      if ($.isArray(options.disabled)) {\n        options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n          return that.tabs.index(li);\n        }))).sort();\n      } // check for length avoids error when initializing empty list\n\n\n      if (this.options.active !== false && this.anchors.length) {\n        this.active = this._findActive(options.active);\n      } else {\n        this.active = $();\n      }\n\n      this._refresh();\n\n      if (this.active.length) {\n        this.load(options.active);\n      }\n    },\n    _initialActive: function _initialActive() {\n      var active = this.options.active,\n          collapsible = this.options.collapsible,\n          locationHash = location.hash.substring(1);\n\n      if (active === null) {\n        // check the fragment identifier in the URL\n        if (locationHash) {\n          this.tabs.each(function (i, tab) {\n            if ($(tab).attr(\"aria-controls\") === locationHash) {\n              active = i;\n              return false;\n            }\n          });\n        } // check for a tab marked active via a class\n\n\n        if (active === null) {\n          active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n        } // no active tab, set to false\n\n\n        if (active === null || active === -1) {\n          active = this.tabs.length ? 0 : false;\n        }\n      } // handle numbers: negative, out of range\n\n\n      if (active !== false) {\n        active = this.tabs.index(this.tabs.eq(active));\n\n        if (active === -1) {\n          active = collapsible ? false : 0;\n        }\n      } // don't allow collapsible: false and active: false\n\n\n      if (!collapsible && active === false && this.anchors.length) {\n        active = 0;\n      }\n\n      return active;\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        tab: this.active,\n        panel: !this.active.length ? $() : this._getPanelForTab(this.active)\n      };\n    },\n    _tabKeydown: function _tabKeydown(event) {\n      /*jshint maxcomplexity:15*/\n      var focusedTab = $(this.document[0].activeElement).closest(\"li\"),\n          selectedIndex = this.tabs.index(focusedTab),\n          goingForward = true;\n\n      if (this._handlePageNav(event)) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.RIGHT:\n        case $.ui.keyCode.DOWN:\n          selectedIndex++;\n          break;\n\n        case $.ui.keyCode.UP:\n        case $.ui.keyCode.LEFT:\n          goingForward = false;\n          selectedIndex--;\n          break;\n\n        case $.ui.keyCode.END:\n          selectedIndex = this.anchors.length - 1;\n          break;\n\n        case $.ui.keyCode.HOME:\n          selectedIndex = 0;\n          break;\n\n        case $.ui.keyCode.SPACE:\n          // Activate only, no collapsing\n          event.preventDefault();\n          clearTimeout(this.activating);\n\n          this._activate(selectedIndex);\n\n          return;\n\n        case $.ui.keyCode.ENTER:\n          // Toggle (cancel delayed activation, allow collapsing)\n          event.preventDefault();\n          clearTimeout(this.activating); // Determine if we should collapse or activate\n\n          this._activate(selectedIndex === this.options.active ? false : selectedIndex);\n\n          return;\n\n        default:\n          return;\n      } // Focus the appropriate tab, based on which key was pressed\n\n\n      event.preventDefault();\n      clearTimeout(this.activating);\n      selectedIndex = this._focusNextTab(selectedIndex, goingForward); // Navigating with control key will prevent automatic activation\n\n      if (!event.ctrlKey) {\n        // Update aria-selected immediately so that AT think the tab is already selected.\n        // Otherwise AT may confuse the user by stating that they need to activate the tab,\n        // but the tab will already be activated by the time the announcement finishes.\n        focusedTab.attr(\"aria-selected\", \"false\");\n        this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n        this.activating = this._delay(function () {\n          this.option(\"active\", selectedIndex);\n        }, this.delay);\n      }\n    },\n    _panelKeydown: function _panelKeydown(event) {\n      if (this._handlePageNav(event)) {\n        return;\n      } // Ctrl+up moves focus to the current tab\n\n\n      if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n        event.preventDefault();\n        this.active.focus();\n      }\n    },\n    // Alt+page up/down moves focus to the previous/next tab (and activates)\n    _handlePageNav: function _handlePageNav(event) {\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n        this._activate(this._focusNextTab(this.options.active - 1, false));\n\n        return true;\n      }\n\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n        this._activate(this._focusNextTab(this.options.active + 1, true));\n\n        return true;\n      }\n    },\n    _findNextTab: function _findNextTab(index, goingForward) {\n      var lastTabIndex = this.tabs.length - 1;\n\n      function constrain() {\n        if (index > lastTabIndex) {\n          index = 0;\n        }\n\n        if (index < 0) {\n          index = lastTabIndex;\n        }\n\n        return index;\n      }\n\n      while ($.inArray(constrain(), this.options.disabled) !== -1) {\n        index = goingForward ? index + 1 : index - 1;\n      }\n\n      return index;\n    },\n    _focusNextTab: function _focusNextTab(index, goingForward) {\n      index = this._findNextTab(index, goingForward);\n      this.tabs.eq(index).focus();\n      return index;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      if (key === \"disabled\") {\n        // don't use the widget factory's disabled handling\n        this._setupDisabled(value);\n\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"collapsible\") {\n        this.element.toggleClass(\"ui-tabs-collapsible\", value); // Setting collapsible: false while collapsed; open first panel\n\n        if (!value && this.options.active === false) {\n          this._activate(0);\n        }\n      }\n\n      if (key === \"event\") {\n        this._setupEvents(value);\n      }\n\n      if (key === \"heightStyle\") {\n        this._setupHeightStyle(value);\n      }\n    },\n    _tabId: function _tabId(tab) {\n      return tab.attr(\"aria-controls\") || \"ui-tabs-\" + getNextTabId();\n    },\n    _sanitizeSelector: function _sanitizeSelector(hash) {\n      return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n    },\n    refresh: function refresh() {\n      var options = this.options,\n          lis = this.tablist.children(\":has(a[href])\"); // get disabled tabs from class attribute from HTML\n      // this will get converted to a boolean if needed in _refresh()\n\n      options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n        return lis.index(tab);\n      });\n\n      this._processTabs(); // was collapsed or no tabs\n\n\n      if (options.active === false || !this.anchors.length) {\n        options.active = false;\n        this.active = $(); // was active, but active tab is gone\n      } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n        // all remaining tabs are disabled\n        if (this.tabs.length === options.disabled.length) {\n          options.active = false;\n          this.active = $(); // activate previous tab\n        } else {\n          this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n        } // was active, active tab still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.tabs.index(this.active);\n      }\n\n      this._refresh();\n    },\n    _refresh: function _refresh() {\n      this._setupDisabled(this.options.disabled);\n\n      this._setupEvents(this.options.event);\n\n      this._setupHeightStyle(this.options.heightStyle);\n\n      this.tabs.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        tabIndex: -1\n      });\n      this.panels.not(this._getPanelForTab(this.active)).hide().attr({\n        \"aria-expanded\": \"false\",\n        \"aria-hidden\": \"true\"\n      }); // Make sure one tab is in the tab order\n\n      if (!this.active.length) {\n        this.tabs.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.addClass(\"ui-tabs-active ui-state-active\").attr({\n          \"aria-selected\": \"true\",\n          tabIndex: 0\n        });\n\n        this._getPanelForTab(this.active).show().attr({\n          \"aria-expanded\": \"true\",\n          \"aria-hidden\": \"false\"\n        });\n      }\n    },\n    _processTabs: function _processTabs() {\n      var that = this;\n      this.tablist = this._getList().addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").attr(\"role\", \"tablist\");\n      this.tabs = this.tablist.find(\"> li:has(a[href])\").addClass(\"ui-state-default ui-corner-top\").attr({\n        role: \"tab\",\n        tabIndex: -1\n      });\n      this.anchors = this.tabs.map(function () {\n        return $(\"a\", this)[0];\n      }).addClass(\"ui-tabs-anchor\").attr({\n        role: \"presentation\",\n        tabIndex: -1\n      });\n      this.panels = $();\n      this.anchors.each(function (i, anchor) {\n        var selector,\n            panel,\n            panelId,\n            anchorId = $(anchor).uniqueId().attr(\"id\"),\n            tab = $(anchor).closest(\"li\"),\n            originalAriaControls = tab.attr(\"aria-controls\"); // inline tab\n\n        if (isLocal(anchor)) {\n          selector = anchor.hash;\n          panel = that.element.find(that._sanitizeSelector(selector)); // remote tab\n        } else {\n          panelId = that._tabId(tab);\n          selector = \"#\" + panelId;\n          panel = that.element.find(selector);\n\n          if (!panel.length) {\n            panel = that._createPanel(panelId);\n            panel.insertAfter(that.panels[i - 1] || that.tablist);\n          }\n\n          panel.attr(\"aria-live\", \"polite\");\n        }\n\n        if (panel.length) {\n          that.panels = that.panels.add(panel);\n        }\n\n        if (originalAriaControls) {\n          tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n        }\n\n        tab.attr({\n          \"aria-controls\": selector.substring(1),\n          \"aria-labelledby\": anchorId\n        });\n        panel.attr(\"aria-labelledby\", anchorId);\n      });\n      this.panels.addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").attr(\"role\", \"tabpanel\");\n    },\n    // allow overriding how to find the list for rare usage scenarios (#7715)\n    _getList: function _getList() {\n      return this.element.find(\"ol,ul\").eq(0);\n    },\n    _createPanel: function _createPanel(id) {\n      return $(\"<div>\").attr(\"id\", id).addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").data(\"ui-tabs-destroy\", true);\n    },\n    _setupDisabled: function _setupDisabled(disabled) {\n      if ($.isArray(disabled)) {\n        if (!disabled.length) {\n          disabled = false;\n        } else if (disabled.length === this.anchors.length) {\n          disabled = true;\n        }\n      } // disable tabs\n\n\n      for (var i = 0, li; li = this.tabs[i]; i++) {\n        if (disabled === true || $.inArray(i, disabled) !== -1) {\n          $(li).addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n        } else {\n          $(li).removeClass(\"ui-state-disabled\").removeAttr(\"aria-disabled\");\n        }\n      }\n\n      this.options.disabled = disabled;\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {\n        click: function click(event) {\n          event.preventDefault();\n        }\n      };\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.anchors.add(this.tabs).add(this.panels));\n\n      this._on(this.anchors, events);\n\n      this._on(this.tabs, {\n        keydown: \"_tabKeydown\"\n      });\n\n      this._on(this.panels, {\n        keydown: \"_panelKeydown\"\n      });\n\n      this._focusable(this.tabs);\n\n      this._hoverable(this.tabs);\n    },\n    _setupHeightStyle: function _setupHeightStyle(heightStyle) {\n      var maxHeight,\n          parent = this.element.parent();\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        maxHeight -= this.element.outerHeight() - this.element.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.element.children().not(this.panels).each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.panels.each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.panels.each(function () {\n          maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n        }).height(maxHeight);\n      }\n    },\n    _eventHandler: function _eventHandler(event) {\n      var options = this.options,\n          active = this.active,\n          anchor = $(event.currentTarget),\n          tab = anchor.closest(\"li\"),\n          clickedIsActive = tab[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : this._getPanelForTab(tab),\n          toHide = !active.length ? $() : this._getPanelForTab(active),\n          eventData = {\n        oldTab: active,\n        oldPanel: toHide,\n        newTab: collapsing ? $() : tab,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if (tab.hasClass(\"ui-state-disabled\") || // tab is already loading\n      tab.hasClass(\"ui-tabs-loading\") || // can't switch durning an animation\n      this.running || // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.tabs.index(tab);\n      this.active = clickedIsActive ? $() : tab;\n\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      if (!toHide.length && !toShow.length) {\n        $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n      }\n\n      if (toShow.length) {\n        this.load(this.tabs.index(tab), event);\n      }\n\n      this._toggle(event, eventData);\n    },\n    // handles show/hide for selecting tabs\n    _toggle: function _toggle(event, eventData) {\n      var that = this,\n          toShow = eventData.newPanel,\n          toHide = eventData.oldPanel;\n      this.running = true;\n\n      function complete() {\n        that.running = false;\n\n        that._trigger(\"activate\", event, eventData);\n      }\n\n      function show() {\n        eventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\n\n        if (toShow.length && that.options.show) {\n          that._show(toShow, that.options.show, complete);\n        } else {\n          toShow.show();\n          complete();\n        }\n      } // start out by hiding, then showing, then completing\n\n\n      if (toHide.length && this.options.hide) {\n        this._hide(toHide, this.options.hide, function () {\n          eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n          show();\n        });\n      } else {\n        eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n        toHide.hide();\n        show();\n      }\n\n      toHide.attr({\n        \"aria-expanded\": \"false\",\n        \"aria-hidden\": \"true\"\n      });\n      eventData.oldTab.attr(\"aria-selected\", \"false\"); // If we're switching tabs, remove the old tab from the tab order.\n      // If we're opening from collapsed state, remove the previous tab from the tab order.\n      // If we're collapsing, then keep the collapsing tab in the tab order.\n\n      if (toShow.length && toHide.length) {\n        eventData.oldTab.attr(\"tabIndex\", -1);\n      } else if (toShow.length) {\n        this.tabs.filter(function () {\n          return $(this).attr(\"tabIndex\") === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr({\n        \"aria-expanded\": \"true\",\n        \"aria-hidden\": \"false\"\n      });\n      eventData.newTab.attr({\n        \"aria-selected\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _activate: function _activate(index) {\n      var anchor,\n          active = this._findActive(index); // trying to activate the already active panel\n\n\n      if (active[0] === this.active[0]) {\n        return;\n      } // trying to collapse, simulate a click on the current active header\n\n\n      if (!active.length) {\n        active = this.active;\n      }\n\n      anchor = active.find(\".ui-tabs-anchor\")[0];\n\n      this._eventHandler({\n        target: anchor,\n        currentTarget: anchor,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(index) {\n      return index === false ? $() : this.tabs.eq(index);\n    },\n    _getIndex: function _getIndex(index) {\n      // meta-function to give users option to provide a href string instead of a numerical index.\n      if (typeof index === \"string\") {\n        index = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\n      }\n\n      return index;\n    },\n    _destroy: function _destroy() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      this.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\n      this.tablist.removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").removeAttr(\"role\");\n      this.anchors.removeClass(\"ui-tabs-anchor\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeUniqueId();\n      this.tabs.add(this.panels).each(function () {\n        if ($.data(this, \"ui-tabs-destroy\")) {\n          $(this).remove();\n        } else {\n          $(this).removeClass(\"ui-state-default ui-state-active ui-state-disabled \" + \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\").removeAttr(\"tabIndex\").removeAttr(\"aria-live\").removeAttr(\"aria-busy\").removeAttr(\"aria-selected\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-hidden\").removeAttr(\"aria-expanded\").removeAttr(\"role\");\n        }\n      });\n      this.tabs.each(function () {\n        var li = $(this),\n            prev = li.data(\"ui-tabs-aria-controls\");\n\n        if (prev) {\n          li.attr(\"aria-controls\", prev).removeData(\"ui-tabs-aria-controls\");\n        } else {\n          li.removeAttr(\"aria-controls\");\n        }\n      });\n      this.panels.show();\n\n      if (this.options.heightStyle !== \"content\") {\n        this.panels.css(\"height\", \"\");\n      }\n    },\n    enable: function enable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === false) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = false;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.isArray(disabled)) {\n          disabled = $.map(disabled, function (num) {\n            return num !== index ? num : null;\n          });\n        } else {\n          disabled = $.map(this.tabs, function (li, num) {\n            return num !== index ? num : null;\n          });\n        }\n      }\n\n      this._setupDisabled(disabled);\n    },\n    disable: function disable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === true) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = true;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.inArray(index, disabled) !== -1) {\n          return;\n        }\n\n        if ($.isArray(disabled)) {\n          disabled = $.merge([index], disabled).sort();\n        } else {\n          disabled = [index];\n        }\n      }\n\n      this._setupDisabled(disabled);\n    },\n    load: function load(index, event) {\n      index = this._getIndex(index);\n\n      var that = this,\n          tab = this.tabs.eq(index),\n          anchor = tab.find(\".ui-tabs-anchor\"),\n          panel = this._getPanelForTab(tab),\n          eventData = {\n        tab: tab,\n        panel: panel\n      }; // not remote\n\n\n      if (isLocal(anchor[0])) {\n        return;\n      }\n\n      this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData)); // support: jQuery <1.8\n      // jQuery <1.8 returns false if the request is canceled in beforeSend,\n      // but as of 1.8, $.ajax() always returns a jqXHR object.\n\n      if (this.xhr && this.xhr.statusText !== \"canceled\") {\n        tab.addClass(\"ui-tabs-loading\");\n        panel.attr(\"aria-busy\", \"true\");\n        this.xhr.success(function (response) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            panel.html(response);\n\n            that._trigger(\"load\", event, eventData);\n          }, 1);\n        }).complete(function (jqXHR, status) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            if (status === \"abort\") {\n              that.panels.stop(false, true);\n            }\n\n            tab.removeClass(\"ui-tabs-loading\");\n            panel.removeAttr(\"aria-busy\");\n\n            if (jqXHR === that.xhr) {\n              delete that.xhr;\n            }\n          }, 1);\n        });\n      }\n    },\n    _ajaxSettings: function _ajaxSettings(anchor, event, eventData) {\n      var that = this;\n      return {\n        url: anchor.attr(\"href\"),\n        beforeSend: function beforeSend(jqXHR, settings) {\n          return that._trigger(\"beforeLoad\", event, $.extend({\n            jqXHR: jqXHR,\n            ajaxSettings: settings\n          }, eventData));\n        }\n      };\n    },\n    _getPanelForTab: function _getPanelForTab(tab) {\n      var id = $(tab).attr(\"aria-controls\");\n      return this.element.find(this._sanitizeSelector(\"#\" + id));\n    }\n  });\n})(jQuery);\n\n(function ($) {\n  var increments = 0;\n\n  function addDescribedBy(elem, id) {\n    var describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\n    describedby.push(id);\n    elem.data(\"ui-tooltip-id\", id).attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\n  }\n\n  function removeDescribedBy(elem) {\n    var id = elem.data(\"ui-tooltip-id\"),\n        describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\n        index = $.inArray(id, describedby);\n\n    if (index !== -1) {\n      describedby.splice(index, 1);\n    }\n\n    elem.removeData(\"ui-tooltip-id\");\n    describedby = $.trim(describedby.join(\" \"));\n\n    if (describedby) {\n      elem.attr(\"aria-describedby\", describedby);\n    } else {\n      elem.removeAttr(\"aria-describedby\");\n    }\n  }\n\n  $.widget(\"ui.tooltip\", {\n    version: \"1.10.1\",\n    options: {\n      content: function content() {\n        // support: IE<9, Opera in jQuery <1.7\n        // .text() can't accept undefined, so coerce to a string\n        var title = $(this).attr(\"title\") || \"\"; // Escape title, since we're going from an attribute to raw HTML\n\n        return $(\"<a>\").text(title).html();\n      },\n      hide: true,\n      // Disabled elements have inconsistent behavior across browsers (#8661)\n      items: \"[title]:not([disabled])\",\n      position: {\n        my: \"left top+15\",\n        at: \"left bottom\",\n        collision: \"flipfit flip\"\n      },\n      show: true,\n      tooltipClass: null,\n      track: false,\n      // callbacks\n      close: null,\n      open: null\n    },\n    _create: function _create() {\n      this._on({\n        mouseover: \"open\",\n        focusin: \"open\"\n      }); // IDs of generated tooltips, needed for destroy\n\n\n      this.tooltips = {}; // IDs of parent tooltips where we removed the title attribute\n\n      this.parents = {};\n\n      if (this.options.disabled) {\n        this._disable();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var that = this;\n\n      if (key === \"disabled\") {\n        this[value ? \"_disable\" : \"_enable\"]();\n        this.options[key] = value; // disable element style changes\n\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"content\") {\n        $.each(this.tooltips, function (id, element) {\n          that._updateContent(element);\n        });\n      }\n    },\n    _disable: function _disable() {\n      var that = this; // close open tooltips\n\n      $.each(this.tooltips, function (id, element) {\n        var event = $.Event(\"blur\");\n        event.target = event.currentTarget = element[0];\n        that.close(event, true);\n      }); // remove title attributes to prevent native tooltips\n\n      this.element.find(this.options.items).addBack().each(function () {\n        var element = $(this);\n\n        if (element.is(\"[title]\")) {\n          element.data(\"ui-tooltip-title\", element.attr(\"title\")).attr(\"title\", \"\");\n        }\n      });\n    },\n    _enable: function _enable() {\n      // restore title attributes\n      this.element.find(this.options.items).addBack().each(function () {\n        var element = $(this);\n\n        if (element.data(\"ui-tooltip-title\")) {\n          element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n        }\n      });\n    },\n    open: function open(event) {\n      var that = this,\n          target = $(event ? event.target : this.element) // we need closest here due to mouseover bubbling,\n      // but always pointing at the same event target\n      .closest(this.options.items); // No element to show a tooltip for or the tooltip is already open\n\n      if (!target.length || target.data(\"ui-tooltip-id\")) {\n        return;\n      }\n\n      if (target.attr(\"title\")) {\n        target.data(\"ui-tooltip-title\", target.attr(\"title\"));\n      }\n\n      target.data(\"ui-tooltip-open\", true); // kill parent tooltips, custom or native, for hover\n\n      if (event && event.type === \"mouseover\") {\n        target.parents().each(function () {\n          var parent = $(this),\n              blurEvent;\n\n          if (parent.data(\"ui-tooltip-open\")) {\n            blurEvent = $.Event(\"blur\");\n            blurEvent.target = blurEvent.currentTarget = this;\n            that.close(blurEvent, true);\n          }\n\n          if (parent.attr(\"title\")) {\n            parent.uniqueId();\n            that.parents[this.id] = {\n              element: this,\n              title: parent.attr(\"title\")\n            };\n            parent.attr(\"title\", \"\");\n          }\n        });\n      }\n\n      this._updateContent(target, event);\n    },\n    _updateContent: function _updateContent(target, event) {\n      var content,\n          contentOption = this.options.content,\n          that = this,\n          eventType = event ? event.type : null;\n\n      if (typeof contentOption === \"string\") {\n        return this._open(event, target, contentOption);\n      }\n\n      content = contentOption.call(target[0], function (response) {\n        // ignore async response if tooltip was closed already\n        if (!target.data(\"ui-tooltip-open\")) {\n          return;\n        } // IE may instantly serve a cached response for ajax requests\n        // delay this call to _open so the other call to _open runs first\n\n\n        that._delay(function () {\n          // jQuery creates a special event for focusin when it doesn't\n          // exist natively. To improve performance, the native event\n          // object is reused and the type is changed. Therefore, we can't\n          // rely on the type being correct after the event finished\n          // bubbling, so we set it back to the previous value. (#8740)\n          if (event) {\n            event.type = eventType;\n          }\n\n          this._open(event, target, response);\n        });\n      });\n\n      if (content) {\n        this._open(event, target, content);\n      }\n    },\n    _open: function _open(event, target, content) {\n      var tooltip,\n          events,\n          delayedShow,\n          positionOption = $.extend({}, this.options.position);\n\n      if (!content) {\n        return;\n      } // Content can be updated multiple times. If the tooltip already\n      // exists, then just update the content and bail.\n\n\n      tooltip = this._find(target);\n\n      if (tooltip.length) {\n        tooltip.find(\".ui-tooltip-content\").html(content);\n        return;\n      } // if we have a title, clear it to prevent the native tooltip\n      // we have to check first to avoid defining a title if none exists\n      // (we don't want to cause an element to start matching [title])\n      //\n      // We use removeAttr only for key events, to allow IE to export the correct\n      // accessible attributes. For mouse events, set to empty string to avoid\n      // native tooltip showing up (happens only when removing inside mouseover).\n\n\n      if (target.is(\"[title]\")) {\n        if (event && event.type === \"mouseover\") {\n          target.attr(\"title\", \"\");\n        } else {\n          target.removeAttr(\"title\");\n        }\n      }\n\n      tooltip = this._tooltip(target);\n      addDescribedBy(target, tooltip.attr(\"id\"));\n      tooltip.find(\".ui-tooltip-content\").html(content);\n\n      function position(event) {\n        positionOption.of = event;\n\n        if (tooltip.is(\":hidden\")) {\n          return;\n        }\n\n        tooltip.position(positionOption);\n      }\n\n      if (this.options.track && event && /^mouse/.test(event.type)) {\n        this._on(this.document, {\n          mousemove: position\n        }); // trigger once to override element-relative positioning\n\n\n        position(event);\n      } else {\n        tooltip.position($.extend({\n          of: target\n        }, this.options.position));\n      }\n\n      tooltip.hide();\n\n      this._show(tooltip, this.options.show); // Handle tracking tooltips that are shown with a delay (#8644). As soon\n      // as the tooltip is visible, position the tooltip using the most recent\n      // event.\n\n\n      if (this.options.show && this.options.show.delay) {\n        delayedShow = this.delayedShow = setInterval(function () {\n          if (tooltip.is(\":visible\")) {\n            position(positionOption.of);\n            clearInterval(delayedShow);\n          }\n        }, $.fx.interval);\n      }\n\n      this._trigger(\"open\", event, {\n        tooltip: tooltip\n      });\n\n      events = {\n        keyup: function keyup(event) {\n          if (event.keyCode === $.ui.keyCode.ESCAPE) {\n            var fakeEvent = $.Event(event);\n            fakeEvent.currentTarget = target[0];\n            this.close(fakeEvent, true);\n          }\n        },\n        remove: function remove() {\n          this._removeTooltip(tooltip);\n        }\n      };\n\n      if (!event || event.type === \"mouseover\") {\n        events.mouseleave = \"close\";\n      }\n\n      if (!event || event.type === \"focusin\") {\n        events.focusout = \"close\";\n      }\n\n      this._on(true, target, events);\n    },\n    close: function close(event) {\n      var that = this,\n          target = $(event ? event.currentTarget : this.element),\n          tooltip = this._find(target); // disabling closes the tooltip, so we need to track when we're closing\n      // to avoid an infinite loop in case the tooltip becomes disabled on close\n\n\n      if (this.closing) {\n        return;\n      } // Clear the interval for delayed tracking tooltips\n\n\n      clearInterval(this.delayedShow); // only set title if we had one before (see comment in _open())\n\n      if (target.data(\"ui-tooltip-title\")) {\n        target.attr(\"title\", target.data(\"ui-tooltip-title\"));\n      }\n\n      removeDescribedBy(target);\n      tooltip.stop(true);\n\n      this._hide(tooltip, this.options.hide, function () {\n        that._removeTooltip($(this));\n      });\n\n      target.removeData(\"ui-tooltip-open\");\n\n      this._off(target, \"mouseleave focusout keyup\"); // Remove 'remove' binding only on delegated targets\n\n\n      if (target[0] !== this.element[0]) {\n        this._off(target, \"remove\");\n      }\n\n      this._off(this.document, \"mousemove\");\n\n      if (event && event.type === \"mouseleave\") {\n        $.each(this.parents, function (id, parent) {\n          $(parent.element).attr(\"title\", parent.title);\n          delete that.parents[id];\n        });\n      }\n\n      this.closing = true;\n\n      this._trigger(\"close\", event, {\n        tooltip: tooltip\n      });\n\n      this.closing = false;\n    },\n    _tooltip: function _tooltip(element) {\n      var id = \"ui-tooltip-\" + increments++,\n          tooltip = $(\"<div>\").attr({\n        id: id,\n        role: \"tooltip\"\n      }).addClass(\"ui-tooltip ui-widget ui-corner-all ui-widget-content \" + (this.options.tooltipClass || \"\"));\n      $(\"<div>\").addClass(\"ui-tooltip-content\").appendTo(tooltip);\n      tooltip.appendTo(this.document[0].body);\n      this.tooltips[id] = element;\n      return tooltip;\n    },\n    _find: function _find(target) {\n      var id = target.data(\"ui-tooltip-id\");\n      return id ? $(\"#\" + id) : $();\n    },\n    _removeTooltip: function _removeTooltip(tooltip) {\n      tooltip.remove();\n      delete this.tooltips[tooltip.attr(\"id\")];\n    },\n    _destroy: function _destroy() {\n      var that = this; // close open tooltips\n\n      $.each(this.tooltips, function (id, element) {\n        // Delegate to close method to handle common cleanup\n        var event = $.Event(\"blur\");\n        event.target = event.currentTarget = element[0];\n        that.close(event, true); // Remove immediately; destroying an open tooltip doesn't use the\n        // hide animation\n\n        $(\"#\" + id).remove(); // Restore the title\n\n        if (element.data(\"ui-tooltip-title\")) {\n          element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n          element.removeData(\"ui-tooltip-title\");\n        }\n      });\n    }\n  });\n})(jQuery);\n\n;\njQuery.effects || function ($, undefined) {\n  var dataSpace = \"ui-effects-\";\n  $.effects = {\n    effect: {}\n  };\n  /*!\n   * jQuery Color Animations v2.1.2\n   * https://github.com/jquery/jquery-color\n   *\n   * Copyright 2013 jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * Date: Wed Jan 16 08:47:09 2013 -0600\n   */\n\n  (function (jQuery, undefined) {\n    var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n        // plusequals test for += 100 -= 100\n    rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n        // a set of RE's that can match strings and generate color tuples.\n    stringParsers = [{\n      re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], execResult[4]];\n      }\n    }, {\n      re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n      }\n    }, {\n      // this regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];\n      }\n    }, {\n      // this regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];\n      }\n    }, {\n      re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      space: \"hsla\",\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }],\n        // jQuery.Color( )\n    color = jQuery.Color = function (color, green, blue, alpha) {\n      return new jQuery.Color.fn.parse(color, green, blue, alpha);\n    },\n        spaces = {\n      rgba: {\n        props: {\n          red: {\n            idx: 0,\n            type: \"byte\"\n          },\n          green: {\n            idx: 1,\n            type: \"byte\"\n          },\n          blue: {\n            idx: 2,\n            type: \"byte\"\n          }\n        }\n      },\n      hsla: {\n        props: {\n          hue: {\n            idx: 0,\n            type: \"degrees\"\n          },\n          saturation: {\n            idx: 1,\n            type: \"percent\"\n          },\n          lightness: {\n            idx: 2,\n            type: \"percent\"\n          }\n        }\n      }\n    },\n        propTypes = {\n      \"byte\": {\n        floor: true,\n        max: 255\n      },\n      \"percent\": {\n        max: 1\n      },\n      \"degrees\": {\n        mod: 360,\n        floor: true\n      }\n    },\n        support = color.support = {},\n        // element for support tests\n    supportElem = jQuery(\"<p>\")[0],\n        // colors = jQuery.Color.names\n    colors,\n        // local aliases of functions called often\n    each = jQuery.each; // determine rgba support immediately\n\n\n    supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n    support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1; // define cache name and alpha properties\n    // for rgba and hsla spaces\n\n    each(spaces, function (spaceName, space) {\n      space.cache = \"_\" + spaceName;\n      space.props.alpha = {\n        idx: 3,\n        type: \"percent\",\n        def: 1\n      };\n    });\n\n    function clamp(value, prop, allowEmpty) {\n      var type = propTypes[prop.type] || {};\n\n      if (value == null) {\n        return allowEmpty || !prop.def ? null : prop.def;\n      } // ~~ is an short way of doing floor for positive numbers\n\n\n      value = type.floor ? ~~value : parseFloat(value); // IE will pass in empty strings as value for alpha,\n      // which will hit this case\n\n      if (isNaN(value)) {\n        return prop.def;\n      }\n\n      if (type.mod) {\n        // we add mod before modding to make sure that negatives values\n        // get converted properly: -10 -> 350\n        return (value + type.mod) % type.mod;\n      } // for now all property types without mod have min and max\n\n\n      return 0 > value ? 0 : type.max < value ? type.max : value;\n    }\n\n    function stringParse(string) {\n      var inst = color(),\n          rgba = inst._rgba = [];\n      string = string.toLowerCase();\n      each(stringParsers, function (i, parser) {\n        var parsed,\n            match = parser.re.exec(string),\n            values = match && parser.parse(match),\n            spaceName = parser.space || \"rgba\";\n\n        if (values) {\n          parsed = inst[spaceName](values); // if this was an rgba parse the assignment might happen twice\n          // oh well....\n\n          inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n          rgba = inst._rgba = parsed._rgba; // exit each( stringParsers ) here because we matched\n\n          return false;\n        }\n      }); // Found a stringParser that handled it\n\n      if (rgba.length) {\n        // if this came from a parsed string, force \"transparent\" when alpha is 0\n        // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n        if (rgba.join() === \"0,0,0,0\") {\n          jQuery.extend(rgba, colors.transparent);\n        }\n\n        return inst;\n      } // named colors\n\n\n      return colors[string];\n    }\n\n    color.fn = jQuery.extend(color.prototype, {\n      parse: function parse(red, green, blue, alpha) {\n        if (red === undefined) {\n          this._rgba = [null, null, null, null];\n          return this;\n        }\n\n        if (red.jquery || red.nodeType) {\n          red = jQuery(red).css(green);\n          green = undefined;\n        }\n\n        var inst = this,\n            type = jQuery.type(red),\n            rgba = this._rgba = []; // more than 1 argument specified - assume ( red, green, blue, alpha )\n\n        if (green !== undefined) {\n          red = [red, green, blue, alpha];\n          type = \"array\";\n        }\n\n        if (type === \"string\") {\n          return this.parse(stringParse(red) || colors._default);\n        }\n\n        if (type === \"array\") {\n          each(spaces.rgba.props, function (key, prop) {\n            rgba[prop.idx] = clamp(red[prop.idx], prop);\n          });\n          return this;\n        }\n\n        if (type === \"object\") {\n          if (red instanceof color) {\n            each(spaces, function (spaceName, space) {\n              if (red[space.cache]) {\n                inst[space.cache] = red[space.cache].slice();\n              }\n            });\n          } else {\n            each(spaces, function (spaceName, space) {\n              var cache = space.cache;\n              each(space.props, function (key, prop) {\n                // if the cache doesn't exist, and we know how to convert\n                if (!inst[cache] && space.to) {\n                  // if the value was null, we don't need to copy it\n                  // if the key was alpha, we don't need to copy it either\n                  if (key === \"alpha\" || red[key] == null) {\n                    return;\n                  }\n\n                  inst[cache] = space.to(inst._rgba);\n                } // this is the only case where we allow nulls for ALL properties.\n                // call clamp with alwaysAllowEmpty\n\n\n                inst[cache][prop.idx] = clamp(red[key], prop, true);\n              }); // everything defined but alpha?\n\n              if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n                // use the default of 1\n                inst[cache][3] = 1;\n\n                if (space.from) {\n                  inst._rgba = space.from(inst[cache]);\n                }\n              }\n            });\n          }\n\n          return this;\n        }\n      },\n      is: function is(compare) {\n        var is = color(compare),\n            same = true,\n            inst = this;\n        each(spaces, function (_, space) {\n          var localCache,\n              isCache = is[space.cache];\n\n          if (isCache) {\n            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n            each(space.props, function (_, prop) {\n              if (isCache[prop.idx] != null) {\n                same = isCache[prop.idx] === localCache[prop.idx];\n                return same;\n              }\n            });\n          }\n\n          return same;\n        });\n        return same;\n      },\n      _space: function _space() {\n        var used = [],\n            inst = this;\n        each(spaces, function (spaceName, space) {\n          if (inst[space.cache]) {\n            used.push(spaceName);\n          }\n        });\n        return used.pop();\n      },\n      transition: function transition(other, distance) {\n        var end = color(other),\n            spaceName = end._space(),\n            space = spaces[spaceName],\n            startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n            start = startColor[space.cache] || space.to(startColor._rgba),\n            result = start.slice();\n\n        end = end[space.cache];\n        each(space.props, function (key, prop) {\n          var index = prop.idx,\n              startValue = start[index],\n              endValue = end[index],\n              type = propTypes[prop.type] || {}; // if null, don't override start value\n\n          if (endValue === null) {\n            return;\n          } // if null - use end\n\n\n          if (startValue === null) {\n            result[index] = endValue;\n          } else {\n            if (type.mod) {\n              if (endValue - startValue > type.mod / 2) {\n                startValue += type.mod;\n              } else if (startValue - endValue > type.mod / 2) {\n                startValue -= type.mod;\n              }\n            }\n\n            result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n          }\n        });\n        return this[spaceName](result);\n      },\n      blend: function blend(opaque) {\n        // if we are already opaque - return ourself\n        if (this._rgba[3] === 1) {\n          return this;\n        }\n\n        var rgb = this._rgba.slice(),\n            a = rgb.pop(),\n            blend = color(opaque)._rgba;\n\n        return color(jQuery.map(rgb, function (v, i) {\n          return (1 - a) * blend[i] + a * v;\n        }));\n      },\n      toRgbaString: function toRgbaString() {\n        var prefix = \"rgba(\",\n            rgba = jQuery.map(this._rgba, function (v, i) {\n          return v == null ? i > 2 ? 1 : 0 : v;\n        });\n\n        if (rgba[3] === 1) {\n          rgba.pop();\n          prefix = \"rgb(\";\n        }\n\n        return prefix + rgba.join() + \")\";\n      },\n      toHslaString: function toHslaString() {\n        var prefix = \"hsla(\",\n            hsla = jQuery.map(this.hsla(), function (v, i) {\n          if (v == null) {\n            v = i > 2 ? 1 : 0;\n          } // catch 1 and 2\n\n\n          if (i && i < 3) {\n            v = Math.round(v * 100) + \"%\";\n          }\n\n          return v;\n        });\n\n        if (hsla[3] === 1) {\n          hsla.pop();\n          prefix = \"hsl(\";\n        }\n\n        return prefix + hsla.join() + \")\";\n      },\n      toHexString: function toHexString(includeAlpha) {\n        var rgba = this._rgba.slice(),\n            alpha = rgba.pop();\n\n        if (includeAlpha) {\n          rgba.push(~~(alpha * 255));\n        }\n\n        return \"#\" + jQuery.map(rgba, function (v) {\n          // default to 0 when nulls exist\n          v = (v || 0).toString(16);\n          return v.length === 1 ? \"0\" + v : v;\n        }).join(\"\");\n      },\n      toString: function toString() {\n        return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n      }\n    });\n    color.fn.parse.prototype = color.fn; // hsla conversions adapted from:\n    // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n    function hue2rgb(p, q, h) {\n      h = (h + 1) % 1;\n\n      if (h * 6 < 1) {\n        return p + (q - p) * h * 6;\n      }\n\n      if (h * 2 < 1) {\n        return q;\n      }\n\n      if (h * 3 < 2) {\n        return p + (q - p) * (2 / 3 - h) * 6;\n      }\n\n      return p;\n    }\n\n    spaces.hsla.to = function (rgba) {\n      if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n        return [null, null, null, rgba[3]];\n      }\n\n      var r = rgba[0] / 255,\n          g = rgba[1] / 255,\n          b = rgba[2] / 255,\n          a = rgba[3],\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          diff = max - min,\n          add = max + min,\n          l = add * 0.5,\n          h,\n          s;\n\n      if (min === max) {\n        h = 0;\n      } else if (r === max) {\n        h = 60 * (g - b) / diff + 360;\n      } else if (g === max) {\n        h = 60 * (b - r) / diff + 120;\n      } else {\n        h = 60 * (r - g) / diff + 240;\n      } // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n      // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\n\n      if (diff === 0) {\n        s = 0;\n      } else if (l <= 0.5) {\n        s = diff / add;\n      } else {\n        s = diff / (2 - add);\n      }\n\n      return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n    };\n\n    spaces.hsla.from = function (hsla) {\n      if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n        return [null, null, null, hsla[3]];\n      }\n\n      var h = hsla[0] / 360,\n          s = hsla[1],\n          l = hsla[2],\n          a = hsla[3],\n          q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n          p = 2 * l - q;\n      return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n    };\n\n    each(spaces, function (spaceName, space) {\n      var props = space.props,\n          cache = space.cache,\n          to = space.to,\n          from = space.from; // makes rgba() and hsla()\n\n      color.fn[spaceName] = function (value) {\n        // generate a cache for this space if it doesn't exist\n        if (to && !this[cache]) {\n          this[cache] = to(this._rgba);\n        }\n\n        if (value === undefined) {\n          return this[cache].slice();\n        }\n\n        var ret,\n            type = jQuery.type(value),\n            arr = type === \"array\" || type === \"object\" ? value : arguments,\n            local = this[cache].slice();\n        each(props, function (key, prop) {\n          var val = arr[type === \"object\" ? key : prop.idx];\n\n          if (val == null) {\n            val = local[prop.idx];\n          }\n\n          local[prop.idx] = clamp(val, prop);\n        });\n\n        if (from) {\n          ret = color(from(local));\n          ret[cache] = local;\n          return ret;\n        } else {\n          return color(local);\n        }\n      }; // makes red() green() blue() alpha() hue() saturation() lightness()\n\n\n      each(props, function (key, prop) {\n        // alpha is included in more than one space\n        if (color.fn[key]) {\n          return;\n        }\n\n        color.fn[key] = function (value) {\n          var vtype = jQuery.type(value),\n              fn = key === \"alpha\" ? this._hsla ? \"hsla\" : \"rgba\" : spaceName,\n              local = this[fn](),\n              cur = local[prop.idx],\n              match;\n\n          if (vtype === \"undefined\") {\n            return cur;\n          }\n\n          if (vtype === \"function\") {\n            value = value.call(this, cur);\n            vtype = jQuery.type(value);\n          }\n\n          if (value == null && prop.empty) {\n            return this;\n          }\n\n          if (vtype === \"string\") {\n            match = rplusequals.exec(value);\n\n            if (match) {\n              value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n            }\n          }\n\n          local[prop.idx] = value;\n          return this[fn](local);\n        };\n      });\n    }); // add cssHook and .fx.step function for each named hook.\n    // accept a space separated string of properties\n\n    color.hook = function (hook) {\n      var hooks = hook.split(\" \");\n      each(hooks, function (i, hook) {\n        jQuery.cssHooks[hook] = {\n          set: function set(elem, value) {\n            var parsed,\n                curElem,\n                backgroundColor = \"\";\n\n            if (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n              value = color(parsed || value);\n\n              if (!support.rgba && value._rgba[3] !== 1) {\n                curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\n                while ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n                  try {\n                    backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                    curElem = curElem.parentNode;\n                  } catch (e) {}\n                }\n\n                value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n              }\n\n              value = value.toRgbaString();\n            }\n\n            try {\n              elem.style[hook] = value;\n            } catch (e) {// wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n            }\n          }\n        };\n\n        jQuery.fx.step[hook] = function (fx) {\n          if (!fx.colorInit) {\n            fx.start = color(fx.elem, hook);\n            fx.end = color(fx.end);\n            fx.colorInit = true;\n          }\n\n          jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n        };\n      });\n    };\n\n    color.hook(stepHooks);\n    jQuery.cssHooks.borderColor = {\n      expand: function expand(value) {\n        var expanded = {};\n        each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n          expanded[\"border\" + part + \"Color\"] = value;\n        });\n        return expanded;\n      }\n    }; // Basic color names only.\n    // Usage of any of the other color names requires adding yourself or including\n    // jquery.color.svg-names.js.\n\n    colors = jQuery.Color.names = {\n      // 4.1. Basic color keywords\n      aqua: \"#00ffff\",\n      black: \"#000000\",\n      blue: \"#0000ff\",\n      fuchsia: \"#ff00ff\",\n      gray: \"#808080\",\n      green: \"#008000\",\n      lime: \"#00ff00\",\n      maroon: \"#800000\",\n      navy: \"#000080\",\n      olive: \"#808000\",\n      purple: \"#800080\",\n      red: \"#ff0000\",\n      silver: \"#c0c0c0\",\n      teal: \"#008080\",\n      white: \"#ffffff\",\n      yellow: \"#ffff00\",\n      // 4.2.3. \"transparent\" color keyword\n      transparent: [null, null, null, 0],\n      _default: \"#ffffff\"\n    };\n  })(jQuery);\n  /******************************************************************************/\n\n  /****************************** CLASS ANIMATIONS ******************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    var classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n        shorthandStyles = {\n      border: 1,\n      borderBottom: 1,\n      borderColor: 1,\n      borderLeft: 1,\n      borderRight: 1,\n      borderTop: 1,\n      borderWidth: 1,\n      margin: 1,\n      padding: 1\n    };\n    $.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n      $.fx.step[prop] = function (fx) {\n        if (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n          jQuery.style(fx.elem, prop, fx.end);\n          fx.setAttr = true;\n        }\n      };\n    });\n\n    function getElementStyles(elem) {\n      var key,\n          len,\n          style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,\n          styles = {};\n\n      if (style && style.length && style[0] && style[style[0]]) {\n        len = style.length;\n\n        while (len--) {\n          key = style[len];\n\n          if (typeof style[key] === \"string\") {\n            styles[$.camelCase(key)] = style[key];\n          }\n        } // support: Opera, IE <9\n\n      } else {\n        for (key in style) {\n          if (typeof style[key] === \"string\") {\n            styles[key] = style[key];\n          }\n        }\n      }\n\n      return styles;\n    }\n\n    function styleDifference(oldStyle, newStyle) {\n      var diff = {},\n          name,\n          value;\n\n      for (name in newStyle) {\n        value = newStyle[name];\n\n        if (oldStyle[name] !== value) {\n          if (!shorthandStyles[name]) {\n            if ($.fx.step[name] || !isNaN(parseFloat(value))) {\n              diff[name] = value;\n            }\n          }\n        }\n      }\n\n      return diff;\n    } // support: jQuery <1.8\n\n\n    if (!$.fn.addBack) {\n      $.fn.addBack = function (selector) {\n        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n      };\n    }\n\n    $.effects.animateClass = function (value, duration, easing, callback) {\n      var o = $.speed(duration, easing, callback);\n      return this.queue(function () {\n        var animated = $(this),\n            baseClass = animated.attr(\"class\") || \"\",\n            applyClassChange,\n            allAnimations = o.children ? animated.find(\"*\").addBack() : animated; // map the animated objects to store the original styles.\n\n        allAnimations = allAnimations.map(function () {\n          var el = $(this);\n          return {\n            el: el,\n            start: getElementStyles(this)\n          };\n        }); // apply class change\n\n        applyClassChange = function applyClassChange() {\n          $.each(classAnimationActions, function (i, action) {\n            if (value[action]) {\n              animated[action + \"Class\"](value[action]);\n            }\n          });\n        };\n\n        applyClassChange(); // map all animated objects again - calculate new styles and diff\n\n        allAnimations = allAnimations.map(function () {\n          this.end = getElementStyles(this.el[0]);\n          this.diff = styleDifference(this.start, this.end);\n          return this;\n        }); // apply original class\n\n        animated.attr(\"class\", baseClass); // map all animated objects again - this time collecting a promise\n\n        allAnimations = allAnimations.map(function () {\n          var styleInfo = this,\n              dfd = $.Deferred(),\n              opts = $.extend({}, o, {\n            queue: false,\n            complete: function complete() {\n              dfd.resolve(styleInfo);\n            }\n          });\n          this.el.animate(this.diff, opts);\n          return dfd.promise();\n        }); // once all animations have completed:\n\n        $.when.apply($, allAnimations.get()).done(function () {\n          // set the final class\n          applyClassChange(); // for each animated element,\n          // clear all css properties that were animated\n\n          $.each(arguments, function () {\n            var el = this.el;\n            $.each(this.diff, function (key) {\n              el.css(key, \"\");\n            });\n          }); // this is guarnteed to be there if you use jQuery.speed()\n          // it also handles dequeuing the next anim...\n\n          o.complete.call(animated[0]);\n        });\n      });\n    };\n\n    $.fn.extend({\n      _addClass: $.fn.addClass,\n      addClass: function addClass(classNames, speed, easing, callback) {\n        return speed ? $.effects.animateClass.call(this, {\n          add: classNames\n        }, speed, easing, callback) : this._addClass(classNames);\n      },\n      _removeClass: $.fn.removeClass,\n      removeClass: function removeClass(classNames, speed, easing, callback) {\n        return arguments.length > 1 ? $.effects.animateClass.call(this, {\n          remove: classNames\n        }, speed, easing, callback) : this._removeClass.apply(this, arguments);\n      },\n      _toggleClass: $.fn.toggleClass,\n      toggleClass: function toggleClass(classNames, force, speed, easing, callback) {\n        if (typeof force === \"boolean\" || force === undefined) {\n          if (!speed) {\n            // without speed parameter\n            return this._toggleClass(classNames, force);\n          } else {\n            return $.effects.animateClass.call(this, force ? {\n              add: classNames\n            } : {\n              remove: classNames\n            }, speed, easing, callback);\n          }\n        } else {\n          // without force parameter\n          return $.effects.animateClass.call(this, {\n            toggle: classNames\n          }, force, speed, easing);\n        }\n      },\n      switchClass: function switchClass(remove, add, speed, easing, callback) {\n        return $.effects.animateClass.call(this, {\n          add: add,\n          remove: remove\n        }, speed, easing, callback);\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EFFECTS **********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    $.extend($.effects, {\n      version: \"1.10.1\",\n      // Saves a set of properties in a data storage\n      save: function save(element, set) {\n        for (var i = 0; i < set.length; i++) {\n          if (set[i] !== null) {\n            element.data(dataSpace + set[i], element[0].style[set[i]]);\n          }\n        }\n      },\n      // Restores a set of previously saved properties from a data storage\n      restore: function restore(element, set) {\n        var val, i;\n\n        for (i = 0; i < set.length; i++) {\n          if (set[i] !== null) {\n            val = element.data(dataSpace + set[i]); // support: jQuery 1.6.2\n            // http://bugs.jquery.com/ticket/9917\n            // jQuery 1.6.2 incorrectly returns undefined for any falsy value.\n            // We can't differentiate between \"\" and 0 here, so we just assume\n            // empty string since it's likely to be a more common value...\n\n            if (val === undefined) {\n              val = \"\";\n            }\n\n            element.css(set[i], val);\n          }\n        }\n      },\n      setMode: function setMode(el, mode) {\n        if (mode === \"toggle\") {\n          mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n        }\n\n        return mode;\n      },\n      // Translates a [top,left] array into a baseline value\n      // this should be a little more flexible in the future to handle a string & hash\n      getBaseline: function getBaseline(origin, original) {\n        var y, x;\n\n        switch (origin[0]) {\n          case \"top\":\n            y = 0;\n            break;\n\n          case \"middle\":\n            y = 0.5;\n            break;\n\n          case \"bottom\":\n            y = 1;\n            break;\n\n          default:\n            y = origin[0] / original.height;\n        }\n\n        switch (origin[1]) {\n          case \"left\":\n            x = 0;\n            break;\n\n          case \"center\":\n            x = 0.5;\n            break;\n\n          case \"right\":\n            x = 1;\n            break;\n\n          default:\n            x = origin[1] / original.width;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Wraps the element around a wrapper that copies position properties\n      createWrapper: function createWrapper(element) {\n        // if the element is already wrapped, return it\n        if (element.parent().is(\".ui-effects-wrapper\")) {\n          return element.parent();\n        } // wrap the element\n\n\n        var props = {\n          width: element.outerWidth(true),\n          height: element.outerHeight(true),\n          \"float\": element.css(\"float\")\n        },\n            wrapper = $(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({\n          fontSize: \"100%\",\n          background: \"transparent\",\n          border: \"none\",\n          margin: 0,\n          padding: 0\n        }),\n            // Store the size in case width/height are defined in % - Fixes #5245\n        size = {\n          width: element.width(),\n          height: element.height()\n        },\n            active = document.activeElement; // support: Firefox\n        // Firefox incorrectly exposes anonymous content\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\n        try {\n          active.id;\n        } catch (e) {\n          active = document.body;\n        }\n\n        element.wrap(wrapper); // Fixes #7595 - Elements lose focus when wrapped.\n\n        if (element[0] === active || $.contains(element[0], active)) {\n          $(active).focus();\n        }\n\n        wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element\n        // transfer positioning properties to the wrapper\n\n        if (element.css(\"position\") === \"static\") {\n          wrapper.css({\n            position: \"relative\"\n          });\n          element.css({\n            position: \"relative\"\n          });\n        } else {\n          $.extend(props, {\n            position: element.css(\"position\"),\n            zIndex: element.css(\"z-index\")\n          });\n          $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n            props[pos] = element.css(pos);\n\n            if (isNaN(parseInt(props[pos], 10))) {\n              props[pos] = \"auto\";\n            }\n          });\n          element.css({\n            position: \"relative\",\n            top: 0,\n            left: 0,\n            right: \"auto\",\n            bottom: \"auto\"\n          });\n        }\n\n        element.css(size);\n        return wrapper.css(props).show();\n      },\n      removeWrapper: function removeWrapper(element) {\n        var active = document.activeElement;\n\n        if (element.parent().is(\".ui-effects-wrapper\")) {\n          element.parent().replaceWith(element); // Fixes #7595 - Elements lose focus when wrapped.\n\n          if (element[0] === active || $.contains(element[0], active)) {\n            $(active).focus();\n          }\n        }\n\n        return element;\n      },\n      setTransition: function setTransition(element, list, factor, value) {\n        value = value || {};\n        $.each(list, function (i, x) {\n          var unit = element.cssUnit(x);\n\n          if (unit[0] > 0) {\n            value[x] = unit[0] * factor + unit[1];\n          }\n        });\n        return value;\n      }\n    }); // return an effect options object for the given parameters:\n\n    function _normalizeArguments(effect, options, speed, callback) {\n      // allow passing all options as the first parameter\n      if ($.isPlainObject(effect)) {\n        options = effect;\n        effect = effect.effect;\n      } // convert to an object\n\n\n      effect = {\n        effect: effect\n      }; // catch (effect, null, ...)\n\n      if (options == null) {\n        options = {};\n      } // catch (effect, callback)\n\n\n      if ($.isFunction(options)) {\n        callback = options;\n        speed = null;\n        options = {};\n      } // catch (effect, speed, ?)\n\n\n      if (typeof options === \"number\" || $.fx.speeds[options]) {\n        callback = speed;\n        speed = options;\n        options = {};\n      } // catch (effect, options, callback)\n\n\n      if ($.isFunction(speed)) {\n        callback = speed;\n        speed = null;\n      } // add options to effect\n\n\n      if (options) {\n        $.extend(effect, options);\n      }\n\n      speed = speed || options.duration;\n      effect.duration = $.fx.off ? 0 : typeof speed === \"number\" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n      effect.complete = callback || options.complete;\n      return effect;\n    }\n\n    function standardSpeed(speed) {\n      // valid standard speeds\n      if (!speed || typeof speed === \"number\" || $.fx.speeds[speed]) {\n        return true;\n      } // invalid strings - treat as \"normal\" speed\n\n\n      return typeof speed === \"string\" && !$.effects.effect[speed];\n    }\n\n    $.fn.extend({\n      effect: function effect()\n      /* effect, options, speed, callback */\n      {\n        var args = _normalizeArguments.apply(this, arguments),\n            mode = args.mode,\n            queue = args.queue,\n            effectMethod = $.effects.effect[args.effect];\n\n        if ($.fx.off || !effectMethod) {\n          // delegate to the original method (e.g., .show()) if possible\n          if (mode) {\n            return this[mode](args.duration, args.complete);\n          } else {\n            return this.each(function () {\n              if (args.complete) {\n                args.complete.call(this);\n              }\n            });\n          }\n        }\n\n        function run(next) {\n          var elem = $(this),\n              complete = args.complete,\n              mode = args.mode;\n\n          function done() {\n            if ($.isFunction(complete)) {\n              complete.call(elem[0]);\n            }\n\n            if ($.isFunction(next)) {\n              next();\n            }\n          } // if the element is hiddden and mode is hide,\n          // or element is visible and mode is show\n\n\n          if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n            done();\n          } else {\n            effectMethod.call(elem[0], args, done);\n          }\n        }\n\n        return queue === false ? this.each(run) : this.queue(queue || \"fx\", run);\n      },\n      _show: $.fn.show,\n      show: function show(speed) {\n        if (standardSpeed(speed)) {\n          return this._show.apply(this, arguments);\n        } else {\n          var args = _normalizeArguments.apply(this, arguments);\n\n          args.mode = \"show\";\n          return this.effect.call(this, args);\n        }\n      },\n      _hide: $.fn.hide,\n      hide: function hide(speed) {\n        if (standardSpeed(speed)) {\n          return this._hide.apply(this, arguments);\n        } else {\n          var args = _normalizeArguments.apply(this, arguments);\n\n          args.mode = \"hide\";\n          return this.effect.call(this, args);\n        }\n      },\n      // jQuery core overloads toggle and creates _toggle\n      __toggle: $.fn.toggle,\n      toggle: function toggle(speed) {\n        if (standardSpeed(speed) || typeof speed === \"boolean\" || $.isFunction(speed)) {\n          return this.__toggle.apply(this, arguments);\n        } else {\n          var args = _normalizeArguments.apply(this, arguments);\n\n          args.mode = \"toggle\";\n          return this.effect.call(this, args);\n        }\n      },\n      // helper functions\n      cssUnit: function cssUnit(key) {\n        var style = this.css(key),\n            val = [];\n        $.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n          if (style.indexOf(unit) > 0) {\n            val = [parseFloat(style), unit];\n          }\n        });\n        return val;\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EASING ***********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n    var baseEasings = {};\n    $.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n      baseEasings[name] = function (p) {\n        return Math.pow(p, i + 2);\n      };\n    });\n    $.extend(baseEasings, {\n      Sine: function Sine(p) {\n        return 1 - Math.cos(p * Math.PI / 2);\n      },\n      Circ: function Circ(p) {\n        return 1 - Math.sqrt(1 - p * p);\n      },\n      Elastic: function Elastic(p) {\n        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n      },\n      Back: function Back(p) {\n        return p * p * (3 * p - 2);\n      },\n      Bounce: function Bounce(p) {\n        var pow2,\n            bounce = 4;\n\n        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}\n\n        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n      }\n    });\n    $.each(baseEasings, function (name, easeIn) {\n      $.easing[\"easeIn\" + name] = easeIn;\n\n      $.easing[\"easeOut\" + name] = function (p) {\n        return 1 - easeIn(1 - p);\n      };\n\n      $.easing[\"easeInOut\" + name] = function (p) {\n        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n      };\n    });\n  })();\n}(jQuery);\n\n(function ($, undefined) {\n  var rvertical = /up|down|vertical/,\n      rpositivemotion = /up|left|vertical|horizontal/;\n\n  $.effects.effect.blind = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        direction = o.direction || \"up\",\n        vertical = rvertical.test(direction),\n        ref = vertical ? \"height\" : \"width\",\n        ref2 = vertical ? \"top\" : \"left\",\n        motion = rpositivemotion.test(direction),\n        animation = {},\n        show = mode === \"show\",\n        wrapper,\n        distance,\n        margin; // if already wrapped, the wrapper's properties are my property. #6245\n\n    if (el.parent().is(\".ui-effects-wrapper\")) {\n      $.effects.save(el.parent(), props);\n    } else {\n      $.effects.save(el, props);\n    }\n\n    el.show();\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    distance = wrapper[ref]();\n    margin = parseFloat(wrapper.css(ref2)) || 0;\n    animation[ref] = show ? distance : 0;\n\n    if (!motion) {\n      el.css(vertical ? \"bottom\" : \"right\", 0).css(vertical ? \"top\" : \"left\", \"auto\").css({\n        position: \"absolute\"\n      });\n      animation[ref2] = show ? margin : distance + margin;\n    } // start at 0 if we are showing\n\n\n    if (show) {\n      wrapper.css(ref, 0);\n\n      if (!motion) {\n        wrapper.css(ref2, margin + distance);\n      }\n    } // Animate\n\n\n    wrapper.animate(animation, {\n      duration: o.duration,\n      easing: o.easing,\n      queue: false,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.bounce = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        // defaults:\n    mode = $.effects.setMode(el, o.mode || \"effect\"),\n        hide = mode === \"hide\",\n        show = mode === \"show\",\n        direction = o.direction || \"up\",\n        distance = o.distance,\n        times = o.times || 5,\n        // number of internal animations\n    anims = times * 2 + (show || hide ? 1 : 0),\n        speed = o.duration / anims,\n        easing = o.easing,\n        // utility:\n    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\",\n        i,\n        upAnim,\n        downAnim,\n        // we will need to re-assemble the queue to stack our animations in place\n    queue = el.queue(),\n        queuelen = queue.length; // Avoid touching opacity to prevent clearType and PNG issues in IE\n\n    if (show || hide) {\n      props.push(\"opacity\");\n    }\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el); // Create Wrapper\n    // default distance for the BIGGEST bounce is the outer Distance / 3\n\n    if (!distance) {\n      distance = el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n    }\n\n    if (show) {\n      downAnim = {\n        opacity: 1\n      };\n      downAnim[ref] = 0; // if we are showing, force opacity 0 and set the initial position\n      // then do the \"first\" animation\n\n      el.css(\"opacity\", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);\n    } // start at the smallest distance if we are hiding\n\n\n    if (hide) {\n      distance = distance / Math.pow(2, times - 1);\n    }\n\n    downAnim = {};\n    downAnim[ref] = 0; // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n\n    for (i = 0; i < times; i++) {\n      upAnim = {};\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);\n      distance = hide ? distance * 2 : distance / 2;\n    } // Last Bounce when Hiding\n\n\n    if (hide) {\n      upAnim = {\n        opacity: 0\n      };\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      el.animate(upAnim, speed, easing);\n    }\n\n    el.queue(function () {\n      if (hide) {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    }); // inject all the animations we just queued to be first in line (after \"inprogress\")\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    el.dequeue();\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.clip = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        direction = o.direction || \"vertical\",\n        vert = direction === \"vertical\",\n        size = vert ? \"height\" : \"width\",\n        position = vert ? \"top\" : \"left\",\n        animation = {},\n        wrapper,\n        animate,\n        distance; // Save & Show\n\n    $.effects.save(el, props);\n    el.show(); // Create Wrapper\n\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    animate = el[0].tagName === \"IMG\" ? wrapper : el;\n    distance = animate[size](); // Shift\n\n    if (show) {\n      animate.css(size, 0);\n      animate.css(position, distance / 2);\n    } // Create Animation Object:\n\n\n    animation[size] = show ? distance : 0;\n    animation[position] = show ? 0 : distance / 2; // Animate\n\n    animate.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (!show) {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.drop = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"opacity\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        direction = o.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\" ? \"pos\" : \"neg\",\n        animation = {\n      opacity: show ? 1 : 0\n    },\n        distance; // Adjust\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el);\n    distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true) / 2;\n\n    if (show) {\n      el.css(\"opacity\", 0).css(ref, motion === \"pos\" ? -distance : distance);\n    } // Animation\n\n\n    animation[ref] = (show ? motion === \"pos\" ? \"+=\" : \"-=\" : motion === \"pos\" ? \"-=\" : \"+=\") + distance; // Animate\n\n    el.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.explode = function (o, done) {\n    var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3,\n        cells = rows,\n        el = $(this),\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        // show and then visibility:hidden the element before calculating offset\n    offset = el.show().css(\"visibility\", \"hidden\").offset(),\n        // width and height of a piece\n    width = Math.ceil(el.outerWidth() / cells),\n        height = Math.ceil(el.outerHeight() / rows),\n        pieces = [],\n        // loop\n    i,\n        j,\n        left,\n        top,\n        mx,\n        my; // children animate complete:\n\n    function childComplete() {\n      pieces.push(this);\n\n      if (pieces.length === rows * cells) {\n        animComplete();\n      }\n    } // clone the element for each row and cell.\n\n\n    for (i = 0; i < rows; i++) {\n      // ===>\n      top = offset.top + i * height;\n      my = i - (rows - 1) / 2;\n\n      for (j = 0; j < cells; j++) {\n        // |||\n        left = offset.left + j * width;\n        mx = j - (cells - 1) / 2; // Create a clone of the now hidden main element that will be absolute positioned\n        // within a wrapper div off the -left and -top equal to size of our pieces\n\n        el.clone().appendTo(\"body\").wrap(\"<div></div>\").css({\n          position: \"absolute\",\n          visibility: \"visible\",\n          left: -j * width,\n          top: -i * height\n        }) // select the wrapper - make it overflow: hidden and absolute positioned based on\n        // where the original was located +left and +top equal to the size of pieces\n        .parent().addClass(\"ui-effects-explode\").css({\n          position: \"absolute\",\n          overflow: \"hidden\",\n          width: width,\n          height: height,\n          left: left + (show ? mx * width : 0),\n          top: top + (show ? my * height : 0),\n          opacity: show ? 0 : 1\n        }).animate({\n          left: left + (show ? 0 : mx * width),\n          top: top + (show ? 0 : my * height),\n          opacity: show ? 1 : 0\n        }, o.duration || 500, o.easing, childComplete);\n      }\n    }\n\n    function animComplete() {\n      el.css({\n        visibility: \"visible\"\n      });\n      $(pieces).remove();\n\n      if (!show) {\n        el.hide();\n      }\n\n      done();\n    }\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.fade = function (o, done) {\n    var el = $(this),\n        mode = $.effects.setMode(el, o.mode || \"toggle\");\n    el.animate({\n      opacity: mode\n    }, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: done\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.fold = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        size = o.size || 15,\n        percent = /([0-9]+)%/.exec(size),\n        horizFirst = !!o.horizFirst,\n        widthFirst = show !== horizFirst,\n        ref = widthFirst ? [\"width\", \"height\"] : [\"height\", \"width\"],\n        duration = o.duration / 2,\n        wrapper,\n        distance,\n        animation1 = {},\n        animation2 = {};\n    $.effects.save(el, props);\n    el.show(); // Create Wrapper\n\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];\n\n    if (percent) {\n      size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];\n    }\n\n    if (show) {\n      wrapper.css(horizFirst ? {\n        height: 0,\n        width: size\n      } : {\n        height: size,\n        width: 0\n      });\n    } // Animation\n\n\n    animation1[ref[0]] = show ? distance[0] : size;\n    animation2[ref[1]] = show ? distance[1] : 0; // Animate\n\n    wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function () {\n      if (hide) {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.highlight = function (o, done) {\n    var elem = $(this),\n        props = [\"backgroundImage\", \"backgroundColor\", \"opacity\"],\n        mode = $.effects.setMode(elem, o.mode || \"show\"),\n        animation = {\n      backgroundColor: elem.css(\"backgroundColor\")\n    };\n\n    if (mode === \"hide\") {\n      animation.opacity = 0;\n    }\n\n    $.effects.save(elem, props);\n    elem.show().css({\n      backgroundImage: \"none\",\n      backgroundColor: o.color || \"#ffff99\"\n    }).animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          elem.hide();\n        }\n\n        $.effects.restore(elem, props);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.pulsate = function (o, done) {\n    var elem = $(this),\n        mode = $.effects.setMode(elem, o.mode || \"show\"),\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        showhide = show || mode === \"hide\",\n        // showing or hiding leaves of the \"last\" animation\n    anims = (o.times || 5) * 2 + (showhide ? 1 : 0),\n        duration = o.duration / anims,\n        animateTo = 0,\n        queue = elem.queue(),\n        queuelen = queue.length,\n        i;\n\n    if (show || !elem.is(\":visible\")) {\n      elem.css(\"opacity\", 0).show();\n      animateTo = 1;\n    } // anims - 1 opacity \"toggles\"\n\n\n    for (i = 1; i < anims; i++) {\n      elem.animate({\n        opacity: animateTo\n      }, duration, o.easing);\n      animateTo = 1 - animateTo;\n    }\n\n    elem.animate({\n      opacity: animateTo\n    }, duration, o.easing);\n    elem.queue(function () {\n      if (hide) {\n        elem.hide();\n      }\n\n      done();\n    }); // We just queued up \"anims\" animations, we need to put them next in the queue\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    elem.dequeue();\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.puff = function (o, done) {\n    var elem = $(this),\n        mode = $.effects.setMode(elem, o.mode || \"hide\"),\n        hide = mode === \"hide\",\n        percent = parseInt(o.percent, 10) || 150,\n        factor = percent / 100,\n        original = {\n      height: elem.height(),\n      width: elem.width(),\n      outerHeight: elem.outerHeight(),\n      outerWidth: elem.outerWidth()\n    };\n    $.extend(o, {\n      effect: \"scale\",\n      queue: false,\n      fade: true,\n      mode: mode,\n      complete: done,\n      percent: hide ? percent : 100,\n      from: hide ? original : {\n        height: original.height * factor,\n        width: original.width * factor,\n        outerHeight: original.outerHeight * factor,\n        outerWidth: original.outerWidth * factor\n      }\n    });\n    elem.effect(o);\n  };\n\n  $.effects.effect.scale = function (o, done) {\n    // Create element\n    var el = $(this),\n        options = $.extend(true, {}, o),\n        mode = $.effects.setMode(el, o.mode || \"effect\"),\n        percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === \"hide\" ? 0 : 100),\n        direction = o.direction || \"both\",\n        origin = o.origin,\n        original = {\n      height: el.height(),\n      width: el.width(),\n      outerHeight: el.outerHeight(),\n      outerWidth: el.outerWidth()\n    },\n        factor = {\n      y: direction !== \"horizontal\" ? percent / 100 : 1,\n      x: direction !== \"vertical\" ? percent / 100 : 1\n    }; // We are going to pass this effect to the size effect:\n\n    options.effect = \"size\";\n    options.queue = false;\n    options.complete = done; // Set default origin and restore for show/hide\n\n    if (mode !== \"effect\") {\n      options.origin = origin || [\"middle\", \"center\"];\n      options.restore = true;\n    }\n\n    options.from = o.from || (mode === \"show\" ? {\n      height: 0,\n      width: 0,\n      outerHeight: 0,\n      outerWidth: 0\n    } : original);\n    options.to = {\n      height: original.height * factor.y,\n      width: original.width * factor.x,\n      outerHeight: original.outerHeight * factor.y,\n      outerWidth: original.outerWidth * factor.x\n    }; // Fade option to support puff\n\n    if (options.fade) {\n      if (mode === \"show\") {\n        options.from.opacity = 0;\n        options.to.opacity = 1;\n      }\n\n      if (mode === \"hide\") {\n        options.from.opacity = 1;\n        options.to.opacity = 0;\n      }\n    } // Animate\n\n\n    el.effect(options);\n  };\n\n  $.effects.effect.size = function (o, done) {\n    // Create element\n    var original,\n        baseline,\n        factor,\n        el = $(this),\n        props0 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\", \"overflow\", \"opacity\"],\n        // Always restore\n    props1 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"overflow\", \"opacity\"],\n        // Copy for children\n    props2 = [\"width\", \"height\", \"overflow\"],\n        cProps = [\"fontSize\"],\n        vProps = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"],\n        hProps = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"],\n        // Set options\n    mode = $.effects.setMode(el, o.mode || \"effect\"),\n        restore = o.restore || mode !== \"effect\",\n        scale = o.scale || \"both\",\n        origin = o.origin || [\"middle\", \"center\"],\n        position = el.css(\"position\"),\n        props = restore ? props0 : props1,\n        zero = {\n      height: 0,\n      width: 0,\n      outerHeight: 0,\n      outerWidth: 0\n    };\n\n    if (mode === \"show\") {\n      el.show();\n    }\n\n    original = {\n      height: el.height(),\n      width: el.width(),\n      outerHeight: el.outerHeight(),\n      outerWidth: el.outerWidth()\n    };\n\n    if (o.mode === \"toggle\" && mode === \"show\") {\n      el.from = o.to || zero;\n      el.to = o.from || original;\n    } else {\n      el.from = o.from || (mode === \"show\" ? zero : original);\n      el.to = o.to || (mode === \"hide\" ? zero : original);\n    } // Set scaling factor\n\n\n    factor = {\n      from: {\n        y: el.from.height / original.height,\n        x: el.from.width / original.width\n      },\n      to: {\n        y: el.to.height / original.height,\n        x: el.to.width / original.width\n      }\n    }; // Scale the css box\n\n    if (scale === \"box\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        props = props.concat(vProps);\n        el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);\n        el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);\n      } // Horizontal props scaling\n\n\n      if (factor.from.x !== factor.to.x) {\n        props = props.concat(hProps);\n        el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);\n        el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);\n      }\n    } // Scale the content\n\n\n    if (scale === \"content\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        props = props.concat(cProps).concat(props2);\n        el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);\n        el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);\n      }\n    }\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el);\n    el.css(\"overflow\", \"hidden\").css(el.from); // Adjust\n\n    if (origin) {\n      // Calculate baseline shifts\n      baseline = $.effects.getBaseline(origin, original);\n      el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;\n      el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;\n      el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;\n      el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;\n    }\n\n    el.css(el.from); // set top & left\n    // Animate\n\n    if (scale === \"content\" || scale === \"both\") {\n      // Scale the children\n      // Add margins/font-size\n      vProps = vProps.concat([\"marginTop\", \"marginBottom\"]).concat(cProps);\n      hProps = hProps.concat([\"marginLeft\", \"marginRight\"]);\n      props2 = props0.concat(vProps).concat(hProps);\n      el.find(\"*[width]\").each(function () {\n        var child = $(this),\n            c_original = {\n          height: child.height(),\n          width: child.width(),\n          outerHeight: child.outerHeight(),\n          outerWidth: child.outerWidth()\n        };\n\n        if (restore) {\n          $.effects.save(child, props2);\n        }\n\n        child.from = {\n          height: c_original.height * factor.from.y,\n          width: c_original.width * factor.from.x,\n          outerHeight: c_original.outerHeight * factor.from.y,\n          outerWidth: c_original.outerWidth * factor.from.x\n        };\n        child.to = {\n          height: c_original.height * factor.to.y,\n          width: c_original.width * factor.to.x,\n          outerHeight: c_original.height * factor.to.y,\n          outerWidth: c_original.width * factor.to.x\n        }; // Vertical props scaling\n\n        if (factor.from.y !== factor.to.y) {\n          child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);\n          child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);\n        } // Horizontal props scaling\n\n\n        if (factor.from.x !== factor.to.x) {\n          child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);\n          child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);\n        } // Animate children\n\n\n        child.css(child.from);\n        child.animate(child.to, o.duration, o.easing, function () {\n          // Restore children\n          if (restore) {\n            $.effects.restore(child, props2);\n          }\n        });\n      });\n    } // Animate\n\n\n    el.animate(el.to, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (el.to.opacity === 0) {\n          el.css(\"opacity\", el.from.opacity);\n        }\n\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n\n        if (!restore) {\n          // we need to calculate our new positioning based on the scaling\n          if (position === \"static\") {\n            el.css({\n              position: \"relative\",\n              top: el.to.top,\n              left: el.to.left\n            });\n          } else {\n            $.each([\"top\", \"left\"], function (idx, pos) {\n              el.css(pos, function (_, str) {\n                var val = parseInt(str, 10),\n                    toRef = idx ? el.to.left : el.to.top; // if original was \"auto\", recalculate the new value from wrapper\n\n                if (str === \"auto\") {\n                  return toRef + \"px\";\n                }\n\n                return val + toRef + \"px\";\n              });\n            });\n          }\n        }\n\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.shake = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"effect\"),\n        direction = o.direction || \"left\",\n        distance = o.distance || 20,\n        times = o.times || 3,\n        anims = times * 2 + 1,\n        speed = Math.round(o.duration / anims),\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        animation = {},\n        animation1 = {},\n        animation2 = {},\n        i,\n        // we will need to re-assemble the queue to stack our animations in place\n    queue = el.queue(),\n        queuelen = queue.length;\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el); // Animation\n\n    animation[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance;\n    animation1[ref] = (positiveMotion ? \"+=\" : \"-=\") + distance * 2;\n    animation2[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance * 2; // Animate\n\n    el.animate(animation, speed, o.easing); // Shakes\n\n    for (i = 1; i < times; i++) {\n      el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);\n    }\n\n    el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function () {\n      if (mode === \"hide\") {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    }); // inject all the animations we just queued to be first in line (after \"inprogress\")\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    el.dequeue();\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.slide = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\"],\n        mode = $.effects.setMode(el, o.mode || \"show\"),\n        show = mode === \"show\",\n        direction = o.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        distance,\n        animation = {}; // Adjust\n\n    $.effects.save(el, props);\n    el.show();\n    distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true);\n    $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n\n    if (show) {\n      el.css(ref, positiveMotion ? isNaN(distance) ? \"-\" + distance : -distance : distance);\n    } // Animation\n\n\n    animation[ref] = (show ? positiveMotion ? \"+=\" : \"-=\" : positiveMotion ? \"-=\" : \"+=\") + distance; // Animate\n\n    el.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n})(jQuery);\n\n(function ($, undefined) {\n  $.effects.effect.transfer = function (o, done) {\n    var elem = $(this),\n        target = $(o.to),\n        targetFixed = target.css(\"position\") === \"fixed\",\n        body = $(\"body\"),\n        fixTop = targetFixed ? body.scrollTop() : 0,\n        fixLeft = targetFixed ? body.scrollLeft() : 0,\n        endPosition = target.offset(),\n        animation = {\n      top: endPosition.top - fixTop,\n      left: endPosition.left - fixLeft,\n      height: target.innerHeight(),\n      width: target.innerWidth()\n    },\n        startPosition = elem.offset(),\n        transfer = $(\"<div class='ui-effects-transfer'></div>\").appendTo(document.body).addClass(o.className).css({\n      top: startPosition.top - fixTop,\n      left: startPosition.left - fixLeft,\n      height: elem.innerHeight(),\n      width: elem.innerWidth(),\n      position: targetFixed ? \"fixed\" : \"absolute\"\n    }).animate(animation, o.duration, o.easing, function () {\n      transfer.remove();\n      done();\n    });\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LXVpLTEuMTAuMS5jdXN0b20uanM/MTI4YyJdLCJuYW1lcyI6WyIkIiwidW5kZWZpbmVkIiwidXVpZCIsInJ1bmlxdWVJZCIsInVpIiwidmVyc2lvbiIsImV4dGVuZCIsImtleUNvZGUiLCJCQUNLU1BBQ0UiLCJDT01NQSIsIkRFTEVURSIsIkRPV04iLCJFTkQiLCJFTlRFUiIsIkVTQ0FQRSIsIkhPTUUiLCJMRUZUIiwiTlVNUEFEX0FERCIsIk5VTVBBRF9ERUNJTUFMIiwiTlVNUEFEX0RJVklERSIsIk5VTVBBRF9FTlRFUiIsIk5VTVBBRF9NVUxUSVBMWSIsIk5VTVBBRF9TVUJUUkFDVCIsIlBBR0VfRE9XTiIsIlBBR0VfVVAiLCJQRVJJT0QiLCJSSUdIVCIsIlNQQUNFIiwiVEFCIiwiVVAiLCJmbiIsIl9mb2N1cyIsImZvY3VzIiwiZGVsYXkiLCJlYWNoIiwiZWxlbSIsInNldFRpbWVvdXQiLCJjYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzY3JvbGxQYXJlbnQiLCJpZSIsInRlc3QiLCJjc3MiLCJwYXJlbnRzIiwiZmlsdGVyIiwiZXEiLCJsZW5ndGgiLCJkb2N1bWVudCIsInpJbmRleCIsInBvc2l0aW9uIiwidmFsdWUiLCJwYXJzZUludCIsImlzTmFOIiwicGFyZW50IiwidW5pcXVlSWQiLCJpZCIsInJlbW92ZVVuaXF1ZUlkIiwicmVtb3ZlQXR0ciIsImZvY3VzYWJsZSIsImVsZW1lbnQiLCJpc1RhYkluZGV4Tm90TmFOIiwibWFwIiwibWFwTmFtZSIsImltZyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJwYXJlbnROb2RlIiwibmFtZSIsImhyZWYiLCJ2aXNpYmxlIiwiZGlzYWJsZWQiLCJleHByIiwiZmlsdGVycyIsImFkZEJhY2siLCJkYXRhIiwiY3JlYXRlUHNldWRvIiwiZGF0YU5hbWUiLCJpIiwibWF0Y2giLCJhdHRyIiwidGFiYmFibGUiLCJ0YWJJbmRleCIsImlzVGFiSW5kZXhOYU4iLCJvdXRlcldpZHRoIiwianF1ZXJ5Iiwic2lkZSIsInR5cGUiLCJvcmlnIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJyZWR1Y2UiLCJzaXplIiwiYm9yZGVyIiwibWFyZ2luIiwicGFyc2VGbG9hdCIsInNlbGVjdG9yIiwiYWRkIiwicHJldk9iamVjdCIsInJlbW92ZURhdGEiLCJrZXkiLCJjYW1lbENhc2UiLCJleGVjIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3VwcG9ydCIsInNlbGVjdHN0YXJ0IiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVTZWxlY3Rpb24iLCJiaW5kIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImVuYWJsZVNlbGVjdGlvbiIsInVuYmluZCIsInBsdWdpbiIsIm1vZHVsZSIsIm9wdGlvbiIsInNldCIsInByb3RvIiwicHJvdG90eXBlIiwicGx1Z2lucyIsInB1c2giLCJpbnN0YW5jZSIsImFyZ3MiLCJub2RlVHlwZSIsIm9wdGlvbnMiLCJoYXNTY3JvbGwiLCJlbCIsImEiLCJzY3JvbGwiLCJoYXMiLCJqUXVlcnkiLCJzbGljZSIsIkFycmF5IiwiX2NsZWFuRGF0YSIsImNsZWFuRGF0YSIsImVsZW1zIiwidHJpZ2dlckhhbmRsZXIiLCJlIiwid2lkZ2V0IiwiYmFzZSIsImZ1bGxOYW1lIiwiZXhpc3RpbmdDb25zdHJ1Y3RvciIsImNvbnN0cnVjdG9yIiwiYmFzZVByb3RvdHlwZSIsInByb3hpZWRQcm90b3R5cGUiLCJuYW1lc3BhY2UiLCJzcGxpdCIsIldpZGdldCIsIl9jcmVhdGVXaWRnZXQiLCJfcHJvdG8iLCJfY2hpbGRDb25zdHJ1Y3RvcnMiLCJwcm9wIiwiaXNGdW5jdGlvbiIsIl9zdXBlciIsIl9zdXBlckFwcGx5IiwiX19zdXBlciIsIl9fc3VwZXJBcHBseSIsInJldHVyblZhbHVlIiwid2lkZ2V0RXZlbnRQcmVmaXgiLCJ3aWRnZXROYW1lIiwid2lkZ2V0RnVsbE5hbWUiLCJjaGlsZCIsImNoaWxkUHJvdG90eXBlIiwiYnJpZGdlIiwidGFyZ2V0IiwiaW5wdXQiLCJpbnB1dEluZGV4IiwiaW5wdXRMZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsImlzUGxhaW5PYmplY3QiLCJvYmplY3QiLCJpc01ldGhvZENhbGwiLCJjb25jYXQiLCJtZXRob2RWYWx1ZSIsImVycm9yIiwiY2hhckF0IiwicHVzaFN0YWNrIiwiZ2V0IiwiX2luaXQiLCJkZWZhdWx0RWxlbWVudCIsImNyZWF0ZSIsImV2ZW50TmFtZXNwYWNlIiwiX2dldENyZWF0ZU9wdGlvbnMiLCJiaW5kaW5ncyIsImhvdmVyYWJsZSIsIl9vbiIsInJlbW92ZSIsImRlc3Ryb3kiLCJzdHlsZSIsIm93bmVyRG9jdW1lbnQiLCJ3aW5kb3ciLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIl9jcmVhdGUiLCJfdHJpZ2dlciIsIl9nZXRDcmVhdGVFdmVudERhdGEiLCJub29wIiwiX2Rlc3Ryb3kiLCJyZW1vdmVDbGFzcyIsInBhcnRzIiwiY3VyT3B0aW9uIiwic2hpZnQiLCJwb3AiLCJfc2V0T3B0aW9ucyIsIl9zZXRPcHRpb24iLCJ0b2dnbGVDbGFzcyIsImVuYWJsZSIsImRpc2FibGUiLCJzdXBwcmVzc0Rpc2FibGVkQ2hlY2siLCJoYW5kbGVycyIsImRlbGVnYXRlRWxlbWVudCIsImhhbmRsZXIiLCJoYW5kbGVyUHJveHkiLCJoYXNDbGFzcyIsImd1aWQiLCJldmVudE5hbWUiLCJkZWxlZ2F0ZSIsIl9vZmYiLCJqb2luIiwidW5kZWxlZ2F0ZSIsIl9kZWxheSIsIl9ob3ZlcmFibGUiLCJtb3VzZWVudGVyIiwiY3VycmVudFRhcmdldCIsImFkZENsYXNzIiwibW91c2VsZWF2ZSIsIl9mb2N1c2FibGUiLCJmb2N1c2luIiwiZm9jdXNvdXQiLCJjYWxsYmFjayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsInRyaWdnZXIiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJzaG93IiwiaGlkZSIsIm1ldGhvZCIsImRlZmF1bHRFZmZlY3QiLCJlZmZlY3QiLCJoYXNPcHRpb25zIiwiZWZmZWN0TmFtZSIsImR1cmF0aW9uIiwiaXNFbXB0eU9iamVjdCIsImNvbXBsZXRlIiwiZWZmZWN0cyIsImVhc2luZyIsInF1ZXVlIiwibmV4dCIsIm1vdXNlSGFuZGxlZCIsIm1vdXNldXAiLCJjYW5jZWwiLCJkaXN0YW5jZSIsIl9tb3VzZUluaXQiLCJ0aGF0IiwiX21vdXNlRG93biIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0YXJ0ZWQiLCJfbW91c2VEZXN0cm95IiwiX21vdXNlTW92ZURlbGVnYXRlIiwiX21vdXNlVXBEZWxlZ2F0ZSIsIl9tb3VzZVN0YXJ0ZWQiLCJfbW91c2VVcCIsIl9tb3VzZURvd25FdmVudCIsImJ0bklzTGVmdCIsIndoaWNoIiwiZWxJc0NhbmNlbCIsImNsb3Nlc3QiLCJfbW91c2VDYXB0dXJlIiwibW91c2VEZWxheU1ldCIsIl9tb3VzZURlbGF5VGltZXIiLCJfbW91c2VEaXN0YW5jZU1ldCIsIl9tb3VzZURlbGF5TWV0IiwiX21vdXNlU3RhcnQiLCJfbW91c2VNb3ZlIiwiZG9jdW1lbnRNb2RlIiwiYnV0dG9uIiwiX21vdXNlRHJhZyIsIl9tb3VzZVN0b3AiLCJNYXRoIiwibWF4IiwiYWJzIiwicGFnZVgiLCJwYWdlWSIsImNhY2hlZFNjcm9sbGJhcldpZHRoIiwicm91bmQiLCJyaG9yaXpvbnRhbCIsInJ2ZXJ0aWNhbCIsInJvZmZzZXQiLCJycG9zaXRpb24iLCJycGVyY2VudCIsIl9wb3NpdGlvbiIsImdldE9mZnNldHMiLCJvZmZzZXRzIiwid2lkdGgiLCJoZWlnaHQiLCJwYXJzZUNzcyIsInByb3BlcnR5IiwiZ2V0RGltZW5zaW9ucyIsInJhdyIsIm9mZnNldCIsInRvcCIsImxlZnQiLCJpc1dpbmRvdyIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJzY3JvbGxiYXJXaWR0aCIsIncxIiwidzIiLCJkaXYiLCJpbm5lckRpdiIsImNoaWxkcmVuIiwiYXBwZW5kIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImdldFNjcm9sbEluZm8iLCJ3aXRoaW4iLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJoYXNPdmVyZmxvd1giLCJzY3JvbGxXaWR0aCIsImhhc092ZXJmbG93WSIsInNjcm9sbEhlaWdodCIsImdldFdpdGhpbkluZm8iLCJ3aXRoaW5FbGVtZW50Iiwib2YiLCJhdE9mZnNldCIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwidGFyZ2V0T2Zmc2V0IiwiYmFzZVBvc2l0aW9uIiwiZGltZW5zaW9ucyIsInNjcm9sbEluZm8iLCJjb2xsaXNpb24iLCJhdCIsInBvcyIsImhvcml6b250YWxPZmZzZXQiLCJ2ZXJ0aWNhbE9mZnNldCIsImNvbGxpc2lvblBvc2l0aW9uIiwidXNpbmciLCJlbGVtV2lkdGgiLCJlbGVtSGVpZ2h0IiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImNvbGxpc2lvbldpZHRoIiwiY29sbGlzaW9uSGVpZ2h0IiwibXlPZmZzZXQiLCJteSIsIm9mZnNldEZyYWN0aW9ucyIsImRpciIsInByb3BzIiwicmlnaHQiLCJib3R0b20iLCJmZWVkYmFjayIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImltcG9ydGFudCIsImZpdCIsIndpdGhpbk9mZnNldCIsImNvbGxpc2lvblBvc0xlZnQiLCJvdmVyTGVmdCIsIm92ZXJSaWdodCIsIm5ld092ZXJSaWdodCIsImNvbGxpc2lvblBvc1RvcCIsIm92ZXJUb3AiLCJvdmVyQm90dG9tIiwibmV3T3ZlckJvdHRvbSIsImZsaXAiLCJvZmZzZXRMZWZ0IiwibmV3T3ZlckxlZnQiLCJvZmZzZXRUb3AiLCJuZXdPdmVyVG9wIiwiZmxpcGZpdCIsInRlc3RFbGVtZW50IiwidGVzdEVsZW1lbnRQYXJlbnQiLCJ0ZXN0RWxlbWVudFN0eWxlIiwiYm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidmlzaWJpbGl0eSIsImJhY2tncm91bmQiLCJhcHBlbmRDaGlsZCIsImRvY3VtZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJjc3NUZXh0IiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJtb3VzZSIsImFkZENsYXNzZXMiLCJhcHBlbmRUbyIsImF4aXMiLCJjb25uZWN0VG9Tb3J0YWJsZSIsImNvbnRhaW5tZW50IiwiY3Vyc29yIiwiY3Vyc29yQXQiLCJncmlkIiwiaGFuZGxlIiwiaGVscGVyIiwiaWZyYW1lRml4Iiwib3BhY2l0eSIsInJlZnJlc2hQb3NpdGlvbnMiLCJyZXZlcnQiLCJyZXZlcnREdXJhdGlvbiIsInNjb3BlIiwic2Nyb2xsU2Vuc2l0aXZpdHkiLCJzY3JvbGxTcGVlZCIsInNuYXAiLCJzbmFwTW9kZSIsInNuYXBUb2xlcmFuY2UiLCJzdGFjayIsImRyYWciLCJzdGFydCIsInN0b3AiLCJvIiwiX2dldEhhbmRsZSIsIm9mZnNldEhlaWdodCIsIl9jcmVhdGVIZWxwZXIiLCJfY2FjaGVIZWxwZXJQcm9wb3J0aW9ucyIsImRkbWFuYWdlciIsImN1cnJlbnQiLCJfY2FjaGVNYXJnaW5zIiwiY3NzUG9zaXRpb24iLCJwb3NpdGlvbkFicyIsIm1hcmdpbnMiLCJjbGljayIsIl9nZXRQYXJlbnRPZmZzZXQiLCJyZWxhdGl2ZSIsIl9nZXRSZWxhdGl2ZU9mZnNldCIsIm9yaWdpbmFsUG9zaXRpb24iLCJfZ2VuZXJhdGVQb3NpdGlvbiIsIm9yaWdpbmFsUGFnZVgiLCJvcmlnaW5hbFBhZ2VZIiwiX2FkanVzdE9mZnNldEZyb21IZWxwZXIiLCJfc2V0Q29udGFpbm1lbnQiLCJfY2xlYXIiLCJkcm9wQmVoYXZpb3VyIiwicHJlcGFyZU9mZnNldHMiLCJkcmFnU3RhcnQiLCJub1Byb3BhZ2F0aW9uIiwiX2NvbnZlcnRQb3NpdGlvblRvIiwiX3VpSGFzaCIsImVsZW1lbnRJbkRvbSIsImRyb3BwZWQiLCJkcm9wIiwiYW5pbWF0ZSIsImRyYWdTdG9wIiwiaXMiLCJmaW5kIiwiY2xvbmUiLCJvYmoiLCJpc0FycmF5IiwiaGVscGVyUHJvcG9ydGlvbnMiLCJvZmZzZXRQYXJlbnQiLCJwbyIsImNvbnRhaW5zIiwidGFnTmFtZSIsInAiLCJvdmVyIiwiYyIsImNlIiwicmVsYXRpdmVfY29udGFpbmVyIiwiZCIsIm1vZCIsInNjcm9sbElzUm9vdE5vZGUiLCJjbyIsImNhbmNlbEhlbHBlclJlbW92YWwiLCJpbnN0IiwidWlTb3J0YWJsZSIsIml0ZW0iLCJzb3J0YWJsZXMiLCJzb3J0YWJsZSIsInNob3VsZFJldmVydCIsImlzT3ZlciIsIl9oZWxwZXIiLCJjdXJyZW50SXRlbSIsImlubmVybW9zdEludGVyc2VjdGluZyIsInRoaXNTb3J0YWJsZSIsIl9pbnRlcnNlY3RzV2l0aCIsImNvbnRhaW5lckNhY2hlIiwiZnJvbU91dHNpZGUiLCJwbGFjZWhvbGRlciIsInQiLCJfY3Vyc29yIiwiX29wYWNpdHkiLCJvdmVyZmxvd09mZnNldCIsInNjcm9sbGVkIiwic25hcEVsZW1lbnRzIiwiU3RyaW5nIiwiaXRlbXMiLCIkdCIsIiRvIiwidHMiLCJicyIsImxzIiwicnMiLCJsIiwiciIsImIiLCJmaXJzdCIsIngxIiwieDIiLCJ5MSIsInkyIiwic25hcHBpbmciLCJyZWxlYXNlIiwic25hcEl0ZW0iLCJtaW4iLCJncm91cCIsIm1ha2VBcnJheSIsInNvcnQiLCJfekluZGV4IiwiaXNPdmVyQXhpcyIsIngiLCJyZWZlcmVuY2UiLCJhY2NlcHQiLCJhY3RpdmVDbGFzcyIsImdyZWVkeSIsImhvdmVyQ2xhc3MiLCJ0b2xlcmFuY2UiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJvdXQiLCJpc292ZXIiLCJpc291dCIsInByb3BvcnRpb25zIiwiZHJvcHBhYmxlcyIsInNwbGljZSIsIl9hY3RpdmF0ZSIsImRyYWdnYWJsZSIsIl9kZWFjdGl2YXRlIiwiX292ZXIiLCJfb3V0IiwiX2Ryb3AiLCJjdXN0b20iLCJjaGlsZHJlbkludGVyc2VjdGlvbiIsIm5vdCIsImludGVyc2VjdCIsImRyb3BwYWJsZSIsInRvbGVyYW5jZU1vZGUiLCJkcmFnZ2FibGVMZWZ0IiwiZHJhZ2dhYmxlVG9wIiwiYWJzb2x1dGUiLCJjbGlja09mZnNldCIsImoiLCJtIiwibGlzdCIsImRyb3BwYWJsZXNMb29wIiwicGFyZW50c1VudGlsIiwiZ3JlZWR5Q2hpbGQiLCJwYXJlbnRJbnN0YW5jZSIsImludGVyc2VjdHMiLCJudW0iLCJ2IiwiaXNOdW1iZXIiLCJhbHNvUmVzaXplIiwiYW5pbWF0ZUR1cmF0aW9uIiwiYW5pbWF0ZUVhc2luZyIsImFzcGVjdFJhdGlvIiwiYXV0b0hpZGUiLCJnaG9zdCIsImhhbmRsZXMiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsIm1pbkhlaWdodCIsIm1pbldpZHRoIiwicmVzaXplIiwibiIsImhuYW1lIiwiX2FzcGVjdFJhdGlvIiwib3JpZ2luYWxFbGVtZW50IiwiX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMiLCJ3cmFwIiwiZWxlbWVudElzV3JhcHBlciIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwib3JpZ2luYWxSZXNpemVTdHlsZSIsInpvb20iLCJkaXNwbGF5IiwiX3Byb3BvcnRpb25hbGx5UmVzaXplIiwicyIsInciLCJzZSIsInN3IiwibmUiLCJudyIsInRyaW0iLCJfcmVuZGVyQXhpcyIsInBhZFBvcyIsInBhZFdyYXBwZXIiLCJfaGFuZGxlcyIsIm1vdXNlb3ZlciIsInJlc2l6aW5nIiwiY2xhc3NOYW1lIiwid3JhcHBlciIsImV4cCIsImluc2VydEFmdGVyIiwiY2FwdHVyZSIsImN1cmxlZnQiLCJjdXJ0b3AiLCJpbmlQb3MiLCJfcmVuZGVyUHJveHkiLCJvcmlnaW5hbFNpemUiLCJzaXplRGlmZiIsIm9yaWdpbmFsTW91c2VQb3NpdGlvbiIsIl9wcm9wYWdhdGUiLCJzbXAiLCJwcmV2VG9wIiwicHJldkxlZnQiLCJwcmV2V2lkdGgiLCJwcmV2SGVpZ2h0IiwiZHgiLCJkeSIsIl9jaGFuZ2UiLCJfdXBkYXRlVmlydHVhbEJvdW5kYXJpZXMiLCJzaGlmdEtleSIsIl91cGRhdGVSYXRpbyIsIl9yZXNwZWN0U2l6ZSIsIl91cGRhdGVDYWNoZSIsInByIiwiaXN0YSIsInNvZmZzZXRoIiwic29mZnNldHciLCJmb3JjZUFzcGVjdFJhdGlvIiwicE1pbldpZHRoIiwicE1heFdpZHRoIiwicE1pbkhlaWdodCIsInBNYXhIZWlnaHQiLCJJbmZpbml0eSIsIl92Qm91bmRhcmllcyIsImNwb3MiLCJjc2l6ZSIsImlzbWF4dyIsImlzbWF4aCIsImlzbWludyIsImlzbWluaCIsImR3IiwiZGgiLCJjdyIsImNoIiwiYm9yZGVycyIsInBhZGRpbmdzIiwicHJlbCIsImJvcmRlckRpZiIsImVsZW1lbnRPZmZzZXQiLCJjcyIsInNwIiwic3RlcCIsIm9jIiwiY29udGFpbmVyRWxlbWVudCIsImNvbnRhaW5lck9mZnNldCIsImNvbnRhaW5lclBvc2l0aW9uIiwicGFyZW50RGF0YSIsImNvbnRhaW5lclNpemUiLCJ3b3NldCIsImhvc2V0IiwiaXNQYXJlbnQiLCJpc09mZnNldFJlbGF0aXZlIiwiY3AiLCJwUmF0aW8iLCJjb3AiLCJobyIsImgiLCJfc3RvcmUiLCJvcyIsIm9wIiwiZGVsdGEiLCJfYWxzb1Jlc2l6ZSIsInN1bSIsImdyaWRYIiwiZ3JpZFkiLCJveCIsIm95IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJpc01heFdpZHRoIiwiaXNNYXhIZWlnaHQiLCJpc01pbldpZHRoIiwiaXNNaW5IZWlnaHQiLCJhdXRvUmVmcmVzaCIsInNlbGVjdGVkIiwic2VsZWN0aW5nIiwidW5zZWxlY3RlZCIsInVuc2VsZWN0aW5nIiwic2VsZWN0ZWVzIiwiZHJhZ2dlZCIsInJlZnJlc2giLCIkdGhpcyIsIiRlbGVtZW50Iiwic3RhcnRzZWxlY3RlZCIsIm9wb3MiLCJzZWxlY3RlZSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiZG9TZWxlY3QiLCJ0bXAiLCJoaXQiLCJyZWFkeSIsImNvbm5lY3RXaXRoIiwiZHJvcE9uRW1wdHkiLCJmb3JjZVBsYWNlaG9sZGVyU2l6ZSIsImZvcmNlSGVscGVyU2l6ZSIsImJlZm9yZVN0b3AiLCJjaGFuZ2UiLCJyZWNlaXZlIiwidXBkYXRlIiwiZmxvYXRpbmciLCJvdmVycmlkZUhhbmRsZSIsInZhbGlkSGFuZGxlIiwicmV2ZXJ0aW5nIiwiX3JlZnJlc2hJdGVtcyIsIl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcyIsIm5vQWN0aXZhdGlvbiIsImN1cnJlbnRDb250YWluZXIiLCJkb21Qb3NpdGlvbiIsInByZXYiLCJfY3JlYXRlUGxhY2Vob2xkZXIiLCJfc3RvcmVkQ3Vyc29yIiwiX3N0b3JlZE9wYWNpdHkiLCJfc3RvcmVkWkluZGV4IiwiX3ByZXNlcnZlSGVscGVyUHJvcG9ydGlvbnMiLCJjb250YWluZXJzIiwiZHJhZ2dpbmciLCJpdGVtRWxlbWVudCIsImludGVyc2VjdGlvbiIsImxhc3RQb3NpdGlvbkFicyIsIl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIiLCJkaXJlY3Rpb24iLCJfaW50ZXJzZWN0c1dpdGhTaWRlcyIsIl9yZWFycmFuZ2UiLCJfY29udGFjdENvbnRhaW5lcnMiLCJjdXIiLCJfc3RvcmVkQ1NTIiwiX25vRmluYWxTb3J0IiwiYWZ0ZXIiLCJwcmVwZW5kIiwic2VyaWFsaXplIiwiX2dldEl0ZW1zQXNqUXVlcnkiLCJjb25uZWN0ZWQiLCJzdHIiLCJyZXMiLCJhdHRyaWJ1dGUiLCJleHByZXNzaW9uIiwidG9BcnJheSIsInJldCIsImR5Q2xpY2siLCJkeENsaWNrIiwiaXNPdmVyRWxlbWVudCIsImZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnMiLCJpc092ZXJFbGVtZW50SGVpZ2h0IiwiaXNPdmVyRWxlbWVudFdpZHRoIiwidmVydGljYWxEaXJlY3Rpb24iLCJfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uIiwiaG9yaXpvbnRhbERpcmVjdGlvbiIsIl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbiIsImlzT3ZlckJvdHRvbUhhbGYiLCJpc092ZXJSaWdodEhhbGYiLCJfY29ubmVjdFdpdGgiLCJxdWVyaWVzIiwiZ3JlcCIsInRhcmdldERhdGEiLCJfcXVlcmllcyIsInF1ZXJpZXNMZW5ndGgiLCJmYXN0IiwidG9sZXJhbmNlRWxlbWVudCIsInJlZnJlc2hDb250YWluZXJzIiwiY29udGFpbmVyIiwiZGlzdCIsIml0ZW1XaXRoTGVhc3REaXN0YW5jZSIsInBvc1Byb3BlcnR5Iiwic2l6ZVByb3BlcnR5IiwibmVhckJvdHRvbSIsImlubmVybW9zdENvbnRhaW5lciIsImlubmVybW9zdEluZGV4IiwiaGFyZFJlZnJlc2giLCJuZXh0U2libGluZyIsImNvdW50ZXIiLCJkZWxheWVkVHJpZ2dlcnMiLCJiZWZvcmUiLCJfaW5zdCIsInNlbmRlciIsInVpZCIsImhpZGVQcm9wcyIsInNob3dQcm9wcyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImFjdGl2ZSIsImNvbGxhcHNpYmxlIiwiaGVhZGVyIiwiaGVpZ2h0U3R5bGUiLCJpY29ucyIsImFjdGl2ZUhlYWRlciIsImJlZm9yZUFjdGl2YXRlIiwicHJldlNob3ciLCJwcmV2SGlkZSIsIl9wcm9jZXNzUGFuZWxzIiwiaGVhZGVycyIsIl9yZWZyZXNoIiwicGFuZWwiLCJjb250ZW50IiwiX2NyZWF0ZUljb25zIiwicHJlcGVuZFRvIiwiX2Rlc3Ryb3lJY29ucyIsImNvbnRlbnRzIiwicmVtb3ZlQXR0cmlidXRlIiwiX3NldHVwRXZlbnRzIiwiX2tleWRvd24iLCJhbHRLZXkiLCJjdXJyZW50SW5kZXgiLCJpbmRleCIsInRvRm9jdXMiLCJfZXZlbnRIYW5kbGVyIiwiX3BhbmVsS2V5RG93biIsImFjY29yZGlvbklkIiwiX2ZpbmRBY3RpdmUiLCJoZWFkZXJJZCIsInBhbmVsSWQiLCJzaWJsaW5ncyIsImV2ZW50cyIsImtleWRvd24iLCJjbGlja2VkIiwiY2xpY2tlZElzQWN0aXZlIiwiY29sbGFwc2luZyIsInRvU2hvdyIsInRvSGlkZSIsImV2ZW50RGF0YSIsIm9sZEhlYWRlciIsIm9sZFBhbmVsIiwibmV3SGVhZGVyIiwibmV3UGFuZWwiLCJfdG9nZ2xlIiwiX2FuaW1hdGUiLCJfdG9nZ2xlQ29tcGxldGUiLCJ0b3RhbCIsImFkanVzdCIsImRvd24iLCJub3ciLCJmeCIsInJlcXVlc3RJbmRleCIsImF1dG9Gb2N1cyIsIm1pbkxlbmd0aCIsInNvdXJjZSIsImNsb3NlIiwib3BlbiIsInJlc3BvbnNlIiwic2VhcmNoIiwic2VsZWN0IiwicGVuZGluZyIsInN1cHByZXNzS2V5UHJlc3MiLCJzdXBwcmVzc0tleVByZXNzUmVwZWF0Iiwic3VwcHJlc3NJbnB1dCIsImlzVGV4dGFyZWEiLCJpc0lucHV0IiwiaXNNdWx0aUxpbmUiLCJ2YWx1ZU1ldGhvZCIsImlzTmV3TWVudSIsIl9tb3ZlIiwiX2tleUV2ZW50IiwibWVudSIsIl92YWx1ZSIsInRlcm0iLCJfc2VhcmNoVGltZW91dCIsImtleXByZXNzIiwic2VsZWN0ZWRJdGVtIiwicHJldmlvdXMiLCJibHVyIiwiY2FuY2VsQmx1ciIsImNsZWFyVGltZW91dCIsInNlYXJjaGluZyIsIl9pbml0U291cmNlIiwiX2FwcGVuZFRvIiwicm9sZSIsIm1vdXNlZG93biIsIm1lbnVFbGVtZW50Iiwib25lIiwibWVudWZvY3VzIiwibGl2ZVJlZ2lvbiIsInRleHQiLCJtZW51c2VsZWN0IiwiYWN0aXZlRWxlbWVudCIsImJlZm9yZXVubG9hZCIsInhociIsImFib3J0IiwiYXJyYXkiLCJ1cmwiLCJyZXF1ZXN0IiwiYXV0b2NvbXBsZXRlIiwiYWpheCIsImRhdGFUeXBlIiwic3VjY2VzcyIsIl9zZWFyY2giLCJjYW5jZWxTZWFyY2giLCJfcmVzcG9uc2UiLCJfX3Jlc3BvbnNlIiwiX25vcm1hbGl6ZSIsIl9zdWdnZXN0IiwiX2Nsb3NlIiwibGFiZWwiLCJ1bCIsImVtcHR5IiwiX3JlbmRlck1lbnUiLCJfcmVzaXplTWVudSIsIl9yZW5kZXJJdGVtRGF0YSIsIl9yZW5kZXJJdGVtIiwiaXNGaXJzdEl0ZW0iLCJpc0xhc3RJdGVtIiwia2V5RXZlbnQiLCJlc2NhcGVSZWdleCIsInJlcGxhY2UiLCJtYXRjaGVyIiwiUmVnRXhwIiwibWVzc2FnZXMiLCJub1Jlc3VsdHMiLCJyZXN1bHRzIiwiYW1vdW50IiwibWVzc2FnZSIsImxhc3RBY3RpdmUiLCJzdGFydFhQb3MiLCJzdGFydFlQb3MiLCJjbGlja0RyYWdnZWQiLCJiYXNlQ2xhc3NlcyIsInN0YXRlQ2xhc3NlcyIsInR5cGVDbGFzc2VzIiwiZm9ybVJlc2V0SGFuZGxlciIsImJ1dHRvbnMiLCJyYWRpb0dyb3VwIiwicmFkaW8iLCJmb3JtIiwicmFkaW9zIiwicHJpbWFyeSIsInNlY29uZGFyeSIsIl9kZXRlcm1pbmVCdXR0b25UeXBlIiwiaGFzVGl0bGUiLCJidXR0b25FbGVtZW50IiwidG9nZ2xlQnV0dG9uIiwiZm9jdXNDbGFzcyIsInZhbCIsImh0bWwiLCJrZXl1cCIsIl9yZXNldEJ1dHRvbiIsImFuY2VzdG9yIiwibGFiZWxTZWxlY3RvciIsImNoZWNrZWQiLCJsYXN0IiwiaXNEaXNhYmxlZCIsImJ1dHRvblRleHQiLCJtdWx0aXBsZUljb25zIiwiYnV0dG9uQ2xhc3NlcyIsInJ0bCIsImVuZCIsImRhdGVwaWNrZXIiLCJQUk9QX05BTUUiLCJkcHV1aWQiLCJEYXRlIiwiZ2V0VGltZSIsImluc3RBY3RpdmUiLCJEYXRlcGlja2VyIiwiX2N1ckluc3QiLCJfZGlzYWJsZWRJbnB1dHMiLCJfZGF0ZXBpY2tlclNob3dpbmciLCJfaW5EaWFsb2ciLCJfbWFpbkRpdklkIiwiX2lubGluZUNsYXNzIiwiX2FwcGVuZENsYXNzIiwiX3RyaWdnZXJDbGFzcyIsIl9kaWFsb2dDbGFzcyIsIl9kaXNhYmxlQ2xhc3MiLCJfdW5zZWxlY3RhYmxlQ2xhc3MiLCJfY3VycmVudENsYXNzIiwiX2RheU92ZXJDbGFzcyIsInJlZ2lvbmFsIiwiY2xvc2VUZXh0IiwicHJldlRleHQiLCJuZXh0VGV4dCIsImN1cnJlbnRUZXh0IiwibW9udGhOYW1lcyIsIm1vbnRoTmFtZXNTaG9ydCIsImRheU5hbWVzIiwiZGF5TmFtZXNTaG9ydCIsImRheU5hbWVzTWluIiwid2Vla0hlYWRlciIsImRhdGVGb3JtYXQiLCJmaXJzdERheSIsImlzUlRMIiwic2hvd01vbnRoQWZ0ZXJZZWFyIiwieWVhclN1ZmZpeCIsIl9kZWZhdWx0cyIsInNob3dPbiIsInNob3dBbmltIiwic2hvd09wdGlvbnMiLCJkZWZhdWx0RGF0ZSIsImFwcGVuZFRleHQiLCJidXR0b25JbWFnZSIsImJ1dHRvbkltYWdlT25seSIsImhpZGVJZk5vUHJldk5leHQiLCJuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0IiwiZ290b0N1cnJlbnQiLCJjaGFuZ2VNb250aCIsImNoYW5nZVllYXIiLCJ5ZWFyUmFuZ2UiLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsInNob3dXZWVrIiwiY2FsY3VsYXRlV2VlayIsImlzbzg2MDFXZWVrIiwic2hvcnRZZWFyQ3V0b2ZmIiwibWluRGF0ZSIsIm1heERhdGUiLCJiZWZvcmVTaG93RGF5IiwiYmVmb3JlU2hvdyIsIm9uU2VsZWN0Iiwib25DaGFuZ2VNb250aFllYXIiLCJvbkNsb3NlIiwibnVtYmVyT2ZNb250aHMiLCJzaG93Q3VycmVudEF0UG9zIiwic3RlcE1vbnRocyIsInN0ZXBCaWdNb250aHMiLCJhbHRGaWVsZCIsImFsdEZvcm1hdCIsImNvbnN0cmFpbklucHV0Iiwic2hvd0J1dHRvblBhbmVsIiwiYXV0b1NpemUiLCJkcERpdiIsImJpbmRIb3ZlciIsIm1hcmtlckNsYXNzTmFtZSIsIm1heFJvd3MiLCJfd2lkZ2V0RGF0ZXBpY2tlciIsInNldERlZmF1bHRzIiwic2V0dGluZ3MiLCJleHRlbmRSZW1vdmUiLCJfYXR0YWNoRGF0ZXBpY2tlciIsImlubGluZSIsIl9uZXdJbnN0IiwiX2Nvbm5lY3REYXRlcGlja2VyIiwiX2lubGluZURhdGVwaWNrZXIiLCJzZWxlY3RlZERheSIsInNlbGVjdGVkTW9udGgiLCJzZWxlY3RlZFllYXIiLCJkcmF3TW9udGgiLCJkcmF3WWVhciIsIl9hdHRhY2htZW50cyIsIl9kb0tleURvd24iLCJfZG9LZXlQcmVzcyIsIl9kb0tleVVwIiwiX2F1dG9TaXplIiwiX2Rpc2FibGVEYXRlcGlja2VyIiwiX2dldCIsIl9zaG93RGF0ZXBpY2tlciIsInNyYyIsImFsdCIsInRpdGxlIiwiX2xhc3RJbnB1dCIsIl9oaWRlRGF0ZXBpY2tlciIsImZpbmRNYXgiLCJtYXhJIiwiZGF0ZSIsIm5hbWVzIiwic2V0TW9udGgiLCJzZXREYXRlIiwiZ2V0RGF5IiwiX2Zvcm1hdERhdGUiLCJkaXZTcGFuIiwiX3NldERhdGUiLCJfZ2V0RGVmYXVsdERhdGUiLCJfdXBkYXRlRGF0ZXBpY2tlciIsIl91cGRhdGVBbHRlcm5hdGUiLCJfZGlhbG9nRGF0ZXBpY2tlciIsImJyb3dzZXJXaWR0aCIsImJyb3dzZXJIZWlnaHQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsIl9kaWFsb2dJbnN0IiwiX2RpYWxvZ0lucHV0IiwiX3BvcyIsImNsaWVudEhlaWdodCIsImJsb2NrVUkiLCJfZGVzdHJveURhdGVwaWNrZXIiLCIkdGFyZ2V0IiwiX2VuYWJsZURhdGVwaWNrZXIiLCJfaXNEaXNhYmxlZERhdGVwaWNrZXIiLCJfZ2V0SW5zdCIsImVyciIsIl9vcHRpb25EYXRlcGlja2VyIiwiX2dldERhdGVEYXRlcGlja2VyIiwiX2dldE1pbk1heERhdGUiLCJfY2hhbmdlRGF0ZXBpY2tlciIsIl9yZWZyZXNoRGF0ZXBpY2tlciIsIl9zZXREYXRlRGF0ZXBpY2tlciIsIm5vRGVmYXVsdCIsIl9zZXREYXRlRnJvbUZpZWxkIiwiX2dldERhdGUiLCJkYXRlU3RyIiwic2VsIiwiaGFuZGxlZCIsIl9zZWxlY3REYXkiLCJfYWRqdXN0RGF0ZSIsIl9jbGVhckRhdGUiLCJfZ290b1RvZGF5Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2hhcnMiLCJjaHIiLCJfcG9zc2libGVDaGFycyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlIiwiaW5kZXhPZiIsImxhc3RWYWwiLCJwYXJzZURhdGUiLCJfZ2V0Rm9ybWF0Q29uZmlnIiwiYmVmb3JlU2hvd1NldHRpbmdzIiwiaXNGaXhlZCIsIl9maW5kUG9zIiwiX2NoZWNrT2Zmc2V0IiwiX2dlbmVyYXRlSFRNTCIsIl9hdHRhY2hIYW5kbGVycyIsIm9yaWd5ZWFyc2h0bWwiLCJudW1Nb250aHMiLCJfZ2V0TnVtYmVyT2ZNb250aHMiLCJjb2xzIiwieWVhcnNodG1sIiwicmVwbGFjZVdpdGgiLCJfZ2V0Qm9yZGVycyIsImNvbnZlcnQiLCJ0aGluIiwibWVkaXVtIiwidGhpY2siLCJkcFdpZHRoIiwiZHBIZWlnaHQiLCJpbnB1dFdpZHRoIiwiaW5wdXRIZWlnaHQiLCJ2aWV3V2lkdGgiLCJ2aWV3SGVpZ2h0IiwiaGlkZGVuIiwicG9zdFByb2Nlc3MiLCJfdGlkeURpYWxvZyIsInVuYmxvY2tVSSIsIl9jaGVja0V4dGVybmFsQ2xpY2siLCJwZXJpb2QiLCJfYWRqdXN0SW5zdERhdGUiLCJjdXJyZW50RGF5IiwiY3VycmVudE1vbnRoIiwiY3VycmVudFllYXIiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsIl9ub3RpZnlDaGFuZ2UiLCJfc2VsZWN0TW9udGhZZWFyIiwic2VsZWN0ZWRJbmRleCIsIm1vbnRoIiwieWVhciIsInRkIiwiX3NlbGVjdERhdGUiLCJmb3JtYXREYXRlIiwibm9XZWVrZW5kcyIsImRheSIsInRpbWUiLCJjaGVja0RhdGUiLCJmbG9vciIsImZvcm1hdCIsInRvU3RyaW5nIiwiaUZvcm1hdCIsImRpbSIsImV4dHJhIiwiaVZhbHVlIiwic2hvcnRZZWFyQ3V0b2ZmVGVtcCIsImRveSIsImxpdGVyYWwiLCJsb29rQWhlYWQiLCJtYXRjaGVzIiwiZ2V0TnVtYmVyIiwiaXNEb3VibGVkIiwiZGlnaXRzIiwic3Vic3RyaW5nIiwiZ2V0TmFtZSIsInNob3J0TmFtZXMiLCJsb25nTmFtZXMiLCJrIiwicGFpciIsInN1YnN0ciIsImNoZWNrTGl0ZXJhbCIsIl90aWNrc1RvMTk3MCIsIl9nZXREYXlzSW5Nb250aCIsIl9kYXlsaWdodFNhdmluZ0FkanVzdCIsIkFUT00iLCJDT09LSUUiLCJJU09fODYwMSIsIlJGQ184MjIiLCJSRkNfODUwIiwiUkZDXzEwMzYiLCJSRkNfMTEyMyIsIlJGQ18yODIyIiwiUlNTIiwiVElDS1MiLCJUSU1FU1RBTVAiLCJXM0MiLCJmb3JtYXROdW1iZXIiLCJsZW4iLCJmb3JtYXROYW1lIiwib3V0cHV0IiwiZ2V0WWVhciIsImRhdGVzIiwiX3Jlc3RyaWN0TWluTWF4IiwiX2RldGVybWluZURhdGUiLCJvZmZzZXROdW1lcmljIiwib2Zmc2V0U3RyaW5nIiwicGF0dGVybiIsIm5ld0RhdGUiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwiZ2V0SG91cnMiLCJub0NoYW5nZSIsImNsZWFyIiwib3JpZ01vbnRoIiwib3JpZ1llYXIiLCJzdGFydERhdGUiLCJ0b2RheSIsInNlbGVjdERheSIsImdldEF0dHJpYnV0ZSIsInNlbGVjdE1vbnRoIiwic2VsZWN0WWVhciIsIm1heERyYXciLCJnb3RvRGF0ZSIsImNvbnRyb2xzIiwiYnV0dG9uUGFuZWwiLCJkb3ciLCJyb3ciLCJjb2wiLCJzZWxlY3RlZERhdGUiLCJjb3JuZXJDbGFzcyIsImNhbGVuZGVyIiwidGhlYWQiLCJkYXlzSW5Nb250aCIsImxlYWREYXlzIiwiY3VyUm93cyIsIm51bVJvd3MiLCJwcmludERhdGUiLCJkUm93IiwidGJvZHkiLCJkYXlTZXR0aW5ncyIsIm90aGVyTW9udGgiLCJ1bnNlbGVjdGFibGUiLCJ0ZW1wRGF0ZSIsImlzTXVsdGlNb250aCIsImN1cnJlbnREYXRlIiwiX2NhbkFkanVzdE1vbnRoIiwiX2lzSW5SYW5nZSIsIl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlciIsIl9nZXRGaXJzdERheU9mTW9udGgiLCJjZWlsIiwiaW5NaW5ZZWFyIiwiaW5NYXhZZWFyIiwieWVhcnMiLCJ0aGlzWWVhciIsImRldGVybWluZVllYXIiLCJlbmRZZWFyIiwibW9udGhIdG1sIiwib25DaGFuZ2UiLCJtaW5NYXgiLCJjdXJZZWFyIiwiY3VyTW9udGgiLCJ5ZWFyU3BsaXQiLCJtaW5ZZWFyIiwibWF4WWVhciIsImluaXRpYWxpemVkIiwib3RoZXJBcmdzIiwic2l6ZVJlbGF0ZWRPcHRpb25zIiwicmVzaXphYmxlUmVsYXRlZE9wdGlvbnMiLCJhdXRvT3BlbiIsImNsb3NlT25Fc2NhcGUiLCJkaWFsb2dDbGFzcyIsIm1vZGFsIiwidG9wT2Zmc2V0IiwicmVzaXphYmxlIiwiYmVmb3JlQ2xvc2UiLCJyZXNpemVTdGFydCIsInJlc2l6ZVN0b3AiLCJvcmlnaW5hbENzcyIsIm9yaWdpbmFsVGl0bGUiLCJfY3JlYXRlV3JhcHBlciIsInVpRGlhbG9nIiwiX2NyZWF0ZVRpdGxlYmFyIiwiX2NyZWF0ZUJ1dHRvblBhbmUiLCJfbWFrZURyYWdnYWJsZSIsIl9tYWtlUmVzaXphYmxlIiwiX2lzT3BlbiIsIl9kZXN0cm95T3ZlcmxheSIsImRldGFjaCIsIm9wZW5lciIsIl9oaWRlIiwiaXNPcGVuIiwibW92ZVRvVG9wIiwiX21vdmVUb1RvcCIsInNpbGVudCIsIm1vdmVkIiwibmV4dEFsbCIsIl9mb2N1c1RhYmJhYmxlIiwiX3NpemUiLCJfY3JlYXRlT3ZlcmxheSIsIl9zaG93IiwiaGFzRm9jdXMiLCJ1aURpYWxvZ0J1dHRvblBhbmUiLCJ1aURpYWxvZ1RpdGxlYmFyQ2xvc2UiLCJfa2VlcEZvY3VzIiwiY2hlY2tGb2N1cyIsImlzQWN0aXZlIiwidGFiYmFibGVzIiwidWlEaWFsb2dUaXRsZSIsInVpRGlhbG9nVGl0bGViYXIiLCJfdGl0bGUiLCJ1aUJ1dHRvblNldCIsIl9jcmVhdGVCdXR0b25zIiwiYnV0dG9uT3B0aW9ucyIsInNob3dUZXh0IiwiZmlsdGVyZWRVaSIsIl9ibG9ja0ZyYW1lcyIsIl91bmJsb2NrRnJhbWVzIiwicmVzaXplSGFuZGxlcyIsIl9taW5IZWlnaHQiLCJpc1Zpc2libGUiLCJyZXNpemFibGVPcHRpb25zIiwiaXNEcmFnZ2FibGUiLCJpc1Jlc2l6YWJsZSIsIm5vbkNvbnRlbnRIZWlnaHQiLCJtaW5Db250ZW50SGVpZ2h0IiwibWF4Q29udGVudEhlaWdodCIsImlmcmFtZUJsb2NrcyIsImlmcmFtZSIsImRpYWxvZyIsIm92ZXJsYXlJbnN0YW5jZXMiLCJvdmVybGF5IiwidWlCYWNrQ29tcGF0IiwibXlBdCIsIm9mZnNldFBvc2l0aW9uIiwic3VibWVudSIsIm1lbnVzIiwiYWN0aXZlTWVudSIsInByb3h5IiwiZXhwYW5kIiwidGltZXIiLCJrZWVwQWN0aXZlSXRlbSIsImNvbGxhcHNlQWxsIiwiY2hhcmFjdGVyIiwic2tpcCIsInJlZ2V4IiwiZXNjYXBlIiwicHJldmlvdXNQYWdlIiwibmV4dFBhZ2UiLCJjb2xsYXBzZSIsInByZXZpb3VzRmlsdGVyIiwiZmlsdGVyVGltZXIiLCJpY29uIiwic3VibWVudXMiLCJzdWJtZW51Q2FyYXQiLCJfaXRlbVJvbGUiLCJsaXN0Ym94IiwibmVzdGVkIiwiZm9jdXNlZCIsIl9zY3JvbGxJbnRvVmlldyIsIl9zdGFydE9wZW5pbmciLCJib3JkZXJUb3AiLCJlbGVtZW50SGVpZ2h0IiwiaXRlbUhlaWdodCIsIl9oYXNTY3JvbGwiLCJmcm9tRm9jdXMiLCJfb3BlbiIsImFsbCIsImN1cnJlbnRNZW51Iiwic3RhcnRNZW51IiwibmV3SXRlbSIsInByZXZBbGwiLCJvbGRWYWx1ZSIsIl9jb25zdHJhaW5lZFZhbHVlIiwidmFsdWVEaXYiLCJfcmVmcmVzaFZhbHVlIiwibmV3VmFsdWUiLCJpbmRldGVybWluYXRlIiwiX3BlcmNlbnRhZ2UiLCJwZXJjZW50YWdlIiwidG9nZ2xlIiwidG9GaXhlZCIsIm92ZXJsYXlEaXYiLCJudW1QYWdlcyIsIm9yaWVudGF0aW9uIiwicmFuZ2UiLCJ2YWx1ZXMiLCJzbGlkZSIsIl9rZXlTbGlkaW5nIiwiX21vdXNlU2xpZGluZyIsIl9hbmltYXRlT2ZmIiwiX2hhbmRsZUluZGV4IiwiX2RldGVjdE9yaWVudGF0aW9uIiwiX2NyZWF0ZVJhbmdlIiwiX2NyZWF0ZUhhbmRsZXMiLCJoYW5kbGVDb3VudCIsImV4aXN0aW5nSGFuZGxlcyIsImNsYXNzZXMiLCJfdmFsdWVNaW4iLCJlbGVtZW50cyIsIl9oYW5kbGVFdmVudHMiLCJub3JtVmFsdWUiLCJjbG9zZXN0SGFuZGxlIiwiYWxsb3dlZCIsIm1vdXNlT3ZlckhhbmRsZSIsImVsZW1lbnRTaXplIiwieSIsIl9ub3JtVmFsdWVGcm9tTW91c2UiLCJfdmFsdWVNYXgiLCJ0aGlzRGlzdGFuY2UiLCJfbGFzdENoYW5nZWRWYWx1ZSIsIl9zdGFydCIsIl9jbGlja09mZnNldCIsIl9zbGlkZSIsIl9zdG9wIiwicGl4ZWxUb3RhbCIsInBpeGVsTW91c2UiLCJwZXJjZW50TW91c2UiLCJ2YWx1ZVRvdGFsIiwidmFsdWVNb3VzZSIsIl90cmltQWxpZ25WYWx1ZSIsInVpSGFzaCIsIm5ld1ZhbCIsIm90aGVyVmFsIiwibmV3VmFsdWVzIiwidmFscyIsIl92YWx1ZXMiLCJ2YWxzTGVuZ3RoIiwidmFsTW9kU3RlcCIsImFsaWduVmFsdWUiLCJsYXN0VmFsUGVyY2VudCIsInZhbFBlcmNlbnQiLCJ2YWx1ZU1pbiIsInZhbHVlTWF4Iiwib1JhbmdlIiwiX3NldCIsImN1clZhbCIsIm1vZGlmaWVyIiwiY3VsdHVyZSIsInVwIiwiaW5jcmVtZW50YWwiLCJudW1iZXJGb3JtYXQiLCJwYWdlIiwic3BpbiIsIl9kcmF3IiwiX2V2ZW50cyIsIm1vdXNld2hlZWwiLCJzcGlubmluZyIsIl9zcGluIiwibW91c2V3aGVlbFRpbWVyIiwiX3JlcGVhdCIsInVpU3Bpbm5lciIsIl91aVNwaW5uZXJIdG1sIiwiX2J1dHRvbkh0bWwiLCJzdGVwcyIsIl9hZGp1c3RWYWx1ZSIsIl9pbmNyZW1lbnQiLCJfcHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX3ByZWNpc2lvbk9mIiwiZGVjaW1hbCIsImFib3ZlTWluIiwicHJldlZhbHVlIiwiX3BhcnNlIiwiX2Zvcm1hdCIsIkdsb2JhbGl6ZSIsImFsbG93QW55IiwicGFyc2VkIiwic3RlcFVwIiwiX3N0ZXBVcCIsInN0ZXBEb3duIiwiX3N0ZXBEb3duIiwicGFnZVVwIiwicGFnZXMiLCJwYWdlRG93biIsInRhYklkIiwicmhhc2giLCJnZXROZXh0VGFiSWQiLCJpc0xvY2FsIiwiYW5jaG9yIiwiaGFzaCIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvY2F0aW9uIiwiYmVmb3JlTG9hZCIsImxvYWQiLCJydW5uaW5nIiwiX3Byb2Nlc3NUYWJzIiwiX2luaXRpYWxBY3RpdmUiLCJ1bmlxdWUiLCJ0YWJzIiwibGkiLCJhbmNob3JzIiwibG9jYXRpb25IYXNoIiwidGFiIiwiX2dldFBhbmVsRm9yVGFiIiwiX3RhYktleWRvd24iLCJmb2N1c2VkVGFiIiwiZ29pbmdGb3J3YXJkIiwiX2hhbmRsZVBhZ2VOYXYiLCJhY3RpdmF0aW5nIiwiX2ZvY3VzTmV4dFRhYiIsIl9wYW5lbEtleWRvd24iLCJfZmluZE5leHRUYWIiLCJsYXN0VGFiSW5kZXgiLCJjb25zdHJhaW4iLCJpbkFycmF5IiwiX3NldHVwRGlzYWJsZWQiLCJfc2V0dXBIZWlnaHRTdHlsZSIsIl90YWJJZCIsIl9zYW5pdGl6ZVNlbGVjdG9yIiwibGlzIiwidGFibGlzdCIsInBhbmVscyIsIl9nZXRMaXN0IiwiYW5jaG9ySWQiLCJvcmlnaW5hbEFyaWFDb250cm9scyIsIl9jcmVhdGVQYW5lbCIsIm9sZFRhYiIsIm5ld1RhYiIsIl9nZXRJbmRleCIsIm1lcmdlIiwiX2FqYXhTZXR0aW5ncyIsInN0YXR1c1RleHQiLCJqcVhIUiIsInN0YXR1cyIsImJlZm9yZVNlbmQiLCJhamF4U2V0dGluZ3MiLCJpbmNyZW1lbnRzIiwiYWRkRGVzY3JpYmVkQnkiLCJkZXNjcmliZWRieSIsInJlbW92ZURlc2NyaWJlZEJ5IiwidG9vbHRpcENsYXNzIiwidHJhY2siLCJ0b29sdGlwcyIsIl9kaXNhYmxlIiwiX3VwZGF0ZUNvbnRlbnQiLCJfZW5hYmxlIiwiYmx1ckV2ZW50IiwiY29udGVudE9wdGlvbiIsImV2ZW50VHlwZSIsInRvb2x0aXAiLCJkZWxheWVkU2hvdyIsInBvc2l0aW9uT3B0aW9uIiwiX2ZpbmQiLCJfdG9vbHRpcCIsIm1vdXNlbW92ZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImludGVydmFsIiwiZmFrZUV2ZW50IiwiX3JlbW92ZVRvb2x0aXAiLCJjbG9zaW5nIiwiZGF0YVNwYWNlIiwic3RlcEhvb2tzIiwicnBsdXNlcXVhbHMiLCJzdHJpbmdQYXJzZXJzIiwicmUiLCJwYXJzZSIsImV4ZWNSZXN1bHQiLCJzcGFjZSIsImNvbG9yIiwiQ29sb3IiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsInNwYWNlcyIsInJnYmEiLCJyZWQiLCJpZHgiLCJoc2xhIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsInByb3BUeXBlcyIsInN1cHBvcnRFbGVtIiwiY29sb3JzIiwiYmFja2dyb3VuZENvbG9yIiwic3BhY2VOYW1lIiwiY2FjaGUiLCJkZWYiLCJjbGFtcCIsImFsbG93RW1wdHkiLCJzdHJpbmdQYXJzZSIsInN0cmluZyIsIl9yZ2JhIiwicGFyc2VyIiwidHJhbnNwYXJlbnQiLCJfZGVmYXVsdCIsInRvIiwiZnJvbSIsImNvbXBhcmUiLCJzYW1lIiwiXyIsImxvY2FsQ2FjaGUiLCJpc0NhY2hlIiwiX3NwYWNlIiwidXNlZCIsInRyYW5zaXRpb24iLCJvdGhlciIsInN0YXJ0Q29sb3IiLCJyZXN1bHQiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJibGVuZCIsIm9wYXF1ZSIsInJnYiIsInRvUmdiYVN0cmluZyIsInByZWZpeCIsInRvSHNsYVN0cmluZyIsInRvSGV4U3RyaW5nIiwiaW5jbHVkZUFscGhhIiwiaHVlMnJnYiIsInEiLCJnIiwiZGlmZiIsImFyciIsImxvY2FsIiwidnR5cGUiLCJfaHNsYSIsImhvb2siLCJob29rcyIsImNzc0hvb2tzIiwiY3VyRWxlbSIsImNvbG9ySW5pdCIsImJvcmRlckNvbG9yIiwiZXhwYW5kZWQiLCJwYXJ0IiwiYXF1YSIsImJsYWNrIiwiZnVjaHNpYSIsImdyYXkiLCJsaW1lIiwibWFyb29uIiwibmF2eSIsIm9saXZlIiwicHVycGxlIiwic2lsdmVyIiwidGVhbCIsIndoaXRlIiwieWVsbG93IiwiY2xhc3NBbmltYXRpb25BY3Rpb25zIiwic2hvcnRoYW5kU3R5bGVzIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyV2lkdGgiLCJwYWRkaW5nIiwic2V0QXR0ciIsImdldEVsZW1lbnRTdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwic3R5bGVzIiwic3R5bGVEaWZmZXJlbmNlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImFuaW1hdGVDbGFzcyIsInNwZWVkIiwiYW5pbWF0ZWQiLCJiYXNlQ2xhc3MiLCJhcHBseUNsYXNzQ2hhbmdlIiwiYWxsQW5pbWF0aW9ucyIsImFjdGlvbiIsInN0eWxlSW5mbyIsImRmZCIsIkRlZmVycmVkIiwib3B0cyIsInJlc29sdmUiLCJwcm9taXNlIiwid2hlbiIsImRvbmUiLCJfYWRkQ2xhc3MiLCJjbGFzc05hbWVzIiwiX3JlbW92ZUNsYXNzIiwiX3RvZ2dsZUNsYXNzIiwiZm9yY2UiLCJzd2l0Y2hDbGFzcyIsInNhdmUiLCJyZXN0b3JlIiwic2V0TW9kZSIsIm1vZGUiLCJnZXRCYXNlbGluZSIsIm9yaWdpbiIsIm9yaWdpbmFsIiwiY3JlYXRlV3JhcHBlciIsImZvbnRTaXplIiwicmVtb3ZlV3JhcHBlciIsInNldFRyYW5zaXRpb24iLCJmYWN0b3IiLCJ1bml0IiwiY3NzVW5pdCIsIl9ub3JtYWxpemVBcmd1bWVudHMiLCJzcGVlZHMiLCJvZmYiLCJzdGFuZGFyZFNwZWVkIiwiZWZmZWN0TWV0aG9kIiwicnVuIiwiX190b2dnbGUiLCJiYXNlRWFzaW5ncyIsInBvdyIsIlNpbmUiLCJjb3MiLCJQSSIsIkNpcmMiLCJzcXJ0IiwiRWxhc3RpYyIsInNpbiIsIkJhY2siLCJCb3VuY2UiLCJwb3cyIiwiYm91bmNlIiwiZWFzZUluIiwicnBvc2l0aXZlbW90aW9uIiwiYmxpbmQiLCJyZWYiLCJyZWYyIiwibW90aW9uIiwiYW5pbWF0aW9uIiwib3ZlcmZsb3ciLCJ0aW1lcyIsImFuaW1zIiwidXBBbmltIiwiZG93bkFuaW0iLCJxdWV1ZWxlbiIsImRlcXVldWUiLCJjbGlwIiwidmVydCIsImV4cGxvZGUiLCJyb3dzIiwicGllY2VzIiwiY2VsbHMiLCJteCIsImNoaWxkQ29tcGxldGUiLCJhbmltQ29tcGxldGUiLCJmYWRlIiwiZm9sZCIsInBlcmNlbnQiLCJob3JpekZpcnN0Iiwid2lkdGhGaXJzdCIsImFuaW1hdGlvbjEiLCJhbmltYXRpb24yIiwiaGlnaGxpZ2h0IiwiYmFja2dyb3VuZEltYWdlIiwicHVsc2F0ZSIsInNob3doaWRlIiwiYW5pbWF0ZVRvIiwicHVmZiIsInNjYWxlIiwiYmFzZWxpbmUiLCJwcm9wczAiLCJwcm9wczEiLCJwcm9wczIiLCJjUHJvcHMiLCJ2UHJvcHMiLCJoUHJvcHMiLCJ6ZXJvIiwiY19vcmlnaW5hbCIsInRvUmVmIiwic2hha2UiLCJwb3NpdGl2ZU1vdGlvbiIsInRyYW5zZmVyIiwidGFyZ2V0Rml4ZWQiLCJmaXhUb3AiLCJmaXhMZWZ0IiwiZW5kUG9zaXRpb24iLCJzdGFydFBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsQ0FBQyxVQUFVQSxDQUFWLEVBQWFDLFNBQWIsRUFBeUI7QUFFMUIsTUFBSUMsSUFBSSxHQUFHLENBQVg7QUFBQSxNQUNDQyxTQUFTLEdBQUcsYUFEYixDQUYwQixDQUsxQjtBQUNBO0FBQ0E7O0FBQ0FILEVBQUFBLENBQUMsQ0FBQ0ksRUFBRixHQUFPSixDQUFDLENBQUNJLEVBQUYsSUFBUSxFQUFmOztBQUNBLE1BQUtKLENBQUMsQ0FBQ0ksRUFBRixDQUFLQyxPQUFWLEVBQW9CO0FBQ25CO0FBQ0E7O0FBRURMLEVBQUFBLENBQUMsQ0FBQ00sTUFBRixDQUFVTixDQUFDLENBQUNJLEVBQVosRUFBZ0I7QUFDZkMsSUFBQUEsT0FBTyxFQUFFLFFBRE07QUFHZkUsSUFBQUEsT0FBTyxFQUFFO0FBQ1JDLE1BQUFBLFNBQVMsRUFBRSxDQURIO0FBRVJDLE1BQUFBLEtBQUssRUFBRSxHQUZDO0FBR1JDLE1BQUFBLE1BQU0sRUFBRSxFQUhBO0FBSVJDLE1BQUFBLElBQUksRUFBRSxFQUpFO0FBS1JDLE1BQUFBLEdBQUcsRUFBRSxFQUxHO0FBTVJDLE1BQUFBLEtBQUssRUFBRSxFQU5DO0FBT1JDLE1BQUFBLE1BQU0sRUFBRSxFQVBBO0FBUVJDLE1BQUFBLElB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djdDLEdBQWQsR0FBb0JvN0MsTUFEckI7QUFFSm43QyxNQUFBQSxJQUFJLEVBQUVzN0MsYUFBYSxDQUFDdDdDLElBQWQsR0FBcUJvN0MsT0FGdkI7QUFHSjM3QyxNQUFBQSxNQUFNLEVBQUVyUSxJQUFJLENBQUN1RCxXQUFMLEVBSEo7QUFJSjZNLE1BQUFBLEtBQUssRUFBRXBRLElBQUksQ0FBQ3NELFVBQUwsRUFKSDtBQUtKdkMsTUFBQUEsUUFBUSxFQUFFK3FELFdBQVcsR0FBRyxPQUFILEdBQWE7QUFMOUIsS0FISyxFQVVUcHlDLE9BVlMsQ0FVQXd2QyxTQVZBLEVBVVd2eEMsQ0FBQyxDQUFDM0ssUUFWYixFQVV1QjJLLENBQUMsQ0FBQ3ZLLE1BVnpCLEVBVWlDLFlBQVc7QUFDckR5K0MsTUFBQUEsUUFBUSxDQUFDcGlELE1BQVQ7QUFDQTA4QyxNQUFBQSxJQUFJO0FBQ0osS0FiUyxDQWRaO0FBNEJBLEdBN0JEO0FBK0JDLENBakNELEVBaUNHbGdELE1BakNIIiwic291cmNlc0NvbnRlbnQiOlsiLyohIGpRdWVyeSBVSSAtIHYxLjEwLjEgLSAyMDEzLTAzLTExXG4qIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiogSW5jbHVkZXM6IGpxdWVyeS51aS5jb3JlLmpzLCBqcXVlcnkudWkud2lkZ2V0LmpzLCBqcXVlcnkudWkubW91c2UuanMsIGpxdWVyeS51aS5wb3NpdGlvbi5qcywganF1ZXJ5LnVpLmRyYWdnYWJsZS5qcywganF1ZXJ5LnVpLmRyb3BwYWJsZS5qcywganF1ZXJ5LnVpLnJlc2l6YWJsZS5qcywganF1ZXJ5LnVpLnNlbGVjdGFibGUuanMsIGpxdWVyeS51aS5zb3J0YWJsZS5qcywganF1ZXJ5LnVpLmFjY29yZGlvbi5qcywganF1ZXJ5LnVpLmF1dG9jb21wbGV0ZS5qcywganF1ZXJ5LnVpLmJ1dHRvbi5qcywganF1ZXJ5LnVpLmRhdGVwaWNrZXIuanMsIGpxdWVyeS51aS5kaWFsb2cuanMsIGpxdWVyeS51aS5tZW51LmpzLCBqcXVlcnkudWkucHJvZ3Jlc3NiYXIuanMsIGpxdWVyeS51aS5zbGlkZXIuanMsIGpxdWVyeS51aS5zcGlubmVyLmpzLCBqcXVlcnkudWkudGFicy5qcywganF1ZXJ5LnVpLnRvb2x0aXAuanMsIGpxdWVyeS51aS5lZmZlY3QuanMsIGpxdWVyeS51aS5lZmZlY3QtYmxpbmQuanMsIGpxdWVyeS51aS5lZmZlY3QtYm91bmNlLmpzLCBqcXVlcnkudWkuZWZmZWN0LWNsaXAuanMsIGpxdWVyeS51aS5lZmZlY3QtZHJvcC5qcywganF1ZXJ5LnVpLmVmZmVjdC1leHBsb2RlLmpzLCBqcXVlcnkudWkuZWZmZWN0LWZhZGUuanMsIGpxdWVyeS51aS5lZmZlY3QtZm9sZC5qcywganF1ZXJ5LnVpLmVmZmVjdC1oaWdobGlnaHQuanMsIGpxdWVyeS51aS5lZmZlY3QtcHVsc2F0ZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zY2FsZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zaGFrZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zbGlkZS5qcywganF1ZXJ5LnVpLmVmZmVjdC10cmFuc2Zlci5qc1xuKiBDb3B5cmlnaHQgKGMpIDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBMaWNlbnNlZCBNSVQgKi9cblxuKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7XG5cbnZhciB1dWlkID0gMCxcblx0cnVuaXF1ZUlkID0gL151aS1pZC1cXGQrJC87XG5cbi8vIHByZXZlbnQgZHVwbGljYXRlIGxvYWRpbmdcbi8vIHRoaXMgaXMgb25seSBhIHByb2JsZW0gYmVjYXVzZSB3ZSBwcm94eSBleGlzdGluZyBmdW5jdGlvbnNcbi8vIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRvdWJsZSBwcm94eSB0aGVtXG4kLnVpID0gJC51aSB8fCB7fTtcbmlmICggJC51aS52ZXJzaW9uICkge1xuXHRyZXR1cm47XG59XG5cbiQuZXh0ZW5kKCAkLnVpLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cblx0a2V5Q29kZToge1xuXHRcdEJBQ0tTUEFDRTogOCxcblx0XHRDT01NQTogMTg4LFxuXHRcdERFTEVURTogNDYsXG5cdFx0RE9XTjogNDAsXG5cdFx0RU5EOiAzNSxcblx0XHRFTlRFUjogMTMsXG5cdFx0RVNDQVBFOiAyNyxcblx0XHRIT01FOiAzNixcblx0XHRMRUZUOiAzNyxcblx0XHROVU1QQURfQUREOiAxMDcsXG5cdFx0TlVNUEFEX0RFQ0lNQUw6IDExMCxcblx0XHROVU1QQURfRElWSURFOiAxMTEsXG5cdFx0TlVNUEFEX0VOVEVSOiAxMDgsXG5cdFx0TlVNUEFEX01VTFRJUExZOiAxMDYsXG5cdFx0TlVNUEFEX1NVQlRSQUNUOiAxMDksXG5cdFx0UEFHRV9ET1dOOiAzNCxcblx0XHRQQUdFX1VQOiAzMyxcblx0XHRQRVJJT0Q6IDE5MCxcblx0XHRSSUdIVDogMzksXG5cdFx0U1BBQ0U6IDMyLFxuXHRcdFRBQjogOSxcblx0XHRVUDogMzhcblx0fVxufSk7XG5cbi8vIHBsdWdpbnNcbiQuZm4uZXh0ZW5kKHtcblx0X2ZvY3VzOiAkLmZuLmZvY3VzLFxuXHRmb2N1czogZnVuY3Rpb24oIGRlbGF5LCBmbiApIHtcblx0XHRyZXR1cm4gdHlwZW9mIGRlbGF5ID09PSBcIm51bWJlclwiID9cblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoIGVsZW0gKS5mb2N1cygpO1xuXHRcdFx0XHRcdGlmICggZm4gKSB7XG5cdFx0XHRcdFx0XHRmbi5jYWxsKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCBkZWxheSApO1xuXHRcdFx0fSkgOlxuXHRcdFx0dGhpcy5fZm9jdXMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9LFxuXG5cdHNjcm9sbFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNjcm9sbFBhcmVudDtcblx0XHRpZiAoKCQudWkuaWUgJiYgKC8oc3RhdGljfHJlbGF0aXZlKS8pLnRlc3QodGhpcy5jc3MoXCJwb3NpdGlvblwiKSkpIHx8ICgvYWJzb2x1dGUvKS50ZXN0KHRoaXMuY3NzKFwicG9zaXRpb25cIikpKSB7XG5cdFx0XHRzY3JvbGxQYXJlbnQgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAoLyhyZWxhdGl2ZXxhYnNvbHV0ZXxmaXhlZCkvKS50ZXN0KCQuY3NzKHRoaXMsXCJwb3NpdGlvblwiKSkgJiYgKC8oYXV0b3xzY3JvbGwpLykudGVzdCgkLmNzcyh0aGlzLFwib3ZlcmZsb3dcIikrJC5jc3ModGhpcyxcIm92ZXJmbG93LXlcIikrJC5jc3ModGhpcyxcIm92ZXJmbG93LXhcIikpO1xuXHRcdFx0fSkuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNjcm9sbFBhcmVudCA9IHRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICgvKGF1dG98c2Nyb2xsKS8pLnRlc3QoJC5jc3ModGhpcyxcIm92ZXJmbG93XCIpKyQuY3NzKHRoaXMsXCJvdmVyZmxvdy15XCIpKyQuY3NzKHRoaXMsXCJvdmVyZmxvdy14XCIpKTtcblx0XHRcdH0pLmVxKDApO1xuXHRcdH1cblxuXHRcdHJldHVybiAoL2ZpeGVkLykudGVzdCh0aGlzLmNzcyhcInBvc2l0aW9uXCIpKSB8fCAhc2Nyb2xsUGFyZW50Lmxlbmd0aCA/ICQoZG9jdW1lbnQpIDogc2Nyb2xsUGFyZW50O1xuXHR9LFxuXG5cdHpJbmRleDogZnVuY3Rpb24oIHpJbmRleCApIHtcblx0XHRpZiAoIHpJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3NzKCBcInpJbmRleFwiLCB6SW5kZXggKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzWyAwIF0gKSwgcG9zaXRpb24sIHZhbHVlO1xuXHRcdFx0d2hpbGUgKCBlbGVtLmxlbmd0aCAmJiBlbGVtWyAwIF0gIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHQvLyBJZ25vcmUgei1pbmRleCBpZiBwb3NpdGlvbiBpcyBzZXQgdG8gYSB2YWx1ZSB3aGVyZSB6LWluZGV4IGlzIGlnbm9yZWQgYnkgdGhlIGJyb3dzZXJcblx0XHRcdFx0Ly8gVGhpcyBtYWtlcyBiZWhhdmlvciBvZiB0aGlzIGZ1bmN0aW9uIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzXG5cdFx0XHRcdC8vIFdlYktpdCBhbHdheXMgcmV0dXJucyBhdXRvIGlmIHRoZSBlbGVtZW50IGlzIHBvc2l0aW9uZWRcblx0XHRcdFx0cG9zaXRpb24gPSBlbGVtLmNzcyggXCJwb3NpdGlvblwiICk7XG5cdFx0XHRcdGlmICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHRcdFx0Ly8gSUUgcmV0dXJucyAwIHdoZW4gekluZGV4IGlzIG5vdCBzcGVjaWZpZWRcblx0XHRcdFx0XHQvLyBvdGhlciBicm93c2VycyByZXR1cm4gYSBzdHJpbmdcblx0XHRcdFx0XHQvLyB3ZSBpZ25vcmUgdGhlIGNhc2Ugb2YgbmVzdGVkIGVsZW1lbnRzIHdpdGggYW4gZXhwbGljaXQgdmFsdWUgb2YgMFxuXHRcdFx0XHRcdC8vIDxkaXYgc3R5bGU9XCJ6LWluZGV4OiAtMTA7XCI+PGRpdiBzdHlsZT1cInotaW5kZXg6IDA7XCI+PC9kaXY+PC9kaXY+XG5cdFx0XHRcdFx0dmFsdWUgPSBwYXJzZUludCggZWxlbS5jc3MoIFwiekluZGV4XCIgKSwgMTAgKTtcblx0XHRcdFx0XHRpZiAoICFpc05hTiggdmFsdWUgKSAmJiB2YWx1ZSAhPT0gMCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbSA9IGVsZW0ucGFyZW50KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0dW5pcXVlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICF0aGlzLmlkICkge1xuXHRcdFx0XHR0aGlzLmlkID0gXCJ1aS1pZC1cIiArICgrK3V1aWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydW5pcXVlSWQudGVzdCggdGhpcy5pZCApICkge1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlQXR0ciggXCJpZFwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG4vLyBzZWxlY3RvcnNcbmZ1bmN0aW9uIGZvY3VzYWJsZSggZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTiApIHtcblx0dmFyIG1hcCwgbWFwTmFtZSwgaW1nLFxuXHRcdG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRpZiAoIFwiYXJlYVwiID09PSBub2RlTmFtZSApIHtcblx0XHRtYXAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0bWFwTmFtZSA9IG1hcC5uYW1lO1xuXHRcdGlmICggIWVsZW1lbnQuaHJlZiB8fCAhbWFwTmFtZSB8fCBtYXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJtYXBcIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aW1nID0gJCggXCJpbWdbdXNlbWFwPSNcIiArIG1hcE5hbWUgKyBcIl1cIiApWzBdO1xuXHRcdHJldHVybiAhIWltZyAmJiB2aXNpYmxlKCBpbWcgKTtcblx0fVxuXHRyZXR1cm4gKCAvaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QvLnRlc3QoIG5vZGVOYW1lICkgP1xuXHRcdCFlbGVtZW50LmRpc2FibGVkIDpcblx0XHRcImFcIiA9PT0gbm9kZU5hbWUgP1xuXHRcdFx0ZWxlbWVudC5ocmVmIHx8IGlzVGFiSW5kZXhOb3ROYU4gOlxuXHRcdFx0aXNUYWJJbmRleE5vdE5hTikgJiZcblx0XHQvLyB0aGUgZWxlbWVudCBhbmQgYWxsIG9mIGl0cyBhbmNlc3RvcnMgbXVzdCBiZSB2aXNpYmxlXG5cdFx0dmlzaWJsZSggZWxlbWVudCApO1xufVxuXG5mdW5jdGlvbiB2aXNpYmxlKCBlbGVtZW50ICkge1xuXHRyZXR1cm4gJC5leHByLmZpbHRlcnMudmlzaWJsZSggZWxlbWVudCApICYmXG5cdFx0ISQoIGVsZW1lbnQgKS5wYXJlbnRzKCkuYWRkQmFjaygpLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkLmNzcyggdGhpcywgXCJ2aXNpYmlsaXR5XCIgKSA9PT0gXCJoaWRkZW5cIjtcblx0XHR9KS5sZW5ndGg7XG59XG5cbiQuZXh0ZW5kKCAkLmV4cHJbIFwiOlwiIF0sIHtcblx0ZGF0YTogJC5leHByLmNyZWF0ZVBzZXVkbyA/XG5cdFx0JC5leHByLmNyZWF0ZVBzZXVkbyhmdW5jdGlvbiggZGF0YU5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAhISQuZGF0YSggZWxlbSwgZGF0YU5hbWUgKTtcblx0XHRcdH07XG5cdFx0fSkgOlxuXHRcdC8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkge1xuXHRcdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBtYXRjaFsgMyBdICk7XG5cdFx0fSxcblxuXHRmb2N1c2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHJldHVybiBmb2N1c2FibGUoIGVsZW1lbnQsICFpc05hTiggJC5hdHRyKCBlbGVtZW50LCBcInRhYmluZGV4XCIgKSApICk7XG5cdH0sXG5cblx0dGFiYmFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciB0YWJJbmRleCA9ICQuYXR0ciggZWxlbWVudCwgXCJ0YWJpbmRleFwiICksXG5cdFx0XHRpc1RhYkluZGV4TmFOID0gaXNOYU4oIHRhYkluZGV4ICk7XG5cdFx0cmV0dXJuICggaXNUYWJJbmRleE5hTiB8fCB0YWJJbmRleCA+PSAwICkgJiYgZm9jdXNhYmxlKCBlbGVtZW50LCAhaXNUYWJJbmRleE5hTiApO1xuXHR9XG59KTtcblxuLy8gc3VwcG9ydDogalF1ZXJ5IDwxLjhcbmlmICggISQoIFwiPGE+XCIgKS5vdXRlcldpZHRoKCAxICkuanF1ZXJ5ICkge1xuXHQkLmVhY2goIFsgXCJXaWR0aFwiLCBcIkhlaWdodFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdHZhciBzaWRlID0gbmFtZSA9PT0gXCJXaWR0aFwiID8gWyBcIkxlZnRcIiwgXCJSaWdodFwiIF0gOiBbIFwiVG9wXCIsIFwiQm90dG9tXCIgXSxcblx0XHRcdHR5cGUgPSBuYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRvcmlnID0ge1xuXHRcdFx0XHRpbm5lcldpZHRoOiAkLmZuLmlubmVyV2lkdGgsXG5cdFx0XHRcdGlubmVySGVpZ2h0OiAkLmZuLmlubmVySGVpZ2h0LFxuXHRcdFx0XHRvdXRlcldpZHRoOiAkLmZuLm91dGVyV2lkdGgsXG5cdFx0XHRcdG91dGVySGVpZ2h0OiAkLmZuLm91dGVySGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gcmVkdWNlKCBlbGVtLCBzaXplLCBib3JkZXIsIG1hcmdpbiApIHtcblx0XHRcdCQuZWFjaCggc2lkZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNpemUgLT0gcGFyc2VGbG9hdCggJC5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgdGhpcyApICkgfHwgMDtcblx0XHRcdFx0aWYgKCBib3JkZXIgKSB7XG5cdFx0XHRcdFx0c2l6ZSAtPSBwYXJzZUZsb2F0KCAkLmNzcyggZWxlbSwgXCJib3JkZXJcIiArIHRoaXMgKyBcIldpZHRoXCIgKSApIHx8IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBtYXJnaW4gKSB7XG5cdFx0XHRcdFx0c2l6ZSAtPSBwYXJzZUZsb2F0KCAkLmNzcyggZWxlbSwgXCJtYXJnaW5cIiArIHRoaXMgKSApIHx8IDA7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHNpemU7XG5cdFx0fVxuXG5cdFx0JC5mblsgXCJpbm5lclwiICsgbmFtZSBdID0gZnVuY3Rpb24oIHNpemUgKSB7XG5cdFx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIG9yaWdbIFwiaW5uZXJcIiArIG5hbWUgXS5jYWxsKCB0aGlzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5jc3MoIHR5cGUsIHJlZHVjZSggdGhpcywgc2l6ZSApICsgXCJweFwiICk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0JC5mblsgXCJvdXRlclwiICsgbmFtZV0gPSBmdW5jdGlvbiggc2l6ZSwgbWFyZ2luICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cmV0dXJuIG9yaWdbIFwib3V0ZXJcIiArIG5hbWUgXS5jYWxsKCB0aGlzLCBzaXplICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMpLmNzcyggdHlwZSwgcmVkdWNlKCB0aGlzLCBzaXplLCB0cnVlLCBtYXJnaW4gKSArIFwicHhcIiApO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fSk7XG59XG5cbi8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44XG5pZiAoICEkLmZuLmFkZEJhY2sgKSB7XG5cdCQuZm4uYWRkQmFjayA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH07XG59XG5cbi8vIHN1cHBvcnQ6IGpRdWVyeSAxLjYuMSwgMS42LjIgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk0MTMpXG5pZiAoICQoIFwiPGE+XCIgKS5kYXRhKCBcImEtYlwiLCBcImFcIiApLnJlbW92ZURhdGEoIFwiYS1iXCIgKS5kYXRhKCBcImEtYlwiICkgKSB7XG5cdCQuZm4ucmVtb3ZlRGF0YSA9IChmdW5jdGlvbiggcmVtb3ZlRGF0YSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbW92ZURhdGEuY2FsbCggdGhpcywgJC5jYW1lbENhc2UoIGtleSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gcmVtb3ZlRGF0YS5jYWxsKCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSkoICQuZm4ucmVtb3ZlRGF0YSApO1xufVxuXG5cblxuXG5cbi8vIGRlcHJlY2F0ZWRcbiQudWkuaWUgPSAhIS9tc2llIFtcXHcuXSsvLmV4ZWMoIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSApO1xuXG4kLnN1cHBvcnQuc2VsZWN0c3RhcnQgPSBcIm9uc2VsZWN0c3RhcnRcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG4kLmZuLmV4dGVuZCh7XG5cdGRpc2FibGVTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmJpbmQoICggJC5zdXBwb3J0LnNlbGVjdHN0YXJ0ID8gXCJzZWxlY3RzdGFydFwiIDogXCJtb3VzZWRvd25cIiApICtcblx0XHRcdFwiLnVpLWRpc2FibGVTZWxlY3Rpb25cIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fSk7XG5cdH0sXG5cblx0ZW5hYmxlU2VsZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy51bmJpbmQoIFwiLnVpLWRpc2FibGVTZWxlY3Rpb25cIiApO1xuXHR9XG59KTtcblxuJC5leHRlbmQoICQudWksIHtcblx0Ly8gJC51aS5wbHVnaW4gaXMgZGVwcmVjYXRlZC4gIFVzZSB0aGUgcHJveHkgcGF0dGVybiBpbnN0ZWFkLlxuXHRwbHVnaW46IHtcblx0XHRhZGQ6IGZ1bmN0aW9uKCBtb2R1bGUsIG9wdGlvbiwgc2V0ICkge1xuXHRcdFx0dmFyIGksXG5cdFx0XHRcdHByb3RvID0gJC51aVsgbW9kdWxlIF0ucHJvdG90eXBlO1xuXHRcdFx0Zm9yICggaSBpbiBzZXQgKSB7XG5cdFx0XHRcdHByb3RvLnBsdWdpbnNbIGkgXSA9IHByb3RvLnBsdWdpbnNbIGkgXSB8fCBbXTtcblx0XHRcdFx0cHJvdG8ucGx1Z2luc1sgaSBdLnB1c2goIFsgb3B0aW9uLCBzZXRbIGkgXSBdICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjYWxsOiBmdW5jdGlvbiggaW5zdGFuY2UsIG5hbWUsIGFyZ3MgKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdFx0c2V0ID0gaW5zdGFuY2UucGx1Z2luc1sgbmFtZSBdO1xuXHRcdFx0aWYgKCAhc2V0IHx8ICFpbnN0YW5jZS5lbGVtZW50WyAwIF0ucGFyZW50Tm9kZSB8fCBpbnN0YW5jZS5lbGVtZW50WyAwIF0ucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggaW5zdGFuY2Uub3B0aW9uc1sgc2V0WyBpIF1bIDAgXSBdICkge1xuXHRcdFx0XHRcdHNldFsgaSBdWyAxIF0uYXBwbHkoIGluc3RhbmNlLmVsZW1lbnQsIGFyZ3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBvbmx5IHVzZWQgYnkgcmVzaXphYmxlXG5cdGhhc1Njcm9sbDogZnVuY3Rpb24oIGVsLCBhICkge1xuXG5cdFx0Ly9JZiBvdmVyZmxvdyBpcyBoaWRkZW4sIHRoZSBlbGVtZW50IG1pZ2h0IGhhdmUgZXh0cmEgY29udGVudCwgYnV0IHRoZSB1c2VyIHdhbnRzIHRvIGhpZGUgaXRcblx0XHRpZiAoICQoIGVsICkuY3NzKCBcIm92ZXJmbG93XCIgKSA9PT0gXCJoaWRkZW5cIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBzY3JvbGwgPSAoIGEgJiYgYSA9PT0gXCJsZWZ0XCIgKSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIixcblx0XHRcdGhhcyA9IGZhbHNlO1xuXG5cdFx0aWYgKCBlbFsgc2Nyb2xsIF0gPiAwICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogZGV0ZXJtaW5lIHdoaWNoIGNhc2VzIGFjdHVhbGx5IGNhdXNlIHRoaXMgdG8gaGFwcGVuXG5cdFx0Ly8gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIHRoZSBzY3JvbGwgc2V0LCBzZWUgaWYgaXQncyBwb3NzaWJsZSB0b1xuXHRcdC8vIHNldCB0aGUgc2Nyb2xsXG5cdFx0ZWxbIHNjcm9sbCBdID0gMTtcblx0XHRoYXMgPSAoIGVsWyBzY3JvbGwgXSA+IDAgKTtcblx0XHRlbFsgc2Nyb2xsIF0gPSAwO1xuXHRcdHJldHVybiBoYXM7XG5cdH1cbn0pO1xuXG59KSggalF1ZXJ5ICk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxudmFyIHV1aWQgPSAwLFxuXHRzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcblx0X2NsZWFuRGF0YSA9ICQuY2xlYW5EYXRhO1xuJC5jbGVhbkRhdGEgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdGZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdHRyeSB7XG5cdFx0XHQkKCBlbGVtICkudHJpZ2dlckhhbmRsZXIoIFwicmVtb3ZlXCIgKTtcblx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC84MjM1XG5cdFx0fSBjYXRjaCggZSApIHt9XG5cdH1cblx0X2NsZWFuRGF0YSggZWxlbXMgKTtcbn07XG5cbiQud2lkZ2V0ID0gZnVuY3Rpb24oIG5hbWUsIGJhc2UsIHByb3RvdHlwZSApIHtcblx0dmFyIGZ1bGxOYW1lLCBleGlzdGluZ0NvbnN0cnVjdG9yLCBjb25zdHJ1Y3RvciwgYmFzZVByb3RvdHlwZSxcblx0XHQvLyBwcm94aWVkUHJvdG90eXBlIGFsbG93cyB0aGUgcHJvdmlkZWQgcHJvdG90eXBlIHRvIHJlbWFpbiB1bm1vZGlmaWVkXG5cdFx0Ly8gc28gdGhhdCBpdCBjYW4gYmUgdXNlZCBhcyBhIG1peGluIGZvciBtdWx0aXBsZSB3aWRnZXRzICgjODg3Nilcblx0XHRwcm94aWVkUHJvdG90eXBlID0ge30sXG5cdFx0bmFtZXNwYWNlID0gbmFtZS5zcGxpdCggXCIuXCIgKVsgMCBdO1xuXG5cdG5hbWUgPSBuYW1lLnNwbGl0KCBcIi5cIiApWyAxIF07XG5cdGZ1bGxOYW1lID0gbmFtZXNwYWNlICsgXCItXCIgKyBuYW1lO1xuXG5cdGlmICggIXByb3RvdHlwZSApIHtcblx0XHRwcm90b3R5cGUgPSBiYXNlO1xuXHRcdGJhc2UgPSAkLldpZGdldDtcblx0fVxuXG5cdC8vIGNyZWF0ZSBzZWxlY3RvciBmb3IgcGx1Z2luXG5cdCQuZXhwclsgXCI6XCIgXVsgZnVsbE5hbWUudG9Mb3dlckNhc2UoKSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBmdWxsTmFtZSApO1xuXHR9O1xuXG5cdCRbIG5hbWVzcGFjZSBdID0gJFsgbmFtZXNwYWNlIF0gfHwge307XG5cdGV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdO1xuXHRjb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHtcblx0XHQvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgXCJuZXdcIiBrZXl3b3JkXG5cdFx0aWYgKCAhdGhpcy5fY3JlYXRlV2lkZ2V0ICkge1xuXHRcdFx0cmV0dXJuIG5ldyBjb25zdHJ1Y3Rvciggb3B0aW9ucywgZWxlbWVudCApO1xuXHRcdH1cblxuXHRcdC8vIGFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBpbml0aWFsaXppbmcgZm9yIHNpbXBsZSBpbmhlcml0YW5jZVxuXHRcdC8vIG11c3QgdXNlIFwibmV3XCIga2V5d29yZCAodGhlIGNvZGUgYWJvdmUgYWx3YXlzIHBhc3NlcyBhcmdzKVxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHRoaXMuX2NyZWF0ZVdpZGdldCggb3B0aW9ucywgZWxlbWVudCApO1xuXHRcdH1cblx0fTtcblx0Ly8gZXh0ZW5kIHdpdGggdGhlIGV4aXN0aW5nIGNvbnN0cnVjdG9yIHRvIGNhcnJ5IG92ZXIgYW55IHN0YXRpYyBwcm9wZXJ0aWVzXG5cdCQuZXh0ZW5kKCBjb25zdHJ1Y3RvciwgZXhpc3RpbmdDb25zdHJ1Y3Rvciwge1xuXHRcdHZlcnNpb246IHByb3RvdHlwZS52ZXJzaW9uLFxuXHRcdC8vIGNvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0b1xuXHRcdC8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXJcblx0XHRfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksXG5cdFx0Ly8gdHJhY2sgd2lkZ2V0cyB0aGF0IGluaGVyaXQgZnJvbSB0aGlzIHdpZGdldCBpbiBjYXNlIHRoaXMgd2lkZ2V0IGlzXG5cdFx0Ly8gcmVkZWZpbmVkIGFmdGVyIGEgd2lkZ2V0IGluaGVyaXRzIGZyb20gaXRcblx0XHRfY2hpbGRDb25zdHJ1Y3RvcnM6IFtdXG5cdH0pO1xuXG5cdGJhc2VQcm90b3R5cGUgPSBuZXcgYmFzZSgpO1xuXHQvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIG9wdGlvbnMgaGFzaCBhIHByb3BlcnR5IGRpcmVjdGx5IG9uIHRoZSBuZXcgaW5zdGFuY2Vcblx0Ly8gb3RoZXJ3aXNlIHdlJ2xsIG1vZGlmeSB0aGUgb3B0aW9ucyBoYXNoIG9uIHRoZSBwcm90b3R5cGUgdGhhdCB3ZSdyZVxuXHQvLyBpbmhlcml0aW5nIGZyb21cblx0YmFzZVByb3RvdHlwZS5vcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgYmFzZVByb3RvdHlwZS5vcHRpb25zICk7XG5cdCQuZWFjaCggcHJvdG90eXBlLCBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0aWYgKCAhJC5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cHJveGllZFByb3RvdHlwZVsgcHJvcCBdID0gdmFsdWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHByb3hpZWRQcm90b3R5cGVbIHByb3AgXSA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBfc3VwZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gYmFzZS5wcm90b3R5cGVbIHByb3AgXS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdF9zdXBlckFwcGx5ID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJhc2UucHJvdG90eXBlWyBwcm9wIF0uYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHRcdFx0fTtcblx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIF9fc3VwZXIgPSB0aGlzLl9zdXBlcixcblx0XHRcdFx0XHRfX3N1cGVyQXBwbHkgPSB0aGlzLl9zdXBlckFwcGx5LFxuXHRcdFx0XHRcdHJldHVyblZhbHVlO1xuXG5cdFx0XHRcdHRoaXMuX3N1cGVyID0gX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX3N1cGVyQXBwbHk7XG5cblx0XHRcdFx0cmV0dXJuVmFsdWUgPSB2YWx1ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cblx0XHRcdFx0dGhpcy5fc3VwZXIgPSBfX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX19zdXBlckFwcGx5O1xuXG5cdFx0XHRcdHJldHVybiByZXR1cm5WYWx1ZTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0fSk7XG5cdGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQud2lkZ2V0LmV4dGVuZCggYmFzZVByb3RvdHlwZSwge1xuXHRcdC8vIFRPRE86IHJlbW92ZSBzdXBwb3J0IGZvciB3aWRnZXRFdmVudFByZWZpeFxuXHRcdC8vIGFsd2F5cyB1c2UgdGhlIG5hbWUgKyBhIGNvbG9uIGFzIHRoZSBwcmVmaXgsIGUuZy4sIGRyYWdnYWJsZTpzdGFydFxuXHRcdC8vIGRvbid0IHByZWZpeCBmb3Igd2lkZ2V0cyB0aGF0IGFyZW4ndCBET00tYmFzZWRcblx0XHR3aWRnZXRFdmVudFByZWZpeDogZXhpc3RpbmdDb25zdHJ1Y3RvciA/IGJhc2VQcm90b3R5cGUud2lkZ2V0RXZlbnRQcmVmaXggOiBuYW1lXG5cdH0sIHByb3hpZWRQcm90b3R5cGUsIHtcblx0XHRjb25zdHJ1Y3RvcjogY29uc3RydWN0b3IsXG5cdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2UsXG5cdFx0d2lkZ2V0TmFtZTogbmFtZSxcblx0XHR3aWRnZXRGdWxsTmFtZTogZnVsbE5hbWVcblx0fSk7XG5cblx0Ly8gSWYgdGhpcyB3aWRnZXQgaXMgYmVpbmcgcmVkZWZpbmVkIHRoZW4gd2UgbmVlZCB0byBmaW5kIGFsbCB3aWRnZXRzIHRoYXRcblx0Ly8gYXJlIGluaGVyaXRpbmcgZnJvbSBpdCBhbmQgcmVkZWZpbmUgYWxsIG9mIHRoZW0gc28gdGhhdCB0aGV5IGluaGVyaXQgZnJvbVxuXHQvLyB0aGUgbmV3IHZlcnNpb24gb2YgdGhpcyB3aWRnZXQuIFdlJ3JlIGVzc2VudGlhbGx5IHRyeWluZyB0byByZXBsYWNlIG9uZVxuXHQvLyBsZXZlbCBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuXHRpZiAoIGV4aXN0aW5nQ29uc3RydWN0b3IgKSB7XG5cdFx0JC5lYWNoKCBleGlzdGluZ0NvbnN0cnVjdG9yLl9jaGlsZENvbnN0cnVjdG9ycywgZnVuY3Rpb24oIGksIGNoaWxkICkge1xuXHRcdFx0dmFyIGNoaWxkUHJvdG90eXBlID0gY2hpbGQucHJvdG90eXBlO1xuXG5cdFx0XHQvLyByZWRlZmluZSB0aGUgY2hpbGQgd2lkZ2V0IHVzaW5nIHRoZSBzYW1lIHByb3RvdHlwZSB0aGF0IHdhc1xuXHRcdFx0Ly8gb3JpZ2luYWxseSB1c2VkLCBidXQgaW5oZXJpdCBmcm9tIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGUgYmFzZVxuXHRcdFx0JC53aWRnZXQoIGNoaWxkUHJvdG90eXBlLm5hbWVzcGFjZSArIFwiLlwiICsgY2hpbGRQcm90b3R5cGUud2lkZ2V0TmFtZSwgY29uc3RydWN0b3IsIGNoaWxkLl9wcm90byApO1xuXHRcdH0pO1xuXHRcdC8vIHJlbW92ZSB0aGUgbGlzdCBvZiBleGlzdGluZyBjaGlsZCBjb25zdHJ1Y3RvcnMgZnJvbSB0aGUgb2xkIGNvbnN0cnVjdG9yXG5cdFx0Ly8gc28gdGhlIG9sZCBjaGlsZCBjb25zdHJ1Y3RvcnMgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkXG5cdFx0ZGVsZXRlIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzO1xuXHR9IGVsc2Uge1xuXHRcdGJhc2UuX2NoaWxkQ29uc3RydWN0b3JzLnB1c2goIGNvbnN0cnVjdG9yICk7XG5cdH1cblxuXHQkLndpZGdldC5icmlkZ2UoIG5hbWUsIGNvbnN0cnVjdG9yICk7XG59O1xuXG4kLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHR2YXIgaW5wdXQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKSxcblx0XHRpbnB1dEluZGV4ID0gMCxcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHRrZXksXG5cdFx0dmFsdWU7XG5cdGZvciAoIDsgaW5wdXRJbmRleCA8IGlucHV0TGVuZ3RoOyBpbnB1dEluZGV4KysgKSB7XG5cdFx0Zm9yICgga2V5IGluIGlucHV0WyBpbnB1dEluZGV4IF0gKSB7XG5cdFx0XHR2YWx1ZSA9IGlucHV0WyBpbnB1dEluZGV4IF1bIGtleSBdO1xuXHRcdFx0aWYgKCBpbnB1dFsgaW5wdXRJbmRleCBdLmhhc093blByb3BlcnR5KCBrZXkgKSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQvLyBDbG9uZSBvYmplY3RzXG5cdFx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRcdHRhcmdldFsga2V5IF0gPSAkLmlzUGxhaW5PYmplY3QoIHRhcmdldFsga2V5IF0gKSA/XG5cdFx0XHRcdFx0XHQkLndpZGdldC5leHRlbmQoIHt9LCB0YXJnZXRbIGtleSBdLCB2YWx1ZSApIDpcblx0XHRcdFx0XHRcdC8vIERvbid0IGV4dGVuZCBzdHJpbmdzLCBhcnJheXMsIGV0Yy4gd2l0aCBvYmplY3RzXG5cdFx0XHRcdFx0XHQkLndpZGdldC5leHRlbmQoIHt9LCB2YWx1ZSApO1xuXHRcdFx0XHQvLyBDb3B5IGV2ZXJ5dGhpbmcgZWxzZSBieSByZWZlcmVuY2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0YXJnZXRbIGtleSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbiQud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uKCBuYW1lLCBvYmplY3QgKSB7XG5cdHZhciBmdWxsTmFtZSA9IG9iamVjdC5wcm90b3R5cGUud2lkZ2V0RnVsbE5hbWUgfHwgbmFtZTtcblx0JC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIGlzTWV0aG9kQ2FsbCA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLFxuXHRcdFx0cmV0dXJuVmFsdWUgPSB0aGlzO1xuXG5cdFx0Ly8gYWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0XG5cdFx0b3B0aW9ucyA9ICFpc01ldGhvZENhbGwgJiYgYXJncy5sZW5ndGggP1xuXHRcdFx0JC53aWRnZXQuZXh0ZW5kLmFwcGx5KCBudWxsLCBbIG9wdGlvbnMgXS5jb25jYXQoYXJncykgKSA6XG5cdFx0XHRvcHRpb25zO1xuXG5cdFx0aWYgKCBpc01ldGhvZENhbGwgKSB7XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBtZXRob2RWYWx1ZSxcblx0XHRcdFx0XHRpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTtcblx0XHRcdFx0aWYgKCAhaW5zdGFuY2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIiArIG5hbWUgKyBcIiBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgXCIgK1xuXHRcdFx0XHRcdFx0XCJhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJ1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KCAwICkgPT09IFwiX1wiICkge1xuXHRcdFx0XHRcdHJldHVybiAkLmVycm9yKCBcIm5vIHN1Y2ggbWV0aG9kICdcIiArIG9wdGlvbnMgKyBcIicgZm9yIFwiICsgbmFtZSArIFwiIHdpZGdldCBpbnN0YW5jZVwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWV0aG9kVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xuXHRcdFx0XHRpZiAoIG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiBtZXRob2RWYWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVyblZhbHVlID0gbWV0aG9kVmFsdWUgJiYgbWV0aG9kVmFsdWUuanF1ZXJ5ID9cblx0XHRcdFx0XHRcdHJldHVyblZhbHVlLnB1c2hTdGFjayggbWV0aG9kVmFsdWUuZ2V0KCkgKSA6XG5cdFx0XHRcdFx0XHRtZXRob2RWYWx1ZTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTtcblx0XHRcdFx0aWYgKCBpbnN0YW5jZSApIHtcblx0XHRcdFx0XHRpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKS5faW5pdCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQuZGF0YSggdGhpcywgZnVsbE5hbWUsIG5ldyBvYmplY3QoIG9wdGlvbnMsIHRoaXMgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdH07XG59O1xuXG4kLldpZGdldCA9IGZ1bmN0aW9uKCAvKiBvcHRpb25zLCBlbGVtZW50ICovICkge307XG4kLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTtcblxuJC5XaWRnZXQucHJvdG90eXBlID0ge1xuXHR3aWRnZXROYW1lOiBcIndpZGdldFwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGRpdj5cIixcblx0b3B0aW9uczoge1xuXHRcdGRpc2FibGVkOiBmYWxzZSxcblxuXHRcdC8vIGNhbGxiYWNrc1xuXHRcdGNyZWF0ZTogbnVsbFxuXHR9LFxuXHRfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHtcblx0XHRlbGVtZW50ID0gJCggZWxlbWVudCB8fCB0aGlzLmRlZmF1bHRFbGVtZW50IHx8IHRoaXMgKVsgMCBdO1xuXHRcdHRoaXMuZWxlbWVudCA9ICQoIGVsZW1lbnQgKTtcblx0XHR0aGlzLnV1aWQgPSB1dWlkKys7XG5cdFx0dGhpcy5ldmVudE5hbWVzcGFjZSA9IFwiLlwiICsgdGhpcy53aWRnZXROYW1lICsgdGhpcy51dWlkO1xuXHRcdHRoaXMub3B0aW9ucyA9ICQud2lkZ2V0LmV4dGVuZCgge30sXG5cdFx0XHR0aGlzLm9wdGlvbnMsXG5cdFx0XHR0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksXG5cdFx0XHRvcHRpb25zICk7XG5cblx0XHR0aGlzLmJpbmRpbmdzID0gJCgpO1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gJCgpO1xuXHRcdHRoaXMuZm9jdXNhYmxlID0gJCgpO1xuXG5cdFx0aWYgKCBlbGVtZW50ICE9PSB0aGlzICkge1xuXHRcdFx0JC5kYXRhKCBlbGVtZW50LCB0aGlzLndpZGdldEZ1bGxOYW1lLCB0aGlzICk7XG5cdFx0XHR0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdHJlbW92ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuZG9jdW1lbnQgPSAkKCBlbGVtZW50LnN0eWxlID9cblx0XHRcdFx0Ly8gZWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50XG5cdFx0XHRcdGVsZW1lbnQub3duZXJEb2N1bWVudCA6XG5cdFx0XHRcdC8vIGVsZW1lbnQgaXMgd2luZG93IG9yIGRvY3VtZW50XG5cdFx0XHRcdGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCApO1xuXHRcdFx0dGhpcy53aW5kb3cgPSAkKCB0aGlzLmRvY3VtZW50WzBdLmRlZmF1bHRWaWV3IHx8IHRoaXMuZG9jdW1lbnRbMF0ucGFyZW50V2luZG93ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY3JlYXRlKCk7XG5cdFx0dGhpcy5fdHJpZ2dlciggXCJjcmVhdGVcIiwgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkgKTtcblx0XHR0aGlzLl9pbml0KCk7XG5cdH0sXG5cdF9nZXRDcmVhdGVPcHRpb25zOiAkLm5vb3AsXG5cdF9nZXRDcmVhdGVFdmVudERhdGE6ICQubm9vcCxcblx0X2NyZWF0ZTogJC5ub29wLFxuXHRfaW5pdDogJC5ub29wLFxuXG5cdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2Rlc3Ryb3koKTtcblx0XHQvLyB3ZSBjYW4gcHJvYmFibHkgcmVtb3ZlIHRoZSB1bmJpbmQgY2FsbHMgaW4gMi4wXG5cdFx0Ly8gYWxsIGV2ZW50IGJpbmRpbmdzIHNob3VsZCBnbyB0aHJvdWdoIHRoaXMuX29uKClcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKVxuXHRcdFx0Ly8gMS45IEJDIGZvciAjNzgxMFxuXHRcdFx0Ly8gVE9ETyByZW1vdmUgZHVhbCBzdG9yYWdlXG5cdFx0XHQucmVtb3ZlRGF0YSggdGhpcy53aWRnZXROYW1lIClcblx0XHRcdC5yZW1vdmVEYXRhKCB0aGlzLndpZGdldEZ1bGxOYW1lIClcblx0XHRcdC8vIHN1cHBvcnQ6IGpxdWVyeSA8MS42LjNcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk0MTNcblx0XHRcdC5yZW1vdmVEYXRhKCAkLmNhbWVsQ2FzZSggdGhpcy53aWRnZXRGdWxsTmFtZSApICk7XG5cdFx0dGhpcy53aWRnZXQoKVxuXHRcdFx0LnVuYmluZCggdGhpcy5ldmVudE5hbWVzcGFjZSApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWRpc2FibGVkXCIgKVxuXHRcdFx0LnJlbW92ZUNsYXNzKFxuXHRcdFx0XHR0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWQgXCIgK1xuXHRcdFx0XHRcInVpLXN0YXRlLWRpc2FibGVkXCIgKTtcblxuXHRcdC8vIGNsZWFuIHVwIGV2ZW50cyBhbmQgc3RhdGVzXG5cdFx0dGhpcy5iaW5kaW5ncy51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKTtcblx0XHR0aGlzLmhvdmVyYWJsZS5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0dGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHR9LFxuXHRfZGVzdHJveTogJC5ub29wLFxuXG5cdHdpZGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fSxcblxuXHRvcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBvcHRpb25zID0ga2V5LFxuXHRcdFx0cGFydHMsXG5cdFx0XHRjdXJPcHRpb24sXG5cdFx0XHRpO1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAwICkge1xuXHRcdFx0Ly8gZG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoXG5cdFx0XHRyZXR1cm4gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Ly8gaGFuZGxlIG5lc3RlZCBrZXlzLCBlLmcuLCBcImZvby5iYXJcIiA9PiB7IGZvbzogeyBiYXI6IF9fXyB9IH1cblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdHBhcnRzID0ga2V5LnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0a2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHRcdGlmICggcGFydHMubGVuZ3RoICkge1xuXHRcdFx0XHRjdXJPcHRpb24gPSBvcHRpb25zWyBrZXkgXSA9ICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9uc1sga2V5IF0gKTtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKysgKSB7XG5cdFx0XHRcdFx0Y3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF0gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXSB8fCB7fTtcblx0XHRcdFx0XHRjdXJPcHRpb24gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRrZXkgPSBwYXJ0cy5wb3AoKTtcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBjdXJPcHRpb25bIGtleSBdID09PSB1bmRlZmluZWQgPyBudWxsIDogY3VyT3B0aW9uWyBrZXkgXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJPcHRpb25bIGtleSBdID0gdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uc1sga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0aGlzLm9wdGlvbnNbIGtleSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fc2V0T3B0aW9ucyggb3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cdF9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIga2V5O1xuXG5cdFx0Zm9yICgga2V5IGluIG9wdGlvbnMgKSB7XG5cdFx0XHR0aGlzLl9zZXRPcHRpb24oIGtleSwgb3B0aW9uc1sga2V5IF0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdHRoaXMud2lkZ2V0KClcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWQgdWktc3RhdGUtZGlzYWJsZWRcIiwgISF2YWx1ZSApXG5cdFx0XHRcdC5hdHRyKCBcImFyaWEtZGlzYWJsZWRcIiwgdmFsdWUgKTtcblx0XHRcdHRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdHRoaXMuZm9jdXNhYmxlLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRlbmFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZXRPcHRpb24oIFwiZGlzYWJsZWRcIiwgZmFsc2UgKTtcblx0fSxcblx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NldE9wdGlvbiggXCJkaXNhYmxlZFwiLCB0cnVlICk7XG5cdH0sXG5cblx0X29uOiBmdW5jdGlvbiggc3VwcHJlc3NEaXNhYmxlZENoZWNrLCBlbGVtZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgZGVsZWdhdGVFbGVtZW50LFxuXHRcdFx0aW5zdGFuY2UgPSB0aGlzO1xuXG5cdFx0Ly8gbm8gc3VwcHJlc3NEaXNhYmxlZENoZWNrIGZsYWcsIHNodWZmbGUgYXJndW1lbnRzXG5cdFx0aWYgKCB0eXBlb2Ygc3VwcHJlc3NEaXNhYmxlZENoZWNrICE9PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdGhhbmRsZXJzID0gZWxlbWVudDtcblx0XHRcdGVsZW1lbnQgPSBzdXBwcmVzc0Rpc2FibGVkQ2hlY2s7XG5cdFx0XHRzdXBwcmVzc0Rpc2FibGVkQ2hlY2sgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBubyBlbGVtZW50IGFyZ3VtZW50LCBzaHVmZmxlIGFuZCB1c2UgdGhpcy5lbGVtZW50XG5cdFx0aWYgKCAhaGFuZGxlcnMgKSB7XG5cdFx0XHRoYW5kbGVycyA9IGVsZW1lbnQ7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0ZGVsZWdhdGVFbGVtZW50ID0gdGhpcy53aWRnZXQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYWNjZXB0IHNlbGVjdG9ycywgRE9NIGVsZW1lbnRzXG5cdFx0XHRlbGVtZW50ID0gZGVsZWdhdGVFbGVtZW50ID0gJCggZWxlbWVudCApO1xuXHRcdFx0dGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuYWRkKCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0JC5lYWNoKCBoYW5kbGVycywgZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVyICkge1xuXHRcdFx0ZnVuY3Rpb24gaGFuZGxlclByb3h5KCkge1xuXHRcdFx0XHQvLyBhbGxvdyB3aWRnZXRzIHRvIGN1c3RvbWl6ZSB0aGUgZGlzYWJsZWQgaGFuZGxpbmdcblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW5cblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBjbGFzcyBhcyBtZXRob2QgZm9yIGRpc2FibGluZyBpbmRpdmlkdWFsIHBhcnRzXG5cdFx0XHRcdGlmICggIXN1cHByZXNzRGlzYWJsZWRDaGVjayAmJlxuXHRcdFx0XHRcdFx0KCBpbnN0YW5jZS5vcHRpb25zLmRpc2FibGVkID09PSB0cnVlIHx8XG5cdFx0XHRcdFx0XHRcdCQoIHRoaXMgKS5oYXNDbGFzcyggXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICggdHlwZW9mIGhhbmRsZXIgPT09IFwic3RyaW5nXCIgPyBpbnN0YW5jZVsgaGFuZGxlciBdIDogaGFuZGxlciApXG5cdFx0XHRcdFx0LmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvcHkgdGhlIGd1aWQgc28gZGlyZWN0IHVuYmluZGluZyB3b3Jrc1xuXHRcdFx0aWYgKCB0eXBlb2YgaGFuZGxlciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0aGFuZGxlclByb3h5Lmd1aWQgPSBoYW5kbGVyLmd1aWQgPVxuXHRcdFx0XHRcdGhhbmRsZXIuZ3VpZCB8fCBoYW5kbGVyUHJveHkuZ3VpZCB8fCAkLmd1aWQrKztcblx0XHRcdH1cblxuXHRcdFx0dmFyIG1hdGNoID0gZXZlbnQubWF0Y2goIC9eKFxcdyspXFxzKiguKikkLyApLFxuXHRcdFx0XHRldmVudE5hbWUgPSBtYXRjaFsxXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlLFxuXHRcdFx0XHRzZWxlY3RvciA9IG1hdGNoWzJdO1xuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0ZGVsZWdhdGVFbGVtZW50LmRlbGVnYXRlKCBzZWxlY3RvciwgZXZlbnROYW1lLCBoYW5kbGVyUHJveHkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnQuYmluZCggZXZlbnROYW1lLCBoYW5kbGVyUHJveHkgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfb2ZmOiBmdW5jdGlvbiggZWxlbWVudCwgZXZlbnROYW1lICkge1xuXHRcdGV2ZW50TmFtZSA9IChldmVudE5hbWUgfHwgXCJcIikuc3BsaXQoIFwiIFwiICkuam9pbiggdGhpcy5ldmVudE5hbWVzcGFjZSArIFwiIFwiICkgKyB0aGlzLmV2ZW50TmFtZXNwYWNlO1xuXHRcdGVsZW1lbnQudW5iaW5kKCBldmVudE5hbWUgKS51bmRlbGVnYXRlKCBldmVudE5hbWUgKTtcblx0fSxcblxuXHRfZGVsYXk6IGZ1bmN0aW9uKCBoYW5kbGVyLCBkZWxheSApIHtcblx0XHRmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7XG5cdFx0XHRyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gXCJzdHJpbmdcIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyIClcblx0XHRcdFx0LmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdHZhciBpbnN0YW5jZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApO1xuXHR9LFxuXG5cdF9ob3ZlcmFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gdGhpcy5ob3ZlcmFibGUuYWRkKCBlbGVtZW50ICk7XG5cdFx0dGhpcy5fb24oIGVsZW1lbnQsIHtcblx0XHRcdG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0JCggZXZlbnQuY3VycmVudFRhcmdldCApLmFkZENsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdH0sXG5cdFx0XHRtb3VzZWxlYXZlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdCQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0X2ZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQoIGVsZW1lbnQgKTtcblx0XHR0aGlzLl9vbiggZWxlbWVudCwge1xuXHRcdFx0Zm9jdXNpbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHQkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuYWRkQ2xhc3MoIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHRcdFx0fSxcblx0XHRcdGZvY3Vzb3V0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdCQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1mb2N1c1wiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0X3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHtcblx0XHR2YXIgcHJvcCwgb3JpZyxcblx0XHRcdGNhbGxiYWNrID0gdGhpcy5vcHRpb25zWyB0eXBlIF07XG5cblx0XHRkYXRhID0gZGF0YSB8fCB7fTtcblx0XHRldmVudCA9ICQuRXZlbnQoIGV2ZW50ICk7XG5cdFx0ZXZlbnQudHlwZSA9ICggdHlwZSA9PT0gdGhpcy53aWRnZXRFdmVudFByZWZpeCA/XG5cdFx0XHR0eXBlIDpcblx0XHRcdHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggKyB0eXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHQvLyB0aGUgb3JpZ2luYWwgZXZlbnQgbWF5IGNvbWUgZnJvbSBhbnkgZWxlbWVudFxuXHRcdC8vIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHRhcmdldCBvbiB0aGUgbmV3IGV2ZW50XG5cdFx0ZXZlbnQudGFyZ2V0ID0gdGhpcy5lbGVtZW50WyAwIF07XG5cblx0XHQvLyBjb3B5IG9yaWdpbmFsIGV2ZW50IHByb3BlcnRpZXMgb3ZlciB0byB0aGUgbmV3IGV2ZW50XG5cdFx0b3JpZyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdFx0aWYgKCBvcmlnICkge1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRpZiAoICEoIHByb3AgaW4gZXZlbnQgKSApIHtcblx0XHRcdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ1sgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIGV2ZW50LCBkYXRhICk7XG5cdFx0cmV0dXJuICEoICQuaXNGdW5jdGlvbiggY2FsbGJhY2sgKSAmJlxuXHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFswXSwgWyBldmVudCBdLmNvbmNhdCggZGF0YSApICkgPT09IGZhbHNlIHx8XG5cdFx0XHRldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApO1xuXHR9XG59O1xuXG4kLmVhY2goIHsgc2hvdzogXCJmYWRlSW5cIiwgaGlkZTogXCJmYWRlT3V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgZGVmYXVsdEVmZmVjdCApIHtcblx0JC5XaWRnZXQucHJvdG90eXBlWyBcIl9cIiArIG1ldGhvZCBdID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvcHRpb25zID0geyBlZmZlY3Q6IG9wdGlvbnMgfTtcblx0XHR9XG5cdFx0dmFyIGhhc09wdGlvbnMsXG5cdFx0XHRlZmZlY3ROYW1lID0gIW9wdGlvbnMgP1xuXHRcdFx0XHRtZXRob2QgOlxuXHRcdFx0XHRvcHRpb25zID09PSB0cnVlIHx8IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID9cblx0XHRcdFx0XHRkZWZhdWx0RWZmZWN0IDpcblx0XHRcdFx0XHRvcHRpb25zLmVmZmVjdCB8fCBkZWZhdWx0RWZmZWN0O1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9O1xuXHRcdH1cblx0XHRoYXNPcHRpb25zID0gISQuaXNFbXB0eU9iamVjdCggb3B0aW9ucyApO1xuXHRcdG9wdGlvbnMuY29tcGxldGUgPSBjYWxsYmFjaztcblx0XHRpZiAoIG9wdGlvbnMuZGVsYXkgKSB7XG5cdFx0XHRlbGVtZW50LmRlbGF5KCBvcHRpb25zLmRlbGF5ICk7XG5cdFx0fVxuXHRcdGlmICggaGFzT3B0aW9ucyAmJiAkLmVmZmVjdHMgJiYgJC5lZmZlY3RzLmVmZmVjdFsgZWZmZWN0TmFtZSBdICkge1xuXHRcdFx0ZWxlbWVudFsgbWV0aG9kIF0oIG9wdGlvbnMgKTtcblx0XHR9IGVsc2UgaWYgKCBlZmZlY3ROYW1lICE9PSBtZXRob2QgJiYgZWxlbWVudFsgZWZmZWN0TmFtZSBdICkge1xuXHRcdFx0ZWxlbWVudFsgZWZmZWN0TmFtZSBdKCBvcHRpb25zLmR1cmF0aW9uLCBvcHRpb25zLmVhc2luZywgY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudC5xdWV1ZShmdW5jdGlvbiggbmV4dCApIHtcblx0XHRcdFx0JCggdGhpcyApWyBtZXRob2QgXSgpO1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGVsZW1lbnRbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcbn0pO1xuXG59KSggalF1ZXJ5ICk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxudmFyIG1vdXNlSGFuZGxlZCA9IGZhbHNlO1xuJCggZG9jdW1lbnQgKS5tb3VzZXVwKCBmdW5jdGlvbigpIHtcblx0bW91c2VIYW5kbGVkID0gZmFsc2U7XG59KTtcblxuJC53aWRnZXQoXCJ1aS5tb3VzZVwiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRjYW5jZWw6IFwiaW5wdXQsdGV4dGFyZWEsYnV0dG9uLHNlbGVjdCxvcHRpb25cIixcblx0XHRkaXN0YW5jZTogMSxcblx0XHRkZWxheTogMFxuXHR9LFxuXHRfbW91c2VJbml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5iaW5kKFwibW91c2Vkb3duLlwiK3RoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRoYXQuX21vdXNlRG93bihldmVudCk7XG5cdFx0XHR9KVxuXHRcdFx0LmJpbmQoXCJjbGljay5cIit0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdGlmICh0cnVlID09PSAkLmRhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKSkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YShldmVudC50YXJnZXQsIHRoYXQud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIpO1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblx0fSxcblxuXHQvLyBUT0RPOiBtYWtlIHN1cmUgZGVzdHJveWluZyBvbmUgaW5zdGFuY2Ugb2YgbW91c2UgZG9lc24ndCBtZXNzIHdpdGhcblx0Ly8gb3RoZXIgaW5zdGFuY2VzIG9mIG1vdXNlXG5cdF9tb3VzZURlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC51bmJpbmQoXCIuXCIrdGhpcy53aWRnZXROYW1lKTtcblx0XHRpZiAoIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlICkge1xuXHRcdFx0JChkb2N1bWVudClcblx0XHRcdFx0LnVuYmluZChcIm1vdXNlbW92ZS5cIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKVxuXHRcdFx0XHQudW5iaW5kKFwibW91c2V1cC5cIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7XG5cdFx0fVxuXHR9LFxuXG5cdF9tb3VzZURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0Ly8gZG9uJ3QgbGV0IG1vcmUgdGhhbiBvbmUgd2lkZ2V0IGhhbmRsZSBtb3VzZVN0YXJ0XG5cdFx0aWYoIG1vdXNlSGFuZGxlZCApIHsgcmV0dXJuOyB9XG5cblx0XHQvLyB3ZSBtYXkgaGF2ZSBtaXNzZWQgbW91c2V1cCAob3V0IG9mIHdpbmRvdylcblx0XHQodGhpcy5fbW91c2VTdGFydGVkICYmIHRoaXMuX21vdXNlVXAoZXZlbnQpKTtcblxuXHRcdHRoaXMuX21vdXNlRG93bkV2ZW50ID0gZXZlbnQ7XG5cblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRidG5Jc0xlZnQgPSAoZXZlbnQud2hpY2ggPT09IDEpLFxuXHRcdFx0Ly8gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIHdvcmtzIGFyb3VuZCBhIGJ1ZyBpbiBJRSA4IHdpdGhcblx0XHRcdC8vIGRpc2FibGVkIGlucHV0cyAoIzc2MjApXG5cdFx0XHRlbElzQ2FuY2VsID0gKHR5cGVvZiB0aGlzLm9wdGlvbnMuY2FuY2VsID09PSBcInN0cmluZ1wiICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA/ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5jYW5jZWwpLmxlbmd0aCA6IGZhbHNlKTtcblx0XHRpZiAoIWJ0bklzTGVmdCB8fCBlbElzQ2FuY2VsIHx8ICF0aGlzLl9tb3VzZUNhcHR1cmUoZXZlbnQpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHR0aGlzLm1vdXNlRGVsYXlNZXQgPSAhdGhpcy5vcHRpb25zLmRlbGF5O1xuXHRcdGlmICghdGhpcy5tb3VzZURlbGF5TWV0KSB7XG5cdFx0XHR0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGF0Lm1vdXNlRGVsYXlNZXQgPSB0cnVlO1xuXHRcdFx0fSwgdGhpcy5vcHRpb25zLmRlbGF5KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fbW91c2VEaXN0YW5jZU1ldChldmVudCkgJiYgdGhpcy5fbW91c2VEZWxheU1ldChldmVudCkpIHtcblx0XHRcdHRoaXMuX21vdXNlU3RhcnRlZCA9ICh0aGlzLl9tb3VzZVN0YXJ0KGV2ZW50KSAhPT0gZmFsc2UpO1xuXHRcdFx0aWYgKCF0aGlzLl9tb3VzZVN0YXJ0ZWQpIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2xpY2sgZXZlbnQgbWF5IG5ldmVyIGhhdmUgZmlyZWQgKEdlY2tvICYgT3BlcmEpXG5cdFx0aWYgKHRydWUgPT09ICQuZGF0YShldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIpKSB7XG5cdFx0XHQkLnJlbW92ZURhdGEoZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKTtcblx0XHR9XG5cblx0XHQvLyB0aGVzZSBkZWxlZ2F0ZXMgYXJlIHJlcXVpcmVkIHRvIGtlZXAgY29udGV4dFxuXHRcdHRoaXMuX21vdXNlTW92ZURlbGVnYXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdHJldHVybiB0aGF0Ll9tb3VzZU1vdmUoZXZlbnQpO1xuXHRcdH07XG5cdFx0dGhpcy5fbW91c2VVcERlbGVnYXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdHJldHVybiB0aGF0Ll9tb3VzZVVwKGV2ZW50KTtcblx0XHR9O1xuXHRcdCQoZG9jdW1lbnQpXG5cdFx0XHQuYmluZChcIm1vdXNlbW92ZS5cIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKVxuXHRcdFx0LmJpbmQoXCJtb3VzZXVwLlwiK3RoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKTtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRtb3VzZUhhbmRsZWQgPSB0cnVlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdF9tb3VzZU1vdmU6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0Ly8gSUUgbW91c2V1cCBjaGVjayAtIG1vdXNldXAgaGFwcGVuZWQgd2hlbiBtb3VzZSB3YXMgb3V0IG9mIHdpbmRvd1xuXHRcdGlmICgkLnVpLmllICYmICggIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA5ICkgJiYgIWV2ZW50LmJ1dHRvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuX21vdXNlVXAoZXZlbnQpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9tb3VzZVN0YXJ0ZWQpIHtcblx0XHRcdHRoaXMuX21vdXNlRHJhZyhldmVudCk7XG5cdFx0XHRyZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fbW91c2VEaXN0YW5jZU1ldChldmVudCkgJiYgdGhpcy5fbW91c2VEZWxheU1ldChldmVudCkpIHtcblx0XHRcdHRoaXMuX21vdXNlU3RhcnRlZCA9XG5cdFx0XHRcdCh0aGlzLl9tb3VzZVN0YXJ0KHRoaXMuX21vdXNlRG93bkV2ZW50LCBldmVudCkgIT09IGZhbHNlKTtcblx0XHRcdCh0aGlzLl9tb3VzZVN0YXJ0ZWQgPyB0aGlzLl9tb3VzZURyYWcoZXZlbnQpIDogdGhpcy5fbW91c2VVcChldmVudCkpO1xuXHRcdH1cblxuXHRcdHJldHVybiAhdGhpcy5fbW91c2VTdGFydGVkO1xuXHR9LFxuXG5cdF9tb3VzZVVwOiBmdW5jdGlvbihldmVudCkge1xuXHRcdCQoZG9jdW1lbnQpXG5cdFx0XHQudW5iaW5kKFwibW91c2Vtb3ZlLlwiK3RoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpXG5cdFx0XHQudW5iaW5kKFwibW91c2V1cC5cIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7XG5cblx0XHRpZiAodGhpcy5fbW91c2VTdGFydGVkKSB7XG5cdFx0XHR0aGlzLl9tb3VzZVN0YXJ0ZWQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fbW91c2VEb3duRXZlbnQudGFyZ2V0KSB7XG5cdFx0XHRcdCQuZGF0YShldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIsIHRydWUpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9tb3VzZVN0b3AoZXZlbnQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VEaXN0YW5jZU1ldDogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRyZXR1cm4gKE1hdGgubWF4KFxuXHRcdFx0XHRNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWCAtIGV2ZW50LnBhZ2VYKSxcblx0XHRcdFx0TWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVkgLSBldmVudC5wYWdlWSlcblx0XHRcdCkgPj0gdGhpcy5vcHRpb25zLmRpc3RhbmNlXG5cdFx0KTtcblx0fSxcblxuXHRfbW91c2VEZWxheU1ldDogZnVuY3Rpb24oLyogZXZlbnQgKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZURlbGF5TWV0O1xuXHR9LFxuXG5cdC8vIFRoZXNlIGFyZSBwbGFjZWhvbGRlciBtZXRob2RzLCB0byBiZSBvdmVycmlkZW4gYnkgZXh0ZW5kaW5nIHBsdWdpblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oLyogZXZlbnQgKi8pIHt9LFxuXHRfbW91c2VEcmFnOiBmdW5jdGlvbigvKiBldmVudCAqLykge30sXG5cdF9tb3VzZVN0b3A6IGZ1bmN0aW9uKC8qIGV2ZW50ICovKSB7fSxcblx0X21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oLyogZXZlbnQgKi8pIHsgcmV0dXJuIHRydWU7IH1cbn0pO1xuXG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7XG5cbiQudWkgPSAkLnVpIHx8IHt9O1xuXG52YXIgY2FjaGVkU2Nyb2xsYmFyV2lkdGgsXG5cdG1heCA9IE1hdGgubWF4LFxuXHRhYnMgPSBNYXRoLmFicyxcblx0cm91bmQgPSBNYXRoLnJvdW5kLFxuXHRyaG9yaXpvbnRhbCA9IC9sZWZ0fGNlbnRlcnxyaWdodC8sXG5cdHJ2ZXJ0aWNhbCA9IC90b3B8Y2VudGVyfGJvdHRvbS8sXG5cdHJvZmZzZXQgPSAvW1xcK1xcLV1cXGQrKFxcLltcXGRdKyk/JT8vLFxuXHRycG9zaXRpb24gPSAvXlxcdysvLFxuXHRycGVyY2VudCA9IC8lJC8sXG5cdF9wb3NpdGlvbiA9ICQuZm4ucG9zaXRpb247XG5cbmZ1bmN0aW9uIGdldE9mZnNldHMoIG9mZnNldHMsIHdpZHRoLCBoZWlnaHQgKSB7XG5cdHJldHVybiBbXG5cdFx0cGFyc2VGbG9hdCggb2Zmc2V0c1sgMCBdICkgKiAoIHJwZXJjZW50LnRlc3QoIG9mZnNldHNbIDAgXSApID8gd2lkdGggLyAxMDAgOiAxICksXG5cdFx0cGFyc2VGbG9hdCggb2Zmc2V0c1sgMSBdICkgKiAoIHJwZXJjZW50LnRlc3QoIG9mZnNldHNbIDEgXSApID8gaGVpZ2h0IC8gMTAwIDogMSApXG5cdF07XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ3NzKCBlbGVtZW50LCBwcm9wZXJ0eSApIHtcblx0cmV0dXJuIHBhcnNlSW50KCAkLmNzcyggZWxlbWVudCwgcHJvcGVydHkgKSwgMTAgKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb25zKCBlbGVtICkge1xuXHR2YXIgcmF3ID0gZWxlbVswXTtcblx0aWYgKCByYXcubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBlbGVtLndpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IGVsZW0uaGVpZ2h0KCksXG5cdFx0XHRvZmZzZXQ6IHsgdG9wOiAwLCBsZWZ0OiAwIH1cblx0XHR9O1xuXHR9XG5cdGlmICggJC5pc1dpbmRvdyggcmF3ICkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBlbGVtLndpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IGVsZW0uaGVpZ2h0KCksXG5cdFx0XHRvZmZzZXQ6IHsgdG9wOiBlbGVtLnNjcm9sbFRvcCgpLCBsZWZ0OiBlbGVtLnNjcm9sbExlZnQoKSB9XG5cdFx0fTtcblx0fVxuXHRpZiAoIHJhdy5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRoZWlnaHQ6IDAsXG5cdFx0XHRvZmZzZXQ6IHsgdG9wOiByYXcucGFnZVksIGxlZnQ6IHJhdy5wYWdlWCB9XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdHdpZHRoOiBlbGVtLm91dGVyV2lkdGgoKSxcblx0XHRoZWlnaHQ6IGVsZW0ub3V0ZXJIZWlnaHQoKSxcblx0XHRvZmZzZXQ6IGVsZW0ub2Zmc2V0KClcblx0fTtcbn1cblxuJC5wb3NpdGlvbiA9IHtcblx0c2Nyb2xsYmFyV2lkdGg6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggY2FjaGVkU2Nyb2xsYmFyV2lkdGggIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBjYWNoZWRTY3JvbGxiYXJXaWR0aDtcblx0XHR9XG5cdFx0dmFyIHcxLCB3Mixcblx0XHRcdGRpdiA9ICQoIFwiPGRpdiBzdHlsZT0nZGlzcGxheTpibG9jazt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OmhpZGRlbjsnPjxkaXYgc3R5bGU9J2hlaWdodDoxMDBweDt3aWR0aDphdXRvOyc+PC9kaXY+PC9kaXY+XCIgKSxcblx0XHRcdGlubmVyRGl2ID0gZGl2LmNoaWxkcmVuKClbMF07XG5cblx0XHQkKCBcImJvZHlcIiApLmFwcGVuZCggZGl2ICk7XG5cdFx0dzEgPSBpbm5lckRpdi5vZmZzZXRXaWR0aDtcblx0XHRkaXYuY3NzKCBcIm92ZXJmbG93XCIsIFwic2Nyb2xsXCIgKTtcblxuXHRcdHcyID0gaW5uZXJEaXYub2Zmc2V0V2lkdGg7XG5cblx0XHRpZiAoIHcxID09PSB3MiApIHtcblx0XHRcdHcyID0gZGl2WzBdLmNsaWVudFdpZHRoO1xuXHRcdH1cblxuXHRcdGRpdi5yZW1vdmUoKTtcblxuXHRcdHJldHVybiAoY2FjaGVkU2Nyb2xsYmFyV2lkdGggPSB3MSAtIHcyKTtcblx0fSxcblx0Z2V0U2Nyb2xsSW5mbzogZnVuY3Rpb24oIHdpdGhpbiApIHtcblx0XHR2YXIgb3ZlcmZsb3dYID0gd2l0aGluLmlzV2luZG93ID8gXCJcIiA6IHdpdGhpbi5lbGVtZW50LmNzcyggXCJvdmVyZmxvdy14XCIgKSxcblx0XHRcdG92ZXJmbG93WSA9IHdpdGhpbi5pc1dpbmRvdyA/IFwiXCIgOiB3aXRoaW4uZWxlbWVudC5jc3MoIFwib3ZlcmZsb3cteVwiICksXG5cdFx0XHRoYXNPdmVyZmxvd1ggPSBvdmVyZmxvd1ggPT09IFwic2Nyb2xsXCIgfHxcblx0XHRcdFx0KCBvdmVyZmxvd1ggPT09IFwiYXV0b1wiICYmIHdpdGhpbi53aWR0aCA8IHdpdGhpbi5lbGVtZW50WzBdLnNjcm9sbFdpZHRoICksXG5cdFx0XHRoYXNPdmVyZmxvd1kgPSBvdmVyZmxvd1kgPT09IFwic2Nyb2xsXCIgfHxcblx0XHRcdFx0KCBvdmVyZmxvd1kgPT09IFwiYXV0b1wiICYmIHdpdGhpbi5oZWlnaHQgPCB3aXRoaW4uZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IGhhc092ZXJmbG93WCA/ICQucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKSA6IDAsXG5cdFx0XHRoZWlnaHQ6IGhhc092ZXJmbG93WSA/ICQucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKSA6IDBcblx0XHR9O1xuXHR9LFxuXHRnZXRXaXRoaW5JbmZvOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgd2l0aGluRWxlbWVudCA9ICQoIGVsZW1lbnQgfHwgd2luZG93ICksXG5cdFx0XHRpc1dpbmRvdyA9ICQuaXNXaW5kb3coIHdpdGhpbkVsZW1lbnRbMF0gKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZWxlbWVudDogd2l0aGluRWxlbWVudCxcblx0XHRcdGlzV2luZG93OiBpc1dpbmRvdyxcblx0XHRcdG9mZnNldDogd2l0aGluRWxlbWVudC5vZmZzZXQoKSB8fCB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuXHRcdFx0c2Nyb2xsTGVmdDogd2l0aGluRWxlbWVudC5zY3JvbGxMZWZ0KCksXG5cdFx0XHRzY3JvbGxUb3A6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHR3aWR0aDogaXNXaW5kb3cgPyB3aXRoaW5FbGVtZW50LndpZHRoKCkgOiB3aXRoaW5FbGVtZW50Lm91dGVyV2lkdGgoKSxcblx0XHRcdGhlaWdodDogaXNXaW5kb3cgPyB3aXRoaW5FbGVtZW50LmhlaWdodCgpIDogd2l0aGluRWxlbWVudC5vdXRlckhlaWdodCgpXG5cdFx0fTtcblx0fVxufTtcblxuJC5mbi5wb3NpdGlvbiA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRpZiAoICFvcHRpb25zIHx8ICFvcHRpb25zLm9mICkge1xuXHRcdHJldHVybiBfcG9zaXRpb24uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0Ly8gbWFrZSBhIGNvcHksIHdlIGRvbid0IHdhbnQgdG8gbW9kaWZ5IGFyZ3VtZW50c1xuXHRvcHRpb25zID0gJC5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIGF0T2Zmc2V0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0YXJnZXRPZmZzZXQsIGJhc2VQb3NpdGlvbiwgZGltZW5zaW9ucyxcblx0XHR0YXJnZXQgPSAkKCBvcHRpb25zLm9mICksXG5cdFx0d2l0aGluID0gJC5wb3NpdGlvbi5nZXRXaXRoaW5JbmZvKCBvcHRpb25zLndpdGhpbiApLFxuXHRcdHNjcm9sbEluZm8gPSAkLnBvc2l0aW9uLmdldFNjcm9sbEluZm8oIHdpdGhpbiApLFxuXHRcdGNvbGxpc2lvbiA9ICggb3B0aW9ucy5jb2xsaXNpb24gfHwgXCJmbGlwXCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRvZmZzZXRzID0ge307XG5cblx0ZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIHRhcmdldCApO1xuXHRpZiAoIHRhcmdldFswXS5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHQvLyBmb3JjZSBsZWZ0IHRvcCB0byBhbGxvdyBmbGlwcGluZ1xuXHRcdG9wdGlvbnMuYXQgPSBcImxlZnQgdG9wXCI7XG5cdH1cblx0dGFyZ2V0V2lkdGggPSBkaW1lbnNpb25zLndpZHRoO1xuXHR0YXJnZXRIZWlnaHQgPSBkaW1lbnNpb25zLmhlaWdodDtcblx0dGFyZ2V0T2Zmc2V0ID0gZGltZW5zaW9ucy5vZmZzZXQ7XG5cdC8vIGNsb25lIHRvIHJldXNlIG9yaWdpbmFsIHRhcmdldE9mZnNldCBsYXRlclxuXHRiYXNlUG9zaXRpb24gPSAkLmV4dGVuZCgge30sIHRhcmdldE9mZnNldCApO1xuXG5cdC8vIGZvcmNlIG15IGFuZCBhdCB0byBoYXZlIHZhbGlkIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHBvc2l0aW9uc1xuXHQvLyBpZiBhIHZhbHVlIGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2VudGVyXG5cdCQuZWFjaCggWyBcIm15XCIsIFwiYXRcIiBdLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zID0gKCBvcHRpb25zWyB0aGlzIF0gfHwgXCJcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRcdFx0aG9yaXpvbnRhbE9mZnNldCxcblx0XHRcdHZlcnRpY2FsT2Zmc2V0O1xuXG5cdFx0aWYgKCBwb3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRwb3MgPSByaG9yaXpvbnRhbC50ZXN0KCBwb3NbIDAgXSApID9cblx0XHRcdFx0cG9zLmNvbmNhdCggWyBcImNlbnRlclwiIF0gKSA6XG5cdFx0XHRcdHJ2ZXJ0aWNhbC50ZXN0KCBwb3NbIDAgXSApID9cblx0XHRcdFx0XHRbIFwiY2VudGVyXCIgXS5jb25jYXQoIHBvcyApIDpcblx0XHRcdFx0XHRbIFwiY2VudGVyXCIsIFwiY2VudGVyXCIgXTtcblx0XHR9XG5cdFx0cG9zWyAwIF0gPSByaG9yaXpvbnRhbC50ZXN0KCBwb3NbIDAgXSApID8gcG9zWyAwIF0gOiBcImNlbnRlclwiO1xuXHRcdHBvc1sgMSBdID0gcnZlcnRpY2FsLnRlc3QoIHBvc1sgMSBdICkgPyBwb3NbIDEgXSA6IFwiY2VudGVyXCI7XG5cblx0XHQvLyBjYWxjdWxhdGUgb2Zmc2V0c1xuXHRcdGhvcml6b250YWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMCBdICk7XG5cdFx0dmVydGljYWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMSBdICk7XG5cdFx0b2Zmc2V0c1sgdGhpcyBdID0gW1xuXHRcdFx0aG9yaXpvbnRhbE9mZnNldCA/IGhvcml6b250YWxPZmZzZXRbIDAgXSA6IDAsXG5cdFx0XHR2ZXJ0aWNhbE9mZnNldCA/IHZlcnRpY2FsT2Zmc2V0WyAwIF0gOiAwXG5cdFx0XTtcblxuXHRcdC8vIHJlZHVjZSB0byBqdXN0IHRoZSBwb3NpdGlvbnMgd2l0aG91dCB0aGUgb2Zmc2V0c1xuXHRcdG9wdGlvbnNbIHRoaXMgXSA9IFtcblx0XHRcdHJwb3NpdGlvbi5leGVjKCBwb3NbIDAgXSApWyAwIF0sXG5cdFx0XHRycG9zaXRpb24uZXhlYyggcG9zWyAxIF0gKVsgMCBdXG5cdFx0XTtcblx0fSk7XG5cblx0Ly8gbm9ybWFsaXplIGNvbGxpc2lvbiBvcHRpb25cblx0aWYgKCBjb2xsaXNpb24ubGVuZ3RoID09PSAxICkge1xuXHRcdGNvbGxpc2lvblsgMSBdID0gY29sbGlzaW9uWyAwIF07XG5cdH1cblxuXHRpZiAoIG9wdGlvbnMuYXRbIDAgXSA9PT0gXCJyaWdodFwiICkge1xuXHRcdGJhc2VQb3NpdGlvbi5sZWZ0ICs9IHRhcmdldFdpZHRoO1xuXHR9IGVsc2UgaWYgKCBvcHRpb25zLmF0WyAwIF0gPT09IFwiY2VudGVyXCIgKSB7XG5cdFx0YmFzZVBvc2l0aW9uLmxlZnQgKz0gdGFyZ2V0V2lkdGggLyAyO1xuXHR9XG5cblx0aWYgKCBvcHRpb25zLmF0WyAxIF0gPT09IFwiYm90dG9tXCIgKSB7XG5cdFx0YmFzZVBvc2l0aW9uLnRvcCArPSB0YXJnZXRIZWlnaHQ7XG5cdH0gZWxzZSBpZiAoIG9wdGlvbnMuYXRbIDEgXSA9PT0gXCJjZW50ZXJcIiApIHtcblx0XHRiYXNlUG9zaXRpb24udG9wICs9IHRhcmdldEhlaWdodCAvIDI7XG5cdH1cblxuXHRhdE9mZnNldCA9IGdldE9mZnNldHMoIG9mZnNldHMuYXQsIHRhcmdldFdpZHRoLCB0YXJnZXRIZWlnaHQgKTtcblx0YmFzZVBvc2l0aW9uLmxlZnQgKz0gYXRPZmZzZXRbIDAgXTtcblx0YmFzZVBvc2l0aW9uLnRvcCArPSBhdE9mZnNldFsgMSBdO1xuXG5cdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvbGxpc2lvblBvc2l0aW9uLCB1c2luZyxcblx0XHRcdGVsZW0gPSAkKCB0aGlzICksXG5cdFx0XHRlbGVtV2lkdGggPSBlbGVtLm91dGVyV2lkdGgoKSxcblx0XHRcdGVsZW1IZWlnaHQgPSBlbGVtLm91dGVySGVpZ2h0KCksXG5cdFx0XHRtYXJnaW5MZWZ0ID0gcGFyc2VDc3MoIHRoaXMsIFwibWFyZ2luTGVmdFwiICksXG5cdFx0XHRtYXJnaW5Ub3AgPSBwYXJzZUNzcyggdGhpcywgXCJtYXJnaW5Ub3BcIiApLFxuXHRcdFx0Y29sbGlzaW9uV2lkdGggPSBlbGVtV2lkdGggKyBtYXJnaW5MZWZ0ICsgcGFyc2VDc3MoIHRoaXMsIFwibWFyZ2luUmlnaHRcIiApICsgc2Nyb2xsSW5mby53aWR0aCxcblx0XHRcdGNvbGxpc2lvbkhlaWdodCA9IGVsZW1IZWlnaHQgKyBtYXJnaW5Ub3AgKyBwYXJzZUNzcyggdGhpcywgXCJtYXJnaW5Cb3R0b21cIiApICsgc2Nyb2xsSW5mby5oZWlnaHQsXG5cdFx0XHRwb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgYmFzZVBvc2l0aW9uICksXG5cdFx0XHRteU9mZnNldCA9IGdldE9mZnNldHMoIG9mZnNldHMubXksIGVsZW0ub3V0ZXJXaWR0aCgpLCBlbGVtLm91dGVySGVpZ2h0KCkgKTtcblxuXHRcdGlmICggb3B0aW9ucy5teVsgMCBdID09PSBcInJpZ2h0XCIgKSB7XG5cdFx0XHRwb3NpdGlvbi5sZWZ0IC09IGVsZW1XaWR0aDtcblx0XHR9IGVsc2UgaWYgKCBvcHRpb25zLm15WyAwIF0gPT09IFwiY2VudGVyXCIgKSB7XG5cdFx0XHRwb3NpdGlvbi5sZWZ0IC09IGVsZW1XaWR0aCAvIDI7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLm15WyAxIF0gPT09IFwiYm90dG9tXCIgKSB7XG5cdFx0XHRwb3NpdGlvbi50b3AgLT0gZWxlbUhlaWdodDtcblx0XHR9IGVsc2UgaWYgKCBvcHRpb25zLm15WyAxIF0gPT09IFwiY2VudGVyXCIgKSB7XG5cdFx0XHRwb3NpdGlvbi50b3AgLT0gZWxlbUhlaWdodCAvIDI7XG5cdFx0fVxuXG5cdFx0cG9zaXRpb24ubGVmdCArPSBteU9mZnNldFsgMCBdO1xuXHRcdHBvc2l0aW9uLnRvcCArPSBteU9mZnNldFsgMSBdO1xuXG5cdFx0Ly8gaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGZyYWN0aW9ucywgdGhlbiByb3VuZCBmb3IgY29uc2lzdGVudCByZXN1bHRzXG5cdFx0aWYgKCAhJC5zdXBwb3J0Lm9mZnNldEZyYWN0aW9ucyApIHtcblx0XHRcdHBvc2l0aW9uLmxlZnQgPSByb3VuZCggcG9zaXRpb24ubGVmdCApO1xuXHRcdFx0cG9zaXRpb24udG9wID0gcm91bmQoIHBvc2l0aW9uLnRvcCApO1xuXHRcdH1cblxuXHRcdGNvbGxpc2lvblBvc2l0aW9uID0ge1xuXHRcdFx0bWFyZ2luTGVmdDogbWFyZ2luTGVmdCxcblx0XHRcdG1hcmdpblRvcDogbWFyZ2luVG9wXG5cdFx0fTtcblxuXHRcdCQuZWFjaCggWyBcImxlZnRcIiwgXCJ0b3BcIiBdLCBmdW5jdGlvbiggaSwgZGlyICkge1xuXHRcdFx0aWYgKCAkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdICkge1xuXHRcdFx0XHQkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdWyBkaXIgXSggcG9zaXRpb24sIHtcblx0XHRcdFx0XHR0YXJnZXRXaWR0aDogdGFyZ2V0V2lkdGgsXG5cdFx0XHRcdFx0dGFyZ2V0SGVpZ2h0OiB0YXJnZXRIZWlnaHQsXG5cdFx0XHRcdFx0ZWxlbVdpZHRoOiBlbGVtV2lkdGgsXG5cdFx0XHRcdFx0ZWxlbUhlaWdodDogZWxlbUhlaWdodCxcblx0XHRcdFx0XHRjb2xsaXNpb25Qb3NpdGlvbjogY29sbGlzaW9uUG9zaXRpb24sXG5cdFx0XHRcdFx0Y29sbGlzaW9uV2lkdGg6IGNvbGxpc2lvbldpZHRoLFxuXHRcdFx0XHRcdGNvbGxpc2lvbkhlaWdodDogY29sbGlzaW9uSGVpZ2h0LFxuXHRcdFx0XHRcdG9mZnNldDogWyBhdE9mZnNldFsgMCBdICsgbXlPZmZzZXRbIDAgXSwgYXRPZmZzZXQgWyAxIF0gKyBteU9mZnNldFsgMSBdIF0sXG5cdFx0XHRcdFx0bXk6IG9wdGlvbnMubXksXG5cdFx0XHRcdFx0YXQ6IG9wdGlvbnMuYXQsXG5cdFx0XHRcdFx0d2l0aGluOiB3aXRoaW4sXG5cdFx0XHRcdFx0ZWxlbSA6IGVsZW1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoIG9wdGlvbnMudXNpbmcgKSB7XG5cdFx0XHQvLyBhZGRzIGZlZWRiYWNrIGFzIHNlY29uZCBhcmd1bWVudCB0byB1c2luZyBjYWxsYmFjaywgaWYgcHJlc2VudFxuXHRcdFx0dXNpbmcgPSBmdW5jdGlvbiggcHJvcHMgKSB7XG5cdFx0XHRcdHZhciBsZWZ0ID0gdGFyZ2V0T2Zmc2V0LmxlZnQgLSBwb3NpdGlvbi5sZWZ0LFxuXHRcdFx0XHRcdHJpZ2h0ID0gbGVmdCArIHRhcmdldFdpZHRoIC0gZWxlbVdpZHRoLFxuXHRcdFx0XHRcdHRvcCA9IHRhcmdldE9mZnNldC50b3AgLSBwb3NpdGlvbi50b3AsXG5cdFx0XHRcdFx0Ym90dG9tID0gdG9wICsgdGFyZ2V0SGVpZ2h0IC0gZWxlbUhlaWdodCxcblx0XHRcdFx0XHRmZWVkYmFjayA9IHtcblx0XHRcdFx0XHRcdHRhcmdldDoge1xuXHRcdFx0XHRcdFx0XHRlbGVtZW50OiB0YXJnZXQsXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IHRhcmdldE9mZnNldC5sZWZ0LFxuXHRcdFx0XHRcdFx0XHR0b3A6IHRhcmdldE9mZnNldC50b3AsXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiB0YXJnZXRXaWR0aCxcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiB0YXJnZXRIZWlnaHRcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQ6IGVsZW0sXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IHBvc2l0aW9uLmxlZnQsXG5cdFx0XHRcdFx0XHRcdHRvcDogcG9zaXRpb24udG9wLFxuXHRcdFx0XHRcdFx0XHR3aWR0aDogZWxlbVdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGVsZW1IZWlnaHRcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRob3Jpem9udGFsOiByaWdodCA8IDAgPyBcImxlZnRcIiA6IGxlZnQgPiAwID8gXCJyaWdodFwiIDogXCJjZW50ZXJcIixcblx0XHRcdFx0XHRcdHZlcnRpY2FsOiBib3R0b20gPCAwID8gXCJ0b3BcIiA6IHRvcCA+IDAgPyBcImJvdHRvbVwiIDogXCJtaWRkbGVcIlxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdGlmICggdGFyZ2V0V2lkdGggPCBlbGVtV2lkdGggJiYgYWJzKCBsZWZ0ICsgcmlnaHQgKSA8IHRhcmdldFdpZHRoICkge1xuXHRcdFx0XHRcdGZlZWRiYWNrLmhvcml6b250YWwgPSBcImNlbnRlclwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGFyZ2V0SGVpZ2h0IDwgZWxlbUhlaWdodCAmJiBhYnMoIHRvcCArIGJvdHRvbSApIDwgdGFyZ2V0SGVpZ2h0ICkge1xuXHRcdFx0XHRcdGZlZWRiYWNrLnZlcnRpY2FsID0gXCJtaWRkbGVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG1heCggYWJzKCBsZWZ0ICksIGFicyggcmlnaHQgKSApID4gbWF4KCBhYnMoIHRvcCApLCBhYnMoIGJvdHRvbSApICkgKSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2suaW1wb3J0YW50ID0gXCJob3Jpem9udGFsXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2suaW1wb3J0YW50ID0gXCJ2ZXJ0aWNhbFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggdGhpcywgcHJvcHMsIGZlZWRiYWNrICk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGVsZW0ub2Zmc2V0KCAkLmV4dGVuZCggcG9zaXRpb24sIHsgdXNpbmc6IHVzaW5nIH0gKSApO1xuXHR9KTtcbn07XG5cbiQudWkucG9zaXRpb24gPSB7XG5cdGZpdDoge1xuXHRcdGxlZnQ6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHtcblx0XHRcdHZhciB3aXRoaW4gPSBkYXRhLndpdGhpbixcblx0XHRcdFx0d2l0aGluT2Zmc2V0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbExlZnQgOiB3aXRoaW4ub2Zmc2V0LmxlZnQsXG5cdFx0XHRcdG91dGVyV2lkdGggPSB3aXRoaW4ud2lkdGgsXG5cdFx0XHRcdGNvbGxpc2lvblBvc0xlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LFxuXHRcdFx0XHRvdmVyTGVmdCA9IHdpdGhpbk9mZnNldCAtIGNvbGxpc2lvblBvc0xlZnQsXG5cdFx0XHRcdG92ZXJSaWdodCA9IGNvbGxpc2lvblBvc0xlZnQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC0gb3V0ZXJXaWR0aCAtIHdpdGhpbk9mZnNldCxcblx0XHRcdFx0bmV3T3ZlclJpZ2h0O1xuXG5cdFx0XHQvLyBlbGVtZW50IGlzIHdpZGVyIHRoYW4gd2l0aGluXG5cdFx0XHRpZiAoIGRhdGEuY29sbGlzaW9uV2lkdGggPiBvdXRlcldpZHRoICkge1xuXHRcdFx0XHQvLyBlbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHRoZSBsZWZ0IHNpZGUgb2Ygd2l0aGluXG5cdFx0XHRcdGlmICggb3ZlckxlZnQgPiAwICYmIG92ZXJSaWdodCA8PSAwICkge1xuXHRcdFx0XHRcdG5ld092ZXJSaWdodCA9IHBvc2l0aW9uLmxlZnQgKyBvdmVyTGVmdCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gb3ZlckxlZnQgLSBuZXdPdmVyUmlnaHQ7XG5cdFx0XHRcdC8vIGVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgcmlnaHQgc2lkZSBvZiB3aXRoaW5cblx0XHRcdFx0fSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCAmJiBvdmVyTGVmdCA8PSAwICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgPSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdC8vIGVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgYm90aCBsZWZ0IGFuZCByaWdodCBzaWRlcyBvZiB3aXRoaW5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoIG92ZXJMZWZ0ID4gb3ZlclJpZ2h0ICkge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24ubGVmdCA9IHdpdGhpbk9mZnNldCArIG91dGVyV2lkdGggLSBkYXRhLmNvbGxpc2lvbldpZHRoO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbi5sZWZ0ID0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0Ly8gdG9vIGZhciBsZWZ0IC0+IGFsaWduIHdpdGggbGVmdCBlZGdlXG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyTGVmdCA+IDAgKSB7XG5cdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gb3ZlckxlZnQ7XG5cdFx0XHQvLyB0b28gZmFyIHJpZ2h0IC0+IGFsaWduIHdpdGggcmlnaHQgZWRnZVxuXHRcdFx0fSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCApIHtcblx0XHRcdFx0cG9zaXRpb24ubGVmdCAtPSBvdmVyUmlnaHQ7XG5cdFx0XHQvLyBhZGp1c3QgYmFzZWQgb24gcG9zaXRpb24gYW5kIG1hcmdpblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9zaXRpb24ubGVmdCA9IG1heCggcG9zaXRpb24ubGVmdCAtIGNvbGxpc2lvblBvc0xlZnQsIHBvc2l0aW9uLmxlZnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRvcDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkge1xuXHRcdFx0dmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLFxuXHRcdFx0XHR3aXRoaW5PZmZzZXQgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsVG9wIDogd2l0aGluLm9mZnNldC50b3AsXG5cdFx0XHRcdG91dGVySGVpZ2h0ID0gZGF0YS53aXRoaW4uaGVpZ2h0LFxuXHRcdFx0XHRjb2xsaXNpb25Qb3NUb3AgPSBwb3NpdGlvbi50b3AgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxcblx0XHRcdFx0b3ZlclRvcCA9IHdpdGhpbk9mZnNldCAtIGNvbGxpc2lvblBvc1RvcCxcblx0XHRcdFx0b3ZlckJvdHRvbSA9IGNvbGxpc2lvblBvc1RvcCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC0gb3V0ZXJIZWlnaHQgLSB3aXRoaW5PZmZzZXQsXG5cdFx0XHRcdG5ld092ZXJCb3R0b207XG5cblx0XHRcdC8vIGVsZW1lbnQgaXMgdGFsbGVyIHRoYW4gd2l0aGluXG5cdFx0XHRpZiAoIGRhdGEuY29sbGlzaW9uSGVpZ2h0ID4gb3V0ZXJIZWlnaHQgKSB7XG5cdFx0XHRcdC8vIGVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgdGhlIHRvcCBvZiB3aXRoaW5cblx0XHRcdFx0aWYgKCBvdmVyVG9wID4gMCAmJiBvdmVyQm90dG9tIDw9IDAgKSB7XG5cdFx0XHRcdFx0bmV3T3ZlckJvdHRvbSA9IHBvc2l0aW9uLnRvcCArIG92ZXJUb3AgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdHBvc2l0aW9uLnRvcCArPSBvdmVyVG9wIC0gbmV3T3ZlckJvdHRvbTtcblx0XHRcdFx0Ly8gZWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3R0b20gb2Ygd2l0aGluXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICYmIG92ZXJUb3AgPD0gMCApIHtcblx0XHRcdFx0XHRwb3NpdGlvbi50b3AgPSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdC8vIGVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgYm90aCB0b3AgYW5kIGJvdHRvbSBvZiB3aXRoaW5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoIG92ZXJUb3AgPiBvdmVyQm90dG9tICkge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0ICsgb3V0ZXJIZWlnaHQgLSBkYXRhLmNvbGxpc2lvbkhlaWdodDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0Ly8gdG9vIGZhciB1cCAtPiBhbGlnbiB3aXRoIHRvcFxuXHRcdFx0fSBlbHNlIGlmICggb3ZlclRvcCA+IDAgKSB7XG5cdFx0XHRcdHBvc2l0aW9uLnRvcCArPSBvdmVyVG9wO1xuXHRcdFx0Ly8gdG9vIGZhciBkb3duIC0+IGFsaWduIHdpdGggYm90dG9tIGVkZ2Vcblx0XHRcdH0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICkge1xuXHRcdFx0XHRwb3NpdGlvbi50b3AgLT0gb3ZlckJvdHRvbTtcblx0XHRcdC8vIGFkanVzdCBiYXNlZCBvbiBwb3NpdGlvbiBhbmQgbWFyZ2luXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NpdGlvbi50b3AgPSBtYXgoIHBvc2l0aW9uLnRvcCAtIGNvbGxpc2lvblBvc1RvcCwgcG9zaXRpb24udG9wICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRmbGlwOiB7XG5cdFx0bGVmdDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkge1xuXHRcdFx0dmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLFxuXHRcdFx0XHR3aXRoaW5PZmZzZXQgPSB3aXRoaW4ub2Zmc2V0LmxlZnQgKyB3aXRoaW4uc2Nyb2xsTGVmdCxcblx0XHRcdFx0b3V0ZXJXaWR0aCA9IHdpdGhpbi53aWR0aCxcblx0XHRcdFx0b2Zmc2V0TGVmdCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxMZWZ0IDogd2l0aGluLm9mZnNldC5sZWZ0LFxuXHRcdFx0XHRjb2xsaXNpb25Qb3NMZWZ0ID0gcG9zaXRpb24ubGVmdCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxcblx0XHRcdFx0b3ZlckxlZnQgPSBjb2xsaXNpb25Qb3NMZWZ0IC0gb2Zmc2V0TGVmdCxcblx0XHRcdFx0b3ZlclJpZ2h0ID0gY29sbGlzaW9uUG9zTGVmdCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC0gb2Zmc2V0TGVmdCxcblx0XHRcdFx0bXlPZmZzZXQgPSBkYXRhLm15WyAwIF0gPT09IFwibGVmdFwiID9cblx0XHRcdFx0XHQtZGF0YS5lbGVtV2lkdGggOlxuXHRcdFx0XHRcdGRhdGEubXlbIDAgXSA9PT0gXCJyaWdodFwiID9cblx0XHRcdFx0XHRcdGRhdGEuZWxlbVdpZHRoIDpcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdGF0T2Zmc2V0ID0gZGF0YS5hdFsgMCBdID09PSBcImxlZnRcIiA/XG5cdFx0XHRcdFx0ZGF0YS50YXJnZXRXaWR0aCA6XG5cdFx0XHRcdFx0ZGF0YS5hdFsgMCBdID09PSBcInJpZ2h0XCIgP1xuXHRcdFx0XHRcdFx0LWRhdGEudGFyZ2V0V2lkdGggOlxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0b2Zmc2V0ID0gLTIgKiBkYXRhLm9mZnNldFsgMCBdLFxuXHRcdFx0XHRuZXdPdmVyUmlnaHQsXG5cdFx0XHRcdG5ld092ZXJMZWZ0O1xuXG5cdFx0XHRpZiAoIG92ZXJMZWZ0IDwgMCApIHtcblx0XHRcdFx0bmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC0gb3V0ZXJXaWR0aCAtIHdpdGhpbk9mZnNldDtcblx0XHRcdFx0aWYgKCBuZXdPdmVyUmlnaHQgPCAwIHx8IG5ld092ZXJSaWdodCA8IGFicyggb3ZlckxlZnQgKSApIHtcblx0XHRcdFx0XHRwb3NpdGlvbi5sZWZ0ICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICkge1xuXHRcdFx0XHRuZXdPdmVyTGVmdCA9IHBvc2l0aW9uLmxlZnQgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0IC0gb2Zmc2V0TGVmdDtcblx0XHRcdFx0aWYgKCBuZXdPdmVyTGVmdCA+IDAgfHwgYWJzKCBuZXdPdmVyTGVmdCApIDwgb3ZlclJpZ2h0ICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dG9wOiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7XG5cdFx0XHR2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sXG5cdFx0XHRcdHdpdGhpbk9mZnNldCA9IHdpdGhpbi5vZmZzZXQudG9wICsgd2l0aGluLnNjcm9sbFRvcCxcblx0XHRcdFx0b3V0ZXJIZWlnaHQgPSB3aXRoaW4uaGVpZ2h0LFxuXHRcdFx0XHRvZmZzZXRUb3AgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsVG9wIDogd2l0aGluLm9mZnNldC50b3AsXG5cdFx0XHRcdGNvbGxpc2lvblBvc1RvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLFxuXHRcdFx0XHRvdmVyVG9wID0gY29sbGlzaW9uUG9zVG9wIC0gb2Zmc2V0VG9wLFxuXHRcdFx0XHRvdmVyQm90dG9tID0gY29sbGlzaW9uUG9zVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIG9mZnNldFRvcCxcblx0XHRcdFx0dG9wID0gZGF0YS5teVsgMSBdID09PSBcInRvcFwiLFxuXHRcdFx0XHRteU9mZnNldCA9IHRvcCA/XG5cdFx0XHRcdFx0LWRhdGEuZWxlbUhlaWdodCA6XG5cdFx0XHRcdFx0ZGF0YS5teVsgMSBdID09PSBcImJvdHRvbVwiID9cblx0XHRcdFx0XHRcdGRhdGEuZWxlbUhlaWdodCA6XG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRhdE9mZnNldCA9IGRhdGEuYXRbIDEgXSA9PT0gXCJ0b3BcIiA/XG5cdFx0XHRcdFx0ZGF0YS50YXJnZXRIZWlnaHQgOlxuXHRcdFx0XHRcdGRhdGEuYXRbIDEgXSA9PT0gXCJib3R0b21cIiA/XG5cdFx0XHRcdFx0XHQtZGF0YS50YXJnZXRIZWlnaHQgOlxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0b2Zmc2V0ID0gLTIgKiBkYXRhLm9mZnNldFsgMSBdLFxuXHRcdFx0XHRuZXdPdmVyVG9wLFxuXHRcdFx0XHRuZXdPdmVyQm90dG9tO1xuXHRcdFx0aWYgKCBvdmVyVG9wIDwgMCApIHtcblx0XHRcdFx0bmV3T3ZlckJvdHRvbSA9IHBvc2l0aW9uLnRvcCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRpZiAoICggcG9zaXRpb24udG9wICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCkgPiBvdmVyVG9wICYmICggbmV3T3ZlckJvdHRvbSA8IDAgfHwgbmV3T3ZlckJvdHRvbSA8IGFicyggb3ZlclRvcCApICkgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24udG9wICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBvdmVyQm90dG9tID4gMCApIHtcblx0XHRcdFx0bmV3T3ZlclRvcCA9IHBvc2l0aW9uLnRvcCAtICBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgLSBvZmZzZXRUb3A7XG5cdFx0XHRcdGlmICggKCBwb3NpdGlvbi50b3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0KSA+IG92ZXJCb3R0b20gJiYgKCBuZXdPdmVyVG9wID4gMCB8fCBhYnMoIG5ld092ZXJUb3AgKSA8IG92ZXJCb3R0b20gKSApIHtcblx0XHRcdFx0XHRwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0ZmxpcGZpdDoge1xuXHRcdGxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0JC51aS5wb3NpdGlvbi5mbGlwLmxlZnQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0JC51aS5wb3NpdGlvbi5maXQubGVmdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fSxcblx0XHR0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0JC51aS5wb3NpdGlvbi5mbGlwLnRvcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHQkLnVpLnBvc2l0aW9uLmZpdC50b3AuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fVxufTtcblxuLy8gZnJhY3Rpb24gc3VwcG9ydCB0ZXN0XG4oZnVuY3Rpb24gKCkge1xuXHR2YXIgdGVzdEVsZW1lbnQsIHRlc3RFbGVtZW50UGFyZW50LCB0ZXN0RWxlbWVudFN0eWxlLCBvZmZzZXRMZWZ0LCBpLFxuXHRcdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJib2R5XCIgKVsgMCBdLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvL0NyZWF0ZSBhIFwiZmFrZSBib2R5XCIgZm9yIHRlc3RpbmcgYmFzZWQgb24gbWV0aG9kIHVzZWQgaW4galF1ZXJ5LnN1cHBvcnRcblx0dGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBib2R5ID8gXCJkaXZcIiA6IFwiYm9keVwiICk7XG5cdHRlc3RFbGVtZW50U3R5bGUgPSB7XG5cdFx0dmlzaWJpbGl0eTogXCJoaWRkZW5cIixcblx0XHR3aWR0aDogMCxcblx0XHRoZWlnaHQ6IDAsXG5cdFx0Ym9yZGVyOiAwLFxuXHRcdG1hcmdpbjogMCxcblx0XHRiYWNrZ3JvdW5kOiBcIm5vbmVcIlxuXHR9O1xuXHRpZiAoIGJvZHkgKSB7XG5cdFx0JC5leHRlbmQoIHRlc3RFbGVtZW50U3R5bGUsIHtcblx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRsZWZ0OiBcIi0xMDAwcHhcIixcblx0XHRcdHRvcDogXCItMTAwMHB4XCJcblx0XHR9KTtcblx0fVxuXHRmb3IgKCBpIGluIHRlc3RFbGVtZW50U3R5bGUgKSB7XG5cdFx0dGVzdEVsZW1lbnQuc3R5bGVbIGkgXSA9IHRlc3RFbGVtZW50U3R5bGVbIGkgXTtcblx0fVxuXHR0ZXN0RWxlbWVudC5hcHBlbmRDaGlsZCggZGl2ICk7XG5cdHRlc3RFbGVtZW50UGFyZW50ID0gYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdHRlc3RFbGVtZW50UGFyZW50Lmluc2VydEJlZm9yZSggdGVzdEVsZW1lbnQsIHRlc3RFbGVtZW50UGFyZW50LmZpcnN0Q2hpbGQgKTtcblxuXHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAxMC43NDMyMjIycHg7XCI7XG5cblx0b2Zmc2V0TGVmdCA9ICQoIGRpdiApLm9mZnNldCgpLmxlZnQ7XG5cdCQuc3VwcG9ydC5vZmZzZXRGcmFjdGlvbnMgPSBvZmZzZXRMZWZ0ID4gMTAgJiYgb2Zmc2V0TGVmdCA8IDExO1xuXG5cdHRlc3RFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdHRlc3RFbGVtZW50UGFyZW50LnJlbW92ZUNoaWxkKCB0ZXN0RWxlbWVudCApO1xufSkoKTtcblxufSggalF1ZXJ5ICkgKTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLndpZGdldChcInVpLmRyYWdnYWJsZVwiLCAkLnVpLm1vdXNlLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdHdpZGdldEV2ZW50UHJlZml4OiBcImRyYWdcIixcblx0b3B0aW9uczoge1xuXHRcdGFkZENsYXNzZXM6IHRydWUsXG5cdFx0YXBwZW5kVG86IFwicGFyZW50XCIsXG5cdFx0YXhpczogZmFsc2UsXG5cdFx0Y29ubmVjdFRvU29ydGFibGU6IGZhbHNlLFxuXHRcdGNvbnRhaW5tZW50OiBmYWxzZSxcblx0XHRjdXJzb3I6IFwiYXV0b1wiLFxuXHRcdGN1cnNvckF0OiBmYWxzZSxcblx0XHRncmlkOiBmYWxzZSxcblx0XHRoYW5kbGU6IGZhbHNlLFxuXHRcdGhlbHBlcjogXCJvcmlnaW5hbFwiLFxuXHRcdGlmcmFtZUZpeDogZmFsc2UsXG5cdFx0b3BhY2l0eTogZmFsc2UsXG5cdFx0cmVmcmVzaFBvc2l0aW9uczogZmFsc2UsXG5cdFx0cmV2ZXJ0OiBmYWxzZSxcblx0XHRyZXZlcnREdXJhdGlvbjogNTAwLFxuXHRcdHNjb3BlOiBcImRlZmF1bHRcIixcblx0XHRzY3JvbGw6IHRydWUsXG5cdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDIwLFxuXHRcdHNjcm9sbFNwZWVkOiAyMCxcblx0XHRzbmFwOiBmYWxzZSxcblx0XHRzbmFwTW9kZTogXCJib3RoXCIsXG5cdFx0c25hcFRvbGVyYW5jZTogMjAsXG5cdFx0c3RhY2s6IGZhbHNlLFxuXHRcdHpJbmRleDogZmFsc2UsXG5cblx0XHQvLyBjYWxsYmFja3Ncblx0XHRkcmFnOiBudWxsLFxuXHRcdHN0YXJ0OiBudWxsLFxuXHRcdHN0b3A6IG51bGxcblx0fSxcblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAodGhpcy5vcHRpb25zLmhlbHBlciA9PT0gXCJvcmlnaW5hbFwiICYmICEoL14oPzpyfGF8ZikvKS50ZXN0KHRoaXMuZWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSkpIHtcblx0XHRcdHRoaXMuZWxlbWVudFswXS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cdFx0aWYgKHRoaXMub3B0aW9ucy5hZGRDbGFzc2VzKXtcblx0XHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcInVpLWRyYWdnYWJsZVwiKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS1kcmFnZ2FibGUtZGlzYWJsZWRcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCBcInVpLWRyYWdnYWJsZSB1aS1kcmFnZ2FibGUtZHJhZ2dpbmcgdWktZHJhZ2dhYmxlLWRpc2FibGVkXCIgKTtcblx0XHR0aGlzLl9tb3VzZURlc3Ryb3koKTtcblx0fSxcblxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHQvLyBhbW9uZyBvdGhlcnMsIHByZXZlbnQgYSBkcmFnIG9uIGEgcmVzaXphYmxlLWhhbmRsZVxuXHRcdGlmICh0aGlzLmhlbHBlciB8fCBvLmRpc2FibGVkIHx8ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIikubGVuZ3RoID4gMCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vUXVpdCBpZiB3ZSdyZSBub3Qgb24gYSB2YWxpZCBoYW5kbGVcblx0XHR0aGlzLmhhbmRsZSA9IHRoaXMuX2dldEhhbmRsZShldmVudCk7XG5cdFx0aWYgKCF0aGlzLmhhbmRsZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdCQoby5pZnJhbWVGaXggPT09IHRydWUgPyBcImlmcmFtZVwiIDogby5pZnJhbWVGaXgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHQkKFwiPGRpdiBjbGFzcz0ndWktZHJhZ2dhYmxlLWlmcmFtZUZpeCcgc3R5bGU9J2JhY2tncm91bmQ6ICNmZmY7Jz48L2Rpdj5cIilcblx0XHRcdC5jc3Moe1xuXHRcdFx0XHR3aWR0aDogdGhpcy5vZmZzZXRXaWR0aCtcInB4XCIsIGhlaWdodDogdGhpcy5vZmZzZXRIZWlnaHQrXCJweFwiLFxuXHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBvcGFjaXR5OiBcIjAuMDAxXCIsIHpJbmRleDogMTAwMFxuXHRcdFx0fSlcblx0XHRcdC5jc3MoJCh0aGlzKS5vZmZzZXQoKSlcblx0XHRcdC5hcHBlbmRUbyhcImJvZHlcIik7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHQvL0NyZWF0ZSBhbmQgYXBwZW5kIHRoZSB2aXNpYmxlIGhlbHBlclxuXHRcdHRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKGV2ZW50KTtcblxuXHRcdHRoaXMuaGVscGVyLmFkZENsYXNzKFwidWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpO1xuXG5cdFx0Ly9DYWNoZSB0aGUgaGVscGVyIHNpemVcblx0XHR0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7XG5cblx0XHQvL0lmIGRkbWFuYWdlciBpcyB1c2VkIGZvciBkcm9wcGFibGVzLCBzZXQgdGhlIGdsb2JhbCBkcmFnZ2FibGVcblx0XHRpZigkLnVpLmRkbWFuYWdlcikge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuY3VycmVudCA9IHRoaXM7XG5cdFx0fVxuXG5cdFx0Lypcblx0XHQgKiAtIFBvc2l0aW9uIGdlbmVyYXRpb24gLVxuXHRcdCAqIFRoaXMgYmxvY2sgZ2VuZXJhdGVzIGV2ZXJ5dGhpbmcgcG9zaXRpb24gcmVsYXRlZCAtIGl0J3MgdGhlIGNvcmUgb2YgZHJhZ2dhYmxlcy5cblx0XHQgKi9cblxuXHRcdC8vQ2FjaGUgdGhlIG1hcmdpbnMgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnRcblx0XHR0aGlzLl9jYWNoZU1hcmdpbnMoKTtcblxuXHRcdC8vU3RvcmUgdGhlIGhlbHBlcidzIGNzcyBwb3NpdGlvblxuXHRcdHRoaXMuY3NzUG9zaXRpb24gPSB0aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiKTtcblx0XHR0aGlzLnNjcm9sbFBhcmVudCA9IHRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCgpO1xuXG5cdFx0Ly9UaGUgZWxlbWVudCdzIGFic29sdXRlIHBvc2l0aW9uIG9uIHRoZSBwYWdlIG1pbnVzIG1hcmdpbnNcblx0XHR0aGlzLm9mZnNldCA9IHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0dGhpcy5vZmZzZXQgPSB7XG5cdFx0XHR0b3A6IHRoaXMub2Zmc2V0LnRvcCAtIHRoaXMubWFyZ2lucy50b3AsXG5cdFx0XHRsZWZ0OiB0aGlzLm9mZnNldC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnRcblx0XHR9O1xuXG5cdFx0JC5leHRlbmQodGhpcy5vZmZzZXQsIHtcblx0XHRcdGNsaWNrOiB7IC8vV2hlcmUgdGhlIGNsaWNrIGhhcHBlbmVkLCByZWxhdGl2ZSB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRsZWZ0OiBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmxlZnQsXG5cdFx0XHRcdHRvcDogZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC50b3Bcblx0XHRcdH0sXG5cdFx0XHRwYXJlbnQ6IHRoaXMuX2dldFBhcmVudE9mZnNldCgpLFxuXHRcdFx0cmVsYXRpdmU6IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCkgLy9UaGlzIGlzIGEgcmVsYXRpdmUgdG8gYWJzb2x1dGUgcG9zaXRpb24gbWludXMgdGhlIGFjdHVhbCBwb3NpdGlvbiBjYWxjdWxhdGlvbiAtIG9ubHkgdXNlZCBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBoZWxwZXJcblx0XHR9KTtcblxuXHRcdC8vR2VuZXJhdGUgdGhlIG9yaWdpbmFsIHBvc2l0aW9uXG5cdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpO1xuXHRcdHRoaXMub3JpZ2luYWxQYWdlWCA9IGV2ZW50LnBhZ2VYO1xuXHRcdHRoaXMub3JpZ2luYWxQYWdlWSA9IGV2ZW50LnBhZ2VZO1xuXG5cdFx0Ly9BZGp1c3QgdGhlIG1vdXNlIG9mZnNldCByZWxhdGl2ZSB0byB0aGUgaGVscGVyIGlmIFwiY3Vyc29yQXRcIiBpcyBzdXBwbGllZFxuXHRcdChvLmN1cnNvckF0ICYmIHRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoby5jdXJzb3JBdCkpO1xuXG5cdFx0Ly9TZXQgYSBjb250YWlubWVudCBpZiBnaXZlbiBpbiB0aGUgb3B0aW9uc1xuXHRcdGlmKG8uY29udGFpbm1lbnQpIHtcblx0XHRcdHRoaXMuX3NldENvbnRhaW5tZW50KCk7XG5cdFx0fVxuXG5cdFx0Ly9UcmlnZ2VyIGV2ZW50ICsgY2FsbGJhY2tzXG5cdFx0aWYodGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuX2NsZWFyKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly9SZWNhY2hlIHRoZSBoZWxwZXIgc2l6ZVxuXHRcdHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTtcblxuXHRcdC8vUHJlcGFyZSB0aGUgZHJvcHBhYmxlIG9mZnNldHNcblx0XHRpZiAoJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpO1xuXHRcdH1cblxuXG5cdFx0dGhpcy5fbW91c2VEcmFnKGV2ZW50LCB0cnVlKTsgLy9FeGVjdXRlIHRoZSBkcmFnIG9uY2UgLSB0aGlzIGNhdXNlcyB0aGUgaGVscGVyIG5vdCB0byBiZSB2aXNpYmxlIGJlZm9yZSBnZXR0aW5nIGl0cyBjb3JyZWN0IHBvc2l0aW9uXG5cblx0XHQvL0lmIHRoZSBkZG1hbmFnZXIgaXMgdXNlZCBmb3IgZHJvcHBhYmxlcywgaW5mb3JtIHRoZSBtYW5hZ2VyIHRoYXQgZHJhZ2dpbmcgaGFzIHN0YXJ0ZWQgKHNlZSAjNTAwMylcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuZHJhZ1N0YXJ0KHRoaXMsIGV2ZW50KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfbW91c2VEcmFnOiBmdW5jdGlvbihldmVudCwgbm9Qcm9wYWdhdGlvbikge1xuXG5cdFx0Ly9Db21wdXRlIHRoZSBoZWxwZXJzIHBvc2l0aW9uXG5cdFx0dGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpO1xuXHRcdHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpO1xuXG5cdFx0Ly9DYWxsIHBsdWdpbnMgYW5kIGNhbGxiYWNrcyBhbmQgdXNlIHRoZSByZXN1bHRpbmcgcG9zaXRpb24gaWYgc29tZXRoaW5nIGlzIHJldHVybmVkXG5cdFx0aWYgKCFub1Byb3BhZ2F0aW9uKSB7XG5cdFx0XHR2YXIgdWkgPSB0aGlzLl91aUhhc2goKTtcblx0XHRcdGlmKHRoaXMuX3RyaWdnZXIoXCJkcmFnXCIsIGV2ZW50LCB1aSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHRoaXMuX21vdXNlVXAoe30pO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBvc2l0aW9uID0gdWkucG9zaXRpb247XG5cdFx0fVxuXG5cdFx0aWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9PSBcInlcIikge1xuXHRcdFx0dGhpcy5oZWxwZXJbMF0uc3R5bGUubGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCtcInB4XCI7XG5cdFx0fVxuXHRcdGlmKCF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPT0gXCJ4XCIpIHtcblx0XHRcdHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wK1wicHhcIjtcblx0XHR9XG5cdFx0aWYoJC51aS5kZG1hbmFnZXIpIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcywgZXZlbnQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0Ly9JZiB3ZSBhcmUgdXNpbmcgZHJvcHBhYmxlcywgaW5mb3JtIHRoZSBtYW5hZ2VyIGFib3V0IHRoZSBkcm9wXG5cdFx0dmFyIGVsZW1lbnQsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdGVsZW1lbnRJbkRvbSA9IGZhbHNlLFxuXHRcdFx0ZHJvcHBlZCA9IGZhbHNlO1xuXHRcdGlmICgkLnVpLmRkbWFuYWdlciAmJiAhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXIpIHtcblx0XHRcdGRyb3BwZWQgPSAkLnVpLmRkbWFuYWdlci5kcm9wKHRoaXMsIGV2ZW50KTtcblx0XHR9XG5cblx0XHQvL2lmIGEgZHJvcCBjb21lcyBmcm9tIG91dHNpZGUgKGEgc29ydGFibGUpXG5cdFx0aWYodGhpcy5kcm9wcGVkKSB7XG5cdFx0XHRkcm9wcGVkID0gdGhpcy5kcm9wcGVkO1xuXHRcdFx0dGhpcy5kcm9wcGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly9pZiB0aGUgb3JpZ2luYWwgZWxlbWVudCBpcyBubyBsb25nZXIgaW4gdGhlIERPTSBkb24ndCBib3RoZXIgdG8gY29udGludWUgKHNlZSAjODI2OSlcblx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50WzBdO1xuXHRcdHdoaWxlICggZWxlbWVudCAmJiAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRpZiAoZWxlbWVudCA9PT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdGVsZW1lbnRJbkRvbSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggIWVsZW1lbnRJbkRvbSAmJiB0aGlzLm9wdGlvbnMuaGVscGVyID09PSBcIm9yaWdpbmFsXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYoKHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IFwiaW52YWxpZFwiICYmICFkcm9wcGVkKSB8fCAodGhpcy5vcHRpb25zLnJldmVydCA9PT0gXCJ2YWxpZFwiICYmIGRyb3BwZWQpIHx8IHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IHRydWUgfHwgKCQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMucmV2ZXJ0KSAmJiB0aGlzLm9wdGlvbnMucmV2ZXJ0LmNhbGwodGhpcy5lbGVtZW50LCBkcm9wcGVkKSkpIHtcblx0XHRcdCQodGhpcy5oZWxwZXIpLmFuaW1hdGUodGhpcy5vcmlnaW5hbFBvc2l0aW9uLCBwYXJzZUludCh0aGlzLm9wdGlvbnMucmV2ZXJ0RHVyYXRpb24sIDEwKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKHRoYXQuX3RyaWdnZXIoXCJzdG9wXCIsIGV2ZW50KSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHR0aGF0Ll9jbGVhcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYodGhpcy5fdHJpZ2dlcihcInN0b3BcIiwgZXZlbnQpICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLl9jbGVhcigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VVcDogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHQvL1JlbW92ZSBmcmFtZSBoZWxwZXJzXG5cdFx0JChcImRpdi51aS1kcmFnZ2FibGUtaWZyYW1lRml4XCIpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XG5cdFx0fSk7XG5cblx0XHQvL0lmIHRoZSBkZG1hbmFnZXIgaXMgdXNlZCBmb3IgZHJvcHBhYmxlcywgaW5mb3JtIHRoZSBtYW5hZ2VyIHRoYXQgZHJhZ2dpbmcgaGFzIHN0b3BwZWQgKHNlZSAjNTAwMylcblx0XHRpZiggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5kcmFnU3RvcCh0aGlzLCBldmVudCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQudWkubW91c2UucHJvdG90eXBlLl9tb3VzZVVwLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZih0aGlzLmhlbHBlci5pcyhcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIikpIHtcblx0XHRcdHRoaXMuX21vdXNlVXAoe30pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9jbGVhcigpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0X2dldEhhbmRsZTogZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdHZhciBoYW5kbGUgPSAhdGhpcy5vcHRpb25zLmhhbmRsZSB8fCAhJCh0aGlzLm9wdGlvbnMuaGFuZGxlLCB0aGlzLmVsZW1lbnQpLmxlbmd0aCA/IHRydWUgOiBmYWxzZTtcblx0XHQkKHRoaXMub3B0aW9ucy5oYW5kbGUsIHRoaXMuZWxlbWVudClcblx0XHRcdC5maW5kKFwiKlwiKVxuXHRcdFx0LmFkZEJhY2soKVxuXHRcdFx0LmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKHRoaXMgPT09IGV2ZW50LnRhcmdldCkge1xuXHRcdFx0XHRcdGhhbmRsZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0cmV0dXJuIGhhbmRsZTtcblxuXHR9LFxuXG5cdF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGhlbHBlciA9ICQuaXNGdW5jdGlvbihvLmhlbHBlcikgPyAkKG8uaGVscGVyLmFwcGx5KHRoaXMuZWxlbWVudFswXSwgW2V2ZW50XSkpIDogKG8uaGVscGVyID09PSBcImNsb25lXCIgPyB0aGlzLmVsZW1lbnQuY2xvbmUoKS5yZW1vdmVBdHRyKFwiaWRcIikgOiB0aGlzLmVsZW1lbnQpO1xuXG5cdFx0aWYoIWhlbHBlci5wYXJlbnRzKFwiYm9keVwiKS5sZW5ndGgpIHtcblx0XHRcdGhlbHBlci5hcHBlbmRUbygoby5hcHBlbmRUbyA9PT0gXCJwYXJlbnRcIiA/IHRoaXMuZWxlbWVudFswXS5wYXJlbnROb2RlIDogby5hcHBlbmRUbykpO1xuXHRcdH1cblxuXHRcdGlmKGhlbHBlclswXSAhPT0gdGhpcy5lbGVtZW50WzBdICYmICEoLyhmaXhlZHxhYnNvbHV0ZSkvKS50ZXN0KGhlbHBlci5jc3MoXCJwb3NpdGlvblwiKSkpIHtcblx0XHRcdGhlbHBlci5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBoZWxwZXI7XG5cblx0fSxcblxuXHRfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24ob2JqKSB7XG5cdFx0aWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdG9iaiA9IG9iai5zcGxpdChcIiBcIik7XG5cdFx0fVxuXHRcdGlmICgkLmlzQXJyYXkob2JqKSkge1xuXHRcdFx0b2JqID0ge2xlZnQ6ICtvYmpbMF0sIHRvcDogK29ialsxXSB8fCAwfTtcblx0XHR9XG5cdFx0aWYgKFwibGVmdFwiIGluIG9iaikge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmIChcInJpZ2h0XCIgaW4gb2JqKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay5sZWZ0ID0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIG9iai5yaWdodCArIHRoaXMubWFyZ2lucy5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoXCJ0b3BcIiBpbiBvYmopIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IG9iai50b3AgKyB0aGlzLm1hcmdpbnMudG9wO1xuXHRcdH1cblx0XHRpZiAoXCJib3R0b21cIiBpbiBvYmopIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7XG5cdFx0fVxuXHR9LFxuXG5cdF9nZXRQYXJlbnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly9HZXQgdGhlIG9mZnNldFBhcmVudCBhbmQgY2FjaGUgaXRzIHBvc2l0aW9uXG5cdFx0dGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTtcblx0XHR2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtcblxuXHRcdC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBtb2RpZnkgYSBvZmZzZXQgY2FsY3VsYXRlZCBvbiBzdGFydCwgc2luY2UgdGhlIGZvbGxvd2luZyBoYXBwZW5lZDpcblx0XHQvLyAxLiBUaGUgcG9zaXRpb24gb2YgdGhlIGhlbHBlciBpcyBhYnNvbHV0ZSwgc28gaXQncyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBuZXh0IHBvc2l0aW9uZWQgcGFyZW50XG5cdFx0Ly8gMi4gVGhlIGFjdHVhbCBvZmZzZXQgcGFyZW50IGlzIGEgY2hpbGQgb2YgdGhlIHNjcm9sbCBwYXJlbnQsIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpc24ndCB0aGUgZG9jdW1lbnQsIHdoaWNoIG1lYW5zIHRoYXRcblx0XHQvLyAgICB0aGUgc2Nyb2xsIGlzIGluY2x1ZGVkIGluIHRoZSBpbml0aWFsIGNhbGN1bGF0aW9uIG9mIHRoZSBvZmZzZXQgb2YgdGhlIHBhcmVudCwgYW5kIG5ldmVyIHJlY2FsY3VsYXRlZCB1cG9uIGRyYWdcblx0XHRpZih0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkge1xuXHRcdFx0cG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG5cdFx0fVxuXG5cdFx0Ly9UaGlzIG5lZWRzIHRvIGJlIGFjdHVhbGx5IGRvbmUgZm9yIGFsbCBicm93c2Vycywgc2luY2UgcGFnZVgvcGFnZVkgaW5jbHVkZXMgdGhpcyBpbmZvcm1hdGlvblxuXHRcdC8vVWdseSBJRSBmaXhcblx0XHRpZigodGhpcy5vZmZzZXRQYXJlbnRbMF0gPT09IGRvY3VtZW50LmJvZHkpIHx8XG5cdFx0XHQodGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZSAmJiB0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaHRtbFwiICYmICQudWkuaWUpKSB7XG5cdFx0XHRwbyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcG8udG9wICsgKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLDEwKSB8fCAwKSxcblx0XHRcdGxlZnQ6IHBvLmxlZnQgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKSB8fCAwKVxuXHRcdH07XG5cblx0fSxcblxuXHRfZ2V0UmVsYXRpdmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYodGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiKSB7XG5cdFx0XHR2YXIgcCA9IHRoaXMuZWxlbWVudC5wb3NpdGlvbigpO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dG9wOiBwLnRvcCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdGxlZnQ6IHAubGVmdCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJsZWZ0XCIpLDEwKSB8fCAwKSArIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdH0sXG5cblx0X2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5tYXJnaW5zID0ge1xuXHRcdFx0bGVmdDogKHBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoXCJtYXJnaW5MZWZ0XCIpLDEwKSB8fCAwKSxcblx0XHRcdHRvcDogKHBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoXCJtYXJnaW5Ub3BcIiksMTApIHx8IDApLFxuXHRcdFx0cmlnaHQ6IChwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKFwibWFyZ2luUmlnaHRcIiksMTApIHx8IDApLFxuXHRcdFx0Ym90dG9tOiAocGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcyhcIm1hcmdpbkJvdHRvbVwiKSwxMCkgfHwgMClcblx0XHR9O1xuXHR9LFxuXG5cdF9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zID0ge1xuXHRcdFx0d2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxcblx0XHRcdGhlaWdodDogdGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKVxuXHRcdH07XG5cdH0sXG5cblx0X3NldENvbnRhaW5tZW50OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBvdmVyLCBjLCBjZSxcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRpZihvLmNvbnRhaW5tZW50ID09PSBcInBhcmVudFwiKSB7XG5cdFx0XHRvLmNvbnRhaW5tZW50ID0gdGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZTtcblx0XHR9XG5cdFx0aWYoby5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiIHx8IG8uY29udGFpbm1lbnQgPT09IFwid2luZG93XCIpIHtcblx0XHRcdHRoaXMuY29udGFpbm1lbnQgPSBbXG5cdFx0XHRcdG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/IDAgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LFxuXHRcdFx0XHRvLmNvbnRhaW5tZW50ID09PSBcImRvY3VtZW50XCIgPyAwIDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcblx0XHRcdFx0KG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/IDAgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpKSArICQoby5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiID8gZG9jdW1lbnQgOiB3aW5kb3cpLndpZHRoKCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRcdChvLmNvbnRhaW5tZW50ID09PSBcImRvY3VtZW50XCIgPyAwIDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSArICgkKG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/IGRvY3VtZW50IDogd2luZG93KS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHR9XG5cblx0XHRpZighKC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8pLnRlc3Qoby5jb250YWlubWVudCkgJiYgby5jb250YWlubWVudC5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHtcblx0XHRcdGMgPSAkKG8uY29udGFpbm1lbnQpO1xuXHRcdFx0Y2UgPSBjWzBdO1xuXG5cdFx0XHRpZighY2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRvdmVyID0gKCQoY2UpLmNzcyhcIm92ZXJmbG93XCIpICE9PSBcImhpZGRlblwiKTtcblxuXHRcdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdFx0KHBhcnNlSW50KCQoY2UpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCkgfHwgMCkgKyAocGFyc2VJbnQoJChjZSkuY3NzKFwicGFkZGluZ0xlZnRcIiksMTApIHx8IDApLFxuXHRcdFx0XHQocGFyc2VJbnQoJChjZSkuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApIHx8IDApICsgKHBhcnNlSW50KCQoY2UpLmNzcyhcInBhZGRpbmdUb3BcIiksMTApIHx8IDApLFxuXHRcdFx0XHQob3ZlciA/IE1hdGgubWF4KGNlLnNjcm9sbFdpZHRoLGNlLm9mZnNldFdpZHRoKSA6IGNlLm9mZnNldFdpZHRoKSAtIChwYXJzZUludCgkKGNlKS5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksMTApIHx8IDApIC0gKHBhcnNlSW50KCQoY2UpLmNzcyhcInBhZGRpbmdSaWdodFwiKSwxMCkgfHwgMCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQgLSB0aGlzLm1hcmdpbnMucmlnaHQsXG5cdFx0XHRcdChvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsSGVpZ2h0LGNlLm9mZnNldEhlaWdodCkgOiBjZS5vZmZzZXRIZWlnaHQpIC0gKHBhcnNlSW50KCQoY2UpLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLDEwKSB8fCAwKSAtIChwYXJzZUludCgkKGNlKS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLDEwKSB8fCAwKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcCAgLSB0aGlzLm1hcmdpbnMuYm90dG9tXG5cdFx0XHRdO1xuXHRcdFx0dGhpcy5yZWxhdGl2ZV9jb250YWluZXIgPSBjO1xuXG5cdFx0fSBlbHNlIGlmKG8uY29udGFpbm1lbnQuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gby5jb250YWlubWVudDtcblx0XHR9XG5cblx0fSxcblxuXHRfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKGQsIHBvcykge1xuXG5cdFx0aWYoIXBvcykge1xuXHRcdFx0cG9zID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cblx0XHR2YXIgbW9kID0gZCA9PT0gXCJhYnNvbHV0ZVwiID8gMSA6IC0xLFxuXHRcdFx0c2Nyb2xsID0gdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiICYmICEodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgPyB0aGlzLm9mZnNldFBhcmVudCA6IHRoaXMuc2Nyb2xsUGFyZW50LCBzY3JvbGxJc1Jvb3ROb2RlID0gKC8oaHRtbHxib2R5KS9pKS50ZXN0KHNjcm9sbFswXS50YWdOYW1lKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IChcblx0XHRcdFx0cG9zLnRvcFx0K1x0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZCArXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LnRvcCAqIG1vZCAtXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkgKiBtb2QpXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXHRcdFx0XHRwb3MubGVmdCArXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAqIG1vZCArXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKiBtb2RcdC1cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkgKiBtb2QpXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZW5lcmF0ZVBvc2l0aW9uOiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0dmFyIGNvbnRhaW5tZW50LCBjbywgdG9wLCBsZWZ0LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9PSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSAoLyhodG1sfGJvZHkpL2kpLnRlc3Qoc2Nyb2xsWzBdLnRhZ05hbWUpLFxuXHRcdFx0cGFnZVggPSBldmVudC5wYWdlWCxcblx0XHRcdHBhZ2VZID0gZXZlbnQucGFnZVk7XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC1cblx0XHQgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LlxuXHRcdCAqL1xuXG5cdFx0aWYodGhpcy5vcmlnaW5hbFBvc2l0aW9uKSB7IC8vSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zXG5cdFx0XHRpZih0aGlzLmNvbnRhaW5tZW50KSB7XG5cdFx0XHRpZiAodGhpcy5yZWxhdGl2ZV9jb250YWluZXIpe1xuXHRcdFx0XHRjbyA9IHRoaXMucmVsYXRpdmVfY29udGFpbmVyLm9mZnNldCgpO1xuXHRcdFx0XHRjb250YWlubWVudCA9IFsgdGhpcy5jb250YWlubWVudFswXSArIGNvLmxlZnQsXG5cdFx0XHRcdFx0dGhpcy5jb250YWlubWVudFsxXSArIGNvLnRvcCxcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WzJdICsgY28ubGVmdCxcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WzNdICsgY28udG9wIF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29udGFpbm1lbnQgPSB0aGlzLmNvbnRhaW5tZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRcdGlmKGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IGNvbnRhaW5tZW50WzBdKSB7XG5cdFx0XHRcdFx0cGFnZVggPSBjb250YWlubWVudFswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCBjb250YWlubWVudFsxXSkge1xuXHRcdFx0XHRcdHBhZ2VZID0gY29udGFpbm1lbnRbMV0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbMl0pIHtcblx0XHRcdFx0XHRwYWdlWCA9IGNvbnRhaW5tZW50WzJdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IGNvbnRhaW5tZW50WzNdKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSBjb250YWlubWVudFszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihvLmdyaWQpIHtcblx0XHRcdFx0Ly9DaGVjayBmb3IgZ3JpZCBlbGVtZW50cyBzZXQgdG8gMCB0byBwcmV2ZW50IGRpdmlkZSBieSAwIGVycm9yIGNhdXNpbmcgaW52YWxpZCBhcmd1bWVudCBlcnJvcnMgaW4gSUUgKHNlZSB0aWNrZXQgIzY5NTApXG5cdFx0XHRcdHRvcCA9IG8uZ3JpZFsxXSA/IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoKHBhZ2VZIC0gdGhpcy5vcmlnaW5hbFBhZ2VZKSAvIG8uZ3JpZFsxXSkgKiBvLmdyaWRbMV0gOiB0aGlzLm9yaWdpbmFsUGFnZVk7XG5cdFx0XHRcdHBhZ2VZID0gY29udGFpbm1lbnQgPyAoKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsxXSB8fCB0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBjb250YWlubWVudFszXSkgPyB0b3AgOiAoKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsxXSkgPyB0b3AgLSBvLmdyaWRbMV0gOiB0b3AgKyBvLmdyaWRbMV0pKSA6IHRvcDtcblxuXHRcdFx0XHRsZWZ0ID0gby5ncmlkWzBdID8gdGhpcy5vcmlnaW5hbFBhZ2VYICsgTWF0aC5yb3VuZCgocGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gby5ncmlkWzBdKSAqIG8uZ3JpZFswXSA6IHRoaXMub3JpZ2luYWxQYWdlWDtcblx0XHRcdFx0cGFnZVggPSBjb250YWlubWVudCA/ICgobGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gY29udGFpbm1lbnRbMF0gfHwgbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiBjb250YWlubWVudFsyXSkgPyBsZWZ0IDogKChsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+PSBjb250YWlubWVudFswXSkgPyBsZWZ0IC0gby5ncmlkWzBdIDogbGVmdCArIG8uZ3JpZFswXSkpIDogbGVmdDtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IChcblx0XHRcdFx0cGFnZVkgLVx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2sudG9wXHQtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC1cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LnRvcCArXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6ICggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsVG9wKCkgKSApKVxuXHRcdFx0KSxcblx0XHRcdGxlZnQ6IChcblx0XHRcdFx0cGFnZVggLVx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCAtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICtcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSA6IHNjcm9sbElzUm9vdE5vZGUgPyAwIDogc2Nyb2xsLnNjcm9sbExlZnQoKSApKVxuXHRcdFx0KVxuXHRcdH07XG5cblx0fSxcblxuXHRfY2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuaGVscGVyLnJlbW92ZUNsYXNzKFwidWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpO1xuXHRcdGlmKHRoaXMuaGVscGVyWzBdICE9PSB0aGlzLmVsZW1lbnRbMF0gJiYgIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCkge1xuXHRcdFx0dGhpcy5oZWxwZXIucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdHRoaXMuaGVscGVyID0gbnVsbDtcblx0XHR0aGlzLmNhbmNlbEhlbHBlclJlbW92YWwgPSBmYWxzZTtcblx0fSxcblxuXHQvLyBGcm9tIG5vdyBvbiBidWxrIHN0dWZmIC0gbWFpbmx5IGhlbHBlcnNcblxuXHRfdHJpZ2dlcjogZnVuY3Rpb24odHlwZSwgZXZlbnQsIHVpKSB7XG5cdFx0dWkgPSB1aSB8fCB0aGlzLl91aUhhc2goKTtcblx0XHQkLnVpLnBsdWdpbi5jYWxsKHRoaXMsIHR5cGUsIFtldmVudCwgdWldKTtcblx0XHQvL1RoZSBhYnNvbHV0ZSBwb3NpdGlvbiBoYXMgdG8gYmUgcmVjYWxjdWxhdGVkIGFmdGVyIHBsdWdpbnNcblx0XHRpZih0eXBlID09PSBcImRyYWdcIikge1xuXHRcdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIik7XG5cdFx0fVxuXHRcdHJldHVybiAkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuY2FsbCh0aGlzLCB0eXBlLCBldmVudCwgdWkpO1xuXHR9LFxuXG5cdHBsdWdpbnM6IHt9LFxuXG5cdF91aUhhc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRoZWxwZXI6IHRoaXMuaGVscGVyLFxuXHRcdFx0cG9zaXRpb246IHRoaXMucG9zaXRpb24sXG5cdFx0XHRvcmlnaW5hbFBvc2l0aW9uOiB0aGlzLm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IHRoaXMucG9zaXRpb25BYnNcblx0XHR9O1xuXHR9XG5cbn0pO1xuXG4kLnVpLnBsdWdpbi5hZGQoXCJkcmFnZ2FibGVcIiwgXCJjb25uZWN0VG9Tb3J0YWJsZVwiLCB7XG5cdHN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcblxuXHRcdHZhciBpbnN0ID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLCBvID0gaW5zdC5vcHRpb25zLFxuXHRcdFx0dWlTb3J0YWJsZSA9ICQuZXh0ZW5kKHt9LCB1aSwgeyBpdGVtOiBpbnN0LmVsZW1lbnQgfSk7XG5cdFx0aW5zdC5zb3J0YWJsZXMgPSBbXTtcblx0XHQkKG8uY29ubmVjdFRvU29ydGFibGUpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc29ydGFibGUgPSAkLmRhdGEodGhpcywgXCJ1aS1zb3J0YWJsZVwiKTtcblx0XHRcdGlmIChzb3J0YWJsZSAmJiAhc29ydGFibGUub3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0XHRpbnN0LnNvcnRhYmxlcy5wdXNoKHtcblx0XHRcdFx0XHRpbnN0YW5jZTogc29ydGFibGUsXG5cdFx0XHRcdFx0c2hvdWxkUmV2ZXJ0OiBzb3J0YWJsZS5vcHRpb25zLnJldmVydFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29ydGFibGUucmVmcmVzaFBvc2l0aW9ucygpO1x0Ly8gQ2FsbCB0aGUgc29ydGFibGUncyByZWZyZXNoUG9zaXRpb25zIGF0IGRyYWcgc3RhcnQgdG8gcmVmcmVzaCB0aGUgY29udGFpbmVyQ2FjaGUgc2luY2UgdGhlIHNvcnRhYmxlIGNvbnRhaW5lciBjYWNoZSBpcyB1c2VkIGluIGRyYWcgYW5kIG5lZWRzIHRvIGJlIHVwIHRvIGRhdGUgKHRoaXMgd2lsbCBlbnN1cmUgaXQncyBpbml0aWFsaXNlZCBhcyB3ZWxsIGFzIGJlaW5nIGtlcHQgaW4gc3RlcCB3aXRoIGFueSBjaGFuZ2VzIHRoYXQgbWlnaHQgaGF2ZSBoYXBwZW5lZCBvbiB0aGUgcGFnZSkuXG5cdFx0XHRcdHNvcnRhYmxlLl90cmlnZ2VyKFwiYWN0aXZhdGVcIiwgZXZlbnQsIHVpU29ydGFibGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXG5cdFx0Ly9JZiB3ZSBhcmUgc3RpbGwgb3ZlciB0aGUgc29ydGFibGUsIHdlIGZha2UgdGhlIHN0b3AgZXZlbnQgb2YgdGhlIHNvcnRhYmxlLCBidXQgYWxzbyByZW1vdmUgaGVscGVyXG5cdFx0dmFyIGluc3QgPSAkKHRoaXMpLmRhdGEoXCJ1aS1kcmFnZ2FibGVcIiksXG5cdFx0XHR1aVNvcnRhYmxlID0gJC5leHRlbmQoe30sIHVpLCB7IGl0ZW06IGluc3QuZWxlbWVudCB9KTtcblxuXHRcdCQuZWFjaChpbnN0LnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmluc3RhbmNlLmlzT3Zlcikge1xuXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMDtcblxuXHRcdFx0XHRpbnN0LmNhbmNlbEhlbHBlclJlbW92YWwgPSB0cnVlOyAvL0Rvbid0IHJlbW92ZSB0aGUgaGVscGVyIGluIHRoZSBkcmFnZ2FibGUgaW5zdGFuY2Vcblx0XHRcdFx0dGhpcy5pbnN0YW5jZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7IC8vUmVtb3ZlIGl0IGluIHRoZSBzb3J0YWJsZSBpbnN0YW5jZSAoc28gc29ydGFibGUgcGx1Z2lucyBsaWtlIHJldmVydCBzdGlsbCB3b3JrKVxuXG5cdFx0XHRcdC8vVGhlIHNvcnRhYmxlIHJldmVydCBpcyBzdXBwb3J0ZWQsIGFuZCB3ZSBoYXZlIHRvIHNldCBhIHRlbXBvcmFyeSBkcm9wcGVkIHZhcmlhYmxlIG9uIHRoZSBkcmFnZ2FibGUgdG8gc3VwcG9ydCByZXZlcnQ6IFwidmFsaWQvaW52YWxpZFwiXG5cdFx0XHRcdGlmKHRoaXMuc2hvdWxkUmV2ZXJ0KSB7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vcHRpb25zLnJldmVydCA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1RyaWdnZXIgdGhlIHN0b3Agb2YgdGhlIHNvcnRhYmxlXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2UuX21vdXNlU3RvcChldmVudCk7XG5cblx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlciA9IHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5faGVscGVyO1xuXG5cdFx0XHRcdC8vSWYgdGhlIGhlbHBlciBoYXMgYmVlbiB0aGUgb3JpZ2luYWwgaXRlbSwgcmVzdG9yZSBwcm9wZXJ0aWVzIGluIHRoZSBzb3J0YWJsZVxuXHRcdFx0XHRpZihpbnN0Lm9wdGlvbnMuaGVscGVyID09PSBcIm9yaWdpbmFsXCIpIHtcblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtLmNzcyh7IHRvcDogXCJhdXRvXCIsIGxlZnQ6IFwiYXV0b1wiIH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuaW5zdGFuY2UuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IGZhbHNlOyAvL1JlbW92ZSB0aGUgaGVscGVyIGluIHRoZSBzb3J0YWJsZSBpbnN0YW5jZVxuXHRcdFx0XHR0aGlzLmluc3RhbmNlLl90cmlnZ2VyKFwiZGVhY3RpdmF0ZVwiLCBldmVudCwgdWlTb3J0YWJsZSk7XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbihldmVudCwgdWkpIHtcblxuXHRcdHZhciBpbnN0ID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLCB0aGF0ID0gdGhpcztcblxuXHRcdCQuZWFjaChpbnN0LnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSBmYWxzZSxcblx0XHRcdFx0dGhpc1NvcnRhYmxlID0gdGhpcztcblxuXHRcdFx0Ly9Db3B5IG92ZXIgc29tZSB2YXJpYWJsZXMgdG8gYWxsb3cgY2FsbGluZyB0aGUgc29ydGFibGUncyBuYXRpdmUgX2ludGVyc2VjdHNXaXRoXG5cdFx0XHR0aGlzLmluc3RhbmNlLnBvc2l0aW9uQWJzID0gaW5zdC5wb3NpdGlvbkFicztcblx0XHRcdHRoaXMuaW5zdGFuY2UuaGVscGVyUHJvcG9ydGlvbnMgPSBpbnN0LmhlbHBlclByb3BvcnRpb25zO1xuXHRcdFx0dGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sgPSBpbnN0Lm9mZnNldC5jbGljaztcblxuXHRcdFx0aWYodGhpcy5pbnN0YW5jZS5faW50ZXJzZWN0c1dpdGgodGhpcy5pbnN0YW5jZS5jb250YWluZXJDYWNoZSkpIHtcblx0XHRcdFx0aW5uZXJtb3N0SW50ZXJzZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0JC5lYWNoKGluc3Quc29ydGFibGVzLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5wb3NpdGlvbkFicyA9IGluc3QucG9zaXRpb25BYnM7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5oZWxwZXJQcm9wb3J0aW9ucyA9IGluc3QuaGVscGVyUHJvcG9ydGlvbnM7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sgPSBpbnN0Lm9mZnNldC5jbGljaztcblx0XHRcdFx0XHRpZiAodGhpcyAhPT0gdGhpc1NvcnRhYmxlICYmXG5cdFx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLl9pbnRlcnNlY3RzV2l0aCh0aGlzLmluc3RhbmNlLmNvbnRhaW5lckNhY2hlKSAmJlxuXHRcdFx0XHRcdFx0JC5jb250YWlucyh0aGlzU29ydGFibGUuaW5zdGFuY2UuZWxlbWVudFswXSwgdGhpcy5pbnN0YW5jZS5lbGVtZW50WzBdKVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0aW5uZXJtb3N0SW50ZXJzZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBpbm5lcm1vc3RJbnRlcnNlY3Rpbmc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdGlmKGlubmVybW9zdEludGVyc2VjdGluZykge1xuXHRcdFx0XHQvL0lmIGl0IGludGVyc2VjdHMsIHdlIHVzZSBhIGxpdHRsZSBpc092ZXIgdmFyaWFibGUgYW5kIHNldCBpdCBvbmNlLCBzbyBvdXIgbW92ZS1pbiBzdHVmZiBnZXRzIGZpcmVkIG9ubHkgb25jZVxuXHRcdFx0XHRpZighdGhpcy5pbnN0YW5jZS5pc092ZXIpIHtcblxuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMTtcblx0XHRcdFx0XHQvL05vdyB3ZSBmYWtlIHRoZSBzdGFydCBvZiBkcmFnZ2luZyBmb3IgdGhlIHNvcnRhYmxlIGluc3RhbmNlLFxuXHRcdFx0XHRcdC8vYnkgY2xvbmluZyB0aGUgbGlzdCBncm91cCBpdGVtLCBhcHBlbmRpbmcgaXQgdG8gdGhlIHNvcnRhYmxlIGFuZCB1c2luZyBpdCBhcyBpbnN0LmN1cnJlbnRJdGVtXG5cdFx0XHRcdFx0Ly9XZSBjYW4gdGhlbiBmaXJlIHRoZSBzdGFydCBldmVudCBvZiB0aGUgc29ydGFibGUgd2l0aCBvdXIgcGFzc2VkIGJyb3dzZXIgZXZlbnQsIGFuZCBvdXIgb3duIGhlbHBlciAoc28gaXQgZG9lc24ndCBjcmVhdGUgYSBuZXcgb25lKVxuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW0gPSAkKHRoYXQpLmNsb25lKCkucmVtb3ZlQXR0cihcImlkXCIpLmFwcGVuZFRvKHRoaXMuaW5zdGFuY2UuZWxlbWVudCkuZGF0YShcInVpLXNvcnRhYmxlLWl0ZW1cIiwgdHJ1ZSk7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vcHRpb25zLl9oZWxwZXIgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGVscGVyOyAvL1N0b3JlIGhlbHBlciBvcHRpb24gdG8gbGF0ZXIgcmVzdG9yZSBpdFxuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oZWxwZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHVpLmhlbHBlclswXTsgfTtcblxuXHRcdFx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW1bMF07XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5fbW91c2VDYXB0dXJlKGV2ZW50LCB0cnVlKTtcblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLl9tb3VzZVN0YXJ0KGV2ZW50LCB0cnVlLCB0cnVlKTtcblxuXHRcdFx0XHRcdC8vQmVjYXVzZSB0aGUgYnJvd3NlciBldmVudCBpcyB3YXkgb2ZmIHRoZSBuZXcgYXBwZW5kZWQgcG9ydGxldCwgd2UgbW9kaWZ5IGEgY291cGxlIG9mIHZhcmlhYmxlcyB0byByZWZsZWN0IHRoZSBjaGFuZ2VzXG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sudG9wID0gaW5zdC5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2Uub2Zmc2V0LmNsaWNrLmxlZnQgPSBpbnN0Lm9mZnNldC5jbGljay5sZWZ0O1xuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2Uub2Zmc2V0LnBhcmVudC5sZWZ0IC09IGluc3Qub2Zmc2V0LnBhcmVudC5sZWZ0IC0gdGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LmxlZnQ7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LnRvcCAtPSBpbnN0Lm9mZnNldC5wYXJlbnQudG9wIC0gdGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LnRvcDtcblxuXHRcdFx0XHRcdGluc3QuX3RyaWdnZXIoXCJ0b1NvcnRhYmxlXCIsIGV2ZW50KTtcblx0XHRcdFx0XHRpbnN0LmRyb3BwZWQgPSB0aGlzLmluc3RhbmNlLmVsZW1lbnQ7IC8vZHJhZ2dhYmxlIHJldmVydCBuZWVkcyB0aGF0XG5cdFx0XHRcdFx0Ly9oYWNrIHNvIHJlY2VpdmUvdXBkYXRlIGNhbGxiYWNrcyB3b3JrIChtb3N0bHkpXG5cdFx0XHRcdFx0aW5zdC5jdXJyZW50SXRlbSA9IGluc3QuZWxlbWVudDtcblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLmZyb21PdXRzaWRlID0gaW5zdDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9Qcm92aWRlZCB3ZSBkaWQgYWxsIHRoZSBwcmV2aW91cyBzdGVwcywgd2UgY2FuIGZpcmUgdGhlIGRyYWcgZXZlbnQgb2YgdGhlIHNvcnRhYmxlIG9uIGV2ZXJ5IGRyYWdnYWJsZSBkcmFnLCB3aGVuIGl0IGludGVyc2VjdHMgd2l0aCB0aGUgc29ydGFibGVcblx0XHRcdFx0aWYodGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbSkge1xuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2UuX21vdXNlRHJhZyhldmVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvL0lmIGl0IGRvZXNuJ3QgaW50ZXJzZWN0IHdpdGggdGhlIHNvcnRhYmxlLCBhbmQgaXQgaW50ZXJzZWN0ZWQgYmVmb3JlLFxuXHRcdFx0XHQvL3dlIGZha2UgdGhlIGRyYWcgc3RvcCBvZiB0aGUgc29ydGFibGUsIGJ1dCBtYWtlIHN1cmUgaXQgZG9lc24ndCByZW1vdmUgdGhlIGhlbHBlciBieSB1c2luZyBjYW5jZWxIZWxwZXJSZW1vdmFsXG5cdFx0XHRcdGlmKHRoaXMuaW5zdGFuY2UuaXNPdmVyKSB7XG5cblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLmlzT3ZlciA9IDA7XG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gdHJ1ZTtcblxuXHRcdFx0XHRcdC8vUHJldmVudCByZXZlcnRpbmcgb24gdGhpcyBmb3JjZWQgc3RvcFxuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5yZXZlcnQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIFRoZSBvdXQgZXZlbnQgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGluZGVwZW5kZW50bHlcblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLl90cmlnZ2VyKFwib3V0XCIsIGV2ZW50LCB0aGlzLmluc3RhbmNlLl91aUhhc2godGhpcy5pbnN0YW5jZSkpO1xuXG5cdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5fbW91c2VTdG9wKGV2ZW50LCB0cnVlKTtcblx0XHRcdFx0XHR0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGVscGVyID0gdGhpcy5pbnN0YW5jZS5vcHRpb25zLl9oZWxwZXI7XG5cblx0XHRcdFx0XHQvL05vdyB3ZSByZW1vdmUgb3VyIGN1cnJlbnRJdGVtLCB0aGUgbGlzdCBncm91cCBjbG9uZSBhZ2FpbiwgYW5kIHRoZSBwbGFjZWhvbGRlciwgYW5kIGFuaW1hdGUgdGhlIGhlbHBlciBiYWNrIHRvIGl0J3Mgb3JpZ2luYWwgc2l6ZVxuXHRcdFx0XHRcdHRoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0aWYodGhpcy5pbnN0YW5jZS5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRcdFx0dGhpcy5pbnN0YW5jZS5wbGFjZWhvbGRlci5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbnN0Ll90cmlnZ2VyKFwiZnJvbVNvcnRhYmxlXCIsIGV2ZW50KTtcblx0XHRcdFx0XHRpbnN0LmRyb3BwZWQgPSBmYWxzZTsgLy9kcmFnZ2FibGUgcmV2ZXJ0IG5lZWRzIHRoYXRcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHR9XG59KTtcblxuJC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwiY3Vyc29yXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0ID0gJChcImJvZHlcIiksIG8gPSAkKHRoaXMpLmRhdGEoXCJ1aS1kcmFnZ2FibGVcIikub3B0aW9ucztcblx0XHRpZiAodC5jc3MoXCJjdXJzb3JcIikpIHtcblx0XHRcdG8uX2N1cnNvciA9IHQuY3NzKFwiY3Vyc29yXCIpO1xuXHRcdH1cblx0XHR0LmNzcyhcImN1cnNvclwiLCBvLmN1cnNvcik7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLm9wdGlvbnM7XG5cdFx0aWYgKG8uX2N1cnNvcikge1xuXHRcdFx0JChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIG8uX2N1cnNvcik7XG5cdFx0fVxuXHR9XG59KTtcblxuJC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwib3BhY2l0eVwiLCB7XG5cdHN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcblx0XHR2YXIgdCA9ICQodWkuaGVscGVyKSwgbyA9ICQodGhpcykuZGF0YShcInVpLWRyYWdnYWJsZVwiKS5vcHRpb25zO1xuXHRcdGlmKHQuY3NzKFwib3BhY2l0eVwiKSkge1xuXHRcdFx0by5fb3BhY2l0eSA9IHQuY3NzKFwib3BhY2l0eVwiKTtcblx0XHR9XG5cdFx0dC5jc3MoXCJvcGFjaXR5XCIsIG8ub3BhY2l0eSk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdHZhciBvID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLm9wdGlvbnM7XG5cdFx0aWYoby5fb3BhY2l0eSkge1xuXHRcdFx0JCh1aS5oZWxwZXIpLmNzcyhcIm9wYWNpdHlcIiwgby5fb3BhY2l0eSk7XG5cdFx0fVxuXHR9XG59KTtcblxuJC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwic2Nyb2xsXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpO1xuXHRcdGlmKGkuc2Nyb2xsUGFyZW50WzBdICE9PSBkb2N1bWVudCAmJiBpLnNjcm9sbFBhcmVudFswXS50YWdOYW1lICE9PSBcIkhUTUxcIikge1xuXHRcdFx0aS5vdmVyZmxvd09mZnNldCA9IGkuc2Nyb2xsUGFyZW50Lm9mZnNldCgpO1xuXHRcdH1cblx0fSxcblx0ZHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIGkgPSAkKHRoaXMpLmRhdGEoXCJ1aS1kcmFnZ2FibGVcIiksIG8gPSBpLm9wdGlvbnMsIHNjcm9sbGVkID0gZmFsc2U7XG5cblx0XHRpZihpLnNjcm9sbFBhcmVudFswXSAhPT0gZG9jdW1lbnQgJiYgaS5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSAhPT0gXCJIVE1MXCIpIHtcblxuXHRcdFx0aWYoIW8uYXhpcyB8fCBvLmF4aXMgIT09IFwieFwiKSB7XG5cdFx0XHRcdGlmKChpLm92ZXJmbG93T2Zmc2V0LnRvcCArIGkuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodCkgLSBldmVudC5wYWdlWSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHtcblx0XHRcdFx0XHRpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCArIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH0gZWxzZSBpZihldmVudC5wYWdlWSAtIGkub3ZlcmZsb3dPZmZzZXQudG9wIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCA9IHNjcm9sbGVkID0gaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wIC0gby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighby5heGlzIHx8IG8uYXhpcyAhPT0gXCJ5XCIpIHtcblx0XHRcdFx0aWYoKGkub3ZlcmZsb3dPZmZzZXQubGVmdCArIGkuc2Nyb2xsUGFyZW50WzBdLm9mZnNldFdpZHRoKSAtIGV2ZW50LnBhZ2VYIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgKyBvLnNjcm9sbFNwZWVkO1xuXHRcdFx0XHR9IGVsc2UgaWYoZXZlbnQucGFnZVggLSBpLm92ZXJmbG93T2Zmc2V0LmxlZnQgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0aS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID0gaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmKCFvLmF4aXMgfHwgby5heGlzICE9PSBcInhcIikge1xuXHRcdFx0XHRpZihldmVudC5wYWdlWSAtICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdHNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIC0gby5zY3JvbGxTcGVlZCk7XG5cdFx0XHRcdH0gZWxzZSBpZigkKHdpbmRvdykuaGVpZ2h0KCkgLSAoZXZlbnQucGFnZVkgLSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgKyBvLnNjcm9sbFNwZWVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighby5heGlzIHx8IG8uYXhpcyAhPT0gXCJ5XCIpIHtcblx0XHRcdFx0aWYoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWQpO1xuXHRcdFx0XHR9IGVsc2UgaWYoJCh3aW5kb3cpLndpZHRoKCkgLSAoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdHNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYoc2Nyb2xsZWQgIT09IGZhbHNlICYmICQudWkuZGRtYW5hZ2VyICYmICFvLmRyb3BCZWhhdmlvdXIpIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKGksIGV2ZW50KTtcblx0XHR9XG5cblx0fVxufSk7XG5cbiQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLCBcInNuYXBcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgaSA9ICQodGhpcykuZGF0YShcInVpLWRyYWdnYWJsZVwiKSxcblx0XHRcdG8gPSBpLm9wdGlvbnM7XG5cblx0XHRpLnNuYXBFbGVtZW50cyA9IFtdO1xuXG5cdFx0JChvLnNuYXAuY29uc3RydWN0b3IgIT09IFN0cmluZyA/ICggby5zbmFwLml0ZW1zIHx8IFwiOmRhdGEodWktZHJhZ2dhYmxlKVwiICkgOiBvLnNuYXApLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgJHQgPSAkKHRoaXMpLFxuXHRcdFx0XHQkbyA9ICR0Lm9mZnNldCgpO1xuXHRcdFx0aWYodGhpcyAhPT0gaS5lbGVtZW50WzBdKSB7XG5cdFx0XHRcdGkuc25hcEVsZW1lbnRzLnB1c2goe1xuXHRcdFx0XHRcdGl0ZW06IHRoaXMsXG5cdFx0XHRcdFx0d2lkdGg6ICR0Lm91dGVyV2lkdGgoKSwgaGVpZ2h0OiAkdC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdHRvcDogJG8udG9wLCBsZWZ0OiAkby5sZWZ0XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0sXG5cdGRyYWc6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXG5cdFx0dmFyIHRzLCBicywgbHMsIHJzLCBsLCByLCB0LCBiLCBpLCBmaXJzdCxcblx0XHRcdGluc3QgPSAkKHRoaXMpLmRhdGEoXCJ1aS1kcmFnZ2FibGVcIiksXG5cdFx0XHRvID0gaW5zdC5vcHRpb25zLFxuXHRcdFx0ZCA9IG8uc25hcFRvbGVyYW5jZSxcblx0XHRcdHgxID0gdWkub2Zmc2V0LmxlZnQsIHgyID0geDEgKyBpbnN0LmhlbHBlclByb3BvcnRpb25zLndpZHRoLFxuXHRcdFx0eTEgPSB1aS5vZmZzZXQudG9wLCB5MiA9IHkxICsgaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQ7XG5cblx0XHRmb3IgKGkgPSBpbnN0LnNuYXBFbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG5cblx0XHRcdGwgPSBpbnN0LnNuYXBFbGVtZW50c1tpXS5sZWZ0O1xuXHRcdFx0ciA9IGwgKyBpbnN0LnNuYXBFbGVtZW50c1tpXS53aWR0aDtcblx0XHRcdHQgPSBpbnN0LnNuYXBFbGVtZW50c1tpXS50b3A7XG5cdFx0XHRiID0gdCArIGluc3Quc25hcEVsZW1lbnRzW2ldLmhlaWdodDtcblxuXHRcdFx0Ly9ZZXMsIEkga25vdywgdGhpcyBpcyBpbnNhbmUgOylcblx0XHRcdGlmKCEoKGwtZCA8IHgxICYmIHgxIDwgcitkICYmIHQtZCA8IHkxICYmIHkxIDwgYitkKSB8fCAobC1kIDwgeDEgJiYgeDEgPCByK2QgJiYgdC1kIDwgeTIgJiYgeTIgPCBiK2QpIHx8IChsLWQgPCB4MiAmJiB4MiA8IHIrZCAmJiB0LWQgPCB5MSAmJiB5MSA8IGIrZCkgfHwgKGwtZCA8IHgyICYmIHgyIDwgcitkICYmIHQtZCA8IHkyICYmIHkyIDwgYitkKSkpIHtcblx0XHRcdFx0aWYoaW5zdC5zbmFwRWxlbWVudHNbaV0uc25hcHBpbmcpIHtcblx0XHRcdFx0XHQoaW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZSAmJiBpbnN0Lm9wdGlvbnMuc25hcC5yZWxlYXNlLmNhbGwoaW5zdC5lbGVtZW50LCBldmVudCwgJC5leHRlbmQoaW5zdC5fdWlIYXNoKCksIHsgc25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzW2ldLml0ZW0gfSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbnN0LnNuYXBFbGVtZW50c1tpXS5zbmFwcGluZyA9IGZhbHNlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoby5zbmFwTW9kZSAhPT0gXCJpbm5lclwiKSB7XG5cdFx0XHRcdHRzID0gTWF0aC5hYnModCAtIHkyKSA8PSBkO1xuXHRcdFx0XHRicyA9IE1hdGguYWJzKGIgLSB5MSkgPD0gZDtcblx0XHRcdFx0bHMgPSBNYXRoLmFicyhsIC0geDIpIDw9IGQ7XG5cdFx0XHRcdHJzID0gTWF0aC5hYnMociAtIHgxKSA8PSBkO1xuXHRcdFx0XHRpZih0cykge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKFwicmVsYXRpdmVcIiwgeyB0b3A6IHQgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodCwgbGVmdDogMCB9KS50b3AgLSBpbnN0Lm1hcmdpbnMudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGJzKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLCB7IHRvcDogYiwgbGVmdDogMCB9KS50b3AgLSBpbnN0Lm1hcmdpbnMudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGxzKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24ubGVmdCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKFwicmVsYXRpdmVcIiwgeyB0b3A6IDAsIGxlZnQ6IGwgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLndpZHRoIH0pLmxlZnQgLSBpbnN0Lm1hcmdpbnMubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihycykge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiAwLCBsZWZ0OiByIH0pLmxlZnQgLSBpbnN0Lm1hcmdpbnMubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmaXJzdCA9ICh0cyB8fCBicyB8fCBscyB8fCBycyk7XG5cblx0XHRcdGlmKG8uc25hcE1vZGUgIT09IFwib3V0ZXJcIikge1xuXHRcdFx0XHR0cyA9IE1hdGguYWJzKHQgLSB5MSkgPD0gZDtcblx0XHRcdFx0YnMgPSBNYXRoLmFicyhiIC0geTIpIDw9IGQ7XG5cdFx0XHRcdGxzID0gTWF0aC5hYnMobCAtIHgxKSA8PSBkO1xuXHRcdFx0XHRycyA9IE1hdGguYWJzKHIgLSB4MikgPD0gZDtcblx0XHRcdFx0aWYodHMpIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiB0LCBsZWZ0OiAwIH0pLnRvcCAtIGluc3QubWFyZ2lucy50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoYnMpIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiBiIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsIGxlZnQ6IDAgfSkudG9wIC0gaW5zdC5tYXJnaW5zLnRvcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihscykge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiAwLCBsZWZ0OiBsIH0pLmxlZnQgLSBpbnN0Lm1hcmdpbnMubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihycykge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiAwLCBsZWZ0OiByIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIWluc3Quc25hcEVsZW1lbnRzW2ldLnNuYXBwaW5nICYmICh0cyB8fCBicyB8fCBscyB8fCBycyB8fCBmaXJzdCkpIHtcblx0XHRcdFx0KGluc3Qub3B0aW9ucy5zbmFwLnNuYXAgJiYgaW5zdC5vcHRpb25zLnNuYXAuc25hcC5jYWxsKGluc3QuZWxlbWVudCwgZXZlbnQsICQuZXh0ZW5kKGluc3QuX3VpSGFzaCgpLCB7IHNuYXBJdGVtOiBpbnN0LnNuYXBFbGVtZW50c1tpXS5pdGVtIH0pKSk7XG5cdFx0XHR9XG5cdFx0XHRpbnN0LnNuYXBFbGVtZW50c1tpXS5zbmFwcGluZyA9ICh0cyB8fCBicyB8fCBscyB8fCBycyB8fCBmaXJzdCk7XG5cblx0XHR9XG5cblx0fVxufSk7XG5cbiQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLCBcInN0YWNrXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtaW4sXG5cdFx0XHRvID0gdGhpcy5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLm9wdGlvbnMsXG5cdFx0XHRncm91cCA9ICQubWFrZUFycmF5KCQoby5zdGFjaykpLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG5cdFx0XHRcdHJldHVybiAocGFyc2VJbnQoJChhKS5jc3MoXCJ6SW5kZXhcIiksMTApIHx8IDApIC0gKHBhcnNlSW50KCQoYikuY3NzKFwiekluZGV4XCIpLDEwKSB8fCAwKTtcblx0XHRcdH0pO1xuXG5cdFx0aWYgKCFncm91cC5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cblx0XHRtaW4gPSBwYXJzZUludCgkKGdyb3VwWzBdKS5jc3MoXCJ6SW5kZXhcIiksIDEwKSB8fCAwO1xuXHRcdCQoZ3JvdXApLmVhY2goZnVuY3Rpb24oaSkge1xuXHRcdFx0JCh0aGlzKS5jc3MoXCJ6SW5kZXhcIiwgbWluICsgaSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5jc3MoXCJ6SW5kZXhcIiwgKG1pbiArIGdyb3VwLmxlbmd0aCkpO1xuXHR9XG59KTtcblxuJC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwiekluZGV4XCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdHZhciB0ID0gJCh1aS5oZWxwZXIpLCBvID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLm9wdGlvbnM7XG5cdFx0aWYodC5jc3MoXCJ6SW5kZXhcIikpIHtcblx0XHRcdG8uX3pJbmRleCA9IHQuY3NzKFwiekluZGV4XCIpO1xuXHRcdH1cblx0XHR0LmNzcyhcInpJbmRleFwiLCBvLnpJbmRleCk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdHZhciBvID0gJCh0aGlzKS5kYXRhKFwidWktZHJhZ2dhYmxlXCIpLm9wdGlvbnM7XG5cdFx0aWYoby5fekluZGV4KSB7XG5cdFx0XHQkKHVpLmhlbHBlcikuY3NzKFwiekluZGV4XCIsIG8uX3pJbmRleCk7XG5cdFx0fVxuXHR9XG59KTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG5mdW5jdGlvbiBpc092ZXJBeGlzKCB4LCByZWZlcmVuY2UsIHNpemUgKSB7XG5cdHJldHVybiAoIHggPiByZWZlcmVuY2UgKSAmJiAoIHggPCAoIHJlZmVyZW5jZSArIHNpemUgKSApO1xufVxuXG4kLndpZGdldChcInVpLmRyb3BwYWJsZVwiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdHdpZGdldEV2ZW50UHJlZml4OiBcImRyb3BcIixcblx0b3B0aW9uczoge1xuXHRcdGFjY2VwdDogXCIqXCIsXG5cdFx0YWN0aXZlQ2xhc3M6IGZhbHNlLFxuXHRcdGFkZENsYXNzZXM6IHRydWUsXG5cdFx0Z3JlZWR5OiBmYWxzZSxcblx0XHRob3ZlckNsYXNzOiBmYWxzZSxcblx0XHRzY29wZTogXCJkZWZhdWx0XCIsXG5cdFx0dG9sZXJhbmNlOiBcImludGVyc2VjdFwiLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0YWN0aXZhdGU6IG51bGwsXG5cdFx0ZGVhY3RpdmF0ZTogbnVsbCxcblx0XHRkcm9wOiBudWxsLFxuXHRcdG91dDogbnVsbCxcblx0XHRvdmVyOiBudWxsXG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRhY2NlcHQgPSBvLmFjY2VwdDtcblxuXHRcdHRoaXMuaXNvdmVyID0gZmFsc2U7XG5cdFx0dGhpcy5pc291dCA9IHRydWU7XG5cblx0XHR0aGlzLmFjY2VwdCA9ICQuaXNGdW5jdGlvbihhY2NlcHQpID8gYWNjZXB0IDogZnVuY3Rpb24oZCkge1xuXHRcdFx0cmV0dXJuIGQuaXMoYWNjZXB0KTtcblx0XHR9O1xuXG5cdFx0Ly9TdG9yZSB0aGUgZHJvcHBhYmxlJ3MgcHJvcG9ydGlvbnNcblx0XHR0aGlzLnByb3BvcnRpb25zID0geyB3aWR0aDogdGhpcy5lbGVtZW50WzBdLm9mZnNldFdpZHRoLCBoZWlnaHQ6IHRoaXMuZWxlbWVudFswXS5vZmZzZXRIZWlnaHQgfTtcblxuXHRcdC8vIEFkZCB0aGUgcmVmZXJlbmNlIGFuZCBwb3NpdGlvbnMgdG8gdGhlIG1hbmFnZXJcblx0XHQkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW28uc2NvcGVdID0gJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tvLnNjb3BlXSB8fCBbXTtcblx0XHQkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW28uc2NvcGVdLnB1c2godGhpcyk7XG5cblx0XHQoby5hZGRDbGFzc2VzICYmIHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcInVpLWRyb3BwYWJsZVwiKSk7XG5cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0ZHJvcCA9ICQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbdGhpcy5vcHRpb25zLnNjb3BlXTtcblxuXHRcdGZvciAoIDsgaSA8IGRyb3AubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRpZiAoIGRyb3BbaV0gPT09IHRoaXMgKSB7XG5cdFx0XHRcdGRyb3Auc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLWRyb3BwYWJsZSB1aS1kcm9wcGFibGUtZGlzYWJsZWRcIik7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXG5cdFx0aWYoa2V5ID09PSBcImFjY2VwdFwiKSB7XG5cdFx0XHR0aGlzLmFjY2VwdCA9ICQuaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0cmV0dXJuIGQuaXModmFsdWUpO1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0JC5XaWRnZXQucHJvdG90eXBlLl9zZXRPcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRfYWN0aXZhdGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cdFx0aWYodGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblx0XHR9XG5cdFx0aWYoZHJhZ2dhYmxlKXtcblx0XHRcdHRoaXMuX3RyaWdnZXIoXCJhY3RpdmF0ZVwiLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTtcblx0XHR9XG5cdH0sXG5cblx0X2RlYWN0aXZhdGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cdFx0aWYodGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblx0XHR9XG5cdFx0aWYoZHJhZ2dhYmxlKXtcblx0XHRcdHRoaXMuX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsIGV2ZW50LCB0aGlzLnVpKGRyYWdnYWJsZSkpO1xuXHRcdH1cblx0fSxcblxuXHRfb3ZlcjogZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdHZhciBkcmFnZ2FibGUgPSAkLnVpLmRkbWFuYWdlci5jdXJyZW50O1xuXG5cdFx0Ly8gQmFpbCBpZiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZSBhcmUgc2FtZSBlbGVtZW50XG5cdFx0aWYgKCFkcmFnZ2FibGUgfHwgKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudClbMF0gPT09IHRoaXMuZWxlbWVudFswXSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSwoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KSkpIHtcblx0XHRcdGlmKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90cmlnZ2VyKFwib3ZlclwiLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTtcblx0XHR9XG5cblx0fSxcblxuXHRfb3V0OiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cblx0XHQvLyBCYWlsIGlmIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlIGFyZSBzYW1lIGVsZW1lbnRcblx0XHRpZiAoIWRyYWdnYWJsZSB8fCAoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KVswXSA9PT0gdGhpcy5lbGVtZW50WzBdKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLChkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHwgZHJhZ2dhYmxlLmVsZW1lbnQpKSkge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyaWdnZXIoXCJvdXRcIiwgZXZlbnQsIHRoaXMudWkoZHJhZ2dhYmxlKSk7XG5cdFx0fVxuXG5cdH0sXG5cblx0X2Ryb3A6IGZ1bmN0aW9uKGV2ZW50LGN1c3RvbSkge1xuXG5cdFx0dmFyIGRyYWdnYWJsZSA9IGN1c3RvbSB8fCAkLnVpLmRkbWFuYWdlci5jdXJyZW50LFxuXHRcdFx0Y2hpbGRyZW5JbnRlcnNlY3Rpb24gPSBmYWxzZTtcblxuXHRcdC8vIEJhaWwgaWYgZHJhZ2dhYmxlIGFuZCBkcm9wcGFibGUgYXJlIHNhbWUgZWxlbWVudFxuXHRcdGlmICghZHJhZ2dhYmxlIHx8IChkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHwgZHJhZ2dhYmxlLmVsZW1lbnQpWzBdID09PSB0aGlzLmVsZW1lbnRbMF0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmVsZW1lbnQuZmluZChcIjpkYXRhKHVpLWRyb3BwYWJsZSlcIikubm90KFwiLnVpLWRyYWdnYWJsZS1kcmFnZ2luZ1wiKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluc3QgPSAkLmRhdGEodGhpcywgXCJ1aS1kcm9wcGFibGVcIik7XG5cdFx0XHRpZihcblx0XHRcdFx0aW5zdC5vcHRpb25zLmdyZWVkeSAmJlxuXHRcdFx0XHQhaW5zdC5vcHRpb25zLmRpc2FibGVkICYmXG5cdFx0XHRcdGluc3Qub3B0aW9ucy5zY29wZSA9PT0gZHJhZ2dhYmxlLm9wdGlvbnMuc2NvcGUgJiZcblx0XHRcdFx0aW5zdC5hY2NlcHQuY2FsbChpbnN0LmVsZW1lbnRbMF0sIChkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHwgZHJhZ2dhYmxlLmVsZW1lbnQpKSAmJlxuXHRcdFx0XHQkLnVpLmludGVyc2VjdChkcmFnZ2FibGUsICQuZXh0ZW5kKGluc3QsIHsgb2Zmc2V0OiBpbnN0LmVsZW1lbnQub2Zmc2V0KCkgfSksIGluc3Qub3B0aW9ucy50b2xlcmFuY2UpXG5cdFx0XHQpIHsgY2hpbGRyZW5JbnRlcnNlY3Rpb24gPSB0cnVlOyByZXR1cm4gZmFsc2U7IH1cblx0XHR9KTtcblx0XHRpZihjaGlsZHJlbkludGVyc2VjdGlvbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLChkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHwgZHJhZ2dhYmxlLmVsZW1lbnQpKSkge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyaWdnZXIoXCJkcm9wXCIsIGV2ZW50LCB0aGlzLnVpKGRyYWdnYWJsZSkpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHR1aTogZnVuY3Rpb24oYykge1xuXHRcdHJldHVybiB7XG5cdFx0XHRkcmFnZ2FibGU6IChjLmN1cnJlbnRJdGVtIHx8IGMuZWxlbWVudCksXG5cdFx0XHRoZWxwZXI6IGMuaGVscGVyLFxuXHRcdFx0cG9zaXRpb246IGMucG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IGMucG9zaXRpb25BYnNcblx0XHR9O1xuXHR9XG5cbn0pO1xuXG4kLnVpLmludGVyc2VjdCA9IGZ1bmN0aW9uKGRyYWdnYWJsZSwgZHJvcHBhYmxlLCB0b2xlcmFuY2VNb2RlKSB7XG5cblx0aWYgKCFkcm9wcGFibGUub2Zmc2V0KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGRyYWdnYWJsZUxlZnQsIGRyYWdnYWJsZVRvcCxcblx0XHR4MSA9IChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS5sZWZ0LCB4MiA9IHgxICsgZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoLFxuXHRcdHkxID0gKGRyYWdnYWJsZS5wb3NpdGlvbkFicyB8fCBkcmFnZ2FibGUucG9zaXRpb24uYWJzb2x1dGUpLnRvcCwgeTIgPSB5MSArIGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsXG5cdFx0bCA9IGRyb3BwYWJsZS5vZmZzZXQubGVmdCwgciA9IGwgKyBkcm9wcGFibGUucHJvcG9ydGlvbnMud2lkdGgsXG5cdFx0dCA9IGRyb3BwYWJsZS5vZmZzZXQudG9wLCBiID0gdCArIGRyb3BwYWJsZS5wcm9wb3J0aW9ucy5oZWlnaHQ7XG5cblx0c3dpdGNoICh0b2xlcmFuY2VNb2RlKSB7XG5cdFx0Y2FzZSBcImZpdFwiOlxuXHRcdFx0cmV0dXJuIChsIDw9IHgxICYmIHgyIDw9IHIgJiYgdCA8PSB5MSAmJiB5MiA8PSBiKTtcblx0XHRjYXNlIFwiaW50ZXJzZWN0XCI6XG5cdFx0XHRyZXR1cm4gKGwgPCB4MSArIChkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLyAyKSAmJiAvLyBSaWdodCBIYWxmXG5cdFx0XHRcdHgyIC0gKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIpIDwgciAmJiAvLyBMZWZ0IEhhbGZcblx0XHRcdFx0dCA8IHkxICsgKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyKSAmJiAvLyBCb3R0b20gSGFsZlxuXHRcdFx0XHR5MiAtIChkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMikgPCBiICk7IC8vIFRvcCBIYWxmXG5cdFx0Y2FzZSBcInBvaW50ZXJcIjpcblx0XHRcdGRyYWdnYWJsZUxlZnQgPSAoKGRyYWdnYWJsZS5wb3NpdGlvbkFicyB8fCBkcmFnZ2FibGUucG9zaXRpb24uYWJzb2x1dGUpLmxlZnQgKyAoZHJhZ2dhYmxlLmNsaWNrT2Zmc2V0IHx8IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2spLmxlZnQpO1xuXHRcdFx0ZHJhZ2dhYmxlVG9wID0gKChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS50b3AgKyAoZHJhZ2dhYmxlLmNsaWNrT2Zmc2V0IHx8IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2spLnRvcCk7XG5cdFx0XHRyZXR1cm4gaXNPdmVyQXhpcyggZHJhZ2dhYmxlVG9wLCB0LCBkcm9wcGFibGUucHJvcG9ydGlvbnMuaGVpZ2h0ICkgJiYgaXNPdmVyQXhpcyggZHJhZ2dhYmxlTGVmdCwgbCwgZHJvcHBhYmxlLnByb3BvcnRpb25zLndpZHRoICk7XG5cdFx0Y2FzZSBcInRvdWNoXCI6XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQoeTEgPj0gdCAmJiB5MSA8PSBiKSB8fFx0Ly8gVG9wIGVkZ2UgdG91Y2hpbmdcblx0XHRcdFx0KHkyID49IHQgJiYgeTIgPD0gYikgfHxcdC8vIEJvdHRvbSBlZGdlIHRvdWNoaW5nXG5cdFx0XHRcdCh5MSA8IHQgJiYgeTIgPiBiKVx0XHQvLyBTdXJyb3VuZGVkIHZlcnRpY2FsbHlcblx0XHRcdCkgJiYgKFxuXHRcdFx0XHQoeDEgPj0gbCAmJiB4MSA8PSByKSB8fFx0Ly8gTGVmdCBlZGdlIHRvdWNoaW5nXG5cdFx0XHRcdCh4MiA+PSBsICYmIHgyIDw9IHIpIHx8XHQvLyBSaWdodCBlZGdlIHRvdWNoaW5nXG5cdFx0XHRcdCh4MSA8IGwgJiYgeDIgPiByKVx0XHQvLyBTdXJyb3VuZGVkIGhvcml6b250YWxseVxuXHRcdFx0KTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxufTtcblxuLypcblx0VGhpcyBtYW5hZ2VyIHRyYWNrcyBvZmZzZXRzIG9mIGRyYWdnYWJsZXMgYW5kIGRyb3BwYWJsZXNcbiovXG4kLnVpLmRkbWFuYWdlciA9IHtcblx0Y3VycmVudDogbnVsbCxcblx0ZHJvcHBhYmxlczogeyBcImRlZmF1bHRcIjogW10gfSxcblx0cHJlcGFyZU9mZnNldHM6IGZ1bmN0aW9uKHQsIGV2ZW50KSB7XG5cblx0XHR2YXIgaSwgaixcblx0XHRcdG0gPSAkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW3Qub3B0aW9ucy5zY29wZV0gfHwgW10sXG5cdFx0XHR0eXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbCwgLy8gd29ya2Fyb3VuZCBmb3IgIzIzMTdcblx0XHRcdGxpc3QgPSAodC5jdXJyZW50SXRlbSB8fCB0LmVsZW1lbnQpLmZpbmQoXCI6ZGF0YSh1aS1kcm9wcGFibGUpXCIpLmFkZEJhY2soKTtcblxuXHRcdGRyb3BwYWJsZXNMb29wOiBmb3IgKGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykge1xuXG5cdFx0XHQvL05vIGRpc2FibGVkIGFuZCBub24tYWNjZXB0ZWRcblx0XHRcdGlmKG1baV0ub3B0aW9ucy5kaXNhYmxlZCB8fCAodCAmJiAhbVtpXS5hY2NlcHQuY2FsbChtW2ldLmVsZW1lbnRbMF0sKHQuY3VycmVudEl0ZW0gfHwgdC5lbGVtZW50KSkpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IGVsZW1lbnRzIGluIHRoZSBjdXJyZW50IGRyYWdnZWQgaXRlbVxuXHRcdFx0Zm9yIChqPTA7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGlmKGxpc3Rbal0gPT09IG1baV0uZWxlbWVudFswXSkge1xuXHRcdFx0XHRcdG1baV0ucHJvcG9ydGlvbnMuaGVpZ2h0ID0gMDtcblx0XHRcdFx0XHRjb250aW51ZSBkcm9wcGFibGVzTG9vcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtW2ldLnZpc2libGUgPSBtW2ldLmVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSAhPT0gXCJub25lXCI7XG5cdFx0XHRpZighbVtpXS52aXNpYmxlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvL0FjdGl2YXRlIHRoZSBkcm9wcGFibGUgaWYgdXNlZCBkaXJlY3RseSBmcm9tIGRyYWdnYWJsZXNcblx0XHRcdGlmKHR5cGUgPT09IFwibW91c2Vkb3duXCIpIHtcblx0XHRcdFx0bVtpXS5fYWN0aXZhdGUuY2FsbChtW2ldLCBldmVudCk7XG5cdFx0XHR9XG5cblx0XHRcdG1baV0ub2Zmc2V0ID0gbVtpXS5lbGVtZW50Lm9mZnNldCgpO1xuXHRcdFx0bVtpXS5wcm9wb3J0aW9ucyA9IHsgd2lkdGg6IG1baV0uZWxlbWVudFswXS5vZmZzZXRXaWR0aCwgaGVpZ2h0OiBtW2ldLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IH07XG5cblx0XHR9XG5cblx0fSxcblx0ZHJvcDogZnVuY3Rpb24oZHJhZ2dhYmxlLCBldmVudCkge1xuXG5cdFx0dmFyIGRyb3BwZWQgPSBmYWxzZTtcblx0XHQkLmVhY2goJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tkcmFnZ2FibGUub3B0aW9ucy5zY29wZV0gfHwgW10sIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZighdGhpcy5vcHRpb25zKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHRoaXMudmlzaWJsZSAmJiAkLnVpLmludGVyc2VjdChkcmFnZ2FibGUsIHRoaXMsIHRoaXMub3B0aW9ucy50b2xlcmFuY2UpKSB7XG5cdFx0XHRcdGRyb3BwZWQgPSB0aGlzLl9kcm9wLmNhbGwodGhpcywgZXZlbnQpIHx8IGRyb3BwZWQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHRoaXMudmlzaWJsZSAmJiB0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSwoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KSkpIHtcblx0XHRcdFx0dGhpcy5pc291dCA9IHRydWU7XG5cdFx0XHRcdHRoaXMuaXNvdmVyID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGUuY2FsbCh0aGlzLCBldmVudCk7XG5cdFx0XHR9XG5cblx0XHR9KTtcblx0XHRyZXR1cm4gZHJvcHBlZDtcblxuXHR9LFxuXHRkcmFnU3RhcnQ6IGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGV2ZW50ICkge1xuXHRcdC8vTGlzdGVuIGZvciBzY3JvbGxpbmcgc28gdGhhdCBpZiB0aGUgZHJhZ2dpbmcgY2F1c2VzIHNjcm9sbGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIGRyb3BwYWJsZXMgY2FuIGJlIHJlY2FsY3VsYXRlZCAoc2VlICM1MDAzKVxuXHRcdGRyYWdnYWJsZS5lbGVtZW50LnBhcmVudHNVbnRpbCggXCJib2R5XCIgKS5iaW5kKCBcInNjcm9sbC5kcm9wcGFibGVcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiggIWRyYWdnYWJsZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgKSB7XG5cdFx0XHRcdCQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKCBkcmFnZ2FibGUsIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGRyYWc6IGZ1bmN0aW9uKGRyYWdnYWJsZSwgZXZlbnQpIHtcblxuXHRcdC8vSWYgeW91IGhhdmUgYSBoaWdobHkgZHluYW1pYyBwYWdlLCB5b3UgbWlnaHQgdHJ5IHRoaXMgb3B0aW9uLiBJdCByZW5kZXJzIHBvc2l0aW9ucyBldmVyeSB0aW1lIHlvdSBtb3ZlIHRoZSBtb3VzZS5cblx0XHRpZihkcmFnZ2FibGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhkcmFnZ2FibGUsIGV2ZW50KTtcblx0XHR9XG5cblx0XHQvL1J1biB0aHJvdWdoIGFsbCBkcm9wcGFibGVzIGFuZCBjaGVjayB0aGVpciBwb3NpdGlvbnMgYmFzZWQgb24gc3BlY2lmaWMgdG9sZXJhbmNlIG9wdGlvbnNcblx0XHQkLmVhY2goJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tkcmFnZ2FibGUub3B0aW9ucy5zY29wZV0gfHwgW10sIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5ncmVlZHlDaGlsZCB8fCAhdGhpcy52aXNpYmxlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhcmVudEluc3RhbmNlLCBzY29wZSwgcGFyZW50LFxuXHRcdFx0XHRpbnRlcnNlY3RzID0gJC51aS5pbnRlcnNlY3QoZHJhZ2dhYmxlLCB0aGlzLCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlKSxcblx0XHRcdFx0YyA9ICFpbnRlcnNlY3RzICYmIHRoaXMuaXNvdmVyID8gXCJpc291dFwiIDogKGludGVyc2VjdHMgJiYgIXRoaXMuaXNvdmVyID8gXCJpc292ZXJcIiA6IG51bGwpO1xuXHRcdFx0aWYoIWMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmdyZWVkeSkge1xuXHRcdFx0XHQvLyBmaW5kIGRyb3BwYWJsZSBwYXJlbnRzIHdpdGggc2FtZSBzY29wZVxuXHRcdFx0XHRzY29wZSA9IHRoaXMub3B0aW9ucy5zY29wZTtcblx0XHRcdFx0cGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudHMoXCI6ZGF0YSh1aS1kcm9wcGFibGUpXCIpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZGF0YSh0aGlzLCBcInVpLWRyb3BwYWJsZVwiKS5vcHRpb25zLnNjb3BlID09PSBzY29wZTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKHBhcmVudC5sZW5ndGgpIHtcblx0XHRcdFx0XHRwYXJlbnRJbnN0YW5jZSA9ICQuZGF0YShwYXJlbnRbMF0sIFwidWktZHJvcHBhYmxlXCIpO1xuXHRcdFx0XHRcdHBhcmVudEluc3RhbmNlLmdyZWVkeUNoaWxkID0gKGMgPT09IFwiaXNvdmVyXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHdlIGp1c3QgbW92ZWQgaW50byBhIGdyZWVkeSBjaGlsZFxuXHRcdFx0aWYgKHBhcmVudEluc3RhbmNlICYmIGMgPT09IFwiaXNvdmVyXCIpIHtcblx0XHRcdFx0cGFyZW50SW5zdGFuY2UuaXNvdmVyID0gZmFsc2U7XG5cdFx0XHRcdHBhcmVudEluc3RhbmNlLmlzb3V0ID0gdHJ1ZTtcblx0XHRcdFx0cGFyZW50SW5zdGFuY2UuX291dC5jYWxsKHBhcmVudEluc3RhbmNlLCBldmVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXNbY10gPSB0cnVlO1xuXHRcdFx0dGhpc1tjID09PSBcImlzb3V0XCIgPyBcImlzb3ZlclwiIDogXCJpc291dFwiXSA9IGZhbHNlO1xuXHRcdFx0dGhpc1tjID09PSBcImlzb3ZlclwiID8gXCJfb3ZlclwiIDogXCJfb3V0XCJdLmNhbGwodGhpcywgZXZlbnQpO1xuXG5cdFx0XHQvLyB3ZSBqdXN0IG1vdmVkIG91dCBvZiBhIGdyZWVkeSBjaGlsZFxuXHRcdFx0aWYgKHBhcmVudEluc3RhbmNlICYmIGMgPT09IFwiaXNvdXRcIikge1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5pc291dCA9IGZhbHNlO1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5pc292ZXIgPSB0cnVlO1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5fb3Zlci5jYWxsKHBhcmVudEluc3RhbmNlLCBldmVudCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fSxcblx0ZHJhZ1N0b3A6IGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGV2ZW50ICkge1xuXHRcdGRyYWdnYWJsZS5lbGVtZW50LnBhcmVudHNVbnRpbCggXCJib2R5XCIgKS51bmJpbmQoIFwic2Nyb2xsLmRyb3BwYWJsZVwiICk7XG5cdFx0Ly9DYWxsIHByZXBhcmVPZmZzZXRzIG9uZSBmaW5hbCB0aW1lIHNpbmNlIElFIGRvZXMgbm90IGZpcmUgcmV0dXJuIHNjcm9sbCBldmVudHMgd2hlbiBvdmVyZmxvdyB3YXMgY2F1c2VkIGJ5IGRyYWcgKHNlZSAjNTAwMylcblx0XHRpZiggIWRyYWdnYWJsZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggZHJhZ2dhYmxlLCBldmVudCApO1xuXHRcdH1cblx0fVxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG5mdW5jdGlvbiBudW0odikge1xuXHRyZXR1cm4gcGFyc2VJbnQodiwgMTApIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG5cdHJldHVybiAhaXNOYU4ocGFyc2VJbnQodmFsdWUsIDEwKSk7XG59XG5cbiQud2lkZ2V0KFwidWkucmVzaXphYmxlXCIsICQudWkubW91c2UsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0d2lkZ2V0RXZlbnRQcmVmaXg6IFwicmVzaXplXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhbHNvUmVzaXplOiBmYWxzZSxcblx0XHRhbmltYXRlOiBmYWxzZSxcblx0XHRhbmltYXRlRHVyYXRpb246IFwic2xvd1wiLFxuXHRcdGFuaW1hdGVFYXNpbmc6IFwic3dpbmdcIixcblx0XHRhc3BlY3RSYXRpbzogZmFsc2UsXG5cdFx0YXV0b0hpZGU6IGZhbHNlLFxuXHRcdGNvbnRhaW5tZW50OiBmYWxzZSxcblx0XHRnaG9zdDogZmFsc2UsXG5cdFx0Z3JpZDogZmFsc2UsXG5cdFx0aGFuZGxlczogXCJlLHMsc2VcIixcblx0XHRoZWxwZXI6IGZhbHNlLFxuXHRcdG1heEhlaWdodDogbnVsbCxcblx0XHRtYXhXaWR0aDogbnVsbCxcblx0XHRtaW5IZWlnaHQ6IDEwLFxuXHRcdG1pbldpZHRoOiAxMCxcblx0XHQvLyBTZWUgIzc5NjBcblx0XHR6SW5kZXg6IDkwLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0cmVzaXplOiBudWxsLFxuXHRcdHN0YXJ0OiBudWxsLFxuXHRcdHN0b3A6IG51bGxcblx0fSxcblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgbiwgaSwgaGFuZGxlLCBheGlzLCBobmFtZSxcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblx0XHR0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS1yZXNpemFibGVcIik7XG5cblx0XHQkLmV4dGVuZCh0aGlzLCB7XG5cdFx0XHRfYXNwZWN0UmF0aW86ICEhKG8uYXNwZWN0UmF0aW8pLFxuXHRcdFx0YXNwZWN0UmF0aW86IG8uYXNwZWN0UmF0aW8sXG5cdFx0XHRvcmlnaW5hbEVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcblx0XHRcdF9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzOiBbXSxcblx0XHRcdF9oZWxwZXI6IG8uaGVscGVyIHx8IG8uZ2hvc3QgfHwgby5hbmltYXRlID8gby5oZWxwZXIgfHwgXCJ1aS1yZXNpemFibGUtaGVscGVyXCIgOiBudWxsXG5cdFx0fSk7XG5cblx0XHQvL1dyYXAgdGhlIGVsZW1lbnQgaWYgaXQgY2Fubm90IGhvbGQgY2hpbGQgbm9kZXNcblx0XHRpZih0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL2NhbnZhc3x0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9ufGltZy9pKSkge1xuXG5cdFx0XHQvL0NyZWF0ZSBhIHdyYXBwZXIgZWxlbWVudCBhbmQgc2V0IHRoZSB3cmFwcGVyIHRvIHRoZSBuZXcgY3VycmVudCBpbnRlcm5hbCBlbGVtZW50XG5cdFx0XHR0aGlzLmVsZW1lbnQud3JhcChcblx0XHRcdFx0JChcIjxkaXYgY2xhc3M9J3VpLXdyYXBwZXInIHN0eWxlPSdvdmVyZmxvdzogaGlkZGVuOyc+PC9kaXY+XCIpLmNzcyh7XG5cdFx0XHRcdFx0cG9zaXRpb246IHRoaXMuZWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSxcblx0XHRcdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxcblx0XHRcdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdHRvcDogdGhpcy5lbGVtZW50LmNzcyhcInRvcFwiKSxcblx0XHRcdFx0XHRsZWZ0OiB0aGlzLmVsZW1lbnQuY3NzKFwibGVmdFwiKVxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblxuXHRcdFx0Ly9PdmVyd3JpdGUgdGhlIG9yaWdpbmFsIHRoaXMuZWxlbWVudFxuXHRcdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpLmRhdGEoXG5cdFx0XHRcdFwidWktcmVzaXphYmxlXCIsIHRoaXMuZWxlbWVudC5kYXRhKFwidWktcmVzaXphYmxlXCIpXG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRJc1dyYXBwZXIgPSB0cnVlO1xuXG5cdFx0XHQvL01vdmUgbWFyZ2lucyB0byB0aGUgd3JhcHBlclxuXHRcdFx0dGhpcy5lbGVtZW50LmNzcyh7IG1hcmdpbkxlZnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhcIm1hcmdpbkxlZnRcIiksIG1hcmdpblRvcDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwibWFyZ2luVG9wXCIpLCBtYXJnaW5SaWdodDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwibWFyZ2luUmlnaHRcIiksIG1hcmdpbkJvdHRvbTogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwibWFyZ2luQm90dG9tXCIpIH0pO1xuXHRcdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHsgbWFyZ2luTGVmdDogMCwgbWFyZ2luVG9wOiAwLCBtYXJnaW5SaWdodDogMCwgbWFyZ2luQm90dG9tOiAwfSk7XG5cblx0XHRcdC8vUHJldmVudCBTYWZhcmkgdGV4dGFyZWEgcmVzaXplXG5cdFx0XHR0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUgPSB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIik7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIiwgXCJub25lXCIpO1xuXG5cdFx0XHQvL1B1c2ggdGhlIGFjdHVhbCBlbGVtZW50IHRvIG91ciBwcm9wb3J0aW9uYWxseVJlc2l6ZSBpbnRlcm5hbCBhcnJheVxuXHRcdFx0dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5wdXNoKHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyh7IHBvc2l0aW9uOiBcInN0YXRpY1wiLCB6b29tOiAxLCBkaXNwbGF5OiBcImJsb2NrXCIgfSkpO1xuXG5cdFx0XHQvLyBhdm9pZCBJRSBqdW1wIChoYXJkIHNldCB0aGUgbWFyZ2luKVxuXHRcdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHsgbWFyZ2luOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5cIikgfSk7XG5cblx0XHRcdC8vIGZpeCBoYW5kbGVycyBvZmZzZXRcblx0XHRcdHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmhhbmRsZXMgPSBvLmhhbmRsZXMgfHwgKCEkKFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIiwgdGhpcy5lbGVtZW50KS5sZW5ndGggPyBcImUscyxzZVwiIDogeyBuOiBcIi51aS1yZXNpemFibGUtblwiLCBlOiBcIi51aS1yZXNpemFibGUtZVwiLCBzOiBcIi51aS1yZXNpemFibGUtc1wiLCB3OiBcIi51aS1yZXNpemFibGUtd1wiLCBzZTogXCIudWktcmVzaXphYmxlLXNlXCIsIHN3OiBcIi51aS1yZXNpemFibGUtc3dcIiwgbmU6IFwiLnVpLXJlc2l6YWJsZS1uZVwiLCBudzogXCIudWktcmVzaXphYmxlLW53XCIgfSk7XG5cdFx0aWYodGhpcy5oYW5kbGVzLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcblxuXHRcdFx0aWYgKCB0aGlzLmhhbmRsZXMgPT09IFwiYWxsXCIpIHtcblx0XHRcdFx0dGhpcy5oYW5kbGVzID0gXCJuLGUscyx3LHNlLHN3LG5lLG53XCI7XG5cdFx0XHR9XG5cblx0XHRcdG4gPSB0aGlzLmhhbmRsZXMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0dGhpcy5oYW5kbGVzID0ge307XG5cblx0XHRcdGZvcihpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0XHRoYW5kbGUgPSAkLnRyaW0obltpXSk7XG5cdFx0XHRcdGhuYW1lID0gXCJ1aS1yZXNpemFibGUtXCIraGFuZGxlO1xuXHRcdFx0XHRheGlzID0gJChcIjxkaXYgY2xhc3M9J3VpLXJlc2l6YWJsZS1oYW5kbGUgXCIgKyBobmFtZSArIFwiJz48L2Rpdj5cIik7XG5cblx0XHRcdFx0Ly8gQXBwbHkgekluZGV4IHRvIGFsbCBoYW5kbGVzIC0gc2VlICM3OTYwXG5cdFx0XHRcdGF4aXMuY3NzKHsgekluZGV4OiBvLnpJbmRleCB9KTtcblxuXHRcdFx0XHQvL1RPRE8gOiBXaGF0J3MgZ29pbmcgb24gaGVyZT9cblx0XHRcdFx0aWYgKFwic2VcIiA9PT0gaGFuZGxlKSB7XG5cdFx0XHRcdFx0YXhpcy5hZGRDbGFzcyhcInVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtc2VcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL0luc2VydCBpbnRvIGludGVybmFsIGhhbmRsZXMgb2JqZWN0IGFuZCBhcHBlbmQgdG8gZWxlbWVudFxuXHRcdFx0XHR0aGlzLmhhbmRsZXNbaGFuZGxlXSA9IFwiLnVpLXJlc2l6YWJsZS1cIitoYW5kbGU7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmQoYXhpcyk7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW5kZXJBeGlzID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cblx0XHRcdHZhciBpLCBheGlzLCBwYWRQb3MsIHBhZFdyYXBwZXI7XG5cblx0XHRcdHRhcmdldCA9IHRhcmdldCB8fCB0aGlzLmVsZW1lbnQ7XG5cblx0XHRcdGZvcihpIGluIHRoaXMuaGFuZGxlcykge1xuXG5cdFx0XHRcdGlmKHRoaXMuaGFuZGxlc1tpXS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7XG5cdFx0XHRcdFx0dGhpcy5oYW5kbGVzW2ldID0gJCh0aGlzLmhhbmRsZXNbaV0sIHRoaXMuZWxlbWVudCkuc2hvdygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9BcHBseSBwYWQgdG8gd3JhcHBlciBlbGVtZW50LCBuZWVkZWQgdG8gZml4IGF4aXMgcG9zaXRpb24gKHRleHRhcmVhLCBpbnB1dHMsIHNjcm9sbHMpXG5cdFx0XHRcdGlmICh0aGlzLmVsZW1lbnRJc1dyYXBwZXIgJiYgdGhpcy5vcmlnaW5hbEVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL3RleHRhcmVhfGlucHV0fHNlbGVjdHxidXR0b24vaSkpIHtcblxuXHRcdFx0XHRcdGF4aXMgPSAkKHRoaXMuaGFuZGxlc1tpXSwgdGhpcy5lbGVtZW50KTtcblxuXHRcdFx0XHRcdC8vQ2hlY2tpbmcgdGhlIGNvcnJlY3QgcGFkIGFuZCBib3JkZXJcblx0XHRcdFx0XHRwYWRXcmFwcGVyID0gL3N3fG5lfG53fHNlfG58cy8udGVzdChpKSA/IGF4aXMub3V0ZXJIZWlnaHQoKSA6IGF4aXMub3V0ZXJXaWR0aCgpO1xuXG5cdFx0XHRcdFx0Ly9UaGUgcGFkZGluZyB0eXBlIGkgaGF2ZSB0byBhcHBseS4uLlxuXHRcdFx0XHRcdHBhZFBvcyA9IFsgXCJwYWRkaW5nXCIsXG5cdFx0XHRcdFx0XHQvbmV8bnd8bi8udGVzdChpKSA/IFwiVG9wXCIgOlxuXHRcdFx0XHRcdFx0L3NlfHN3fHMvLnRlc3QoaSkgPyBcIkJvdHRvbVwiIDpcblx0XHRcdFx0XHRcdC9eZSQvLnRlc3QoaSkgPyBcIlJpZ2h0XCIgOiBcIkxlZnRcIiBdLmpvaW4oXCJcIik7XG5cblx0XHRcdFx0XHR0YXJnZXQuY3NzKHBhZFBvcywgcGFkV3JhcHBlcik7XG5cblx0XHRcdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1RPRE86IFdoYXQncyB0aGF0IGdvb2QgZm9yPyBUaGVyZSdzIG5vdCBhbnl0aGluZyB0byBiZSBleGVjdXRlZCBsZWZ0XG5cdFx0XHRcdGlmKCEkKHRoaXMuaGFuZGxlc1tpXSkubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHJlbmRlckF4aXMgYSBwcm90b3R5cGUgZnVuY3Rpb25cblx0XHR0aGlzLl9yZW5kZXJBeGlzKHRoaXMuZWxlbWVudCk7XG5cblx0XHR0aGlzLl9oYW5kbGVzID0gJChcIi51aS1yZXNpemFibGUtaGFuZGxlXCIsIHRoaXMuZWxlbWVudClcblx0XHRcdC5kaXNhYmxlU2VsZWN0aW9uKCk7XG5cblx0XHQvL01hdGNoaW5nIGF4aXMgbmFtZVxuXHRcdHRoaXMuX2hhbmRsZXMubW91c2VvdmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGF0LnJlc2l6aW5nKSB7XG5cdFx0XHRcdGlmICh0aGlzLmNsYXNzTmFtZSkge1xuXHRcdFx0XHRcdGF4aXMgPSB0aGlzLmNsYXNzTmFtZS5tYXRjaCgvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL0F4aXMsIGRlZmF1bHQgPSBzZVxuXHRcdFx0XHR0aGF0LmF4aXMgPSBheGlzICYmIGF4aXNbMV0gPyBheGlzWzFdIDogXCJzZVwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly9JZiB3ZSB3YW50IHRvIGF1dG8gaGlkZSB0aGUgZWxlbWVudHNcblx0XHRpZiAoby5hdXRvSGlkZSkge1xuXHRcdFx0dGhpcy5faGFuZGxlcy5oaWRlKCk7XG5cdFx0XHQkKHRoaXMuZWxlbWVudClcblx0XHRcdFx0LmFkZENsYXNzKFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIpXG5cdFx0XHRcdC5tb3VzZWVudGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmIChvLmRpc2FibGVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIik7XG5cdFx0XHRcdFx0dGhhdC5faGFuZGxlcy5zaG93KCk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYgKG8uZGlzYWJsZWQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCF0aGF0LnJlc2l6aW5nKSB7XG5cdFx0XHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIpO1xuXHRcdFx0XHRcdFx0dGhhdC5faGFuZGxlcy5oaWRlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvL0luaXRpYWxpemUgdGhlIG1vdXNlIGludGVyYWN0aW9uXG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cblx0XHR0aGlzLl9tb3VzZURlc3Ryb3koKTtcblxuXHRcdHZhciB3cmFwcGVyLFxuXHRcdFx0X2Rlc3Ryb3kgPSBmdW5jdGlvbihleHApIHtcblx0XHRcdFx0JChleHApLnJlbW92ZUNsYXNzKFwidWktcmVzaXphYmxlIHVpLXJlc2l6YWJsZS1kaXNhYmxlZCB1aS1yZXNpemFibGUtcmVzaXppbmdcIilcblx0XHRcdFx0XHQucmVtb3ZlRGF0YShcInJlc2l6YWJsZVwiKS5yZW1vdmVEYXRhKFwidWktcmVzaXphYmxlXCIpLnVuYmluZChcIi5yZXNpemFibGVcIikuZmluZChcIi51aS1yZXNpemFibGUtaGFuZGxlXCIpLnJlbW92ZSgpO1xuXHRcdFx0fTtcblxuXHRcdC8vVE9ETzogVW53cmFwIGF0IHNhbWUgRE9NIHBvc2l0aW9uXG5cdFx0aWYgKHRoaXMuZWxlbWVudElzV3JhcHBlcikge1xuXHRcdFx0X2Rlc3Ryb3kodGhpcy5lbGVtZW50KTtcblx0XHRcdHdyYXBwZXIgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe1xuXHRcdFx0XHRwb3NpdGlvbjogd3JhcHBlci5jc3MoXCJwb3NpdGlvblwiKSxcblx0XHRcdFx0d2lkdGg6IHdyYXBwZXIub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IHdyYXBwZXIub3V0ZXJIZWlnaHQoKSxcblx0XHRcdFx0dG9wOiB3cmFwcGVyLmNzcyhcInRvcFwiKSxcblx0XHRcdFx0bGVmdDogd3JhcHBlci5jc3MoXCJsZWZ0XCIpXG5cdFx0XHR9KS5pbnNlcnRBZnRlciggd3JhcHBlciApO1xuXHRcdFx0d3JhcHBlci5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIiwgdGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlKTtcblx0XHRfZGVzdHJveSh0aGlzLm9yaWdpbmFsRWxlbWVudCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBpLCBoYW5kbGUsXG5cdFx0XHRjYXB0dXJlID0gZmFsc2U7XG5cblx0XHRmb3IgKGkgaW4gdGhpcy5oYW5kbGVzKSB7XG5cdFx0XHRoYW5kbGUgPSAkKHRoaXMuaGFuZGxlc1tpXSlbMF07XG5cdFx0XHRpZiAoaGFuZGxlID09PSBldmVudC50YXJnZXQgfHwgJC5jb250YWlucyhoYW5kbGUsIGV2ZW50LnRhcmdldCkpIHtcblx0XHRcdFx0Y2FwdHVyZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgY2FwdHVyZTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdHZhciBjdXJsZWZ0LCBjdXJ0b3AsIGN1cnNvcixcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRpbmlQb3MgPSB0aGlzLmVsZW1lbnQucG9zaXRpb24oKSxcblx0XHRcdGVsID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0dGhpcy5yZXNpemluZyA9IHRydWU7XG5cblx0XHQvLyBidWdmaXggZm9yIGh0dHA6Ly9kZXYuanF1ZXJ5LmNvbS90aWNrZXQvMTc0OVxuXHRcdGlmICggKC9hYnNvbHV0ZS8pLnRlc3QoIGVsLmNzcyhcInBvc2l0aW9uXCIpICkgKSB7XG5cdFx0XHRlbC5jc3MoeyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB0b3A6IGVsLmNzcyhcInRvcFwiKSwgbGVmdDogZWwuY3NzKFwibGVmdFwiKSB9KTtcblx0XHR9IGVsc2UgaWYgKGVsLmlzKFwiLnVpLWRyYWdnYWJsZVwiKSkge1xuXHRcdFx0ZWwuY3NzKHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdG9wOiBpbmlQb3MudG9wLCBsZWZ0OiBpbmlQb3MubGVmdCB9KTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZW5kZXJQcm94eSgpO1xuXG5cdFx0Y3VybGVmdCA9IG51bSh0aGlzLmhlbHBlci5jc3MoXCJsZWZ0XCIpKTtcblx0XHRjdXJ0b3AgPSBudW0odGhpcy5oZWxwZXIuY3NzKFwidG9wXCIpKTtcblxuXHRcdGlmIChvLmNvbnRhaW5tZW50KSB7XG5cdFx0XHRjdXJsZWZ0ICs9ICQoby5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpIHx8IDA7XG5cdFx0XHRjdXJ0b3AgKz0gJChvLmNvbnRhaW5tZW50KS5zY3JvbGxUb3AoKSB8fCAwO1xuXHRcdH1cblxuXHRcdC8vU3RvcmUgbmVlZGVkIHZhcmlhYmxlc1xuXHRcdHRoaXMub2Zmc2V0ID0gdGhpcy5oZWxwZXIub2Zmc2V0KCk7XG5cdFx0dGhpcy5wb3NpdGlvbiA9IHsgbGVmdDogY3VybGVmdCwgdG9wOiBjdXJ0b3AgfTtcblx0XHR0aGlzLnNpemUgPSB0aGlzLl9oZWxwZXIgPyB7IHdpZHRoOiBlbC5vdXRlcldpZHRoKCksIGhlaWdodDogZWwub3V0ZXJIZWlnaHQoKSB9IDogeyB3aWR0aDogZWwud2lkdGgoKSwgaGVpZ2h0OiBlbC5oZWlnaHQoKSB9O1xuXHRcdHRoaXMub3JpZ2luYWxTaXplID0gdGhpcy5faGVscGVyID8geyB3aWR0aDogZWwub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCkgfSA6IHsgd2lkdGg6IGVsLndpZHRoKCksIGhlaWdodDogZWwuaGVpZ2h0KCkgfTtcblx0XHR0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB7IGxlZnQ6IGN1cmxlZnQsIHRvcDogY3VydG9wIH07XG5cdFx0dGhpcy5zaXplRGlmZiA9IHsgd2lkdGg6IGVsLm91dGVyV2lkdGgoKSAtIGVsLndpZHRoKCksIGhlaWdodDogZWwub3V0ZXJIZWlnaHQoKSAtIGVsLmhlaWdodCgpIH07XG5cdFx0dGhpcy5vcmlnaW5hbE1vdXNlUG9zaXRpb24gPSB7IGxlZnQ6IGV2ZW50LnBhZ2VYLCB0b3A6IGV2ZW50LnBhZ2VZIH07XG5cblx0XHQvL0FzcGVjdCBSYXRpb1xuXHRcdHRoaXMuYXNwZWN0UmF0aW8gPSAodHlwZW9mIG8uYXNwZWN0UmF0aW8gPT09IFwibnVtYmVyXCIpID8gby5hc3BlY3RSYXRpbyA6ICgodGhpcy5vcmlnaW5hbFNpemUud2lkdGggLyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQpIHx8IDEpO1xuXG5cdFx0Y3Vyc29yID0gJChcIi51aS1yZXNpemFibGUtXCIgKyB0aGlzLmF4aXMpLmNzcyhcImN1cnNvclwiKTtcblx0XHQkKFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIiwgY3Vyc29yID09PSBcImF1dG9cIiA/IHRoaXMuYXhpcyArIFwiLXJlc2l6ZVwiIDogY3Vyc29yKTtcblxuXHRcdGVsLmFkZENsYXNzKFwidWktcmVzaXphYmxlLXJlc2l6aW5nXCIpO1xuXHRcdHRoaXMuX3Byb3BhZ2F0ZShcInN0YXJ0XCIsIGV2ZW50KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfbW91c2VEcmFnOiBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0Ly9JbmNyZWFzZSBwZXJmb3JtYW5jZSwgYXZvaWQgcmVnZXhcblx0XHR2YXIgZGF0YSxcblx0XHRcdGVsID0gdGhpcy5oZWxwZXIsIHByb3BzID0ge30sXG5cdFx0XHRzbXAgPSB0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbixcblx0XHRcdGEgPSB0aGlzLmF4aXMsXG5cdFx0XHRwcmV2VG9wID0gdGhpcy5wb3NpdGlvbi50b3AsXG5cdFx0XHRwcmV2TGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCxcblx0XHRcdHByZXZXaWR0aCA9IHRoaXMuc2l6ZS53aWR0aCxcblx0XHRcdHByZXZIZWlnaHQgPSB0aGlzLnNpemUuaGVpZ2h0LFxuXHRcdFx0ZHggPSAoZXZlbnQucGFnZVgtc21wLmxlZnQpfHwwLFxuXHRcdFx0ZHkgPSAoZXZlbnQucGFnZVktc21wLnRvcCl8fDAsXG5cdFx0XHR0cmlnZ2VyID0gdGhpcy5fY2hhbmdlW2FdO1xuXG5cdFx0aWYgKCF0cmlnZ2VyKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBhdHRycyB0aGF0IHdpbGwgYmUgY2hhbmdlXG5cdFx0ZGF0YSA9IHRyaWdnZXIuYXBwbHkodGhpcywgW2V2ZW50LCBkeCwgZHldKTtcblxuXHRcdC8vIFB1dCB0aGlzIGluIHRoZSBtb3VzZURyYWcgaGFuZGxlciBzaW5jZSB0aGUgdXNlciBjYW4gc3RhcnQgcHJlc3Npbmcgc2hpZnQgd2hpbGUgcmVzaXppbmdcblx0XHR0aGlzLl91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyhldmVudC5zaGlmdEtleSk7XG5cdFx0aWYgKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGV2ZW50LnNoaWZ0S2V5KSB7XG5cdFx0XHRkYXRhID0gdGhpcy5fdXBkYXRlUmF0aW8oZGF0YSwgZXZlbnQpO1xuXHRcdH1cblxuXHRcdGRhdGEgPSB0aGlzLl9yZXNwZWN0U2l6ZShkYXRhLCBldmVudCk7XG5cblx0XHR0aGlzLl91cGRhdGVDYWNoZShkYXRhKTtcblxuXHRcdC8vIHBsdWdpbnMgY2FsbGJhY2tzIG5lZWQgdG8gYmUgY2FsbGVkIGZpcnN0XG5cdFx0dGhpcy5fcHJvcGFnYXRlKFwicmVzaXplXCIsIGV2ZW50KTtcblxuXHRcdGlmICh0aGlzLnBvc2l0aW9uLnRvcCAhPT0gcHJldlRvcCkge1xuXHRcdFx0cHJvcHMudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyBcInB4XCI7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnBvc2l0aW9uLmxlZnQgIT09IHByZXZMZWZ0KSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0ICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zaXplLndpZHRoICE9PSBwcmV2V2lkdGgpIHtcblx0XHRcdHByb3BzLndpZHRoID0gdGhpcy5zaXplLndpZHRoICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zaXplLmhlaWdodCAhPT0gcHJldkhlaWdodCkge1xuXHRcdFx0cHJvcHMuaGVpZ2h0ID0gdGhpcy5zaXplLmhlaWdodCArIFwicHhcIjtcblx0XHR9XG5cdFx0ZWwuY3NzKHByb3BzKTtcblxuXHRcdGlmICghdGhpcy5faGVscGVyICYmIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHVzZXIgY2FsbGJhY2sgaWYgdGhlIGVsZW1lbnQgd2FzIHJlc2l6ZWRcblx0XHRpZiAoICEgJC5pc0VtcHR5T2JqZWN0KHByb3BzKSApIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoXCJyZXNpemVcIiwgZXZlbnQsIHRoaXMudWkoKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdF9tb3VzZVN0b3A6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHR0aGlzLnJlc2l6aW5nID0gZmFsc2U7XG5cdFx0dmFyIHByLCBpc3RhLCBzb2Zmc2V0aCwgc29mZnNldHcsIHMsIGxlZnQsIHRvcCxcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnMsIHRoYXQgPSB0aGlzO1xuXG5cdFx0aWYodGhpcy5faGVscGVyKSB7XG5cblx0XHRcdHByID0gdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cztcblx0XHRcdGlzdGEgPSBwci5sZW5ndGggJiYgKC90ZXh0YXJlYS9pKS50ZXN0KHByWzBdLm5vZGVOYW1lKTtcblx0XHRcdHNvZmZzZXRoID0gaXN0YSAmJiAkLnVpLmhhc1Njcm9sbChwclswXSwgXCJsZWZ0XCIpIC8qIFRPRE8gLSBqdW1wIGhlaWdodCAqLyA/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodDtcblx0XHRcdHNvZmZzZXR3ID0gaXN0YSA/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoO1xuXG5cdFx0XHRzID0geyB3aWR0aDogKHRoYXQuaGVscGVyLndpZHRoKCkgIC0gc29mZnNldHcpLCBoZWlnaHQ6ICh0aGF0LmhlbHBlci5oZWlnaHQoKSAtIHNvZmZzZXRoKSB9O1xuXHRcdFx0bGVmdCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKFwibGVmdFwiKSwgMTApICsgKHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSkgfHwgbnVsbDtcblx0XHRcdHRvcCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKFwidG9wXCIpLCAxMCkgKyAodGhhdC5wb3NpdGlvbi50b3AgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24udG9wKSkgfHwgbnVsbDtcblxuXHRcdFx0aWYgKCFvLmFuaW1hdGUpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNzcygkLmV4dGVuZChzLCB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0pKTtcblx0XHRcdH1cblxuXHRcdFx0dGhhdC5oZWxwZXIuaGVpZ2h0KHRoYXQuc2l6ZS5oZWlnaHQpO1xuXHRcdFx0dGhhdC5oZWxwZXIud2lkdGgodGhhdC5zaXplLndpZHRoKTtcblxuXHRcdFx0aWYgKHRoaXMuX2hlbHBlciAmJiAhby5hbmltYXRlKSB7XG5cdFx0XHRcdHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0JChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIFwiYXV0b1wiKTtcblxuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXJlc2l6YWJsZS1yZXNpemluZ1wiKTtcblxuXHRcdHRoaXMuX3Byb3BhZ2F0ZShcInN0b3BcIiwgZXZlbnQpO1xuXG5cdFx0aWYgKHRoaXMuX2hlbHBlcikge1xuXHRcdFx0dGhpcy5oZWxwZXIucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH0sXG5cblx0X3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzOiBmdW5jdGlvbihmb3JjZUFzcGVjdFJhdGlvKSB7XG5cdFx0dmFyIHBNaW5XaWR0aCwgcE1heFdpZHRoLCBwTWluSGVpZ2h0LCBwTWF4SGVpZ2h0LCBiLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdGIgPSB7XG5cdFx0XHRtaW5XaWR0aDogaXNOdW1iZXIoby5taW5XaWR0aCkgPyBvLm1pbldpZHRoIDogMCxcblx0XHRcdG1heFdpZHRoOiBpc051bWJlcihvLm1heFdpZHRoKSA/IG8ubWF4V2lkdGggOiBJbmZpbml0eSxcblx0XHRcdG1pbkhlaWdodDogaXNOdW1iZXIoby5taW5IZWlnaHQpID8gby5taW5IZWlnaHQgOiAwLFxuXHRcdFx0bWF4SGVpZ2h0OiBpc051bWJlcihvLm1heEhlaWdodCkgPyBvLm1heEhlaWdodCA6IEluZmluaXR5XG5cdFx0fTtcblxuXHRcdGlmKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGZvcmNlQXNwZWN0UmF0aW8pIHtcblx0XHRcdC8vIFdlIHdhbnQgdG8gY3JlYXRlIGFuIGVuY2xvc2luZyBib3ggd2hvc2UgYXNwZWN0IHJhdGlvbiBpcyB0aGUgcmVxdWVzdGVkIG9uZVxuXHRcdFx0Ly8gRmlyc3QsIGNvbXB1dGUgdGhlIFwicHJvamVjdGVkXCIgc2l6ZSBmb3IgZWFjaCBkaW1lbnNpb24gYmFzZWQgb24gdGhlIGFzcGVjdCByYXRpbyBhbmQgb3RoZXIgZGltZW5zaW9uXG5cdFx0XHRwTWluV2lkdGggPSBiLm1pbkhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWluSGVpZ2h0ID0gYi5taW5XaWR0aCAvIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWF4V2lkdGggPSBiLm1heEhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWF4SGVpZ2h0ID0gYi5tYXhXaWR0aCAvIHRoaXMuYXNwZWN0UmF0aW87XG5cblx0XHRcdGlmKHBNaW5XaWR0aCA+IGIubWluV2lkdGgpIHtcblx0XHRcdFx0Yi5taW5XaWR0aCA9IHBNaW5XaWR0aDtcblx0XHRcdH1cblx0XHRcdGlmKHBNaW5IZWlnaHQgPiBiLm1pbkhlaWdodCkge1xuXHRcdFx0XHRiLm1pbkhlaWdodCA9IHBNaW5IZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHRpZihwTWF4V2lkdGggPCBiLm1heFdpZHRoKSB7XG5cdFx0XHRcdGIubWF4V2lkdGggPSBwTWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZihwTWF4SGVpZ2h0IDwgYi5tYXhIZWlnaHQpIHtcblx0XHRcdFx0Yi5tYXhIZWlnaHQgPSBwTWF4SGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl92Qm91bmRhcmllcyA9IGI7XG5cdH0sXG5cblx0X3VwZGF0ZUNhY2hlOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0dGhpcy5vZmZzZXQgPSB0aGlzLmhlbHBlci5vZmZzZXQoKTtcblx0XHRpZiAoaXNOdW1iZXIoZGF0YS5sZWZ0KSkge1xuXHRcdFx0dGhpcy5wb3NpdGlvbi5sZWZ0ID0gZGF0YS5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoaXNOdW1iZXIoZGF0YS50b3ApKSB7XG5cdFx0XHR0aGlzLnBvc2l0aW9uLnRvcCA9IGRhdGEudG9wO1xuXHRcdH1cblx0XHRpZiAoaXNOdW1iZXIoZGF0YS5oZWlnaHQpKSB7XG5cdFx0XHR0aGlzLnNpemUuaGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG5cdFx0fVxuXHRcdGlmIChpc051bWJlcihkYXRhLndpZHRoKSkge1xuXHRcdFx0dGhpcy5zaXplLndpZHRoID0gZGF0YS53aWR0aDtcblx0XHR9XG5cdH0sXG5cblx0X3VwZGF0ZVJhdGlvOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdHZhciBjcG9zID0gdGhpcy5wb3NpdGlvbixcblx0XHRcdGNzaXplID0gdGhpcy5zaXplLFxuXHRcdFx0YSA9IHRoaXMuYXhpcztcblxuXHRcdGlmIChpc051bWJlcihkYXRhLmhlaWdodCkpIHtcblx0XHRcdGRhdGEud2lkdGggPSAoZGF0YS5oZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvKTtcblx0XHR9IGVsc2UgaWYgKGlzTnVtYmVyKGRhdGEud2lkdGgpKSB7XG5cdFx0XHRkYXRhLmhlaWdodCA9IChkYXRhLndpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyk7XG5cdFx0fVxuXG5cdFx0aWYgKGEgPT09IFwic3dcIikge1xuXHRcdFx0ZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCk7XG5cdFx0XHRkYXRhLnRvcCA9IG51bGw7XG5cdFx0fVxuXHRcdGlmIChhID09PSBcIm53XCIpIHtcblx0XHRcdGRhdGEudG9wID0gY3Bvcy50b3AgKyAoY3NpemUuaGVpZ2h0IC0gZGF0YS5oZWlnaHQpO1xuXHRcdFx0ZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0X3Jlc3BlY3RTaXplOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdHZhciBvID0gdGhpcy5fdkJvdW5kYXJpZXMsXG5cdFx0XHRhID0gdGhpcy5heGlzLFxuXHRcdFx0aXNtYXh3ID0gaXNOdW1iZXIoZGF0YS53aWR0aCkgJiYgby5tYXhXaWR0aCAmJiAoby5tYXhXaWR0aCA8IGRhdGEud2lkdGgpLCBpc21heGggPSBpc051bWJlcihkYXRhLmhlaWdodCkgJiYgby5tYXhIZWlnaHQgJiYgKG8ubWF4SGVpZ2h0IDwgZGF0YS5oZWlnaHQpLFxuXHRcdFx0aXNtaW53ID0gaXNOdW1iZXIoZGF0YS53aWR0aCkgJiYgby5taW5XaWR0aCAmJiAoby5taW5XaWR0aCA+IGRhdGEud2lkdGgpLCBpc21pbmggPSBpc051bWJlcihkYXRhLmhlaWdodCkgJiYgby5taW5IZWlnaHQgJiYgKG8ubWluSGVpZ2h0ID4gZGF0YS5oZWlnaHQpLFxuXHRcdFx0ZHcgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb24ubGVmdCArIHRoaXMub3JpZ2luYWxTaXplLndpZHRoLFxuXHRcdFx0ZGggPSB0aGlzLnBvc2l0aW9uLnRvcCArIHRoaXMuc2l6ZS5oZWlnaHQsXG5cdFx0XHRjdyA9IC9zd3xud3x3Ly50ZXN0KGEpLCBjaCA9IC9ud3xuZXxuLy50ZXN0KGEpO1xuXHRcdGlmIChpc21pbncpIHtcblx0XHRcdGRhdGEud2lkdGggPSBvLm1pbldpZHRoO1xuXHRcdH1cblx0XHRpZiAoaXNtaW5oKSB7XG5cdFx0XHRkYXRhLmhlaWdodCA9IG8ubWluSGVpZ2h0O1xuXHRcdH1cblx0XHRpZiAoaXNtYXh3KSB7XG5cdFx0XHRkYXRhLndpZHRoID0gby5tYXhXaWR0aDtcblx0XHR9XG5cdFx0aWYgKGlzbWF4aCkge1xuXHRcdFx0ZGF0YS5oZWlnaHQgPSBvLm1heEhlaWdodDtcblx0XHR9XG5cblx0XHRpZiAoaXNtaW53ICYmIGN3KSB7XG5cdFx0XHRkYXRhLmxlZnQgPSBkdyAtIG8ubWluV2lkdGg7XG5cdFx0fVxuXHRcdGlmIChpc21heHcgJiYgY3cpIHtcblx0XHRcdGRhdGEubGVmdCA9IGR3IC0gby5tYXhXaWR0aDtcblx0XHR9XG5cdFx0aWYgKGlzbWluaCAmJiBjaCkge1xuXHRcdFx0ZGF0YS50b3AgPSBkaCAtIG8ubWluSGVpZ2h0O1xuXHRcdH1cblx0XHRpZiAoaXNtYXhoICYmIGNoKSB7XG5cdFx0XHRkYXRhLnRvcCA9IGRoIC0gby5tYXhIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0Ly8gZml4aW5nIGp1bXAgZXJyb3Igb24gdG9wL2xlZnQgLSBidWcgIzIzMzBcblx0XHRpZiAoIWRhdGEud2lkdGggJiYgIWRhdGEuaGVpZ2h0ICYmICFkYXRhLmxlZnQgJiYgZGF0YS50b3ApIHtcblx0XHRcdGRhdGEudG9wID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKCFkYXRhLndpZHRoICYmICFkYXRhLmhlaWdodCAmJiAhZGF0YS50b3AgJiYgZGF0YS5sZWZ0KSB7XG5cdFx0XHRkYXRhLmxlZnQgPSBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9LFxuXG5cdF9wcm9wb3J0aW9uYWxseVJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoIXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGksIGosIGJvcmRlcnMsIHBhZGRpbmdzLCBwcmVsLFxuXHRcdFx0ZWxlbWVudCA9IHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudDtcblxuXHRcdGZvciAoIGk9MDsgaSA8IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0cHJlbCA9IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHNbaV07XG5cblx0XHRcdGlmICghdGhpcy5ib3JkZXJEaWYpIHtcblx0XHRcdFx0dGhpcy5ib3JkZXJEaWYgPSBbXTtcblx0XHRcdFx0Ym9yZGVycyA9IFtwcmVsLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLCBwcmVsLmNzcyhcImJvcmRlclJpZ2h0V2lkdGhcIiksIHByZWwuY3NzKFwiYm9yZGVyQm90dG9tV2lkdGhcIiksIHByZWwuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpXTtcblx0XHRcdFx0cGFkZGluZ3MgPSBbcHJlbC5jc3MoXCJwYWRkaW5nVG9wXCIpLCBwcmVsLmNzcyhcInBhZGRpbmdSaWdodFwiKSwgcHJlbC5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLCBwcmVsLmNzcyhcInBhZGRpbmdMZWZ0XCIpXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IGJvcmRlcnMubGVuZ3RoOyBqKysgKSB7XG5cdFx0XHRcdFx0dGhpcy5ib3JkZXJEaWZbIGogXSA9ICggcGFyc2VJbnQoIGJvcmRlcnNbIGogXSwgMTAgKSB8fCAwICkgKyAoIHBhcnNlSW50KCBwYWRkaW5nc1sgaiBdLCAxMCApIHx8IDAgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRwcmVsLmNzcyh7XG5cdFx0XHRcdGhlaWdodDogKGVsZW1lbnQuaGVpZ2h0KCkgLSB0aGlzLmJvcmRlckRpZlswXSAtIHRoaXMuYm9yZGVyRGlmWzJdKSB8fCAwLFxuXHRcdFx0XHR3aWR0aDogKGVsZW1lbnQud2lkdGgoKSAtIHRoaXMuYm9yZGVyRGlmWzFdIC0gdGhpcy5ib3JkZXJEaWZbM10pIHx8IDBcblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X3JlbmRlclByb3h5OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBlbCA9IHRoaXMuZWxlbWVudCwgbyA9IHRoaXMub3B0aW9ucztcblx0XHR0aGlzLmVsZW1lbnRPZmZzZXQgPSBlbC5vZmZzZXQoKTtcblxuXHRcdGlmKHRoaXMuX2hlbHBlcikge1xuXG5cdFx0XHR0aGlzLmhlbHBlciA9IHRoaXMuaGVscGVyIHx8ICQoXCI8ZGl2IHN0eWxlPSdvdmVyZmxvdzpoaWRkZW47Jz48L2Rpdj5cIik7XG5cblx0XHRcdHRoaXMuaGVscGVyLmFkZENsYXNzKHRoaXMuX2hlbHBlcikuY3NzKHtcblx0XHRcdFx0d2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCkgLSAxLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIC0gMSxcblx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0bGVmdDogdGhpcy5lbGVtZW50T2Zmc2V0LmxlZnQgK1wicHhcIixcblx0XHRcdFx0dG9wOiB0aGlzLmVsZW1lbnRPZmZzZXQudG9wICtcInB4XCIsXG5cdFx0XHRcdHpJbmRleDogKytvLnpJbmRleCAvL1RPRE86IERvbid0IG1vZGlmeSBvcHRpb25cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmhlbHBlclxuXHRcdFx0XHQuYXBwZW5kVG8oXCJib2R5XCIpXG5cdFx0XHRcdC5kaXNhYmxlU2VsZWN0aW9uKCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5oZWxwZXIgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0fVxuXG5cdH0sXG5cblx0X2NoYW5nZToge1xuXHRcdGU6IGZ1bmN0aW9uKGV2ZW50LCBkeCkge1xuXHRcdFx0cmV0dXJuIHsgd2lkdGg6IHRoaXMub3JpZ2luYWxTaXplLndpZHRoICsgZHggfTtcblx0XHR9LFxuXHRcdHc6IGZ1bmN0aW9uKGV2ZW50LCBkeCkge1xuXHRcdFx0dmFyIGNzID0gdGhpcy5vcmlnaW5hbFNpemUsIHNwID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uO1xuXHRcdFx0cmV0dXJuIHsgbGVmdDogc3AubGVmdCArIGR4LCB3aWR0aDogY3Mud2lkdGggLSBkeCB9O1xuXHRcdH0sXG5cdFx0bjogZnVuY3Rpb24oZXZlbnQsIGR4LCBkeSkge1xuXHRcdFx0dmFyIGNzID0gdGhpcy5vcmlnaW5hbFNpemUsIHNwID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uO1xuXHRcdFx0cmV0dXJuIHsgdG9wOiBzcC50b3AgKyBkeSwgaGVpZ2h0OiBjcy5oZWlnaHQgLSBkeSB9O1xuXHRcdH0sXG5cdFx0czogZnVuY3Rpb24oZXZlbnQsIGR4LCBkeSkge1xuXHRcdFx0cmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQgKyBkeSB9O1xuXHRcdH0sXG5cdFx0c2U6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHtcblx0XHRcdHJldHVybiAkLmV4dGVuZCh0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzLl9jaGFuZ2UuZS5hcHBseSh0aGlzLCBbZXZlbnQsIGR4LCBkeV0pKTtcblx0XHR9LFxuXHRcdHN3OiBmdW5jdGlvbihldmVudCwgZHgsIGR5KSB7XG5cdFx0XHRyZXR1cm4gJC5leHRlbmQodGhpcy5fY2hhbmdlLnMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGhpcy5fY2hhbmdlLncuYXBwbHkodGhpcywgW2V2ZW50LCBkeCwgZHldKSk7XG5cdFx0fSxcblx0XHRuZTogZnVuY3Rpb24oZXZlbnQsIGR4LCBkeSkge1xuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSkpO1xuXHRcdH0sXG5cdFx0bnc6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHtcblx0XHRcdHJldHVybiAkLmV4dGVuZCh0aGlzLl9jaGFuZ2Uubi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzLl9jaGFuZ2Uudy5hcHBseSh0aGlzLCBbZXZlbnQsIGR4LCBkeV0pKTtcblx0XHR9XG5cdH0sXG5cblx0X3Byb3BhZ2F0ZTogZnVuY3Rpb24obiwgZXZlbnQpIHtcblx0XHQkLnVpLnBsdWdpbi5jYWxsKHRoaXMsIG4sIFtldmVudCwgdGhpcy51aSgpXSk7XG5cdFx0KG4gIT09IFwicmVzaXplXCIgJiYgdGhpcy5fdHJpZ2dlcihuLCBldmVudCwgdGhpcy51aSgpKSk7XG5cdH0sXG5cblx0cGx1Z2luczoge30sXG5cblx0dWk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvcmlnaW5hbEVsZW1lbnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LFxuXHRcdFx0ZWxlbWVudDogdGhpcy5lbGVtZW50LFxuXHRcdFx0aGVscGVyOiB0aGlzLmhlbHBlcixcblx0XHRcdHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLFxuXHRcdFx0c2l6ZTogdGhpcy5zaXplLFxuXHRcdFx0b3JpZ2luYWxTaXplOiB0aGlzLm9yaWdpbmFsU2l6ZSxcblx0XHRcdG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvblxuXHRcdH07XG5cdH1cblxufSk7XG5cbi8qXG4gKiBSZXNpemFibGUgRXh0ZW5zaW9uc1xuICovXG5cbiQudWkucGx1Z2luLmFkZChcInJlc2l6YWJsZVwiLCBcImFuaW1hdGVcIiwge1xuXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgdGhhdCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZVwiKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRwciA9IHRoYXQuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMsXG5cdFx0XHRpc3RhID0gcHIubGVuZ3RoICYmICgvdGV4dGFyZWEvaSkudGVzdChwclswXS5ub2RlTmFtZSksXG5cdFx0XHRzb2Zmc2V0aCA9IGlzdGEgJiYgJC51aS5oYXNTY3JvbGwocHJbMF0sIFwibGVmdFwiKSAvKiBUT0RPIC0ganVtcCBoZWlnaHQgKi8gPyAwIDogdGhhdC5zaXplRGlmZi5oZWlnaHQsXG5cdFx0XHRzb2Zmc2V0dyA9IGlzdGEgPyAwIDogdGhhdC5zaXplRGlmZi53aWR0aCxcblx0XHRcdHN0eWxlID0geyB3aWR0aDogKHRoYXQuc2l6ZS53aWR0aCAtIHNvZmZzZXR3KSwgaGVpZ2h0OiAodGhhdC5zaXplLmhlaWdodCAtIHNvZmZzZXRoKSB9LFxuXHRcdFx0bGVmdCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKFwibGVmdFwiKSwgMTApICsgKHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSkgfHwgbnVsbCxcblx0XHRcdHRvcCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKFwidG9wXCIpLCAxMCkgKyAodGhhdC5wb3NpdGlvbi50b3AgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24udG9wKSkgfHwgbnVsbDtcblxuXHRcdHRoYXQuZWxlbWVudC5hbmltYXRlKFxuXHRcdFx0JC5leHRlbmQoc3R5bGUsIHRvcCAmJiBsZWZ0ID8geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9IDoge30pLCB7XG5cdFx0XHRcdGR1cmF0aW9uOiBvLmFuaW1hdGVEdXJhdGlvbixcblx0XHRcdFx0ZWFzaW5nOiBvLmFuaW1hdGVFYXNpbmcsXG5cdFx0XHRcdHN0ZXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdFx0XHR3aWR0aDogcGFyc2VJbnQodGhhdC5lbGVtZW50LmNzcyhcIndpZHRoXCIpLCAxMCksXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoXCJoZWlnaHRcIiksIDEwKSxcblx0XHRcdFx0XHRcdHRvcDogcGFyc2VJbnQodGhhdC5lbGVtZW50LmNzcyhcInRvcFwiKSwgMTApLFxuXHRcdFx0XHRcdFx0bGVmdDogcGFyc2VJbnQodGhhdC5lbGVtZW50LmNzcyhcImxlZnRcIiksIDEwKVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRpZiAocHIgJiYgcHIubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkKHByWzBdKS5jc3MoeyB3aWR0aDogZGF0YS53aWR0aCwgaGVpZ2h0OiBkYXRhLmhlaWdodCB9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBwcm9wYWdhdGluZyByZXNpemUsIGFuZCB1cGRhdGluZyB2YWx1ZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHN0ZXBcblx0XHRcdFx0XHR0aGF0Ll91cGRhdGVDYWNoZShkYXRhKTtcblx0XHRcdFx0XHR0aGF0Ll9wcm9wYWdhdGUoXCJyZXNpemVcIiwgZXZlbnQpO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9XG5cbn0pO1xuXG4kLnVpLnBsdWdpbi5hZGQoXCJyZXNpemFibGVcIiwgXCJjb250YWlubWVudFwiLCB7XG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50LCBwLCBjbywgY2gsIGN3LCB3aWR0aCwgaGVpZ2h0LFxuXHRcdFx0dGhhdCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZVwiKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRlbCA9IHRoYXQuZWxlbWVudCxcblx0XHRcdG9jID0gby5jb250YWlubWVudCxcblx0XHRcdGNlID0gKG9jIGluc3RhbmNlb2YgJCkgPyBvYy5nZXQoMCkgOiAoL3BhcmVudC8udGVzdChvYykpID8gZWwucGFyZW50KCkuZ2V0KDApIDogb2M7XG5cblx0XHRpZiAoIWNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhhdC5jb250YWluZXJFbGVtZW50ID0gJChjZSk7XG5cblx0XHRpZiAoL2RvY3VtZW50Ly50ZXN0KG9jKSB8fCBvYyA9PT0gZG9jdW1lbnQpIHtcblx0XHRcdHRoYXQuY29udGFpbmVyT2Zmc2V0ID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcblx0XHRcdHRoYXQuY29udGFpbmVyUG9zaXRpb24gPSB7IGxlZnQ6IDAsIHRvcDogMCB9O1xuXG5cdFx0XHR0aGF0LnBhcmVudERhdGEgPSB7XG5cdFx0XHRcdGVsZW1lbnQ6ICQoZG9jdW1lbnQpLCBsZWZ0OiAwLCB0b3A6IDAsXG5cdFx0XHRcdHdpZHRoOiAkKGRvY3VtZW50KS53aWR0aCgpLCBoZWlnaHQ6ICQoZG9jdW1lbnQpLmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHRcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gaSdtIGEgbm9kZSwgc28gY29tcHV0ZSB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b21cblx0XHRlbHNlIHtcblx0XHRcdGVsZW1lbnQgPSAkKGNlKTtcblx0XHRcdHAgPSBbXTtcblx0XHRcdCQoWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiTGVmdFwiLCBcIkJvdHRvbVwiIF0pLmVhY2goZnVuY3Rpb24oaSwgbmFtZSkgeyBwW2ldID0gbnVtKGVsZW1lbnQuY3NzKFwicGFkZGluZ1wiICsgbmFtZSkpOyB9KTtcblxuXHRcdFx0dGhhdC5jb250YWluZXJPZmZzZXQgPSBlbGVtZW50Lm9mZnNldCgpO1xuXHRcdFx0dGhhdC5jb250YWluZXJQb3NpdGlvbiA9IGVsZW1lbnQucG9zaXRpb24oKTtcblx0XHRcdHRoYXQuY29udGFpbmVyU2l6ZSA9IHsgaGVpZ2h0OiAoZWxlbWVudC5pbm5lckhlaWdodCgpIC0gcFszXSksIHdpZHRoOiAoZWxlbWVudC5pbm5lcldpZHRoKCkgLSBwWzFdKSB9O1xuXG5cdFx0XHRjbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0O1xuXHRcdFx0Y2ggPSB0aGF0LmNvbnRhaW5lclNpemUuaGVpZ2h0O1xuXHRcdFx0Y3cgPSB0aGF0LmNvbnRhaW5lclNpemUud2lkdGg7XG5cdFx0XHR3aWR0aCA9ICgkLnVpLmhhc1Njcm9sbChjZSwgXCJsZWZ0XCIpID8gY2Uuc2Nyb2xsV2lkdGggOiBjdyApO1xuXHRcdFx0aGVpZ2h0ID0gKCQudWkuaGFzU2Nyb2xsKGNlKSA/IGNlLnNjcm9sbEhlaWdodCA6IGNoKTtcblxuXHRcdFx0dGhhdC5wYXJlbnREYXRhID0ge1xuXHRcdFx0XHRlbGVtZW50OiBjZSwgbGVmdDogY28ubGVmdCwgdG9wOiBjby50b3AsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHRcblx0XHRcdH07XG5cdFx0fVxuXHR9LFxuXG5cdHJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB3b3NldCwgaG9zZXQsIGlzUGFyZW50LCBpc09mZnNldFJlbGF0aXZlLFxuXHRcdFx0dGhhdCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZVwiKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRjbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0LCBjcCA9IHRoYXQucG9zaXRpb24sXG5cdFx0XHRwUmF0aW8gPSB0aGF0Ll9hc3BlY3RSYXRpbyB8fCBldmVudC5zaGlmdEtleSxcblx0XHRcdGNvcCA9IHsgdG9wOjAsIGxlZnQ6MCB9LCBjZSA9IHRoYXQuY29udGFpbmVyRWxlbWVudDtcblxuXHRcdGlmIChjZVswXSAhPT0gZG9jdW1lbnQgJiYgKC9zdGF0aWMvKS50ZXN0KGNlLmNzcyhcInBvc2l0aW9uXCIpKSkge1xuXHRcdFx0Y29wID0gY287XG5cdFx0fVxuXG5cdFx0aWYgKGNwLmxlZnQgPCAodGhhdC5faGVscGVyID8gY28ubGVmdCA6IDApKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnNpemUud2lkdGggKyAodGhhdC5faGVscGVyID8gKHRoYXQucG9zaXRpb24ubGVmdCAtIGNvLmxlZnQpIDogKHRoYXQucG9zaXRpb24ubGVmdCAtIGNvcC5sZWZ0KSk7XG5cdFx0XHRpZiAocFJhdGlvKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnNpemUud2lkdGggLyB0aGF0LmFzcGVjdFJhdGlvO1xuXHRcdFx0fVxuXHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gby5oZWxwZXIgPyBjby5sZWZ0IDogMDtcblx0XHR9XG5cblx0XHRpZiAoY3AudG9wIDwgKHRoYXQuX2hlbHBlciA/IGNvLnRvcCA6IDApKSB7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLmhlaWdodCArICh0aGF0Ll9oZWxwZXIgPyAodGhhdC5wb3NpdGlvbi50b3AgLSBjby50b3ApIDogdGhhdC5wb3NpdGlvbi50b3ApO1xuXHRcdFx0aWYgKHBSYXRpbykge1xuXHRcdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnNpemUuaGVpZ2h0ICogdGhhdC5hc3BlY3RSYXRpbztcblx0XHRcdH1cblx0XHRcdHRoYXQucG9zaXRpb24udG9wID0gdGhhdC5faGVscGVyID8gY28udG9wIDogMDtcblx0XHR9XG5cblx0XHR0aGF0Lm9mZnNldC5sZWZ0ID0gdGhhdC5wYXJlbnREYXRhLmxlZnQrdGhhdC5wb3NpdGlvbi5sZWZ0O1xuXHRcdHRoYXQub2Zmc2V0LnRvcCA9IHRoYXQucGFyZW50RGF0YS50b3ArdGhhdC5wb3NpdGlvbi50b3A7XG5cblx0XHR3b3NldCA9IE1hdGguYWJzKCAodGhhdC5faGVscGVyID8gdGhhdC5vZmZzZXQubGVmdCAtIGNvcC5sZWZ0IDogKHRoYXQub2Zmc2V0LmxlZnQgLSBjb3AubGVmdCkpICsgdGhhdC5zaXplRGlmZi53aWR0aCApO1xuXHRcdGhvc2V0ID0gTWF0aC5hYnMoICh0aGF0Ll9oZWxwZXIgPyB0aGF0Lm9mZnNldC50b3AgLSBjb3AudG9wIDogKHRoYXQub2Zmc2V0LnRvcCAtIGNvLnRvcCkpICsgdGhhdC5zaXplRGlmZi5oZWlnaHQgKTtcblxuXHRcdGlzUGFyZW50ID0gdGhhdC5jb250YWluZXJFbGVtZW50LmdldCgwKSA9PT0gdGhhdC5lbGVtZW50LnBhcmVudCgpLmdldCgwKTtcblx0XHRpc09mZnNldFJlbGF0aXZlID0gL3JlbGF0aXZlfGFic29sdXRlLy50ZXN0KHRoYXQuY29udGFpbmVyRWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSk7XG5cblx0XHRpZihpc1BhcmVudCAmJiBpc09mZnNldFJlbGF0aXZlKSB7XG5cdFx0XHR3b3NldCAtPSB0aGF0LnBhcmVudERhdGEubGVmdDtcblx0XHR9XG5cblx0XHRpZiAod29zZXQgKyB0aGF0LnNpemUud2lkdGggPj0gdGhhdC5wYXJlbnREYXRhLndpZHRoKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnBhcmVudERhdGEud2lkdGggLSB3b3NldDtcblx0XHRcdGlmIChwUmF0aW8pIHtcblx0XHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS53aWR0aCAvIHRoYXQuYXNwZWN0UmF0aW87XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhvc2V0ICsgdGhhdC5zaXplLmhlaWdodCA+PSB0aGF0LnBhcmVudERhdGEuaGVpZ2h0KSB7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wYXJlbnREYXRhLmhlaWdodCAtIGhvc2V0O1xuXHRcdFx0aWYgKHBSYXRpbykge1xuXHRcdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnNpemUuaGVpZ2h0ICogdGhhdC5hc3BlY3RSYXRpbztcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24oKXtcblx0XHR2YXIgdGhhdCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZVwiKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRjbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0LFxuXHRcdFx0Y29wID0gdGhhdC5jb250YWluZXJQb3NpdGlvbixcblx0XHRcdGNlID0gdGhhdC5jb250YWluZXJFbGVtZW50LFxuXHRcdFx0aGVscGVyID0gJCh0aGF0LmhlbHBlciksXG5cdFx0XHRobyA9IGhlbHBlci5vZmZzZXQoKSxcblx0XHRcdHcgPSBoZWxwZXIub3V0ZXJXaWR0aCgpIC0gdGhhdC5zaXplRGlmZi53aWR0aCxcblx0XHRcdGggPSBoZWxwZXIub3V0ZXJIZWlnaHQoKSAtIHRoYXQuc2l6ZURpZmYuaGVpZ2h0O1xuXG5cdFx0aWYgKHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICgvcmVsYXRpdmUvKS50ZXN0KGNlLmNzcyhcInBvc2l0aW9uXCIpKSkge1xuXHRcdFx0JCh0aGlzKS5jc3MoeyBsZWZ0OiBoby5sZWZ0IC0gY29wLmxlZnQgLSBjby5sZWZ0LCB3aWR0aDogdywgaGVpZ2h0OiBoIH0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGF0Ll9oZWxwZXIgJiYgIW8uYW5pbWF0ZSAmJiAoL3N0YXRpYy8pLnRlc3QoY2UuY3NzKFwicG9zaXRpb25cIikpKSB7XG5cdFx0XHQkKHRoaXMpLmNzcyh7IGxlZnQ6IGhvLmxlZnQgLSBjb3AubGVmdCAtIGNvLmxlZnQsIHdpZHRoOiB3LCBoZWlnaHQ6IGggfSk7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG4kLnVpLnBsdWdpbi5hZGQoXCJyZXNpemFibGVcIiwgXCJhbHNvUmVzaXplXCIsIHtcblxuXHRzdGFydDogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKFwidWktcmVzaXphYmxlXCIpLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucyxcblx0XHRcdF9zdG9yZSA9IGZ1bmN0aW9uIChleHApIHtcblx0XHRcdFx0JChleHApLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGVsID0gJCh0aGlzKTtcblx0XHRcdFx0XHRlbC5kYXRhKFwidWktcmVzaXphYmxlLWFsc29yZXNpemVcIiwge1xuXHRcdFx0XHRcdFx0d2lkdGg6IHBhcnNlSW50KGVsLndpZHRoKCksIDEwKSwgaGVpZ2h0OiBwYXJzZUludChlbC5oZWlnaHQoKSwgMTApLFxuXHRcdFx0XHRcdFx0bGVmdDogcGFyc2VJbnQoZWwuY3NzKFwibGVmdFwiKSwgMTApLCB0b3A6IHBhcnNlSW50KGVsLmNzcyhcInRvcFwiKSwgMTApXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblxuXHRcdGlmICh0eXBlb2Yoby5hbHNvUmVzaXplKSA9PT0gXCJvYmplY3RcIiAmJiAhby5hbHNvUmVzaXplLnBhcmVudE5vZGUpIHtcblx0XHRcdGlmIChvLmFsc29SZXNpemUubGVuZ3RoKSB7IG8uYWxzb1Jlc2l6ZSA9IG8uYWxzb1Jlc2l6ZVswXTsgX3N0b3JlKG8uYWxzb1Jlc2l6ZSk7IH1cblx0XHRcdGVsc2UgeyAkLmVhY2goby5hbHNvUmVzaXplLCBmdW5jdGlvbiAoZXhwKSB7IF9zdG9yZShleHApOyB9KTsgfVxuXHRcdH1lbHNle1xuXHRcdFx0X3N0b3JlKG8uYWxzb1Jlc2l6ZSk7XG5cdFx0fVxuXHR9LFxuXG5cdHJlc2l6ZTogZnVuY3Rpb24gKGV2ZW50LCB1aSkge1xuXHRcdHZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKFwidWktcmVzaXphYmxlXCIpLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucyxcblx0XHRcdG9zID0gdGhhdC5vcmlnaW5hbFNpemUsXG5cdFx0XHRvcCA9IHRoYXQub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdGRlbHRhID0ge1xuXHRcdFx0XHRoZWlnaHQ6ICh0aGF0LnNpemUuaGVpZ2h0IC0gb3MuaGVpZ2h0KSB8fCAwLCB3aWR0aDogKHRoYXQuc2l6ZS53aWR0aCAtIG9zLndpZHRoKSB8fCAwLFxuXHRcdFx0XHR0b3A6ICh0aGF0LnBvc2l0aW9uLnRvcCAtIG9wLnRvcCkgfHwgMCwgbGVmdDogKHRoYXQucG9zaXRpb24ubGVmdCAtIG9wLmxlZnQpIHx8IDBcblx0XHRcdH0sXG5cblx0XHRcdF9hbHNvUmVzaXplID0gZnVuY3Rpb24gKGV4cCwgYykge1xuXHRcdFx0XHQkKGV4cCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgZWwgPSAkKHRoaXMpLCBzdGFydCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIpLCBzdHlsZSA9IHt9LFxuXHRcdFx0XHRcdFx0Y3NzID0gYyAmJiBjLmxlbmd0aCA/IGMgOiBlbC5wYXJlbnRzKHVpLm9yaWdpbmFsRWxlbWVudFswXSkubGVuZ3RoID8gW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0gOiBbXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInRvcFwiLCBcImxlZnRcIl07XG5cblx0XHRcdFx0XHQkLmVhY2goY3NzLCBmdW5jdGlvbiAoaSwgcHJvcCkge1xuXHRcdFx0XHRcdFx0dmFyIHN1bSA9IChzdGFydFtwcm9wXXx8MCkgKyAoZGVsdGFbcHJvcF18fDApO1xuXHRcdFx0XHRcdFx0aWYgKHN1bSAmJiBzdW0gPj0gMCkge1xuXHRcdFx0XHRcdFx0XHRzdHlsZVtwcm9wXSA9IHN1bSB8fCBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0ZWwuY3NzKHN0eWxlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXG5cdFx0aWYgKHR5cGVvZihvLmFsc29SZXNpemUpID09PSBcIm9iamVjdFwiICYmICFvLmFsc29SZXNpemUubm9kZVR5cGUpIHtcblx0XHRcdCQuZWFjaChvLmFsc29SZXNpemUsIGZ1bmN0aW9uIChleHAsIGMpIHsgX2Fsc29SZXNpemUoZXhwLCBjKTsgfSk7XG5cdFx0fWVsc2V7XG5cdFx0XHRfYWxzb1Jlc2l6ZShvLmFsc29SZXNpemUpO1xuXHRcdH1cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cdFx0JCh0aGlzKS5yZW1vdmVEYXRhKFwicmVzaXphYmxlLWFsc29yZXNpemVcIik7XG5cdH1cbn0pO1xuXG4kLnVpLnBsdWdpbi5hZGQoXCJyZXNpemFibGVcIiwgXCJnaG9zdFwiLCB7XG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoXCJ1aS1yZXNpemFibGVcIiksIG8gPSB0aGF0Lm9wdGlvbnMsIGNzID0gdGhhdC5zaXplO1xuXG5cdFx0dGhhdC5naG9zdCA9IHRoYXQub3JpZ2luYWxFbGVtZW50LmNsb25lKCk7XG5cdFx0dGhhdC5naG9zdFxuXHRcdFx0LmNzcyh7IG9wYWNpdHk6IDAuMjUsIGRpc3BsYXk6IFwiYmxvY2tcIiwgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgaGVpZ2h0OiBjcy5oZWlnaHQsIHdpZHRoOiBjcy53aWR0aCwgbWFyZ2luOiAwLCBsZWZ0OiAwLCB0b3A6IDAgfSlcblx0XHRcdC5hZGRDbGFzcyhcInVpLXJlc2l6YWJsZS1naG9zdFwiKVxuXHRcdFx0LmFkZENsYXNzKHR5cGVvZiBvLmdob3N0ID09PSBcInN0cmluZ1wiID8gby5naG9zdCA6IFwiXCIpO1xuXG5cdFx0dGhhdC5naG9zdC5hcHBlbmRUbyh0aGF0LmhlbHBlcik7XG5cblx0fSxcblxuXHRyZXNpemU6IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoXCJ1aS1yZXNpemFibGVcIik7XG5cdFx0aWYgKHRoYXQuZ2hvc3QpIHtcblx0XHRcdHRoYXQuZ2hvc3QuY3NzKHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgaGVpZ2h0OiB0aGF0LnNpemUuaGVpZ2h0LCB3aWR0aDogdGhhdC5zaXplLndpZHRoIH0pO1xuXHRcdH1cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9ICQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZVwiKTtcblx0XHRpZiAodGhhdC5naG9zdCAmJiB0aGF0LmhlbHBlcikge1xuXHRcdFx0dGhhdC5oZWxwZXIuZ2V0KDApLnJlbW92ZUNoaWxkKHRoYXQuZ2hvc3QuZ2V0KDApKTtcblx0XHR9XG5cdH1cblxufSk7XG5cbiQudWkucGx1Z2luLmFkZChcInJlc2l6YWJsZVwiLCBcImdyaWRcIiwge1xuXG5cdHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoXCJ1aS1yZXNpemFibGVcIiksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zLFxuXHRcdFx0Y3MgPSB0aGF0LnNpemUsXG5cdFx0XHRvcyA9IHRoYXQub3JpZ2luYWxTaXplLFxuXHRcdFx0b3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRhID0gdGhhdC5heGlzLFxuXHRcdFx0Z3JpZCA9IHR5cGVvZiBvLmdyaWQgPT09IFwibnVtYmVyXCIgPyBbby5ncmlkLCBvLmdyaWRdIDogby5ncmlkLFxuXHRcdFx0Z3JpZFggPSAoZ3JpZFswXXx8MSksXG5cdFx0XHRncmlkWSA9IChncmlkWzFdfHwxKSxcblx0XHRcdG94ID0gTWF0aC5yb3VuZCgoY3Mud2lkdGggLSBvcy53aWR0aCkgLyBncmlkWCkgKiBncmlkWCxcblx0XHRcdG95ID0gTWF0aC5yb3VuZCgoY3MuaGVpZ2h0IC0gb3MuaGVpZ2h0KSAvIGdyaWRZKSAqIGdyaWRZLFxuXHRcdFx0bmV3V2lkdGggPSBvcy53aWR0aCArIG94LFxuXHRcdFx0bmV3SGVpZ2h0ID0gb3MuaGVpZ2h0ICsgb3ksXG5cdFx0XHRpc01heFdpZHRoID0gby5tYXhXaWR0aCAmJiAoby5tYXhXaWR0aCA8IG5ld1dpZHRoKSxcblx0XHRcdGlzTWF4SGVpZ2h0ID0gby5tYXhIZWlnaHQgJiYgKG8ubWF4SGVpZ2h0IDwgbmV3SGVpZ2h0KSxcblx0XHRcdGlzTWluV2lkdGggPSBvLm1pbldpZHRoICYmIChvLm1pbldpZHRoID4gbmV3V2lkdGgpLFxuXHRcdFx0aXNNaW5IZWlnaHQgPSBvLm1pbkhlaWdodCAmJiAoby5taW5IZWlnaHQgPiBuZXdIZWlnaHQpO1xuXG5cdFx0by5ncmlkID0gZ3JpZDtcblxuXHRcdGlmIChpc01pbldpZHRoKSB7XG5cdFx0XHRuZXdXaWR0aCA9IG5ld1dpZHRoICsgZ3JpZFg7XG5cdFx0fVxuXHRcdGlmIChpc01pbkhlaWdodCkge1xuXHRcdFx0bmV3SGVpZ2h0ID0gbmV3SGVpZ2h0ICsgZ3JpZFk7XG5cdFx0fVxuXHRcdGlmIChpc01heFdpZHRoKSB7XG5cdFx0XHRuZXdXaWR0aCA9IG5ld1dpZHRoIC0gZ3JpZFg7XG5cdFx0fVxuXHRcdGlmIChpc01heEhlaWdodCkge1xuXHRcdFx0bmV3SGVpZ2h0ID0gbmV3SGVpZ2h0IC0gZ3JpZFk7XG5cdFx0fVxuXG5cdFx0aWYgKC9eKHNlfHN8ZSkkLy50ZXN0KGEpKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0fSBlbHNlIGlmICgvXihuZSkkLy50ZXN0KGEpKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IG9wLnRvcCAtIG95O1xuXHRcdH0gZWxzZSBpZiAoL14oc3cpJC8udGVzdChhKSkge1xuXHRcdFx0dGhhdC5zaXplLndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gb3AubGVmdCAtIG94O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IG9wLnRvcCAtIG95O1xuXHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gb3AubGVmdCAtIG94O1xuXHRcdH1cblx0fVxuXG59KTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLndpZGdldChcInVpLnNlbGVjdGFibGVcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTAuMVwiLFxuXHRvcHRpb25zOiB7XG5cdFx0YXBwZW5kVG86IFwiYm9keVwiLFxuXHRcdGF1dG9SZWZyZXNoOiB0cnVlLFxuXHRcdGRpc3RhbmNlOiAwLFxuXHRcdGZpbHRlcjogXCIqXCIsXG5cdFx0dG9sZXJhbmNlOiBcInRvdWNoXCIsXG5cblx0XHQvLyBjYWxsYmFja3Ncblx0XHRzZWxlY3RlZDogbnVsbCxcblx0XHRzZWxlY3Rpbmc6IG51bGwsXG5cdFx0c3RhcnQ6IG51bGwsXG5cdFx0c3RvcDogbnVsbCxcblx0XHR1bnNlbGVjdGVkOiBudWxsLFxuXHRcdHVuc2VsZWN0aW5nOiBudWxsXG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzZWxlY3RlZXMsXG5cdFx0XHR0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcInVpLXNlbGVjdGFibGVcIik7XG5cblx0XHR0aGlzLmRyYWdnZWQgPSBmYWxzZTtcblxuXHRcdC8vIGNhY2hlIHNlbGVjdGVlIGNoaWxkcmVuIGJhc2VkIG9uIGZpbHRlclxuXHRcdHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0c2VsZWN0ZWVzID0gJCh0aGF0Lm9wdGlvbnMuZmlsdGVyLCB0aGF0LmVsZW1lbnRbMF0pO1xuXHRcdFx0c2VsZWN0ZWVzLmFkZENsYXNzKFwidWktc2VsZWN0ZWVcIik7XG5cdFx0XHRzZWxlY3RlZXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcblx0XHRcdFx0XHRwb3MgPSAkdGhpcy5vZmZzZXQoKTtcblx0XHRcdFx0JC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIsIHtcblx0XHRcdFx0XHRlbGVtZW50OiB0aGlzLFxuXHRcdFx0XHRcdCRlbGVtZW50OiAkdGhpcyxcblx0XHRcdFx0XHRsZWZ0OiBwb3MubGVmdCxcblx0XHRcdFx0XHR0b3A6IHBvcy50b3AsXG5cdFx0XHRcdFx0cmlnaHQ6IHBvcy5sZWZ0ICsgJHRoaXMub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRcdGJvdHRvbTogcG9zLnRvcCArICR0aGlzLm91dGVySGVpZ2h0KCksXG5cdFx0XHRcdFx0c3RhcnRzZWxlY3RlZDogZmFsc2UsXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6ICR0aGlzLmhhc0NsYXNzKFwidWktc2VsZWN0ZWRcIiksXG5cdFx0XHRcdFx0c2VsZWN0aW5nOiAkdGhpcy5oYXNDbGFzcyhcInVpLXNlbGVjdGluZ1wiKSxcblx0XHRcdFx0XHR1bnNlbGVjdGluZzogJHRoaXMuaGFzQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cblx0XHR0aGlzLnNlbGVjdGVlcyA9IHNlbGVjdGVlcy5hZGRDbGFzcyhcInVpLXNlbGVjdGVlXCIpO1xuXG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cblx0XHR0aGlzLmhlbHBlciA9ICQoXCI8ZGl2IGNsYXNzPSd1aS1zZWxlY3RhYmxlLWhlbHBlcic+PC9kaXY+XCIpO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnNlbGVjdGVlc1xuXHRcdFx0LnJlbW92ZUNsYXNzKFwidWktc2VsZWN0ZWVcIilcblx0XHRcdC5yZW1vdmVEYXRhKFwic2VsZWN0YWJsZS1pdGVtXCIpO1xuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LnJlbW92ZUNsYXNzKFwidWktc2VsZWN0YWJsZSB1aS1zZWxlY3RhYmxlLWRpc2FibGVkXCIpO1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXHR9LFxuXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHR0aGlzLm9wb3MgPSBbZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZXTtcblxuXHRcdGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLnNlbGVjdGVlcyA9ICQob3B0aW9ucy5maWx0ZXIsIHRoaXMuZWxlbWVudFswXSk7XG5cblx0XHR0aGlzLl90cmlnZ2VyKFwic3RhcnRcIiwgZXZlbnQpO1xuXG5cdFx0JChvcHRpb25zLmFwcGVuZFRvKS5hcHBlbmQodGhpcy5oZWxwZXIpO1xuXHRcdC8vIHBvc2l0aW9uIGhlbHBlciAobGFzc28pXG5cdFx0dGhpcy5oZWxwZXIuY3NzKHtcblx0XHRcdFwibGVmdFwiOiBldmVudC5wYWdlWCxcblx0XHRcdFwidG9wXCI6IGV2ZW50LnBhZ2VZLFxuXHRcdFx0XCJ3aWR0aFwiOiAwLFxuXHRcdFx0XCJoZWlnaHRcIjogMFxuXHRcdH0pO1xuXG5cdFx0aWYgKG9wdGlvbnMuYXV0b1JlZnJlc2gpIHtcblx0XHRcdHRoaXMucmVmcmVzaCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuc2VsZWN0ZWVzLmZpbHRlcihcIi51aS1zZWxlY3RlZFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGVlID0gJC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIpO1xuXHRcdFx0c2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRpZiAoIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkpIHtcblx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJ1aS1zZWxlY3RlZFwiKTtcblx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdFx0c2VsZWN0ZWUudW5zZWxlY3RpbmcgPSB0cnVlO1xuXHRcdFx0XHQvLyBzZWxlY3RhYmxlIFVOU0VMRUNUSU5HIGNhbGxiYWNrXG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoXCJ1bnNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdHVuc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0JChldmVudC50YXJnZXQpLnBhcmVudHMoKS5hZGRCYWNrKCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb1NlbGVjdCxcblx0XHRcdFx0c2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIik7XG5cdFx0XHRpZiAoc2VsZWN0ZWUpIHtcblx0XHRcdFx0ZG9TZWxlY3QgPSAoIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkpIHx8ICFzZWxlY3RlZS4kZWxlbWVudC5oYXNDbGFzcyhcInVpLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRzZWxlY3RlZS4kZWxlbWVudFxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhkb1NlbGVjdCA/IFwidWktdW5zZWxlY3RpbmdcIiA6IFwidWktc2VsZWN0ZWRcIilcblx0XHRcdFx0XHQuYWRkQ2xhc3MoZG9TZWxlY3QgPyBcInVpLXNlbGVjdGluZ1wiIDogXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdFx0c2VsZWN0ZWUudW5zZWxlY3RpbmcgPSAhZG9TZWxlY3Q7XG5cdFx0XHRcdHNlbGVjdGVlLnNlbGVjdGluZyA9IGRvU2VsZWN0O1xuXHRcdFx0XHRzZWxlY3RlZS5zZWxlY3RlZCA9IGRvU2VsZWN0O1xuXHRcdFx0XHQvLyBzZWxlY3RhYmxlIChVTilTRUxFQ1RJTkcgY2FsbGJhY2tcblx0XHRcdFx0aWYgKGRvU2VsZWN0KSB7XG5cdFx0XHRcdFx0dGhhdC5fdHJpZ2dlcihcInNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdFx0c2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhhdC5fdHJpZ2dlcihcInVuc2VsZWN0aW5nXCIsIGV2ZW50LCB7XG5cdFx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9LFxuXG5cdF9tb3VzZURyYWc6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHR0aGlzLmRyYWdnZWQgPSB0cnVlO1xuXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciB0bXAsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHR4MSA9IHRoaXMub3Bvc1swXSxcblx0XHRcdHkxID0gdGhpcy5vcG9zWzFdLFxuXHRcdFx0eDIgPSBldmVudC5wYWdlWCxcblx0XHRcdHkyID0gZXZlbnQucGFnZVk7XG5cblx0XHRpZiAoeDEgPiB4MikgeyB0bXAgPSB4MjsgeDIgPSB4MTsgeDEgPSB0bXA7IH1cblx0XHRpZiAoeTEgPiB5MikgeyB0bXAgPSB5MjsgeTIgPSB5MTsgeTEgPSB0bXA7IH1cblx0XHR0aGlzLmhlbHBlci5jc3Moe2xlZnQ6IHgxLCB0b3A6IHkxLCB3aWR0aDogeDIteDEsIGhlaWdodDogeTIteTF9KTtcblxuXHRcdHRoaXMuc2VsZWN0ZWVzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIiksXG5cdFx0XHRcdGhpdCA9IGZhbHNlO1xuXG5cdFx0XHQvL3ByZXZlbnQgaGVscGVyIGZyb20gYmVpbmcgc2VsZWN0ZWQgaWYgYXBwZW5kVG86IHNlbGVjdGFibGVcblx0XHRcdGlmICghc2VsZWN0ZWUgfHwgc2VsZWN0ZWUuZWxlbWVudCA9PT0gdGhhdC5lbGVtZW50WzBdKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbnMudG9sZXJhbmNlID09PSBcInRvdWNoXCIpIHtcblx0XHRcdFx0aGl0ID0gKCAhKHNlbGVjdGVlLmxlZnQgPiB4MiB8fCBzZWxlY3RlZS5yaWdodCA8IHgxIHx8IHNlbGVjdGVlLnRvcCA+IHkyIHx8IHNlbGVjdGVlLmJvdHRvbSA8IHkxKSApO1xuXHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJmaXRcIikge1xuXHRcdFx0XHRoaXQgPSAoc2VsZWN0ZWUubGVmdCA+IHgxICYmIHNlbGVjdGVlLnJpZ2h0IDwgeDIgJiYgc2VsZWN0ZWUudG9wID4geTEgJiYgc2VsZWN0ZWUuYm90dG9tIDwgeTIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaGl0KSB7XG5cdFx0XHRcdC8vIFNFTEVDVFxuXHRcdFx0XHRpZiAoc2VsZWN0ZWUuc2VsZWN0ZWQpIHtcblx0XHRcdFx0XHRzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRcdHNlbGVjdGVlLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHNlbGVjdGVlLnVuc2VsZWN0aW5nKSB7XG5cdFx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdFx0XHRzZWxlY3RlZS51bnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2VsZWN0ZWUuc2VsZWN0aW5nKSB7XG5cdFx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS1zZWxlY3RpbmdcIik7XG5cdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHQvLyBzZWxlY3RhYmxlIFNFTEVDVElORyBjYWxsYmFja1xuXHRcdFx0XHRcdHRoYXQuX3RyaWdnZXIoXCJzZWxlY3RpbmdcIiwgZXZlbnQsIHtcblx0XHRcdFx0XHRcdHNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBVTlNFTEVDVFxuXHRcdFx0XHRpZiAoc2VsZWN0ZWUuc2VsZWN0aW5nKSB7XG5cdFx0XHRcdFx0aWYgKChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpICYmIHNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQpIHtcblx0XHRcdFx0XHRcdHNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKFwidWktc2VsZWN0aW5nXCIpO1xuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcyhcInVpLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXNlbGVjdGluZ1wiKTtcblx0XHRcdFx0XHRcdHNlbGVjdGVlLnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0aWYgKHNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQpIHtcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWUudW5zZWxlY3RpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gc2VsZWN0YWJsZSBVTlNFTEVDVElORyBjYWxsYmFja1xuXHRcdFx0XHRcdFx0dGhhdC5fdHJpZ2dlcihcInVuc2VsZWN0aW5nXCIsIGV2ZW50LCB7XG5cdFx0XHRcdFx0XHRcdHVuc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHNlbGVjdGVlLnNlbGVjdGVkKSB7XG5cdFx0XHRcdFx0aWYgKCFldmVudC5tZXRhS2V5ICYmICFldmVudC5jdHJsS2V5ICYmICFzZWxlY3RlZS5zdGFydHNlbGVjdGVkKSB7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdFx0XHRcdHNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdC8vIHNlbGVjdGFibGUgVU5TRUxFQ1RJTkcgY2FsbGJhY2tcblx0XHRcdFx0XHRcdHRoYXQuX3RyaWdnZXIoXCJ1bnNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHR0aGlzLmRyYWdnZWQgPSBmYWxzZTtcblxuXHRcdCQoXCIudWktdW5zZWxlY3RpbmdcIiwgdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGVlID0gJC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIpO1xuXHRcdFx0c2VsZWN0ZWUuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJ1aS11bnNlbGVjdGluZ1wiKTtcblx0XHRcdHNlbGVjdGVlLnVuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRzZWxlY3RlZS5zdGFydHNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHR0aGF0Ll90cmlnZ2VyKFwidW5zZWxlY3RlZFwiLCBldmVudCwge1xuXHRcdFx0XHR1bnNlbGVjdGVkOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHQkKFwiLnVpLXNlbGVjdGluZ1wiLCB0aGlzLmVsZW1lbnRbMF0pLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIik7XG5cdFx0XHRzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXNlbGVjdGluZ1wiKS5hZGRDbGFzcyhcInVpLXNlbGVjdGVkXCIpO1xuXHRcdFx0c2VsZWN0ZWUuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRzZWxlY3RlZS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRzZWxlY3RlZS5zdGFydHNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdHRoYXQuX3RyaWdnZXIoXCJzZWxlY3RlZFwiLCBldmVudCwge1xuXHRcdFx0XHRzZWxlY3RlZDogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5fdHJpZ2dlcihcInN0b3BcIiwgZXZlbnQpO1xuXG5cdFx0dGhpcy5oZWxwZXIucmVtb3ZlKCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxufSk7XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuLypqc2hpbnQgbG9vcGZ1bmM6IHRydWUgKi9cblxuZnVuY3Rpb24gaXNPdmVyQXhpcyggeCwgcmVmZXJlbmNlLCBzaXplICkge1xuXHRyZXR1cm4gKCB4ID4gcmVmZXJlbmNlICkgJiYgKCB4IDwgKCByZWZlcmVuY2UgKyBzaXplICkgKTtcbn1cblxuJC53aWRnZXQoXCJ1aS5zb3J0YWJsZVwiLCAkLnVpLm1vdXNlLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdHdpZGdldEV2ZW50UHJlZml4OiBcInNvcnRcIixcblx0cmVhZHk6IGZhbHNlLFxuXHRvcHRpb25zOiB7XG5cdFx0YXBwZW5kVG86IFwicGFyZW50XCIsXG5cdFx0YXhpczogZmFsc2UsXG5cdFx0Y29ubmVjdFdpdGg6IGZhbHNlLFxuXHRcdGNvbnRhaW5tZW50OiBmYWxzZSxcblx0XHRjdXJzb3I6IFwiYXV0b1wiLFxuXHRcdGN1cnNvckF0OiBmYWxzZSxcblx0XHRkcm9wT25FbXB0eTogdHJ1ZSxcblx0XHRmb3JjZVBsYWNlaG9sZGVyU2l6ZTogZmFsc2UsXG5cdFx0Zm9yY2VIZWxwZXJTaXplOiBmYWxzZSxcblx0XHRncmlkOiBmYWxzZSxcblx0XHRoYW5kbGU6IGZhbHNlLFxuXHRcdGhlbHBlcjogXCJvcmlnaW5hbFwiLFxuXHRcdGl0ZW1zOiBcIj4gKlwiLFxuXHRcdG9wYWNpdHk6IGZhbHNlLFxuXHRcdHBsYWNlaG9sZGVyOiBmYWxzZSxcblx0XHRyZXZlcnQ6IGZhbHNlLFxuXHRcdHNjcm9sbDogdHJ1ZSxcblx0XHRzY3JvbGxTZW5zaXRpdml0eTogMjAsXG5cdFx0c2Nyb2xsU3BlZWQ6IDIwLFxuXHRcdHNjb3BlOiBcImRlZmF1bHRcIixcblx0XHR0b2xlcmFuY2U6IFwiaW50ZXJzZWN0XCIsXG5cdFx0ekluZGV4OiAxMDAwLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0YWN0aXZhdGU6IG51bGwsXG5cdFx0YmVmb3JlU3RvcDogbnVsbCxcblx0XHRjaGFuZ2U6IG51bGwsXG5cdFx0ZGVhY3RpdmF0ZTogbnVsbCxcblx0XHRvdXQ6IG51bGwsXG5cdFx0b3ZlcjogbnVsbCxcblx0XHRyZWNlaXZlOiBudWxsLFxuXHRcdHJlbW92ZTogbnVsbCxcblx0XHRzb3J0OiBudWxsLFxuXHRcdHN0YXJ0OiBudWxsLFxuXHRcdHN0b3A6IG51bGwsXG5cdFx0dXBkYXRlOiBudWxsXG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnM7XG5cdFx0dGhpcy5jb250YWluZXJDYWNoZSA9IHt9O1xuXHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcInVpLXNvcnRhYmxlXCIpO1xuXG5cdFx0Ly9HZXQgdGhlIGl0ZW1zXG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cblx0XHQvL0xldCdzIGRldGVybWluZSBpZiB0aGUgaXRlbXMgYXJlIGJlaW5nIGRpc3BsYXllZCBob3Jpem9udGFsbHlcblx0XHR0aGlzLmZsb2F0aW5nID0gdGhpcy5pdGVtcy5sZW5ndGggPyBvLmF4aXMgPT09IFwieFwiIHx8ICgvbGVmdHxyaWdodC8pLnRlc3QodGhpcy5pdGVtc1swXS5pdGVtLmNzcyhcImZsb2F0XCIpKSB8fCAoL2lubGluZXx0YWJsZS1jZWxsLykudGVzdCh0aGlzLml0ZW1zWzBdLml0ZW0uY3NzKFwiZGlzcGxheVwiKSkgOiBmYWxzZTtcblxuXHRcdC8vTGV0J3MgZGV0ZXJtaW5lIHRoZSBwYXJlbnQncyBvZmZzZXRcblx0XHR0aGlzLm9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTtcblxuXHRcdC8vSW5pdGlhbGl6ZSBtb3VzZSBldmVudHMgZm9yIGludGVyYWN0aW9uXG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cblx0XHQvL1dlJ3JlIHJlYWR5IHRvIGdvXG5cdFx0dGhpcy5yZWFkeSA9IHRydWU7XG5cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQucmVtb3ZlQ2xhc3MoXCJ1aS1zb3J0YWJsZSB1aS1zb3J0YWJsZS1kaXNhYmxlZFwiKTtcblx0XHR0aGlzLl9tb3VzZURlc3Ryb3koKTtcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdHRoaXMuaXRlbXNbaV0uaXRlbS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0TmFtZSArIFwiLWl0ZW1cIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdHRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblxuXHRcdFx0dGhpcy53aWRnZXQoKS50b2dnbGVDbGFzcyggXCJ1aS1zb3J0YWJsZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIERvbid0IGNhbGwgd2lkZ2V0IGJhc2UgX3NldE9wdGlvbiBmb3IgZGlzYWJsZSBhcyBpdCBhZGRzIHVpLXN0YXRlLWRpc2FibGVkIGNsYXNzXG5cdFx0XHQkLldpZGdldC5wcm90b3R5cGUuX3NldE9wdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0fSxcblxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbihldmVudCwgb3ZlcnJpZGVIYW5kbGUpIHtcblx0XHR2YXIgY3VycmVudEl0ZW0gPSBudWxsLFxuXHRcdFx0dmFsaWRIYW5kbGUgPSBmYWxzZSxcblx0XHRcdHRoYXQgPSB0aGlzO1xuXG5cdFx0aWYgKHRoaXMucmV2ZXJ0aW5nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMub3B0aW9ucy50eXBlID09PSBcInN0YXRpY1wiKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly9XZSBoYXZlIHRvIHJlZnJlc2ggdGhlIGl0ZW1zIGRhdGEgb25jZSBmaXJzdFxuXHRcdHRoaXMuX3JlZnJlc2hJdGVtcyhldmVudCk7XG5cblx0XHQvL0ZpbmQgb3V0IGlmIHRoZSBjbGlja2VkIG5vZGUgKG9yIG9uZSBvZiBpdHMgcGFyZW50cykgaXMgYSBhY3R1YWwgaXRlbSBpbiB0aGlzLml0ZW1zXG5cdFx0JChldmVudC50YXJnZXQpLnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoJC5kYXRhKHRoaXMsIHRoYXQud2lkZ2V0TmFtZSArIFwiLWl0ZW1cIikgPT09IHRoYXQpIHtcblx0XHRcdFx0Y3VycmVudEl0ZW0gPSAkKHRoaXMpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYoJC5kYXRhKGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCItaXRlbVwiKSA9PT0gdGhhdCkge1xuXHRcdFx0Y3VycmVudEl0ZW0gPSAkKGV2ZW50LnRhcmdldCk7XG5cdFx0fVxuXG5cdFx0aWYoIWN1cnJlbnRJdGVtKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmKHRoaXMub3B0aW9ucy5oYW5kbGUgJiYgIW92ZXJyaWRlSGFuZGxlKSB7XG5cdFx0XHQkKHRoaXMub3B0aW9ucy5oYW5kbGUsIGN1cnJlbnRJdGVtKS5maW5kKFwiKlwiKS5hZGRCYWNrKCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYodGhpcyA9PT0gZXZlbnQudGFyZ2V0KSB7XG5cdFx0XHRcdFx0dmFsaWRIYW5kbGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGlmKCF2YWxpZEhhbmRsZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJyZW50SXRlbSA9IGN1cnJlbnRJdGVtO1xuXHRcdHRoaXMuX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zKCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQsIG92ZXJyaWRlSGFuZGxlLCBub0FjdGl2YXRpb24pIHtcblxuXHRcdHZhciBpLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXM7XG5cblx0XHQvL1dlIG9ubHkgbmVlZCB0byBjYWxsIHJlZnJlc2hQb3NpdGlvbnMsIGJlY2F1c2UgdGhlIHJlZnJlc2hJdGVtcyBjYWxsIGhhcyBiZWVuIG1vdmVkIHRvIG1vdXNlQ2FwdHVyZVxuXHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXG5cdFx0Ly9DcmVhdGUgYW5kIGFwcGVuZCB0aGUgdmlzaWJsZSBoZWxwZXJcblx0XHR0aGlzLmhlbHBlciA9IHRoaXMuX2NyZWF0ZUhlbHBlcihldmVudCk7XG5cblx0XHQvL0NhY2hlIHRoZSBoZWxwZXIgc2l6ZVxuXHRcdHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTtcblxuXHRcdC8qXG5cdFx0ICogLSBQb3NpdGlvbiBnZW5lcmF0aW9uIC1cblx0XHQgKiBUaGlzIGJsb2NrIGdlbmVyYXRlcyBldmVyeXRoaW5nIHBvc2l0aW9uIHJlbGF0ZWQgLSBpdCdzIHRoZSBjb3JlIG9mIGRyYWdnYWJsZXMuXG5cdFx0ICovXG5cblx0XHQvL0NhY2hlIHRoZSBtYXJnaW5zIG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50XG5cdFx0dGhpcy5fY2FjaGVNYXJnaW5zKCk7XG5cblx0XHQvL0dldCB0aGUgbmV4dCBzY3JvbGxpbmcgcGFyZW50XG5cdFx0dGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoKTtcblxuXHRcdC8vVGhlIGVsZW1lbnQncyBhYnNvbHV0ZSBwb3NpdGlvbiBvbiB0aGUgcGFnZSBtaW51cyBtYXJnaW5zXG5cdFx0dGhpcy5vZmZzZXQgPSB0aGlzLmN1cnJlbnRJdGVtLm9mZnNldCgpO1xuXHRcdHRoaXMub2Zmc2V0ID0ge1xuXHRcdFx0dG9wOiB0aGlzLm9mZnNldC50b3AgLSB0aGlzLm1hcmdpbnMudG9wLFxuXHRcdFx0bGVmdDogdGhpcy5vZmZzZXQubGVmdCAtIHRoaXMubWFyZ2lucy5sZWZ0XG5cdFx0fTtcblxuXHRcdCQuZXh0ZW5kKHRoaXMub2Zmc2V0LCB7XG5cdFx0XHRjbGljazogeyAvL1doZXJlIHRoZSBjbGljayBoYXBwZW5lZCwgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnRcblx0XHRcdFx0bGVmdDogZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5sZWZ0LFxuXHRcdFx0XHR0b3A6IGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQudG9wXG5cdFx0XHR9LFxuXHRcdFx0cGFyZW50OiB0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSxcblx0XHRcdHJlbGF0aXZlOiB0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpIC8vVGhpcyBpcyBhIHJlbGF0aXZlIHRvIGFic29sdXRlIHBvc2l0aW9uIG1pbnVzIHRoZSBhY3R1YWwgcG9zaXRpb24gY2FsY3VsYXRpb24gLSBvbmx5IHVzZWQgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgaGVscGVyXG5cdFx0fSk7XG5cblx0XHQvLyBPbmx5IGFmdGVyIHdlIGdvdCB0aGUgb2Zmc2V0LCB3ZSBjYW4gY2hhbmdlIHRoZSBoZWxwZXIncyBwb3NpdGlvbiB0byBhYnNvbHV0ZVxuXHRcdC8vIFRPRE86IFN0aWxsIG5lZWQgdG8gZmlndXJlIG91dCBhIHdheSB0byBtYWtlIHJlbGF0aXZlIHNvcnRpbmcgcG9zc2libGVcblx0XHR0aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuXHRcdHRoaXMuY3NzUG9zaXRpb24gPSB0aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiKTtcblxuXHRcdC8vR2VuZXJhdGUgdGhlIG9yaWdpbmFsIHBvc2l0aW9uXG5cdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihldmVudCk7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VYID0gZXZlbnQucGFnZVg7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VZID0gZXZlbnQucGFnZVk7XG5cblx0XHQvL0FkanVzdCB0aGUgbW91c2Ugb2Zmc2V0IHJlbGF0aXZlIHRvIHRoZSBoZWxwZXIgaWYgXCJjdXJzb3JBdFwiIGlzIHN1cHBsaWVkXG5cdFx0KG8uY3Vyc29yQXQgJiYgdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcihvLmN1cnNvckF0KSk7XG5cblx0XHQvL0NhY2hlIHRoZSBmb3JtZXIgRE9NIHBvc2l0aW9uXG5cdFx0dGhpcy5kb21Qb3NpdGlvbiA9IHsgcHJldjogdGhpcy5jdXJyZW50SXRlbS5wcmV2KClbMF0sIHBhcmVudDogdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXSB9O1xuXG5cdFx0Ly9JZiB0aGUgaGVscGVyIGlzIG5vdCB0aGUgb3JpZ2luYWwsIGhpZGUgdGhlIG9yaWdpbmFsIHNvIGl0J3Mgbm90IHBsYXlpbmcgYW55IHJvbGUgZHVyaW5nIHRoZSBkcmFnLCB3b24ndCBjYXVzZSBhbnl0aGluZyBiYWQgdGhpcyB3YXlcblx0XHRpZih0aGlzLmhlbHBlclswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSkge1xuXHRcdFx0dGhpcy5jdXJyZW50SXRlbS5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0Ly9DcmVhdGUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0dGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKTtcblxuXHRcdC8vU2V0IGEgY29udGFpbm1lbnQgaWYgZ2l2ZW4gaW4gdGhlIG9wdGlvbnNcblx0XHRpZihvLmNvbnRhaW5tZW50KSB7XG5cdFx0XHR0aGlzLl9zZXRDb250YWlubWVudCgpO1xuXHRcdH1cblxuXHRcdGlmKG8uY3Vyc29yKSB7IC8vIGN1cnNvciBvcHRpb25cblx0XHRcdGlmICgkKFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIikpIHtcblx0XHRcdFx0dGhpcy5fc3RvcmVkQ3Vyc29yID0gJChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIpO1xuXHRcdFx0fVxuXHRcdFx0JChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIG8uY3Vyc29yKTtcblx0XHR9XG5cblx0XHRpZihvLm9wYWNpdHkpIHsgLy8gb3BhY2l0eSBvcHRpb25cblx0XHRcdGlmICh0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIpKSB7XG5cdFx0XHRcdHRoaXMuX3N0b3JlZE9wYWNpdHkgPSB0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiLCBvLm9wYWNpdHkpO1xuXHRcdH1cblxuXHRcdGlmKG8uekluZGV4KSB7IC8vIHpJbmRleCBvcHRpb25cblx0XHRcdGlmICh0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIikpIHtcblx0XHRcdFx0dGhpcy5fc3RvcmVkWkluZGV4ID0gdGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIsIG8uekluZGV4KTtcblx0XHR9XG5cblx0XHQvL1ByZXBhcmUgc2Nyb2xsaW5nXG5cdFx0aWYodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUgIT09IFwiSFRNTFwiKSB7XG5cdFx0XHR0aGlzLm92ZXJmbG93T2Zmc2V0ID0gdGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Ly9DYWxsIGNhbGxiYWNrc1xuXHRcdHRoaXMuX3RyaWdnZXIoXCJzdGFydFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpO1xuXG5cdFx0Ly9SZWNhY2hlIHRoZSBoZWxwZXIgc2l6ZVxuXHRcdGlmKCF0aGlzLl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zKSB7XG5cdFx0XHR0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7XG5cdFx0fVxuXG5cblx0XHQvL1Bvc3QgXCJhY3RpdmF0ZVwiIGV2ZW50cyB0byBwb3NzaWJsZSBjb250YWluZXJzXG5cdFx0aWYoICFub0FjdGl2YXRpb24gKSB7XG5cdFx0XHRmb3IgKCBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5fdHJpZ2dlciggXCJhY3RpdmF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1ByZXBhcmUgcG9zc2libGUgZHJvcHBhYmxlc1xuXHRcdGlmKCQudWkuZGRtYW5hZ2VyKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpO1xuXHRcdH1cblxuXHRcdHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5oZWxwZXIuYWRkQ2xhc3MoXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIik7XG5cdFx0dGhpcy5fbW91c2VEcmFnKGV2ZW50KTsgLy9FeGVjdXRlIHRoZSBkcmFnIG9uY2UgLSB0aGlzIGNhdXNlcyB0aGUgaGVscGVyIG5vdCB0byBiZSB2aXNpYmxlIGJlZm9yZSBnZXR0aW5nIGl0cyBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRfbW91c2VEcmFnOiBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBpLCBpdGVtLCBpdGVtRWxlbWVudCwgaW50ZXJzZWN0aW9uLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbGVkID0gZmFsc2U7XG5cblx0XHQvL0NvbXB1dGUgdGhlIGhlbHBlcnMgcG9zaXRpb25cblx0XHR0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihldmVudCk7XG5cdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIik7XG5cblx0XHRpZiAoIXRoaXMubGFzdFBvc2l0aW9uQWJzKSB7XG5cdFx0XHR0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7XG5cdFx0fVxuXG5cdFx0Ly9EbyBzY3JvbGxpbmdcblx0XHRpZih0aGlzLm9wdGlvbnMuc2Nyb2xsKSB7XG5cdFx0XHRpZih0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gZG9jdW1lbnQgJiYgdGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSAhPT0gXCJIVE1MXCIpIHtcblxuXHRcdFx0XHRpZigodGhpcy5vdmVyZmxvd09mZnNldC50b3AgKyB0aGlzLnNjcm9sbFBhcmVudFswXS5vZmZzZXRIZWlnaHQpIC0gZXZlbnQucGFnZVkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wID0gc2Nyb2xsZWQgPSB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgKyBvLnNjcm9sbFNwZWVkO1xuXHRcdFx0XHR9IGVsc2UgaWYoZXZlbnQucGFnZVkgLSB0aGlzLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHtcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZigodGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0ICsgdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0V2lkdGgpIC0gZXZlbnQucGFnZVggPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCArIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH0gZWxzZSBpZihldmVudC5wYWdlWCAtIHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHtcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPSB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0IC0gby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmKGV2ZW50LnBhZ2VZIC0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgLSBvLnNjcm9sbFNwZWVkKTtcblx0XHRcdFx0fSBlbHNlIGlmKCQod2luZG93KS5oZWlnaHQoKSAtIChldmVudC5wYWdlWSAtICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHtcblx0XHRcdFx0XHRzY3JvbGxlZCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSArIG8uc2Nyb2xsU3BlZWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWQpO1xuXHRcdFx0XHR9IGVsc2UgaWYoJCh3aW5kb3cpLndpZHRoKCkgLSAoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdHNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmKHNjcm9sbGVkICE9PSBmYWxzZSAmJiAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyKSB7XG5cdFx0XHRcdCQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsIGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1JlZ2VuZXJhdGUgdGhlIGFic29sdXRlIHBvc2l0aW9uIHVzZWQgZm9yIHBvc2l0aW9uIGNoZWNrc1xuXHRcdHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpO1xuXG5cdFx0Ly9TZXQgdGhlIGhlbHBlciBwb3NpdGlvblxuXHRcdGlmKCF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPT0gXCJ5XCIpIHtcblx0XHRcdHRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQrXCJweFwiO1xuXHRcdH1cblx0XHRpZighdGhpcy5vcHRpb25zLmF4aXMgfHwgdGhpcy5vcHRpb25zLmF4aXMgIT09IFwieFwiKSB7XG5cdFx0XHR0aGlzLmhlbHBlclswXS5zdHlsZS50b3AgPSB0aGlzLnBvc2l0aW9uLnRvcCtcInB4XCI7XG5cdFx0fVxuXG5cdFx0Ly9SZWFycmFuZ2Vcblx0XHRmb3IgKGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cblx0XHRcdC8vQ2FjaGUgdmFyaWFibGVzIGFuZCBpbnRlcnNlY3Rpb24sIGNvbnRpbnVlIGlmIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aXRlbSA9IHRoaXMuaXRlbXNbaV07XG5cdFx0XHRpdGVtRWxlbWVudCA9IGl0ZW0uaXRlbVswXTtcblx0XHRcdGludGVyc2VjdGlvbiA9IHRoaXMuX2ludGVyc2VjdHNXaXRoUG9pbnRlcihpdGVtKTtcblx0XHRcdGlmICghaW50ZXJzZWN0aW9uKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IHB1dCB0aGUgcGxhY2Vob2xkZXIgaW5zaWRlIHRoZSBjdXJyZW50IENvbnRhaW5lciwgc2tpcCBhbGxcblx0XHRcdC8vIGl0ZW1zIGZvcm0gb3RoZXIgY29udGFpbmVycy4gVGhpcyB3b3JrcyBiZWNhdXNlIHdoZW4gbW92aW5nXG5cdFx0XHQvLyBhbiBpdGVtIGZyb20gb25lIGNvbnRhaW5lciB0byBhbm90aGVyIHRoZVxuXHRcdFx0Ly8gY3VycmVudENvbnRhaW5lciBpcyBzd2l0Y2hlZCBiZWZvcmUgdGhlIHBsYWNlaG9sZGVyIGlzIG1vdmVkLlxuXHRcdFx0Ly9cblx0XHRcdC8vIFdpdGhvdXQgdGhpcyBtb3ZpbmcgaXRlbXMgaW4gXCJzdWItc29ydGFibGVzXCIgY2FuIGNhdXNlIHRoZSBwbGFjZWhvbGRlciB0byBqaXR0ZXJcblx0XHRcdC8vIGJlZXR3ZWVuIHRoZSBvdXRlciBhbmQgaW5uZXIgY29udGFpbmVyLlxuXHRcdFx0aWYgKGl0ZW0uaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lcikge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2Fubm90IGludGVyc2VjdCB3aXRoIGl0c2VsZlxuXHRcdFx0Ly8gbm8gdXNlbGVzcyBhY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGRvbmUgYmVmb3JlXG5cdFx0XHQvLyBubyBhY3Rpb24gaWYgdGhlIGl0ZW0gbW92ZWQgaXMgdGhlIHBhcmVudCBvZiB0aGUgaXRlbSBjaGVja2VkXG5cdFx0XHRpZiAoaXRlbUVsZW1lbnQgIT09IHRoaXMuY3VycmVudEl0ZW1bMF0gJiZcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlcltpbnRlcnNlY3Rpb24gPT09IDEgPyBcIm5leHRcIiA6IFwicHJldlwiXSgpWzBdICE9PSBpdGVtRWxlbWVudCAmJlxuXHRcdFx0XHQhJC5jb250YWlucyh0aGlzLnBsYWNlaG9sZGVyWzBdLCBpdGVtRWxlbWVudCkgJiZcblx0XHRcdFx0KHRoaXMub3B0aW9ucy50eXBlID09PSBcInNlbWktZHluYW1pY1wiID8gISQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLCBpdGVtRWxlbWVudCkgOiB0cnVlKVxuXHRcdFx0KSB7XG5cblx0XHRcdFx0dGhpcy5kaXJlY3Rpb24gPSBpbnRlcnNlY3Rpb24gPT09IDEgPyBcImRvd25cIiA6IFwidXBcIjtcblxuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJwb2ludGVyXCIgfHwgdGhpcy5faW50ZXJzZWN0c1dpdGhTaWRlcyhpdGVtKSkge1xuXHRcdFx0XHRcdHRoaXMuX3JlYXJyYW5nZShldmVudCwgaXRlbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKFwiY2hhbmdlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vUG9zdCBldmVudHMgdG8gY29udGFpbmVyc1xuXHRcdHRoaXMuX2NvbnRhY3RDb250YWluZXJzKGV2ZW50KTtcblxuXHRcdC8vSW50ZXJjb25uZWN0IHdpdGggZHJvcHBhYmxlc1xuXHRcdGlmKCQudWkuZGRtYW5hZ2VyKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsIGV2ZW50KTtcblx0XHR9XG5cblx0XHQvL0NhbGwgY2FsbGJhY2tzXG5cdFx0dGhpcy5fdHJpZ2dlcihcInNvcnRcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTtcblxuXHRcdHRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFicztcblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbihldmVudCwgbm9Qcm9wYWdhdGlvbikge1xuXG5cdFx0aWYoIWV2ZW50KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly9JZiB3ZSBhcmUgdXNpbmcgZHJvcHBhYmxlcywgaW5mb3JtIHRoZSBtYW5hZ2VyIGFib3V0IHRoZSBkcm9wXG5cdFx0aWYgKCQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91cikge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuZHJvcCh0aGlzLCBldmVudCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5vcHRpb25zLnJldmVydCkge1xuXHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRjdXIgPSB0aGlzLnBsYWNlaG9sZGVyLm9mZnNldCgpO1xuXG5cdFx0XHR0aGlzLnJldmVydGluZyA9IHRydWU7XG5cblx0XHRcdCQodGhpcy5oZWxwZXIpLmFuaW1hdGUoe1xuXHRcdFx0XHRsZWZ0OiBjdXIubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQgKyAodGhpcy5vZmZzZXRQYXJlbnRbMF0gPT09IGRvY3VtZW50LmJvZHkgPyAwIDogdGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsTGVmdCksXG5cdFx0XHRcdHRvcDogY3VyLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgLSB0aGlzLm1hcmdpbnMudG9wICsgKHRoaXMub2Zmc2V0UGFyZW50WzBdID09PSBkb2N1bWVudC5ib2R5ID8gMCA6IHRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbFRvcClcblx0XHRcdH0sIHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnQsIDEwKSB8fCA1MDAsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGF0Ll9jbGVhcihldmVudCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fY2xlYXIoZXZlbnQsIG5vUHJvcGFnYXRpb24pO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZih0aGlzLmRyYWdnaW5nKSB7XG5cblx0XHRcdHRoaXMuX21vdXNlVXAoeyB0YXJnZXQ6IG51bGwgfSk7XG5cblx0XHRcdGlmKHRoaXMub3B0aW9ucy5oZWxwZXIgPT09IFwib3JpZ2luYWxcIikge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLnJlbW92ZUNsYXNzKFwidWktc29ydGFibGUtaGVscGVyXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50SXRlbS5zaG93KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vUG9zdCBkZWFjdGl2YXRpbmcgZXZlbnRzIHRvIGNvbnRhaW5lcnNcblx0XHRcdGZvciAodmFyIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbaV0uX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsIG51bGwsIHRoaXMuX3VpSGFzaCh0aGlzKSk7XG5cdFx0XHRcdGlmKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyKSB7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKFwib3V0XCIsIG51bGwsIHRoaXMuX3VpSGFzaCh0aGlzKSk7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuXHRcdFx0Ly8kKHRoaXMucGxhY2Vob2xkZXJbMF0pLnJlbW92ZSgpOyB3b3VsZCBoYXZlIGJlZW4gdGhlIGpRdWVyeSB3YXkgLSB1bmZvcnR1bmF0ZWx5LCBpdCB1bmJpbmRzIEFMTCBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSFcblx0XHRcdGlmKHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHR0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSk7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLm9wdGlvbnMuaGVscGVyICE9PSBcIm9yaWdpbmFsXCIgJiYgdGhpcy5oZWxwZXIgJiYgdGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHR0aGlzLmhlbHBlci5yZW1vdmUoKTtcblx0XHRcdH1cblxuXHRcdFx0JC5leHRlbmQodGhpcywge1xuXHRcdFx0XHRoZWxwZXI6IG51bGwsXG5cdFx0XHRcdGRyYWdnaW5nOiBmYWxzZSxcblx0XHRcdFx0cmV2ZXJ0aW5nOiBmYWxzZSxcblx0XHRcdFx0X25vRmluYWxTb3J0OiBudWxsXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYodGhpcy5kb21Qb3NpdGlvbi5wcmV2KSB7XG5cdFx0XHRcdCQodGhpcy5kb21Qb3NpdGlvbi5wcmV2KS5hZnRlcih0aGlzLmN1cnJlbnRJdGVtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQodGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQpLnByZXBlbmQodGhpcy5jdXJyZW50SXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKG8pIHtcblxuXHRcdHZhciBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zQXNqUXVlcnkobyAmJiBvLmNvbm5lY3RlZCksXG5cdFx0XHRzdHIgPSBbXTtcblx0XHRvID0gbyB8fCB7fTtcblxuXHRcdCQoaXRlbXMpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcmVzID0gKCQoby5pdGVtIHx8IHRoaXMpLmF0dHIoby5hdHRyaWJ1dGUgfHwgXCJpZFwiKSB8fCBcIlwiKS5tYXRjaChvLmV4cHJlc3Npb24gfHwgKC8oLispW1xcLT1fXSguKykvKSk7XG5cdFx0XHRpZiAocmVzKSB7XG5cdFx0XHRcdHN0ci5wdXNoKChvLmtleSB8fCByZXNbMV0rXCJbXVwiKStcIj1cIisoby5rZXkgJiYgby5leHByZXNzaW9uID8gcmVzWzFdIDogcmVzWzJdKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZighc3RyLmxlbmd0aCAmJiBvLmtleSkge1xuXHRcdFx0c3RyLnB1c2goby5rZXkgKyBcIj1cIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0ci5qb2luKFwiJlwiKTtcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKG8pIHtcblxuXHRcdHZhciBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zQXNqUXVlcnkobyAmJiBvLmNvbm5lY3RlZCksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdG8gPSBvIHx8IHt9O1xuXG5cdFx0aXRlbXMuZWFjaChmdW5jdGlvbigpIHsgcmV0LnB1c2goJChvLml0ZW0gfHwgdGhpcykuYXR0cihvLmF0dHJpYnV0ZSB8fCBcImlkXCIpIHx8IFwiXCIpOyB9KTtcblx0XHRyZXR1cm4gcmV0O1xuXG5cdH0sXG5cblx0LyogQmUgY2FyZWZ1bCB3aXRoIHRoZSBmb2xsb3dpbmcgY29yZSBmdW5jdGlvbnMgKi9cblx0X2ludGVyc2VjdHNXaXRoOiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHR2YXIgeDEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQsXG5cdFx0XHR4MiA9IHgxICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxcblx0XHRcdHkxID0gdGhpcy5wb3NpdGlvbkFicy50b3AsXG5cdFx0XHR5MiA9IHkxICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsXG5cdFx0XHRsID0gaXRlbS5sZWZ0LFxuXHRcdFx0ciA9IGwgKyBpdGVtLndpZHRoLFxuXHRcdFx0dCA9IGl0ZW0udG9wLFxuXHRcdFx0YiA9IHQgKyBpdGVtLmhlaWdodCxcblx0XHRcdGR5Q2xpY2sgPSB0aGlzLm9mZnNldC5jbGljay50b3AsXG5cdFx0XHRkeENsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCxcblx0XHRcdGlzT3ZlckVsZW1lbnQgPSAoeTEgKyBkeUNsaWNrKSA+IHQgJiYgKHkxICsgZHlDbGljaykgPCBiICYmICh4MSArIGR4Q2xpY2spID4gbCAmJiAoeDEgKyBkeENsaWNrKSA8IHI7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy50b2xlcmFuY2UgPT09IFwicG9pbnRlclwiIHx8XG5cdFx0XHR0aGlzLm9wdGlvbnMuZm9yY2VQb2ludGVyRm9yQ29udGFpbmVycyB8fFxuXHRcdFx0KHRoaXMub3B0aW9ucy50b2xlcmFuY2UgIT09IFwicG9pbnRlclwiICYmIHRoaXMuaGVscGVyUHJvcG9ydGlvbnNbdGhpcy5mbG9hdGluZyA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID4gaXRlbVt0aGlzLmZsb2F0aW5nID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0pXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gaXNPdmVyRWxlbWVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gKGwgPCB4MSArICh0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgJiYgLy8gUmlnaHQgSGFsZlxuXHRcdFx0XHR4MiAtICh0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgPCByICYmIC8vIExlZnQgSGFsZlxuXHRcdFx0XHR0IDwgeTEgKyAodGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyKSAmJiAvLyBCb3R0b20gSGFsZlxuXHRcdFx0XHR5MiAtICh0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIpIDwgYiApOyAvLyBUb3AgSGFsZlxuXG5cdFx0fVxuXHR9LFxuXG5cdF9pbnRlcnNlY3RzV2l0aFBvaW50ZXI6IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdHZhciBpc092ZXJFbGVtZW50SGVpZ2h0ID0gKHRoaXMub3B0aW9ucy5heGlzID09PSBcInhcIikgfHwgaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AsIGl0ZW0uaGVpZ2h0KSxcblx0XHRcdGlzT3ZlckVsZW1lbnRXaWR0aCA9ICh0aGlzLm9wdGlvbnMuYXhpcyA9PT0gXCJ5XCIpIHx8IGlzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0LCBpdGVtLndpZHRoKSxcblx0XHRcdGlzT3ZlckVsZW1lbnQgPSBpc092ZXJFbGVtZW50SGVpZ2h0ICYmIGlzT3ZlckVsZW1lbnRXaWR0aCxcblx0XHRcdHZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCksXG5cdFx0XHRob3Jpem9udGFsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTtcblxuXHRcdGlmICghaXNPdmVyRWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmZsb2F0aW5nID9cblx0XHRcdCggKChob3Jpem9udGFsRGlyZWN0aW9uICYmIGhvcml6b250YWxEaXJlY3Rpb24gPT09IFwicmlnaHRcIikgfHwgdmVydGljYWxEaXJlY3Rpb24gPT09IFwiZG93blwiKSA/IDIgOiAxIClcblx0XHRcdDogKCB2ZXJ0aWNhbERpcmVjdGlvbiAmJiAodmVydGljYWxEaXJlY3Rpb24gPT09IFwiZG93blwiID8gMiA6IDEpICk7XG5cblx0fSxcblxuXHRfaW50ZXJzZWN0c1dpdGhTaWRlczogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0dmFyIGlzT3ZlckJvdHRvbUhhbGYgPSBpc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wLCBpdGVtLnRvcCArIChpdGVtLmhlaWdodC8yKSwgaXRlbS5oZWlnaHQpLFxuXHRcdFx0aXNPdmVyUmlnaHRIYWxmID0gaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLmxlZnQgKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0LCBpdGVtLmxlZnQgKyAoaXRlbS53aWR0aC8yKSwgaXRlbS53aWR0aCksXG5cdFx0XHR2ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLFxuXHRcdFx0aG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7XG5cblx0XHRpZiAodGhpcy5mbG9hdGluZyAmJiBob3Jpem9udGFsRGlyZWN0aW9uKSB7XG5cdFx0XHRyZXR1cm4gKChob3Jpem9udGFsRGlyZWN0aW9uID09PSBcInJpZ2h0XCIgJiYgaXNPdmVyUmlnaHRIYWxmKSB8fCAoaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgJiYgIWlzT3ZlclJpZ2h0SGFsZikpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdmVydGljYWxEaXJlY3Rpb24gJiYgKCh2ZXJ0aWNhbERpcmVjdGlvbiA9PT0gXCJkb3duXCIgJiYgaXNPdmVyQm90dG9tSGFsZikgfHwgKHZlcnRpY2FsRGlyZWN0aW9uID09PSBcInVwXCIgJiYgIWlzT3ZlckJvdHRvbUhhbGYpKTtcblx0XHR9XG5cblx0fSxcblxuXHRfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGVsdGEgPSB0aGlzLnBvc2l0aW9uQWJzLnRvcCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtcblx0XHRyZXR1cm4gZGVsdGEgIT09IDAgJiYgKGRlbHRhID4gMCA/IFwiZG93blwiIDogXCJ1cFwiKTtcblx0fSxcblxuXHRfZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZWx0YSA9IHRoaXMucG9zaXRpb25BYnMubGVmdCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLmxlZnQ7XG5cdFx0cmV0dXJuIGRlbHRhICE9PSAwICYmIChkZWx0YSA+IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIik7XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR0aGlzLl9yZWZyZXNoSXRlbXMoZXZlbnQpO1xuXHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9jb25uZWN0V2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cdFx0cmV0dXJuIG9wdGlvbnMuY29ubmVjdFdpdGguY29uc3RydWN0b3IgPT09IFN0cmluZyA/IFtvcHRpb25zLmNvbm5lY3RXaXRoXSA6IG9wdGlvbnMuY29ubmVjdFdpdGg7XG5cdH0sXG5cblx0X2dldEl0ZW1zQXNqUXVlcnk6IGZ1bmN0aW9uKGNvbm5lY3RlZCkge1xuXG5cdFx0dmFyIGksIGosIGN1ciwgaW5zdCxcblx0XHRcdGl0ZW1zID0gW10sXG5cdFx0XHRxdWVyaWVzID0gW10sXG5cdFx0XHRjb25uZWN0V2l0aCA9IHRoaXMuX2Nvbm5lY3RXaXRoKCk7XG5cblx0XHRpZihjb25uZWN0V2l0aCAmJiBjb25uZWN0ZWQpIHtcblx0XHRcdGZvciAoaSA9IGNvbm5lY3RXaXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcblx0XHRcdFx0Y3VyID0gJChjb25uZWN0V2l0aFtpXSk7XG5cdFx0XHRcdGZvciAoIGogPSBjdXIubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pe1xuXHRcdFx0XHRcdGluc3QgPSAkLmRhdGEoY3VyW2pdLCB0aGlzLndpZGdldEZ1bGxOYW1lKTtcblx0XHRcdFx0XHRpZihpbnN0ICYmIGluc3QgIT09IHRoaXMgJiYgIWluc3Qub3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0XHRcdFx0cXVlcmllcy5wdXNoKFskLmlzRnVuY3Rpb24oaW5zdC5vcHRpb25zLml0ZW1zKSA/IGluc3Qub3B0aW9ucy5pdGVtcy5jYWxsKGluc3QuZWxlbWVudCkgOiAkKGluc3Qub3B0aW9ucy5pdGVtcywgaW5zdC5lbGVtZW50KS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpLm5vdChcIi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiKSwgaW5zdF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHF1ZXJpZXMucHVzaChbJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcykgPyB0aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnQsIG51bGwsIHsgb3B0aW9uczogdGhpcy5vcHRpb25zLCBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0pIDogJCh0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKS5ub3QoXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiksIHRoaXNdKTtcblxuXHRcdGZvciAoaSA9IHF1ZXJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0cXVlcmllc1tpXVswXS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpdGVtcy5wdXNoKHRoaXMpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQoaXRlbXMpO1xuXG5cdH0sXG5cblx0X3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zOiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBsaXN0ID0gdGhpcy5jdXJyZW50SXRlbS5maW5kKFwiOmRhdGEoXCIgKyB0aGlzLndpZGdldE5hbWUgKyBcIi1pdGVtKVwiKTtcblxuXHRcdHRoaXMuaXRlbXMgPSAkLmdyZXAodGhpcy5pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdGZvciAodmFyIGo9MDsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0aWYobGlzdFtqXSA9PT0gaXRlbS5pdGVtWzBdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHR9LFxuXG5cdF9yZWZyZXNoSXRlbXM6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHR0aGlzLml0ZW1zID0gW107XG5cdFx0dGhpcy5jb250YWluZXJzID0gW3RoaXNdO1xuXG5cdFx0dmFyIGksIGosIGN1ciwgaW5zdCwgdGFyZ2V0RGF0YSwgX3F1ZXJpZXMsIGl0ZW0sIHF1ZXJpZXNMZW5ndGgsXG5cdFx0XHRpdGVtcyA9IHRoaXMuaXRlbXMsXG5cdFx0XHRxdWVyaWVzID0gW1skLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLml0ZW1zKSA/IHRoaXMub3B0aW9ucy5pdGVtcy5jYWxsKHRoaXMuZWxlbWVudFswXSwgZXZlbnQsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9KSA6ICQodGhpcy5vcHRpb25zLml0ZW1zLCB0aGlzLmVsZW1lbnQpLCB0aGlzXV0sXG5cdFx0XHRjb25uZWN0V2l0aCA9IHRoaXMuX2Nvbm5lY3RXaXRoKCk7XG5cblx0XHRpZihjb25uZWN0V2l0aCAmJiB0aGlzLnJlYWR5KSB7IC8vU2hvdWxkbid0IGJlIHJ1biB0aGUgZmlyc3QgdGltZSB0aHJvdWdoIGR1ZSB0byBtYXNzaXZlIHNsb3ctZG93blxuXHRcdFx0Zm9yIChpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0XHRjdXIgPSAkKGNvbm5lY3RXaXRoW2ldKTtcblx0XHRcdFx0Zm9yIChqID0gY3VyLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKXtcblx0XHRcdFx0XHRpbnN0ID0gJC5kYXRhKGN1cltqXSwgdGhpcy53aWRnZXRGdWxsTmFtZSk7XG5cdFx0XHRcdFx0aWYoaW5zdCAmJiBpbnN0ICE9PSB0aGlzICYmICFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQpIHtcblx0XHRcdFx0XHRcdHF1ZXJpZXMucHVzaChbJC5pc0Z1bmN0aW9uKGluc3Qub3B0aW9ucy5pdGVtcykgPyBpbnN0Lm9wdGlvbnMuaXRlbXMuY2FsbChpbnN0LmVsZW1lbnRbMF0sIGV2ZW50LCB7IGl0ZW06IHRoaXMuY3VycmVudEl0ZW0gfSkgOiAkKGluc3Qub3B0aW9ucy5pdGVtcywgaW5zdC5lbGVtZW50KSwgaW5zdF0pO1xuXHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJzLnB1c2goaW5zdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gcXVlcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0dGFyZ2V0RGF0YSA9IHF1ZXJpZXNbaV1bMV07XG5cdFx0XHRfcXVlcmllcyA9IHF1ZXJpZXNbaV1bMF07XG5cblx0XHRcdGZvciAoaj0wLCBxdWVyaWVzTGVuZ3RoID0gX3F1ZXJpZXMubGVuZ3RoOyBqIDwgcXVlcmllc0xlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGl0ZW0gPSAkKF9xdWVyaWVzW2pdKTtcblxuXHRcdFx0XHRpdGVtLmRhdGEodGhpcy53aWRnZXROYW1lICsgXCItaXRlbVwiLCB0YXJnZXREYXRhKTsgLy8gRGF0YSBmb3IgdGFyZ2V0IGNoZWNraW5nIChtb3VzZSBtYW5hZ2VyKVxuXG5cdFx0XHRcdGl0ZW1zLnB1c2goe1xuXHRcdFx0XHRcdGl0ZW06IGl0ZW0sXG5cdFx0XHRcdFx0aW5zdGFuY2U6IHRhcmdldERhdGEsXG5cdFx0XHRcdFx0d2lkdGg6IDAsIGhlaWdodDogMCxcblx0XHRcdFx0XHRsZWZ0OiAwLCB0b3A6IDBcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0sXG5cblx0cmVmcmVzaFBvc2l0aW9uczogZnVuY3Rpb24oZmFzdCkge1xuXG5cdFx0Ly9UaGlzIGhhcyB0byBiZSByZWRvbmUgYmVjYXVzZSBkdWUgdG8gdGhlIGl0ZW0gYmVpbmcgbW92ZWQgb3V0L2ludG8gdGhlIG9mZnNldFBhcmVudCwgdGhlIG9mZnNldFBhcmVudCdzIHBvc2l0aW9uIHdpbGwgY2hhbmdlXG5cdFx0aWYodGhpcy5vZmZzZXRQYXJlbnQgJiYgdGhpcy5oZWxwZXIpIHtcblx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudCA9IHRoaXMuX2dldFBhcmVudE9mZnNldCgpO1xuXHRcdH1cblxuXHRcdHZhciBpLCBpdGVtLCB0LCBwO1xuXG5cdFx0Zm9yIChpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG5cdFx0XHRpdGVtID0gdGhpcy5pdGVtc1tpXTtcblxuXHRcdFx0Ly9XZSBpZ25vcmUgY2FsY3VsYXRpbmcgcG9zaXRpb25zIG9mIGFsbCBjb25uZWN0ZWQgY29udGFpbmVycyB3aGVuIHdlJ3JlIG5vdCBvdmVyIHRoZW1cblx0XHRcdGlmKGl0ZW0uaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lciAmJiB0aGlzLmN1cnJlbnRDb250YWluZXIgJiYgaXRlbS5pdGVtWzBdICE9PSB0aGlzLmN1cnJlbnRJdGVtWzBdKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR0ID0gdGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQgPyAkKHRoaXMub3B0aW9ucy50b2xlcmFuY2VFbGVtZW50LCBpdGVtLml0ZW0pIDogaXRlbS5pdGVtO1xuXG5cdFx0XHRpZiAoIWZhc3QpIHtcblx0XHRcdFx0aXRlbS53aWR0aCA9IHQub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHRpdGVtLmhlaWdodCA9IHQub3V0ZXJIZWlnaHQoKTtcblx0XHRcdH1cblxuXHRcdFx0cCA9IHQub2Zmc2V0KCk7XG5cdFx0XHRpdGVtLmxlZnQgPSBwLmxlZnQ7XG5cdFx0XHRpdGVtLnRvcCA9IHAudG9wO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMub3B0aW9ucy5jdXN0b20gJiYgdGhpcy5vcHRpb25zLmN1c3RvbS5yZWZyZXNoQ29udGFpbmVycykge1xuXHRcdFx0dGhpcy5vcHRpb25zLmN1c3RvbS5yZWZyZXNoQ29udGFpbmVycy5jYWxsKHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0XHRwID0gdGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0ID0gcC5sZWZ0O1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUudG9wID0gcC50b3A7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS53aWR0aFx0PSB0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlcldpZHRoKCk7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9jcmVhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24odGhhdCkge1xuXHRcdHRoYXQgPSB0aGF0IHx8IHRoaXM7XG5cdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnM7XG5cblx0XHRpZighby5wbGFjZWhvbGRlciB8fCBvLnBsYWNlaG9sZGVyLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcblx0XHRcdGNsYXNzTmFtZSA9IG8ucGxhY2Vob2xkZXI7XG5cdFx0XHRvLnBsYWNlaG9sZGVyID0ge1xuXHRcdFx0XHRlbGVtZW50OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdHZhciBlbCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGF0LmN1cnJlbnRJdGVtWzBdLm5vZGVOYW1lKSlcblx0XHRcdFx0XHRcdC5hZGRDbGFzcyhjbGFzc05hbWUgfHwgdGhhdC5jdXJyZW50SXRlbVswXS5jbGFzc05hbWUrXCIgdWktc29ydGFibGUtcGxhY2Vob2xkZXJcIilcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhcInVpLXNvcnRhYmxlLWhlbHBlclwiKVswXTtcblxuXHRcdFx0XHRcdGlmKCFjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRcdGVsLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBlbDtcblx0XHRcdFx0fSxcblx0XHRcdFx0dXBkYXRlOiBmdW5jdGlvbihjb250YWluZXIsIHApIHtcblxuXHRcdFx0XHRcdC8vIDEuIElmIGEgY2xhc3NOYW1lIGlzIHNldCBhcyAncGxhY2Vob2xkZXIgb3B0aW9uLCB3ZSBkb24ndCBmb3JjZSBzaXplcyAtIHRoZSBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgdGhhdFxuXHRcdFx0XHRcdC8vIDIuIFRoZSBvcHRpb24gJ2ZvcmNlUGxhY2Vob2xkZXJTaXplIGNhbiBiZSBlbmFibGVkIHRvIGZvcmNlIGl0IGV2ZW4gaWYgYSBjbGFzcyBuYW1lIGlzIHNwZWNpZmllZFxuXHRcdFx0XHRcdGlmKGNsYXNzTmFtZSAmJiAhby5mb3JjZVBsYWNlaG9sZGVyU2l6ZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vSWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgYWN0dWFsIGhlaWdodCBieSBpdHNlbGYgKHdpdGhvdXQgc3R5bGVzIGNvbWluZyBmcm9tIGEgc3R5bGVzaGVldCksIGl0IHJlY2VpdmVzIHRoZSBpbmxpbmUgaGVpZ2h0IGZyb20gdGhlIGRyYWdnZWQgaXRlbVxuXHRcdFx0XHRcdGlmKCFwLmhlaWdodCgpKSB7IHAuaGVpZ2h0KHRoYXQuY3VycmVudEl0ZW0uaW5uZXJIZWlnaHQoKSAtIHBhcnNlSW50KHRoYXQuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ1RvcFwiKXx8MCwgMTApIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpfHwwLCAxMCkpOyB9XG5cdFx0XHRcdFx0aWYoIXAud2lkdGgoKSkgeyBwLndpZHRoKHRoYXQuY3VycmVudEl0ZW0uaW5uZXJXaWR0aCgpIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nTGVmdFwiKXx8MCwgMTApIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nUmlnaHRcIil8fDAsIDEwKSk7IH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvL0NyZWF0ZSB0aGUgcGxhY2Vob2xkZXJcblx0XHR0aGF0LnBsYWNlaG9sZGVyID0gJChvLnBsYWNlaG9sZGVyLmVsZW1lbnQuY2FsbCh0aGF0LmVsZW1lbnQsIHRoYXQuY3VycmVudEl0ZW0pKTtcblxuXHRcdC8vQXBwZW5kIGl0IGFmdGVyIHRoZSBhY3R1YWwgY3VycmVudCBpdGVtXG5cdFx0dGhhdC5jdXJyZW50SXRlbS5hZnRlcih0aGF0LnBsYWNlaG9sZGVyKTtcblxuXHRcdC8vVXBkYXRlIHRoZSBzaXplIG9mIHRoZSBwbGFjZWhvbGRlciAoVE9ETzogTG9naWMgdG8gZnV6enksIHNlZSBsaW5lIDMxNi8zMTcpXG5cdFx0by5wbGFjZWhvbGRlci51cGRhdGUodGhhdCwgdGhhdC5wbGFjZWhvbGRlcik7XG5cblx0fSxcblxuXHRfY29udGFjdENvbnRhaW5lcnM6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIGksIGosIGRpc3QsIGl0ZW1XaXRoTGVhc3REaXN0YW5jZSwgcG9zUHJvcGVydHksIHNpemVQcm9wZXJ0eSwgYmFzZSwgY3VyLCBuZWFyQm90dG9tLFxuXHRcdFx0aW5uZXJtb3N0Q29udGFpbmVyID0gbnVsbCxcblx0XHRcdGlubmVybW9zdEluZGV4ID0gbnVsbDtcblxuXHRcdC8vIGdldCBpbm5lcm1vc3QgY29udGFpbmVyIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGl0ZW1cblx0XHRmb3IgKGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblxuXHRcdFx0Ly8gbmV2ZXIgY29uc2lkZXIgYSBjb250YWluZXIgdGhhdCdzIGxvY2F0ZWQgd2l0aGluIHRoZSBpdGVtIGl0c2VsZlxuXHRcdFx0aWYoJC5jb250YWlucyh0aGlzLmN1cnJlbnRJdGVtWzBdLCB0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudFswXSkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuX2ludGVyc2VjdHNXaXRoKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZSkpIHtcblxuXHRcdFx0XHQvLyBpZiB3ZSd2ZSBhbHJlYWR5IGZvdW5kIGEgY29udGFpbmVyIGFuZCBpdCdzIG1vcmUgXCJpbm5lclwiIHRoYW4gdGhpcywgdGhlbiBjb250aW51ZVxuXHRcdFx0XHRpZihpbm5lcm1vc3RDb250YWluZXIgJiYgJC5jb250YWlucyh0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudFswXSwgaW5uZXJtb3N0Q29udGFpbmVyLmVsZW1lbnRbMF0pKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbm5lcm1vc3RDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcnNbaV07XG5cdFx0XHRcdGlubmVybW9zdEluZGV4ID0gaTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gY29udGFpbmVyIGRvZXNuJ3QgaW50ZXJzZWN0LiB0cmlnZ2VyIFwib3V0XCIgZXZlbnQgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdGlmKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyKSB7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKFwib3V0XCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpO1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgbm8gaW50ZXJzZWN0aW5nIGNvbnRhaW5lcnMgZm91bmQsIHJldHVyblxuXHRcdGlmKCFpbm5lcm1vc3RDb250YWluZXIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBtb3ZlIHRoZSBpdGVtIGludG8gdGhlIGNvbnRhaW5lciBpZiBpdCdzIG5vdCB0aGVyZSBhbHJlYWR5XG5cdFx0aWYodGhpcy5jb250YWluZXJzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0dGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5fdHJpZ2dlcihcIm92ZXJcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7XG5cdFx0XHR0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vV2hlbiBlbnRlcmluZyBhIG5ldyBjb250YWluZXIsIHdlIHdpbGwgZmluZCB0aGUgaXRlbSB3aXRoIHRoZSBsZWFzdCBkaXN0YW5jZSBhbmQgYXBwZW5kIG91ciBpdGVtIG5lYXIgaXRcblx0XHRcdGRpc3QgPSAxMDAwMDtcblx0XHRcdGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA9IG51bGw7XG5cdFx0XHRwb3NQcm9wZXJ0eSA9IHRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uZmxvYXRpbmcgPyBcImxlZnRcIiA6IFwidG9wXCI7XG5cdFx0XHRzaXplUHJvcGVydHkgPSB0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmZsb2F0aW5nID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIjtcblx0XHRcdGJhc2UgPSB0aGlzLnBvc2l0aW9uQWJzW3Bvc1Byb3BlcnR5XSArIHRoaXMub2Zmc2V0LmNsaWNrW3Bvc1Byb3BlcnR5XTtcblx0XHRcdGZvciAoaiA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblx0XHRcdFx0aWYoISQuY29udGFpbnModGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5lbGVtZW50WzBdLCB0aGlzLml0ZW1zW2pdLml0ZW1bMF0pKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYodGhpcy5pdGVtc1tqXS5pdGVtWzBdID09PSB0aGlzLmN1cnJlbnRJdGVtWzBdKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y3VyID0gdGhpcy5pdGVtc1tqXS5pdGVtLm9mZnNldCgpW3Bvc1Byb3BlcnR5XTtcblx0XHRcdFx0bmVhckJvdHRvbSA9IGZhbHNlO1xuXHRcdFx0XHRpZihNYXRoLmFicyhjdXIgLSBiYXNlKSA+IE1hdGguYWJzKGN1ciArIHRoaXMuaXRlbXNbal1bc2l6ZVByb3BlcnR5XSAtIGJhc2UpKXtcblx0XHRcdFx0XHRuZWFyQm90dG9tID0gdHJ1ZTtcblx0XHRcdFx0XHRjdXIgKz0gdGhpcy5pdGVtc1tqXVtzaXplUHJvcGVydHldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoTWF0aC5hYnMoY3VyIC0gYmFzZSkgPCBkaXN0KSB7XG5cdFx0XHRcdFx0ZGlzdCA9IE1hdGguYWJzKGN1ciAtIGJhc2UpOyBpdGVtV2l0aExlYXN0RGlzdGFuY2UgPSB0aGlzLml0ZW1zW2pdO1xuXHRcdFx0XHRcdHRoaXMuZGlyZWN0aW9uID0gbmVhckJvdHRvbSA/IFwidXBcIjogXCJkb3duXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9DaGVjayBpZiBkcm9wT25FbXB0eSBpcyBlbmFibGVkXG5cdFx0XHRpZighaXRlbVdpdGhMZWFzdERpc3RhbmNlICYmICF0aGlzLm9wdGlvbnMuZHJvcE9uRW1wdHkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmN1cnJlbnRDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdO1xuXHRcdFx0aXRlbVdpdGhMZWFzdERpc3RhbmNlID8gdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBpdGVtV2l0aExlYXN0RGlzdGFuY2UsIG51bGwsIHRydWUpIDogdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBudWxsLCB0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmVsZW1lbnQsIHRydWUpO1xuXHRcdFx0dGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpO1xuXHRcdFx0dGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5fdHJpZ2dlcihcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMpKTtcblxuXHRcdFx0Ly9VcGRhdGUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0XHR0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIudXBkYXRlKHRoaXMuY3VycmVudENvbnRhaW5lciwgdGhpcy5wbGFjZWhvbGRlcik7XG5cblx0XHRcdHRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uX3RyaWdnZXIoXCJvdmVyXCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpO1xuXHRcdFx0dGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5jb250YWluZXJDYWNoZS5vdmVyID0gMTtcblx0XHR9XG5cblxuXHR9LFxuXG5cdF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGhlbHBlciA9ICQuaXNGdW5jdGlvbihvLmhlbHBlcikgPyAkKG8uaGVscGVyLmFwcGx5KHRoaXMuZWxlbWVudFswXSwgW2V2ZW50LCB0aGlzLmN1cnJlbnRJdGVtXSkpIDogKG8uaGVscGVyID09PSBcImNsb25lXCIgPyB0aGlzLmN1cnJlbnRJdGVtLmNsb25lKCkgOiB0aGlzLmN1cnJlbnRJdGVtKTtcblxuXHRcdC8vQWRkIHRoZSBoZWxwZXIgdG8gdGhlIERPTSBpZiB0aGF0IGRpZG4ndCBoYXBwZW4gYWxyZWFkeVxuXHRcdGlmKCFoZWxwZXIucGFyZW50cyhcImJvZHlcIikubGVuZ3RoKSB7XG5cdFx0XHQkKG8uYXBwZW5kVG8gIT09IFwicGFyZW50XCIgPyBvLmFwcGVuZFRvIDogdGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlKVswXS5hcHBlbmRDaGlsZChoZWxwZXJbMF0pO1xuXHRcdH1cblxuXHRcdGlmKGhlbHBlclswXSA9PT0gdGhpcy5jdXJyZW50SXRlbVswXSkge1xuXHRcdFx0dGhpcy5fc3RvcmVkQ1NTID0geyB3aWR0aDogdGhpcy5jdXJyZW50SXRlbVswXS5zdHlsZS53aWR0aCwgaGVpZ2h0OiB0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLmhlaWdodCwgcG9zaXRpb246IHRoaXMuY3VycmVudEl0ZW0uY3NzKFwicG9zaXRpb25cIiksIHRvcDogdGhpcy5jdXJyZW50SXRlbS5jc3MoXCJ0b3BcIiksIGxlZnQ6IHRoaXMuY3VycmVudEl0ZW0uY3NzKFwibGVmdFwiKSB9O1xuXHRcdH1cblxuXHRcdGlmKCFoZWxwZXJbMF0uc3R5bGUud2lkdGggfHwgby5mb3JjZUhlbHBlclNpemUpIHtcblx0XHRcdGhlbHBlci53aWR0aCh0aGlzLmN1cnJlbnRJdGVtLndpZHRoKCkpO1xuXHRcdH1cblx0XHRpZighaGVscGVyWzBdLnN0eWxlLmhlaWdodCB8fCBvLmZvcmNlSGVscGVyU2l6ZSkge1xuXHRcdFx0aGVscGVyLmhlaWdodCh0aGlzLmN1cnJlbnRJdGVtLmhlaWdodCgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGVscGVyO1xuXG5cdH0sXG5cblx0X2FkanVzdE9mZnNldEZyb21IZWxwZXI6IGZ1bmN0aW9uKG9iaikge1xuXHRcdGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRvYmogPSBvYmouc3BsaXQoXCIgXCIpO1xuXHRcdH1cblx0XHRpZiAoJC5pc0FycmF5KG9iaikpIHtcblx0XHRcdG9iaiA9IHtsZWZ0OiArb2JqWzBdLCB0b3A6ICtvYmpbMV0gfHwgMH07XG5cdFx0fVxuXHRcdGlmIChcImxlZnRcIiBpbiBvYmopIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBvYmoubGVmdCArIHRoaXMubWFyZ2lucy5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoXCJyaWdodFwiIGluIG9iaikge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSBvYmoucmlnaHQgKyB0aGlzLm1hcmdpbnMubGVmdDtcblx0XHR9XG5cdFx0aWYgKFwidG9wXCIgaW4gb2JqKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDtcblx0XHR9XG5cdFx0aWYgKFwiYm90dG9tXCIgaW4gb2JqKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIG9iai5ib3R0b20gKyB0aGlzLm1hcmdpbnMudG9wO1xuXHRcdH1cblx0fSxcblxuXHRfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHtcblxuXG5cdFx0Ly9HZXQgdGhlIG9mZnNldFBhcmVudCBhbmQgY2FjaGUgaXRzIHBvc2l0aW9uXG5cdFx0dGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTtcblx0XHR2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtcblxuXHRcdC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBtb2RpZnkgYSBvZmZzZXQgY2FsY3VsYXRlZCBvbiBzdGFydCwgc2luY2UgdGhlIGZvbGxvd2luZyBoYXBwZW5lZDpcblx0XHQvLyAxLiBUaGUgcG9zaXRpb24gb2YgdGhlIGhlbHBlciBpcyBhYnNvbHV0ZSwgc28gaXQncyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBuZXh0IHBvc2l0aW9uZWQgcGFyZW50XG5cdFx0Ly8gMi4gVGhlIGFjdHVhbCBvZmZzZXQgcGFyZW50IGlzIGEgY2hpbGQgb2YgdGhlIHNjcm9sbCBwYXJlbnQsIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpc24ndCB0aGUgZG9jdW1lbnQsIHdoaWNoIG1lYW5zIHRoYXRcblx0XHQvLyAgICB0aGUgc2Nyb2xsIGlzIGluY2x1ZGVkIGluIHRoZSBpbml0aWFsIGNhbGN1bGF0aW9uIG9mIHRoZSBvZmZzZXQgb2YgdGhlIHBhcmVudCwgYW5kIG5ldmVyIHJlY2FsY3VsYXRlZCB1cG9uIGRyYWdcblx0XHRpZih0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkge1xuXHRcdFx0cG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyBuZWVkcyB0byBiZSBhY3R1YWxseSBkb25lIGZvciBhbGwgYnJvd3NlcnMsIHNpbmNlIHBhZ2VYL3BhZ2VZIGluY2x1ZGVzIHRoaXMgaW5mb3JtYXRpb25cblx0XHQvLyB3aXRoIGFuIHVnbHkgSUUgZml4XG5cdFx0aWYoIHRoaXMub2Zmc2V0UGFyZW50WzBdID09PSBkb2N1bWVudC5ib2R5IHx8ICh0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lICYmIHRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJodG1sXCIgJiYgJC51aS5pZSkpIHtcblx0XHRcdHBvID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBwby50b3AgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApIHx8IDApLFxuXHRcdFx0bGVmdDogcG8ubGVmdCArIChwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksMTApIHx8IDApXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZXRSZWxhdGl2ZU9mZnNldDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZih0aGlzLmNzc1Bvc2l0aW9uID09PSBcInJlbGF0aXZlXCIpIHtcblx0XHRcdHZhciBwID0gdGhpcy5jdXJyZW50SXRlbS5wb3NpdGlvbigpO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dG9wOiBwLnRvcCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdGxlZnQ6IHAubGVmdCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJsZWZ0XCIpLDEwKSB8fCAwKSArIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdH0sXG5cblx0X2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5tYXJnaW5zID0ge1xuXHRcdFx0bGVmdDogKHBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKFwibWFyZ2luTGVmdFwiKSwxMCkgfHwgMCksXG5cdFx0XHR0b3A6IChwYXJzZUludCh0aGlzLmN1cnJlbnRJdGVtLmNzcyhcIm1hcmdpblRvcFwiKSwxMCkgfHwgMClcblx0XHR9O1xuXHR9LFxuXG5cdF9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zID0ge1xuXHRcdFx0d2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxcblx0XHRcdGhlaWdodDogdGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKVxuXHRcdH07XG5cdH0sXG5cblx0X3NldENvbnRhaW5tZW50OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBjZSwgY28sIG92ZXIsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zO1xuXHRcdGlmKG8uY29udGFpbm1lbnQgPT09IFwicGFyZW50XCIpIHtcblx0XHRcdG8uY29udGFpbm1lbnQgPSB0aGlzLmhlbHBlclswXS5wYXJlbnROb2RlO1xuXHRcdH1cblx0XHRpZihvLmNvbnRhaW5tZW50ID09PSBcImRvY3VtZW50XCIgfHwgby5jb250YWlubWVudCA9PT0gXCJ3aW5kb3dcIikge1xuXHRcdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdFx0MCAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCxcblx0XHRcdFx0MCAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AsXG5cdFx0XHRcdCQoby5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiID8gZG9jdW1lbnQgOiB3aW5kb3cpLndpZHRoKCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRcdCgkKG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/IGRvY3VtZW50IDogd2luZG93KS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHR9XG5cblx0XHRpZighKC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8pLnRlc3Qoby5jb250YWlubWVudCkpIHtcblx0XHRcdGNlID0gJChvLmNvbnRhaW5tZW50KVswXTtcblx0XHRcdGNvID0gJChvLmNvbnRhaW5tZW50KS5vZmZzZXQoKTtcblx0XHRcdG92ZXIgPSAoJChjZSkuY3NzKFwib3ZlcmZsb3dcIikgIT09IFwiaGlkZGVuXCIpO1xuXG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gW1xuXHRcdFx0XHRjby5sZWZ0ICsgKHBhcnNlSW50KCQoY2UpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCkgfHwgMCkgKyAocGFyc2VJbnQoJChjZSkuY3NzKFwicGFkZGluZ0xlZnRcIiksMTApIHx8IDApIC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRcdGNvLnRvcCArIChwYXJzZUludCgkKGNlKS5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCkgfHwgMCkgKyAocGFyc2VJbnQoJChjZSkuY3NzKFwicGFkZGluZ1RvcFwiKSwxMCkgfHwgMCkgLSB0aGlzLm1hcmdpbnMudG9wLFxuXHRcdFx0XHRjby5sZWZ0KyhvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsV2lkdGgsY2Uub2Zmc2V0V2lkdGgpIDogY2Uub2Zmc2V0V2lkdGgpIC0gKHBhcnNlSW50KCQoY2UpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCkgfHwgMCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKFwicGFkZGluZ1JpZ2h0XCIpLDEwKSB8fCAwKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCxcblx0XHRcdFx0Y28udG9wKyhvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsSGVpZ2h0LGNlLm9mZnNldEhlaWdodCkgOiBjZS5vZmZzZXRIZWlnaHQpIC0gKHBhcnNlSW50KCQoY2UpLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLDEwKSB8fCAwKSAtIChwYXJzZUludCgkKGNlKS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLDEwKSB8fCAwKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHR9XG5cblx0fSxcblxuXHRfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKGQsIHBvcykge1xuXG5cdFx0aWYoIXBvcykge1xuXHRcdFx0cG9zID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdFx0dmFyIG1vZCA9IGQgPT09IFwiYWJzb2x1dGVcIiA/IDEgOiAtMSxcblx0XHRcdHNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9PSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSAoLyhodG1sfGJvZHkpL2kpLnRlc3Qoc2Nyb2xsWzBdLnRhZ05hbWUpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogKFxuXHRcdFx0XHRwb3MudG9wXHQrXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbW9kICtcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudFxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICogbW9kIC1cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6ICggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsVG9wKCkgKSApICogbW9kKVxuXHRcdFx0KSxcblx0XHRcdGxlZnQ6IChcblx0XHRcdFx0cG9zLmxlZnQgK1x0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgKiBtb2QgK1x0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICogbW9kXHQtXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSA6IHNjcm9sbElzUm9vdE5vZGUgPyAwIDogc2Nyb2xsLnNjcm9sbExlZnQoKSApICogbW9kKVxuXHRcdFx0KVxuXHRcdH07XG5cblx0fSxcblxuXHRfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdHZhciB0b3AsIGxlZnQsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0cGFnZVggPSBldmVudC5wYWdlWCxcblx0XHRcdHBhZ2VZID0gZXZlbnQucGFnZVksXG5cdFx0XHRzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgISh0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gZG9jdW1lbnQgJiYgJC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSwgdGhpcy5vZmZzZXRQYXJlbnRbMF0pKSA/IHRoaXMub2Zmc2V0UGFyZW50IDogdGhpcy5zY3JvbGxQYXJlbnQsIHNjcm9sbElzUm9vdE5vZGUgPSAoLyhodG1sfGJvZHkpL2kpLnRlc3Qoc2Nyb2xsWzBdLnRhZ05hbWUpO1xuXG5cdFx0Ly8gVGhpcyBpcyBhbm90aGVyIHZlcnkgd2VpcmQgc3BlY2lhbCBjYXNlIHRoYXQgb25seSBoYXBwZW5zIGZvciByZWxhdGl2ZSBlbGVtZW50czpcblx0XHQvLyAxLiBJZiB0aGUgY3NzIHBvc2l0aW9uIGlzIHJlbGF0aXZlXG5cdFx0Ly8gMi4gYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzIHRoZSBkb2N1bWVudCBvciBzaW1pbGFyIHRvIHRoZSBvZmZzZXQgcGFyZW50XG5cdFx0Ly8gd2UgaGF2ZSB0byByZWZyZXNoIHRoZSByZWxhdGl2ZSBvZmZzZXQgZHVyaW5nIHRoZSBzY3JvbGwgc28gdGhlcmUgYXJlIG5vIGp1bXBzXG5cdFx0aWYodGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiICYmICEodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9PSB0aGlzLm9mZnNldFBhcmVudFswXSkpIHtcblx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlID0gdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKTtcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC1cblx0XHQgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LlxuXHRcdCAqL1xuXG5cdFx0aWYodGhpcy5vcmlnaW5hbFBvc2l0aW9uKSB7IC8vSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zXG5cblx0XHRcdGlmKHRoaXMuY29udGFpbm1lbnQpIHtcblx0XHRcdFx0aWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDwgdGhpcy5jb250YWlubWVudFswXSkge1xuXHRcdFx0XHRcdHBhZ2VYID0gdGhpcy5jb250YWlubWVudFswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WzFdKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50WzFdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+IHRoaXMuY29udGFpbm1lbnRbMl0pIHtcblx0XHRcdFx0XHRwYWdlWCA9IHRoaXMuY29udGFpbm1lbnRbMl0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gdGhpcy5jb250YWlubWVudFszXSkge1xuXHRcdFx0XHRcdHBhZ2VZID0gdGhpcy5jb250YWlubWVudFszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihvLmdyaWQpIHtcblx0XHRcdFx0dG9wID0gdGhpcy5vcmlnaW5hbFBhZ2VZICsgTWF0aC5yb3VuZCgocGFnZVkgLSB0aGlzLm9yaWdpbmFsUGFnZVkpIC8gby5ncmlkWzFdKSAqIG8uZ3JpZFsxXTtcblx0XHRcdFx0cGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50ID8gKCAodG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbMV0gJiYgdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDw9IHRoaXMuY29udGFpbm1lbnRbM10pID8gdG9wIDogKCh0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPj0gdGhpcy5jb250YWlubWVudFsxXSkgPyB0b3AgLSBvLmdyaWRbMV0gOiB0b3AgKyBvLmdyaWRbMV0pKSA6IHRvcDtcblxuXHRcdFx0XHRsZWZ0ID0gdGhpcy5vcmlnaW5hbFBhZ2VYICsgTWF0aC5yb3VuZCgocGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gby5ncmlkWzBdKSAqIG8uZ3JpZFswXTtcblx0XHRcdFx0cGFnZVggPSB0aGlzLmNvbnRhaW5tZW50ID8gKCAobGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFswXSAmJiBsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8PSB0aGlzLmNvbnRhaW5tZW50WzJdKSA/IGxlZnQgOiAoKGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IHRoaXMuY29udGFpbm1lbnRbMF0pID8gbGVmdCAtIG8uZ3JpZFswXSA6IGxlZnQgKyBvLmdyaWRbMF0pKSA6IGxlZnQ7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAoXG5cdFx0XHRcdHBhZ2VZIC1cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgLVx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wXHQtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudFxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICtcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkpXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXHRcdFx0XHRwYWdlWCAtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCAtXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdFx0LVx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LmxlZnQgK1x0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkpXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9yZWFycmFuZ2U6IGZ1bmN0aW9uKGV2ZW50LCBpLCBhLCBoYXJkUmVmcmVzaCkge1xuXG5cdFx0YSA/IGFbMF0uYXBwZW5kQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSkgOiBpLml0ZW1bMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlclswXSwgKHRoaXMuZGlyZWN0aW9uID09PSBcImRvd25cIiA/IGkuaXRlbVswXSA6IGkuaXRlbVswXS5uZXh0U2libGluZykpO1xuXG5cdFx0Ly9WYXJpb3VzIHRoaW5ncyBkb25lIGhlcmUgdG8gaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2U6XG5cdFx0Ly8gMS4gd2UgY3JlYXRlIGEgc2V0VGltZW91dCwgdGhhdCBjYWxscyByZWZyZXNoUG9zaXRpb25zXG5cdFx0Ly8gMi4gb24gdGhlIGluc3RhbmNlLCB3ZSBoYXZlIGEgY291bnRlciB2YXJpYWJsZSwgdGhhdCBnZXQncyBoaWdoZXIgYWZ0ZXIgZXZlcnkgYXBwZW5kXG5cdFx0Ly8gMy4gb24gdGhlIGxvY2FsIHNjb3BlLCB3ZSBjb3B5IHRoZSBjb3VudGVyIHZhcmlhYmxlLCBhbmQgY2hlY2sgaW4gdGhlIHRpbWVvdXQsIGlmIGl0J3Mgc3RpbGwgdGhlIHNhbWVcblx0XHQvLyA0LiB0aGlzIGxldHMgb25seSB0aGUgbGFzdCBhZGRpdGlvbiB0byB0aGUgdGltZW91dCBzdGFjayB0aHJvdWdoXG5cdFx0dGhpcy5jb3VudGVyID0gdGhpcy5jb3VudGVyID8gKyt0aGlzLmNvdW50ZXIgOiAxO1xuXHRcdHZhciBjb3VudGVyID0gdGhpcy5jb3VudGVyO1xuXG5cdFx0dGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihjb3VudGVyID09PSB0aGlzLmNvdW50ZXIpIHtcblx0XHRcdFx0dGhpcy5yZWZyZXNoUG9zaXRpb25zKCFoYXJkUmVmcmVzaCk7IC8vUHJlY29tcHV0ZSBhZnRlciBlYWNoIERPTSBpbnNlcnRpb24sIE5PVCBvbiBtb3VzZW1vdmVcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9LFxuXG5cdF9jbGVhcjogZnVuY3Rpb24oZXZlbnQsIG5vUHJvcGFnYXRpb24pIHtcblxuXHRcdHRoaXMucmV2ZXJ0aW5nID0gZmFsc2U7XG5cdFx0Ly8gV2UgZGVsYXkgYWxsIGV2ZW50cyB0aGF0IGhhdmUgdG8gYmUgdHJpZ2dlcmVkIHRvIGFmdGVyIHRoZSBwb2ludCB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgaGFzIGJlZW4gcmVtb3ZlZCBhbmRcblx0XHQvLyBldmVyeXRoaW5nIGVsc2Ugbm9ybWFsaXplZCBhZ2FpblxuXHRcdHZhciBpLFxuXHRcdFx0ZGVsYXllZFRyaWdnZXJzID0gW107XG5cblx0XHQvLyBXZSBmaXJzdCBoYXZlIHRvIHVwZGF0ZSB0aGUgZG9tIHBvc2l0aW9uIG9mIHRoZSBhY3R1YWwgY3VycmVudEl0ZW1cblx0XHQvLyBOb3RlOiBkb24ndCBkbyBpdCBpZiB0aGUgY3VycmVudCBpdGVtIGlzIGFscmVhZHkgcmVtb3ZlZCAoYnkgYSB1c2VyKSwgb3IgaXQgZ2V0cyByZWFwcGVuZGVkIChzZWUgIzQwODgpXG5cdFx0aWYoIXRoaXMuX25vRmluYWxTb3J0ICYmIHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KCkubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSh0aGlzLmN1cnJlbnRJdGVtKTtcblx0XHR9XG5cdFx0dGhpcy5fbm9GaW5hbFNvcnQgPSBudWxsO1xuXG5cdFx0aWYodGhpcy5oZWxwZXJbMF0gPT09IHRoaXMuY3VycmVudEl0ZW1bMF0pIHtcblx0XHRcdGZvcihpIGluIHRoaXMuX3N0b3JlZENTUykge1xuXHRcdFx0XHRpZih0aGlzLl9zdG9yZWRDU1NbaV0gPT09IFwiYXV0b1wiIHx8IHRoaXMuX3N0b3JlZENTU1tpXSA9PT0gXCJzdGF0aWNcIikge1xuXHRcdFx0XHRcdHRoaXMuX3N0b3JlZENTU1tpXSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUykucmVtb3ZlQ2xhc3MoXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uc2hvdygpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuZnJvbU91dHNpZGUgJiYgIW5vUHJvcGFnYXRpb24pIHtcblx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKGZ1bmN0aW9uKGV2ZW50KSB7IHRoaXMuX3RyaWdnZXIoXCJyZWNlaXZlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcy5mcm9tT3V0c2lkZSkpOyB9KTtcblx0XHR9XG5cdFx0aWYoKHRoaXMuZnJvbU91dHNpZGUgfHwgdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9PSB0aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpWzBdIHx8IHRoaXMuZG9tUG9zaXRpb24ucGFyZW50ICE9PSB0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpWzBdKSAmJiAhbm9Qcm9wYWdhdGlvbikge1xuXHRcdFx0ZGVsYXllZFRyaWdnZXJzLnB1c2goZnVuY3Rpb24oZXZlbnQpIHsgdGhpcy5fdHJpZ2dlcihcInVwZGF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOyB9KTsgLy9UcmlnZ2VyIHVwZGF0ZSBjYWxsYmFjayBpZiB0aGUgRE9NIHBvc2l0aW9uIGhhcyBjaGFuZ2VkXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIGl0ZW1zIENvbnRhaW5lciBoYXMgQ2hhbmdlZCBhbmQgdHJpZ2dlciBhcHByb3ByaWF0ZVxuXHRcdC8vIGV2ZW50cy5cblx0XHRpZiAodGhpcyAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyKSB7XG5cdFx0XHRpZighbm9Qcm9wYWdhdGlvbikge1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaChmdW5jdGlvbihldmVudCkgeyB0aGlzLl90cmlnZ2VyKFwicmVtb3ZlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7IH0pO1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCgoZnVuY3Rpb24oYykgeyByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsgYy5fdHJpZ2dlcihcInJlY2VpdmVcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7IH07ICB9KS5jYWxsKHRoaXMsIHRoaXMuY3VycmVudENvbnRhaW5lcikpO1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCgoZnVuY3Rpb24oYykgeyByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsgYy5fdHJpZ2dlcihcInVwZGF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsgIH07IH0pLmNhbGwodGhpcywgdGhpcy5jdXJyZW50Q29udGFpbmVyKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0XHQvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnNcblx0XHRmb3IgKGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0aWYoIW5vUHJvcGFnYXRpb24pIHtcblx0XHRcdFx0ZGVsYXllZFRyaWdnZXJzLnB1c2goKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7IGMuX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyKSB7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKChmdW5jdGlvbihjKSB7IHJldHVybiBmdW5jdGlvbihldmVudCkgeyBjLl90cmlnZ2VyKFwib3V0XCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKTtcblx0XHRcdFx0dGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vRG8gd2hhdCB3YXMgb3JpZ2luYWxseSBpbiBwbHVnaW5zXG5cdFx0aWYodGhpcy5fc3RvcmVkQ3Vyc29yKSB7XG5cdFx0XHQkKFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIiwgdGhpcy5fc3RvcmVkQ3Vyc29yKTtcblx0XHR9XG5cdFx0aWYodGhpcy5fc3RvcmVkT3BhY2l0eSkge1xuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiLCB0aGlzLl9zdG9yZWRPcGFjaXR5KTtcblx0XHR9XG5cdFx0aWYodGhpcy5fc3RvcmVkWkluZGV4KSB7XG5cdFx0XHR0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIiwgdGhpcy5fc3RvcmVkWkluZGV4ID09PSBcImF1dG9cIiA/IFwiXCIgOiB0aGlzLl9zdG9yZWRaSW5kZXgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblx0XHRpZih0aGlzLmNhbmNlbEhlbHBlclJlbW92YWwpIHtcblx0XHRcdGlmKCFub1Byb3BhZ2F0aW9uKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoXCJiZWZvcmVTdG9wXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7XG5cdFx0XHRcdGZvciAoaT0wOyBpIDwgZGVsYXllZFRyaWdnZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0ZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0XHR9IC8vVHJpZ2dlciBhbGwgZGVsYXllZCBldmVudHNcblx0XHRcdFx0dGhpcy5fdHJpZ2dlcihcInN0b3BcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5mcm9tT3V0c2lkZSA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCFub1Byb3BhZ2F0aW9uKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKFwiYmVmb3JlU3RvcFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpO1xuXHRcdH1cblxuXHRcdC8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSwgaXQgdW5iaW5kcyBBTEwgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUhXG5cdFx0dGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pO1xuXG5cdFx0aWYodGhpcy5oZWxwZXJbMF0gIT09IHRoaXMuY3VycmVudEl0ZW1bMF0pIHtcblx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XHR0aGlzLmhlbHBlciA9IG51bGw7XG5cblx0XHRpZighbm9Qcm9wYWdhdGlvbikge1xuXHRcdFx0Zm9yIChpPTA7IGkgPCBkZWxheWVkVHJpZ2dlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0ZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fSAvL1RyaWdnZXIgYWxsIGRlbGF5ZWQgZXZlbnRzXG5cdFx0XHR0aGlzLl90cmlnZ2VyKFwic3RvcFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpO1xuXHRcdH1cblxuXHRcdHRoaXMuZnJvbU91dHNpZGUgPSBmYWxzZTtcblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdF90cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoJC5XaWRnZXQucHJvdG90eXBlLl90cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPT09IGZhbHNlKSB7XG5cdFx0XHR0aGlzLmNhbmNlbCgpO1xuXHRcdH1cblx0fSxcblxuXHRfdWlIYXNoOiBmdW5jdGlvbihfaW5zdCkge1xuXHRcdHZhciBpbnN0ID0gX2luc3QgfHwgdGhpcztcblx0XHRyZXR1cm4ge1xuXHRcdFx0aGVscGVyOiBpbnN0LmhlbHBlcixcblx0XHRcdHBsYWNlaG9sZGVyOiBpbnN0LnBsYWNlaG9sZGVyIHx8ICQoW10pLFxuXHRcdFx0cG9zaXRpb246IGluc3QucG9zaXRpb24sXG5cdFx0XHRvcmlnaW5hbFBvc2l0aW9uOiBpbnN0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IGluc3QucG9zaXRpb25BYnMsXG5cdFx0XHRpdGVtOiBpbnN0LmN1cnJlbnRJdGVtLFxuXHRcdFx0c2VuZGVyOiBfaW5zdCA/IF9pbnN0LmVsZW1lbnQgOiBudWxsXG5cdFx0fTtcblx0fVxuXG59KTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG52YXIgdWlkID0gMCxcblx0aGlkZVByb3BzID0ge30sXG5cdHNob3dQcm9wcyA9IHt9O1xuXG5oaWRlUHJvcHMuaGVpZ2h0ID0gaGlkZVByb3BzLnBhZGRpbmdUb3AgPSBoaWRlUHJvcHMucGFkZGluZ0JvdHRvbSA9XG5cdGhpZGVQcm9wcy5ib3JkZXJUb3BXaWR0aCA9IGhpZGVQcm9wcy5ib3JkZXJCb3R0b21XaWR0aCA9IFwiaGlkZVwiO1xuc2hvd1Byb3BzLmhlaWdodCA9IHNob3dQcm9wcy5wYWRkaW5nVG9wID0gc2hvd1Byb3BzLnBhZGRpbmdCb3R0b20gPVxuXHRzaG93UHJvcHMuYm9yZGVyVG9wV2lkdGggPSBzaG93UHJvcHMuYm9yZGVyQm90dG9tV2lkdGggPSBcInNob3dcIjtcblxuJC53aWRnZXQoIFwidWkuYWNjb3JkaW9uXCIsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGFjdGl2ZTogMCxcblx0XHRhbmltYXRlOiB7fSxcblx0XHRjb2xsYXBzaWJsZTogZmFsc2UsXG5cdFx0ZXZlbnQ6IFwiY2xpY2tcIixcblx0XHRoZWFkZXI6IFwiPiBsaSA+IDpmaXJzdC1jaGlsZCw+IDpub3QobGkpOmV2ZW5cIixcblx0XHRoZWlnaHRTdHlsZTogXCJhdXRvXCIsXG5cdFx0aWNvbnM6IHtcblx0XHRcdGFjdGl2ZUhlYWRlcjogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiLFxuXHRcdFx0aGVhZGVyOiBcInVpLWljb24tdHJpYW5nbGUtMS1lXCJcblx0XHR9LFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0YWN0aXZhdGU6IG51bGwsXG5cdFx0YmVmb3JlQWN0aXZhdGU6IG51bGxcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblx0XHR0aGlzLnByZXZTaG93ID0gdGhpcy5wcmV2SGlkZSA9ICQoKTtcblx0XHR0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIFwidWktYWNjb3JkaW9uIHVpLXdpZGdldCB1aS1oZWxwZXItcmVzZXRcIiApXG5cdFx0XHQvLyBBUklBXG5cdFx0XHQuYXR0ciggXCJyb2xlXCIsIFwidGFibGlzdFwiICk7XG5cblx0XHQvLyBkb24ndCBhbGxvdyBjb2xsYXBzaWJsZTogZmFsc2UgYW5kIGFjdGl2ZTogZmFsc2UgLyBudWxsXG5cdFx0aWYgKCAhb3B0aW9ucy5jb2xsYXBzaWJsZSAmJiAob3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlIHx8IG9wdGlvbnMuYWN0aXZlID09IG51bGwpICkge1xuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSAwO1xuXHRcdH1cblxuXHRcdHRoaXMuX3Byb2Nlc3NQYW5lbHMoKTtcblx0XHQvLyBoYW5kbGUgbmVnYXRpdmUgdmFsdWVzXG5cdFx0aWYgKCBvcHRpb25zLmFjdGl2ZSA8IDAgKSB7XG5cdFx0XHRvcHRpb25zLmFjdGl2ZSArPSB0aGlzLmhlYWRlcnMubGVuZ3RoO1xuXHRcdH1cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X2dldENyZWF0ZUV2ZW50RGF0YTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlYWRlcjogdGhpcy5hY3RpdmUsXG5cdFx0XHRwYW5lbDogIXRoaXMuYWN0aXZlLmxlbmd0aCA/ICQoKSA6IHRoaXMuYWN0aXZlLm5leHQoKSxcblx0XHRcdGNvbnRlbnQ6ICF0aGlzLmFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLmFjdGl2ZS5uZXh0KClcblx0XHR9O1xuXHR9LFxuXG5cdF9jcmVhdGVJY29uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGljb25zID0gdGhpcy5vcHRpb25zLmljb25zO1xuXHRcdGlmICggaWNvbnMgKSB7XG5cdFx0XHQkKCBcIjxzcGFuPlwiIClcblx0XHRcdFx0LmFkZENsYXNzKCBcInVpLWFjY29yZGlvbi1oZWFkZXItaWNvbiB1aS1pY29uIFwiICsgaWNvbnMuaGVhZGVyIClcblx0XHRcdFx0LnByZXBlbmRUbyggdGhpcy5oZWFkZXJzICk7XG5cdFx0XHR0aGlzLmFjdGl2ZS5jaGlsZHJlbiggXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIgKVxuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoIGljb25zLmhlYWRlciApXG5cdFx0XHRcdC5hZGRDbGFzcyggaWNvbnMuYWN0aXZlSGVhZGVyICk7XG5cdFx0XHR0aGlzLmhlYWRlcnMuYWRkQ2xhc3MoIFwidWktYWNjb3JkaW9uLWljb25zXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X2Rlc3Ryb3lJY29uczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oZWFkZXJzXG5cdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktYWNjb3JkaW9uLWljb25zXCIgKVxuXHRcdFx0LmNoaWxkcmVuKCBcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiApXG5cdFx0XHRcdC5yZW1vdmUoKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvbnRlbnRzO1xuXG5cdFx0Ly8gY2xlYW4gdXAgbWFpbiBlbGVtZW50XG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktYWNjb3JkaW9uIHVpLXdpZGdldCB1aS1oZWxwZXItcmVzZXRcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKTtcblxuXHRcdC8vIGNsZWFuIHVwIGhlYWRlcnNcblx0XHR0aGlzLmhlYWRlcnNcblx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWRpc2FibGVkIHVpLWNvcm5lci10b3BcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1zZWxlY3RlZFwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtY29udHJvbHNcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJ0YWJJbmRleFwiIClcblx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIC9edWktYWNjb3JkaW9uLy50ZXN0KCB0aGlzLmlkICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR0aGlzLl9kZXN0cm95SWNvbnMoKTtcblxuXHRcdC8vIGNsZWFuIHVwIGNvbnRlbnQgcGFuZWxzXG5cdFx0Y29udGVudHMgPSB0aGlzLmhlYWRlcnMubmV4dCgpXG5cdFx0XHQuY3NzKCBcImRpc3BsYXlcIiwgXCJcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1leHBhbmRlZFwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtaGlkZGVuXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1sYWJlbGxlZGJ5XCIgKVxuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIHVpLWFjY29yZGlvbi1jb250ZW50IHVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZSB1aS1zdGF0ZS1kaXNhYmxlZFwiIClcblx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIC9edWktYWNjb3JkaW9uLy50ZXN0KCB0aGlzLmlkICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSAhPT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRjb250ZW50cy5jc3MoIFwiaGVpZ2h0XCIsIFwiXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiYWN0aXZlXCIgKSB7XG5cdFx0XHQvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9uc1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHZhbHVlICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiZXZlbnRcIiApIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9vZmYoIHRoaXMuaGVhZGVycywgdGhpcy5vcHRpb25zLmV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zZXR1cEV2ZW50cyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gc2V0dGluZyBjb2xsYXBzaWJsZTogZmFsc2Ugd2hpbGUgY29sbGFwc2VkOyBvcGVuIGZpcnN0IHBhbmVsXG5cdFx0aWYgKCBrZXkgPT09IFwiY29sbGFwc2libGVcIiAmJiAhdmFsdWUgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggMCApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImljb25zXCIgKSB7XG5cdFx0XHR0aGlzLl9kZXN0cm95SWNvbnMoKTtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuX2NyZWF0ZUljb25zKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gIzUzMzIgLSBvcGFjaXR5IGRvZXNuJ3QgY2FzY2FkZSB0byBwb3NpdGlvbmVkIGVsZW1lbnRzIGluIElFXG5cdFx0Ly8gc28gd2UgbmVlZCB0byBhZGQgdGhlIGRpc2FibGVkIGNsYXNzIHRvIHRoZSBoZWFkZXJzIGFuZCBwYW5lbHNcblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0dGhpcy5oZWFkZXJzLmFkZCggdGhpcy5oZWFkZXJzLm5leHQoKSApXG5cdFx0XHRcdC50b2dnbGVDbGFzcyggXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9rZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0Lypqc2hpbnQgbWF4Y29tcGxleGl0eToxNSovXG5cdFx0aWYgKCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIga2V5Q29kZSA9ICQudWkua2V5Q29kZSxcblx0XHRcdGxlbmd0aCA9IHRoaXMuaGVhZGVycy5sZW5ndGgsXG5cdFx0XHRjdXJyZW50SW5kZXggPSB0aGlzLmhlYWRlcnMuaW5kZXgoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0dG9Gb2N1cyA9IGZhbHNlO1xuXG5cdFx0c3dpdGNoICggZXZlbnQua2V5Q29kZSApIHtcblx0XHRcdGNhc2Uga2V5Q29kZS5SSUdIVDpcblx0XHRcdGNhc2Uga2V5Q29kZS5ET1dOOlxuXHRcdFx0XHR0b0ZvY3VzID0gdGhpcy5oZWFkZXJzWyAoIGN1cnJlbnRJbmRleCArIDEgKSAlIGxlbmd0aCBdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2Uga2V5Q29kZS5MRUZUOlxuXHRcdFx0Y2FzZSBrZXlDb2RlLlVQOlxuXHRcdFx0XHR0b0ZvY3VzID0gdGhpcy5oZWFkZXJzWyAoIGN1cnJlbnRJbmRleCAtIDEgKyBsZW5ndGggKSAlIGxlbmd0aCBdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2Uga2V5Q29kZS5TUEFDRTpcblx0XHRcdGNhc2Uga2V5Q29kZS5FTlRFUjpcblx0XHRcdFx0dGhpcy5fZXZlbnRIYW5kbGVyKCBldmVudCApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2Uga2V5Q29kZS5IT01FOlxuXHRcdFx0XHR0b0ZvY3VzID0gdGhpcy5oZWFkZXJzWyAwIF07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBrZXlDb2RlLkVORDpcblx0XHRcdFx0dG9Gb2N1cyA9IHRoaXMuaGVhZGVyc1sgbGVuZ3RoIC0gMSBdO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZiAoIHRvRm9jdXMgKSB7XG5cdFx0XHQkKCBldmVudC50YXJnZXQgKS5hdHRyKCBcInRhYkluZGV4XCIsIC0xICk7XG5cdFx0XHQkKCB0b0ZvY3VzICkuYXR0ciggXCJ0YWJJbmRleFwiLCAwICk7XG5cdFx0XHR0b0ZvY3VzLmZvY3VzKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblxuXHRfcGFuZWxLZXlEb3duIDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlVQICYmIGV2ZW50LmN0cmxLZXkgKSB7XG5cdFx0XHQkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkucHJldigpLmZvY3VzKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdHRoaXMuX3Byb2Nlc3NQYW5lbHMoKTtcblxuXHRcdC8vIHdhcyBjb2xsYXBzZWQgb3Igbm8gcGFuZWxcblx0XHRpZiAoICggb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICYmIG9wdGlvbnMuY29sbGFwc2libGUgPT09IHRydWUgKSB8fCAhdGhpcy5oZWFkZXJzLmxlbmd0aCApIHtcblx0XHRcdG9wdGlvbnMuYWN0aXZlID0gZmFsc2U7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9ICQoKTtcblx0XHQvLyBhY3RpdmUgZmFsc2Ugb25seSB3aGVuIGNvbGxhcHNpYmxlIGlzIHRydWVcblx0XHR9IGlmICggb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIDAgKTtcblx0XHQvLyB3YXMgYWN0aXZlLCBidXQgYWN0aXZlIHBhbmVsIGlzIGdvbmVcblx0XHR9IGVsc2UgaWYgKCB0aGlzLmFjdGl2ZS5sZW5ndGggJiYgISQuY29udGFpbnMoIHRoaXMuZWxlbWVudFsgMCBdLCB0aGlzLmFjdGl2ZVsgMCBdICkgKSB7XG5cdFx0XHQvLyBhbGwgcmVtYWluaW5nIHBhbmVsIGFyZSBkaXNhYmxlZFxuXHRcdFx0aWYgKCB0aGlzLmhlYWRlcnMubGVuZ3RoID09PSB0aGlzLmhlYWRlcnMuZmluZChcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdG9wdGlvbnMuYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuYWN0aXZlID0gJCgpO1xuXHRcdFx0Ly8gYWN0aXZhdGUgcHJldmlvdXMgcGFuZWxcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2YXRlKCBNYXRoLm1heCggMCwgb3B0aW9ucy5hY3RpdmUgLSAxICkgKTtcblx0XHRcdH1cblx0XHQvLyB3YXMgYWN0aXZlLCBhY3RpdmUgcGFuZWwgc3RpbGwgZXhpc3RzXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG1ha2Ugc3VyZSBhY3RpdmUgaW5kZXggaXMgY29ycmVjdFxuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSB0aGlzLmhlYWRlcnMuaW5kZXgoIHRoaXMuYWN0aXZlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGVzdHJveUljb25zKCk7XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X3Byb2Nlc3NQYW5lbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuaGVhZGVycyA9IHRoaXMuZWxlbWVudC5maW5kKCB0aGlzLm9wdGlvbnMuaGVhZGVyIClcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGxcIiApO1xuXG5cdFx0dGhpcy5oZWFkZXJzLm5leHQoKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tXCIgKVxuXHRcdFx0LmZpbHRlcihcIjpub3QoLnVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZSlcIilcblx0XHRcdC5oaWRlKCk7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtYXhIZWlnaHQsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0aGVpZ2h0U3R5bGUgPSBvcHRpb25zLmhlaWdodFN0eWxlLFxuXHRcdFx0cGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpLFxuXHRcdFx0YWNjb3JkaW9uSWQgPSB0aGlzLmFjY29yZGlvbklkID0gXCJ1aS1hY2NvcmRpb24tXCIgK1xuXHRcdFx0XHQodGhpcy5lbGVtZW50LmF0dHIoIFwiaWRcIiApIHx8ICsrdWlkKTtcblxuXHRcdHRoaXMuYWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZSggb3B0aW9ucy5hY3RpdmUgKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1jb3JuZXItdG9wXCIgKVxuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLWNvcm5lci1hbGxcIiApO1xuXHRcdHRoaXMuYWN0aXZlLm5leHQoKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiIClcblx0XHRcdC5zaG93KCk7XG5cblx0XHR0aGlzLmhlYWRlcnNcblx0XHRcdC5hdHRyKCBcInJvbGVcIiwgXCJ0YWJcIiApXG5cdFx0XHQuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0dmFyIGhlYWRlciA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRoZWFkZXJJZCA9IGhlYWRlci5hdHRyKCBcImlkXCIgKSxcblx0XHRcdFx0XHRwYW5lbCA9IGhlYWRlci5uZXh0KCksXG5cdFx0XHRcdFx0cGFuZWxJZCA9IHBhbmVsLmF0dHIoIFwiaWRcIiApO1xuXHRcdFx0XHRpZiAoICFoZWFkZXJJZCApIHtcblx0XHRcdFx0XHRoZWFkZXJJZCA9IGFjY29yZGlvbklkICsgXCItaGVhZGVyLVwiICsgaTtcblx0XHRcdFx0XHRoZWFkZXIuYXR0ciggXCJpZFwiLCBoZWFkZXJJZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIXBhbmVsSWQgKSB7XG5cdFx0XHRcdFx0cGFuZWxJZCA9IGFjY29yZGlvbklkICsgXCItcGFuZWwtXCIgKyBpO1xuXHRcdFx0XHRcdHBhbmVsLmF0dHIoIFwiaWRcIiwgcGFuZWxJZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhlYWRlci5hdHRyKCBcImFyaWEtY29udHJvbHNcIiwgcGFuZWxJZCApO1xuXHRcdFx0XHRwYW5lbC5hdHRyKCBcImFyaWEtbGFiZWxsZWRieVwiLCBoZWFkZXJJZCApO1xuXHRcdFx0fSlcblx0XHRcdC5uZXh0KClcblx0XHRcdFx0LmF0dHIoIFwicm9sZVwiLCBcInRhYnBhbmVsXCIgKTtcblxuXHRcdHRoaXMuaGVhZGVyc1xuXHRcdFx0Lm5vdCggdGhpcy5hY3RpdmUgKVxuXHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRcImFyaWEtc2VsZWN0ZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0XHR0YWJJbmRleDogLTFcblx0XHRcdH0pXG5cdFx0XHQubmV4dCgpXG5cdFx0XHRcdC5hdHRyKHtcblx0XHRcdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcblx0XHRcdFx0fSlcblx0XHRcdFx0LmhpZGUoKTtcblxuXHRcdC8vIG1ha2Ugc3VyZSBhdCBsZWFzdCBvbmUgaGVhZGVyIGlzIGluIHRoZSB0YWIgb3JkZXJcblx0XHRpZiAoICF0aGlzLmFjdGl2ZS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmhlYWRlcnMuZXEoIDAgKS5hdHRyKCBcInRhYkluZGV4XCIsIDAgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hY3RpdmUuYXR0cih7XG5cdFx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIixcblx0XHRcdFx0dGFiSW5kZXg6IDBcblx0XHRcdH0pXG5cdFx0XHQubmV4dCgpXG5cdFx0XHRcdC5hdHRyKHtcblx0XHRcdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcImZhbHNlXCJcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY3JlYXRlSWNvbnMoKTtcblxuXHRcdHRoaXMuX3NldHVwRXZlbnRzKCBvcHRpb25zLmV2ZW50ICk7XG5cblx0XHRpZiAoIGhlaWdodFN0eWxlID09PSBcImZpbGxcIiApIHtcblx0XHRcdG1heEhlaWdodCA9IHBhcmVudC5oZWlnaHQoKTtcblx0XHRcdHRoaXMuZWxlbWVudC5zaWJsaW5ncyggXCI6dmlzaWJsZVwiICkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBlbGVtLmNzcyggXCJwb3NpdGlvblwiICk7XG5cblx0XHRcdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1heEhlaWdodCAtPSBlbGVtLm91dGVySGVpZ2h0KCB0cnVlICk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5oZWFkZXJzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1heEhlaWdodCAtPSAkKCB0aGlzICkub3V0ZXJIZWlnaHQoIHRydWUgKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmhlYWRlcnMubmV4dCgpXG5cdFx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5oZWlnaHQoIE1hdGgubWF4KCAwLCBtYXhIZWlnaHQgLVxuXHRcdFx0XHRcdFx0JCggdGhpcyApLmlubmVySGVpZ2h0KCkgKyAkKCB0aGlzICkuaGVpZ2h0KCkgKSApO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY3NzKCBcIm92ZXJmbG93XCIsIFwiYXV0b1wiICk7XG5cdFx0fSBlbHNlIGlmICggaGVpZ2h0U3R5bGUgPT09IFwiYXV0b1wiICkge1xuXHRcdFx0bWF4SGVpZ2h0ID0gMDtcblx0XHRcdHRoaXMuaGVhZGVycy5uZXh0KClcblx0XHRcdFx0LmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWF4SGVpZ2h0ID0gTWF0aC5tYXgoIG1heEhlaWdodCwgJCggdGhpcyApLmNzcyggXCJoZWlnaHRcIiwgXCJcIiApLmhlaWdodCgpICk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5oZWlnaHQoIG1heEhlaWdodCApO1xuXHRcdH1cblx0fSxcblxuXHRfYWN0aXZhdGU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgYWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZSggaW5kZXggKVsgMCBdO1xuXG5cdFx0Ly8gdHJ5aW5nIHRvIGFjdGl2YXRlIHRoZSBhbHJlYWR5IGFjdGl2ZSBwYW5lbFxuXHRcdGlmICggYWN0aXZlID09PSB0aGlzLmFjdGl2ZVsgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIHRyeWluZyB0byBjb2xsYXBzZSwgc2ltdWxhdGUgYSBjbGljayBvbiB0aGUgY3VycmVudGx5IGFjdGl2ZSBoZWFkZXJcblx0XHRhY3RpdmUgPSBhY3RpdmUgfHwgdGhpcy5hY3RpdmVbIDAgXTtcblxuXHRcdHRoaXMuX2V2ZW50SGFuZGxlcih7XG5cdFx0XHR0YXJnZXQ6IGFjdGl2ZSxcblx0XHRcdGN1cnJlbnRUYXJnZXQ6IGFjdGl2ZSxcblx0XHRcdHByZXZlbnREZWZhdWx0OiAkLm5vb3Bcblx0XHR9KTtcblx0fSxcblxuXHRfZmluZEFjdGl2ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwibnVtYmVyXCIgPyB0aGlzLmhlYWRlcnMuZXEoIHNlbGVjdG9yICkgOiAkKCk7XG5cdH0sXG5cblx0X3NldHVwRXZlbnRzOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGV2ZW50cyA9IHtcblx0XHRcdGtleWRvd246IFwiX2tleWRvd25cIlxuXHRcdH07XG5cdFx0aWYgKCBldmVudCApIHtcblx0XHRcdCQuZWFjaCggZXZlbnQuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaW5kZXgsIGV2ZW50TmFtZSApIHtcblx0XHRcdFx0ZXZlbnRzWyBldmVudE5hbWUgXSA9IFwiX2V2ZW50SGFuZGxlclwiO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fb2ZmKCB0aGlzLmhlYWRlcnMuYWRkKCB0aGlzLmhlYWRlcnMubmV4dCgpICkgKTtcblx0XHR0aGlzLl9vbiggdGhpcy5oZWFkZXJzLCBldmVudHMgKTtcblx0XHR0aGlzLl9vbiggdGhpcy5oZWFkZXJzLm5leHQoKSwgeyBrZXlkb3duOiBcIl9wYW5lbEtleURvd25cIiB9KTtcblx0XHR0aGlzLl9ob3ZlcmFibGUoIHRoaXMuaGVhZGVycyApO1xuXHRcdHRoaXMuX2ZvY3VzYWJsZSggdGhpcy5oZWFkZXJzICk7XG5cdH0sXG5cblx0X2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0YWN0aXZlID0gdGhpcy5hY3RpdmUsXG5cdFx0XHRjbGlja2VkID0gJCggZXZlbnQuY3VycmVudFRhcmdldCApLFxuXHRcdFx0Y2xpY2tlZElzQWN0aXZlID0gY2xpY2tlZFsgMCBdID09PSBhY3RpdmVbIDAgXSxcblx0XHRcdGNvbGxhcHNpbmcgPSBjbGlja2VkSXNBY3RpdmUgJiYgb3B0aW9ucy5jb2xsYXBzaWJsZSxcblx0XHRcdHRvU2hvdyA9IGNvbGxhcHNpbmcgPyAkKCkgOiBjbGlja2VkLm5leHQoKSxcblx0XHRcdHRvSGlkZSA9IGFjdGl2ZS5uZXh0KCksXG5cdFx0XHRldmVudERhdGEgPSB7XG5cdFx0XHRcdG9sZEhlYWRlcjogYWN0aXZlLFxuXHRcdFx0XHRvbGRQYW5lbDogdG9IaWRlLFxuXHRcdFx0XHRuZXdIZWFkZXI6IGNvbGxhcHNpbmcgPyAkKCkgOiBjbGlja2VkLFxuXHRcdFx0XHRuZXdQYW5lbDogdG9TaG93XG5cdFx0XHR9O1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmIChcblx0XHRcdFx0Ly8gY2xpY2sgb24gYWN0aXZlIGhlYWRlciwgYnV0IG5vdCBjb2xsYXBzaWJsZVxuXHRcdFx0XHQoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8XG5cdFx0XHRcdC8vIGFsbG93IGNhbmNlbGluZyBhY3RpdmF0aW9uXG5cdFx0XHRcdCggdGhpcy5fdHJpZ2dlciggXCJiZWZvcmVBY3RpdmF0ZVwiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5hY3RpdmUgPSBjb2xsYXBzaW5nID8gZmFsc2UgOiB0aGlzLmhlYWRlcnMuaW5kZXgoIGNsaWNrZWQgKTtcblxuXHRcdC8vIHdoZW4gdGhlIGNhbGwgdG8gLl90b2dnbGUoKSBjb21lcyBhZnRlciB0aGUgY2xhc3MgY2hhbmdlc1xuXHRcdC8vIGl0IGNhdXNlcyBhIHZlcnkgb2RkIGJ1ZyBpbiBJRSA4IChzZWUgIzY3MjApXG5cdFx0dGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiBjbGlja2VkO1xuXHRcdHRoaXMuX3RvZ2dsZSggZXZlbnREYXRhICk7XG5cblx0XHQvLyBzd2l0Y2ggY2xhc3Nlc1xuXHRcdC8vIGNvcm5lciBjbGFzc2VzIG9uIHRoZSBwcmV2aW91c2x5IGFjdGl2ZSBoZWFkZXIgc3RheSBhZnRlciB0aGUgYW5pbWF0aW9uXG5cdFx0YWN0aXZlLnJlbW92ZUNsYXNzKCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0aWYgKCBvcHRpb25zLmljb25zICkge1xuXHRcdFx0YWN0aXZlLmNoaWxkcmVuKCBcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiApXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggb3B0aW9ucy5pY29ucy5hY3RpdmVIZWFkZXIgKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIG9wdGlvbnMuaWNvbnMuaGVhZGVyICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhY2xpY2tlZElzQWN0aXZlICkge1xuXHRcdFx0Y2xpY2tlZFxuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktY29ybmVyLWFsbFwiIClcblx0XHRcdFx0LmFkZENsYXNzKCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1jb3JuZXItdG9wXCIgKTtcblx0XHRcdGlmICggb3B0aW9ucy5pY29ucyApIHtcblx0XHRcdFx0Y2xpY2tlZC5jaGlsZHJlbiggXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggb3B0aW9ucy5pY29ucy5oZWFkZXIgKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggb3B0aW9ucy5pY29ucy5hY3RpdmVIZWFkZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Y2xpY2tlZFxuXHRcdFx0XHQubmV4dCgpXG5cdFx0XHRcdC5hZGRDbGFzcyggXCJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmVcIiApO1xuXHRcdH1cblx0fSxcblxuXHRfdG9nZ2xlOiBmdW5jdGlvbiggZGF0YSApIHtcblx0XHR2YXIgdG9TaG93ID0gZGF0YS5uZXdQYW5lbCxcblx0XHRcdHRvSGlkZSA9IHRoaXMucHJldlNob3cubGVuZ3RoID8gdGhpcy5wcmV2U2hvdyA6IGRhdGEub2xkUGFuZWw7XG5cblx0XHQvLyBoYW5kbGUgYWN0aXZhdGluZyBhIHBhbmVsIGR1cmluZyB0aGUgYW5pbWF0aW9uIGZvciBhbm90aGVyIGFjdGl2YXRpb25cblx0XHR0aGlzLnByZXZTaG93LmFkZCggdGhpcy5wcmV2SGlkZSApLnN0b3AoIHRydWUsIHRydWUgKTtcblx0XHR0aGlzLnByZXZTaG93ID0gdG9TaG93O1xuXHRcdHRoaXMucHJldkhpZGUgPSB0b0hpZGU7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hbmltYXRlICkge1xuXHRcdFx0dGhpcy5fYW5pbWF0ZSggdG9TaG93LCB0b0hpZGUsIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dG9IaWRlLmhpZGUoKTtcblx0XHRcdHRvU2hvdy5zaG93KCk7XG5cdFx0XHR0aGlzLl90b2dnbGVDb21wbGV0ZSggZGF0YSApO1xuXHRcdH1cblxuXHRcdHRvSGlkZS5hdHRyKHtcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG5cdFx0fSk7XG5cdFx0dG9IaWRlLnByZXYoKS5hdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJmYWxzZVwiICk7XG5cdFx0Ly8gaWYgd2UncmUgc3dpdGNoaW5nIHBhbmVscywgcmVtb3ZlIHRoZSBvbGQgaGVhZGVyIGZyb20gdGhlIHRhYiBvcmRlclxuXHRcdC8vIGlmIHdlJ3JlIG9wZW5pbmcgZnJvbSBjb2xsYXBzZWQgc3RhdGUsIHJlbW92ZSB0aGUgcHJldmlvdXMgaGVhZGVyIGZyb20gdGhlIHRhYiBvcmRlclxuXHRcdC8vIGlmIHdlJ3JlIGNvbGxhcHNpbmcsIHRoZW4ga2VlcCB0aGUgY29sbGFwc2luZyBoZWFkZXIgaW4gdGhlIHRhYiBvcmRlclxuXHRcdGlmICggdG9TaG93Lmxlbmd0aCAmJiB0b0hpZGUubGVuZ3RoICkge1xuXHRcdFx0dG9IaWRlLnByZXYoKS5hdHRyKCBcInRhYkluZGV4XCIsIC0xICk7XG5cdFx0fSBlbHNlIGlmICggdG9TaG93Lmxlbmd0aCApIHtcblx0XHRcdHRoaXMuaGVhZGVycy5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAkKCB0aGlzICkuYXR0ciggXCJ0YWJJbmRleFwiICkgPT09IDA7XG5cdFx0XHR9KVxuXHRcdFx0LmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKTtcblx0XHR9XG5cblx0XHR0b1Nob3dcblx0XHRcdC5hdHRyKHtcblx0XHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwiZmFsc2VcIlxuXHRcdFx0fSlcblx0XHRcdC5wcmV2KClcblx0XHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIixcblx0XHRcdFx0XHR0YWJJbmRleDogMFxuXHRcdFx0XHR9KTtcblx0fSxcblxuXHRfYW5pbWF0ZTogZnVuY3Rpb24oIHRvU2hvdywgdG9IaWRlLCBkYXRhICkge1xuXHRcdHZhciB0b3RhbCwgZWFzaW5nLCBkdXJhdGlvbixcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0YWRqdXN0ID0gMCxcblx0XHRcdGRvd24gPSB0b1Nob3cubGVuZ3RoICYmXG5cdFx0XHRcdCggIXRvSGlkZS5sZW5ndGggfHwgKCB0b1Nob3cuaW5kZXgoKSA8IHRvSGlkZS5pbmRleCgpICkgKSxcblx0XHRcdGFuaW1hdGUgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZSB8fCB7fSxcblx0XHRcdG9wdGlvbnMgPSBkb3duICYmIGFuaW1hdGUuZG93biB8fCBhbmltYXRlLFxuXHRcdFx0Y29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhhdC5fdG9nZ2xlQ29tcGxldGUoIGRhdGEgKTtcblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0ZHVyYXRpb24gPSBvcHRpb25zO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZWFzaW5nID0gb3B0aW9ucztcblx0XHR9XG5cdFx0Ly8gZmFsbCBiYWNrIGZyb20gb3B0aW9ucyB0byBhbmltYXRpb24gaW4gY2FzZSBvZiBwYXJ0aWFsIGRvd24gc2V0dGluZ3Ncblx0XHRlYXNpbmcgPSBlYXNpbmcgfHwgb3B0aW9ucy5lYXNpbmcgfHwgYW5pbWF0ZS5lYXNpbmc7XG5cdFx0ZHVyYXRpb24gPSBkdXJhdGlvbiB8fCBvcHRpb25zLmR1cmF0aW9uIHx8IGFuaW1hdGUuZHVyYXRpb247XG5cblx0XHRpZiAoICF0b0hpZGUubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRvU2hvdy5hbmltYXRlKCBzaG93UHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcsIGNvbXBsZXRlICk7XG5cdFx0fVxuXHRcdGlmICggIXRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdG9IaWRlLmFuaW1hdGUoIGhpZGVQcm9wcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUgKTtcblx0XHR9XG5cblx0XHR0b3RhbCA9IHRvU2hvdy5zaG93KCkub3V0ZXJIZWlnaHQoKTtcblx0XHR0b0hpZGUuYW5pbWF0ZSggaGlkZVByb3BzLCB7XG5cdFx0XHRkdXJhdGlvbjogZHVyYXRpb24sXG5cdFx0XHRlYXNpbmc6IGVhc2luZyxcblx0XHRcdHN0ZXA6IGZ1bmN0aW9uKCBub3csIGZ4ICkge1xuXHRcdFx0XHRmeC5ub3cgPSBNYXRoLnJvdW5kKCBub3cgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0b1Nob3dcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hbmltYXRlKCBzaG93UHJvcHMsIHtcblx0XHRcdFx0ZHVyYXRpb246IGR1cmF0aW9uLFxuXHRcdFx0XHRlYXNpbmc6IGVhc2luZyxcblx0XHRcdFx0Y29tcGxldGU6IGNvbXBsZXRlLFxuXHRcdFx0XHRzdGVwOiBmdW5jdGlvbiggbm93LCBmeCApIHtcblx0XHRcdFx0XHRmeC5ub3cgPSBNYXRoLnJvdW5kKCBub3cgKTtcblx0XHRcdFx0XHRpZiAoIGZ4LnByb3AgIT09IFwiaGVpZ2h0XCIgKSB7XG5cdFx0XHRcdFx0XHRhZGp1c3QgKz0gZngubm93O1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHRoYXQub3B0aW9ucy5oZWlnaHRTdHlsZSAhPT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdFx0XHRmeC5ub3cgPSBNYXRoLnJvdW5kKCB0b3RhbCAtIHRvSGlkZS5vdXRlckhlaWdodCgpIC0gYWRqdXN0ICk7XG5cdFx0XHRcdFx0XHRhZGp1c3QgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cblx0X3RvZ2dsZUNvbXBsZXRlOiBmdW5jdGlvbiggZGF0YSApIHtcblx0XHR2YXIgdG9IaWRlID0gZGF0YS5vbGRQYW5lbDtcblxuXHRcdHRvSGlkZVxuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiIClcblx0XHRcdC5wcmV2KClcblx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLWNvcm5lci10b3BcIiApXG5cdFx0XHRcdC5hZGRDbGFzcyggXCJ1aS1jb3JuZXItYWxsXCIgKTtcblxuXHRcdC8vIFdvcmsgYXJvdW5kIGZvciByZW5kZXJpbmcgYnVnIGluIElFICgjNTQyMSlcblx0XHRpZiAoIHRvSGlkZS5sZW5ndGggKSB7XG5cdFx0XHR0b0hpZGUucGFyZW50KClbMF0uY2xhc3NOYW1lID0gdG9IaWRlLnBhcmVudCgpWzBdLmNsYXNzTmFtZTtcblx0XHR9XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcImFjdGl2YXRlXCIsIG51bGwsIGRhdGEgKTtcblx0fVxufSk7XG5cbn0pKCBqUXVlcnkgKTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4vLyB1c2VkIHRvIHByZXZlbnQgcmFjZSBjb25kaXRpb25zIHdpdGggcmVtb3RlIGRhdGEgc291cmNlc1xudmFyIHJlcXVlc3RJbmRleCA9IDA7XG5cbiQud2lkZ2V0KCBcInVpLmF1dG9jb21wbGV0ZVwiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjxpbnB1dD5cIixcblx0b3B0aW9uczoge1xuXHRcdGFwcGVuZFRvOiBudWxsLFxuXHRcdGF1dG9Gb2N1czogZmFsc2UsXG5cdFx0ZGVsYXk6IDMwMCxcblx0XHRtaW5MZW5ndGg6IDEsXG5cdFx0cG9zaXRpb246IHtcblx0XHRcdG15OiBcImxlZnQgdG9wXCIsXG5cdFx0XHRhdDogXCJsZWZ0IGJvdHRvbVwiLFxuXHRcdFx0Y29sbGlzaW9uOiBcIm5vbmVcIlxuXHRcdH0sXG5cdFx0c291cmNlOiBudWxsLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdGNsb3NlOiBudWxsLFxuXHRcdGZvY3VzOiBudWxsLFxuXHRcdG9wZW46IG51bGwsXG5cdFx0cmVzcG9uc2U6IG51bGwsXG5cdFx0c2VhcmNoOiBudWxsLFxuXHRcdHNlbGVjdDogbnVsbFxuXHR9LFxuXG5cdHBlbmRpbmc6IDAsXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gU29tZSBicm93c2VycyBvbmx5IHJlcGVhdCBrZXlkb3duIGV2ZW50cywgbm90IGtleXByZXNzIGV2ZW50cyxcblx0XHQvLyBzbyB3ZSB1c2UgdGhlIHN1cHByZXNzS2V5UHJlc3MgZmxhZyB0byBkZXRlcm1pbmUgaWYgd2UndmUgYWxyZWFkeVxuXHRcdC8vIGhhbmRsZWQgdGhlIGtleWRvd24gZXZlbnQuICM3MjY5XG5cdFx0Ly8gVW5mb3J0dW5hdGVseSB0aGUgY29kZSBmb3IgJiBpbiBrZXlwcmVzcyBpcyB0aGUgc2FtZSBhcyB0aGUgdXAgYXJyb3csXG5cdFx0Ly8gc28gd2UgdXNlIHRoZSBzdXBwcmVzc0tleVByZXNzUmVwZWF0IGZsYWcgdG8gYXZvaWQgaGFuZGxpbmcga2V5cHJlc3Ncblx0XHQvLyBldmVudHMgd2hlbiB3ZSBrbm93IHRoZSBrZXlkb3duIGV2ZW50IHdhcyB1c2VkIHRvIG1vZGlmeSB0aGVcblx0XHQvLyBzZWFyY2ggdGVybS4gIzc3OTlcblx0XHR2YXIgc3VwcHJlc3NLZXlQcmVzcywgc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCwgc3VwcHJlc3NJbnB1dCxcblx0XHRcdG5vZGVOYW1lID0gdGhpcy5lbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRpc1RleHRhcmVhID0gbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIixcblx0XHRcdGlzSW5wdXQgPSBub2RlTmFtZSA9PT0gXCJpbnB1dFwiO1xuXG5cdFx0dGhpcy5pc011bHRpTGluZSA9XG5cdFx0XHQvLyBUZXh0YXJlYXMgYXJlIGFsd2F5cyBtdWx0aS1saW5lXG5cdFx0XHRpc1RleHRhcmVhID8gdHJ1ZSA6XG5cdFx0XHQvLyBJbnB1dHMgYXJlIGFsd2F5cyBzaW5nbGUtbGluZSwgZXZlbiBpZiBpbnNpZGUgYSBjb250ZW50RWRpdGFibGUgZWxlbWVudFxuXHRcdFx0Ly8gSUUgYWxzbyB0cmVhdHMgaW5wdXRzIGFzIGNvbnRlbnRFZGl0YWJsZVxuXHRcdFx0aXNJbnB1dCA/IGZhbHNlIDpcblx0XHRcdC8vIEFsbCBvdGhlciBlbGVtZW50IHR5cGVzIGFyZSBkZXRlcm1pbmVkIGJ5IHdoZXRoZXIgb3Igbm90IHRoZXkncmUgY29udGVudEVkaXRhYmxlXG5cdFx0XHR0aGlzLmVsZW1lbnQucHJvcCggXCJpc0NvbnRlbnRFZGl0YWJsZVwiICk7XG5cblx0XHR0aGlzLnZhbHVlTWV0aG9kID0gdGhpcy5lbGVtZW50WyBpc1RleHRhcmVhIHx8IGlzSW5wdXQgPyBcInZhbFwiIDogXCJ0ZXh0XCIgXTtcblx0XHR0aGlzLmlzTmV3TWVudSA9IHRydWU7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtaW5wdXRcIiApXG5cdFx0XHQuYXR0ciggXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIiApO1xuXG5cdFx0dGhpcy5fb24oIHRoaXMuZWxlbWVudCwge1xuXHRcdFx0a2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjE1Ki9cblx0XHRcdFx0aWYgKCB0aGlzLmVsZW1lbnQucHJvcCggXCJyZWFkT25seVwiICkgKSB7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0c3VwcHJlc3NJbnB1dCA9IHRydWU7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzc1JlcGVhdCA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRzdXBwcmVzc0lucHV0ID0gZmFsc2U7XG5cdFx0XHRcdHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgPSBmYWxzZTtcblx0XHRcdFx0dmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGU7XG5cdFx0XHRcdHN3aXRjaCggZXZlbnQua2V5Q29kZSApIHtcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fbW92ZSggXCJwcmV2aW91c1BhZ2VcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlBBR0VfRE9XTjpcblx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9tb3ZlKCBcIm5leHRQYWdlXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5VUDpcblx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9rZXlFdmVudCggXCJwcmV2aW91c1wiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuRE9XTjpcblx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9rZXlFdmVudCggXCJuZXh0XCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5FTlRFUjpcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLk5VTVBBRF9FTlRFUjpcblx0XHRcdFx0XHQvLyB3aGVuIG1lbnUgaXMgb3BlbiBhbmQgaGFzIGZvY3VzXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1lbnUuYWN0aXZlICkge1xuXHRcdFx0XHRcdFx0Ly8gIzYwNTUgLSBPcGVyYSBzdGlsbCBhbGxvd3MgdGhlIGtleXByZXNzIHRvIG9jY3VyXG5cdFx0XHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgZm9ybXMgdG8gc3VibWl0XG5cdFx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlRBQjpcblx0XHRcdFx0XHRpZiAoIHRoaXMubWVudS5hY3RpdmUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLkVTQ0FQRTpcblx0XHRcdFx0XHRpZiAoIHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlKCB0aGlzLnRlcm0gKTtcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdFx0XHQvLyBEaWZmZXJlbnQgYnJvd3NlcnMgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdCBiZWhhdmlvciBmb3IgZXNjYXBlXG5cdFx0XHRcdFx0XHQvLyBTaW5nbGUgcHJlc3MgY2FuIG1lYW4gdW5kbyBvciBjbGVhclxuXHRcdFx0XHRcdFx0Ly8gRG91YmxlIHByZXNzIGluIElFIG1lYW5zIGNsZWFyIHRoZSB3aG9sZSBmb3JtXG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzUmVwZWF0ID0gdHJ1ZTtcblx0XHRcdFx0XHQvLyBzZWFyY2ggdGltZW91dCBzaG91bGQgYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgaW5wdXQgdmFsdWUgaXMgY2hhbmdlZFxuXHRcdFx0XHRcdHRoaXMuX3NlYXJjaFRpbWVvdXQoIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRrZXlwcmVzczogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHN1cHByZXNzS2V5UHJlc3MgKSB7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyByZXBsaWNhdGUgc29tZSBrZXkgaGFuZGxlcnMgdG8gYWxsb3cgdGhlbSB0byByZXBlYXQgaW4gRmlyZWZveCBhbmQgT3BlcmFcblx0XHRcdFx0dmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGU7XG5cdFx0XHRcdHN3aXRjaCggZXZlbnQua2V5Q29kZSApIHtcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHRcdFx0dGhpcy5fbW92ZSggXCJwcmV2aW91c1BhZ2VcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlBBR0VfRE9XTjpcblx0XHRcdFx0XHR0aGlzLl9tb3ZlKCBcIm5leHRQYWdlXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5VUDpcblx0XHRcdFx0XHR0aGlzLl9rZXlFdmVudCggXCJwcmV2aW91c1wiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuRE9XTjpcblx0XHRcdFx0XHR0aGlzLl9rZXlFdmVudCggXCJuZXh0XCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRpbnB1dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHN1cHByZXNzSW5wdXQgKSB7XG5cdFx0XHRcdFx0c3VwcHJlc3NJbnB1dCA9IGZhbHNlO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3NlYXJjaFRpbWVvdXQoIGV2ZW50ICk7XG5cdFx0XHR9LFxuXHRcdFx0Zm9jdXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG5cdFx0XHRcdHRoaXMucHJldmlvdXMgPSB0aGlzLl92YWx1ZSgpO1xuXHRcdFx0fSxcblx0XHRcdGJsdXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNhbmNlbEJsdXIgKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMuc2VhcmNoaW5nICk7XG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdHRoaXMuX2NoYW5nZSggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2luaXRTb3VyY2UoKTtcblx0XHR0aGlzLm1lbnUgPSAkKCBcIjx1bD5cIiApXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktYXV0b2NvbXBsZXRlIHVpLWZyb250XCIgKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpIClcblx0XHRcdC5tZW51KHtcblx0XHRcdFx0Ly8gY3VzdG9tIGtleSBoYW5kbGluZyBmb3Igbm93XG5cdFx0XHRcdGlucHV0OiAkKCksXG5cdFx0XHRcdC8vIGRpc2FibGUgQVJJQSBzdXBwb3J0LCB0aGUgbGl2ZSByZWdpb24gdGFrZXMgY2FyZSBvZiB0aGF0XG5cdFx0XHRcdHJvbGU6IG51bGxcblx0XHRcdH0pXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuZGF0YSggXCJ1aS1tZW51XCIgKTtcblxuXHRcdHRoaXMuX29uKCB0aGlzLm1lbnUuZWxlbWVudCwge1xuXHRcdFx0bW91c2Vkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIHByZXZlbnQgbW92aW5nIGZvY3VzIG91dCBvZiB0aGUgdGV4dCBmaWVsZFxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdC8vIElFIGRvZXNuJ3QgcHJldmVudCBtb3ZpbmcgZm9jdXMgZXZlbiB3aXRoIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0Ly8gc28gd2Ugc2V0IGEgZmxhZyB0byBrbm93IHdoZW4gd2Ugc2hvdWxkIGlnbm9yZSB0aGUgYmx1ciBldmVudFxuXHRcdFx0XHR0aGlzLmNhbmNlbEJsdXIgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5jYW5jZWxCbHVyO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBjbGlja2luZyBvbiB0aGUgc2Nyb2xsYmFyIGNhdXNlcyBmb2N1cyB0byBzaGlmdCB0byB0aGUgYm9keVxuXHRcdFx0XHQvLyBidXQgd2UgY2FuJ3QgZGV0ZWN0IGEgbW91c2V1cCBvciBhIGNsaWNrIGltbWVkaWF0ZWx5IGFmdGVyd2FyZFxuXHRcdFx0XHQvLyBzbyB3ZSBoYXZlIHRvIHRyYWNrIHRoZSBuZXh0IG1vdXNlZG93biBhbmQgY2xvc2UgdGhlIG1lbnUgaWZcblx0XHRcdFx0Ly8gdGhlIHVzZXIgY2xpY2tzIHNvbWV3aGVyZSBvdXRzaWRlIG9mIHRoZSBhdXRvY29tcGxldGVcblx0XHRcdFx0dmFyIG1lbnVFbGVtZW50ID0gdGhpcy5tZW51LmVsZW1lbnRbIDAgXTtcblx0XHRcdFx0aWYgKCAhJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHRcdFx0XHR0aGlzLmRvY3VtZW50Lm9uZSggXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGV2ZW50LnRhcmdldCAhPT0gdGhhdC5lbGVtZW50WyAwIF0gJiZcblx0XHRcdFx0XHRcdFx0XHRcdGV2ZW50LnRhcmdldCAhPT0gbWVudUVsZW1lbnQgJiZcblx0XHRcdFx0XHRcdFx0XHRcdCEkLmNvbnRhaW5zKCBtZW51RWxlbWVudCwgZXZlbnQudGFyZ2V0ICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG1lbnVmb2N1czogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0Ly8gIzcwMjQgLSBQcmV2ZW50IGFjY2lkZW50YWwgYWN0aXZhdGlvbiBvZiBtZW51IGl0ZW1zIGluIEZpcmVmb3hcblx0XHRcdFx0aWYgKCB0aGlzLmlzTmV3TWVudSApIHtcblx0XHRcdFx0XHR0aGlzLmlzTmV3TWVudSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudCAmJiAvXm1vdXNlLy50ZXN0KCBldmVudC5vcmlnaW5hbEV2ZW50LnR5cGUgKSApIHtcblx0XHRcdFx0XHRcdHRoaXMubWVudS5ibHVyKCk7XG5cblx0XHRcdFx0XHRcdHRoaXMuZG9jdW1lbnQub25lKCBcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0JCggZXZlbnQudGFyZ2V0ICkudHJpZ2dlciggZXZlbnQub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaXRlbSA9IHVpLml0ZW0uZGF0YSggXCJ1aS1hdXRvY29tcGxldGUtaXRlbVwiICk7XG5cdFx0XHRcdGlmICggZmFsc2UgIT09IHRoaXMuX3RyaWdnZXIoIFwiZm9jdXNcIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICkgKSB7XG5cdFx0XHRcdFx0Ly8gdXNlIHZhbHVlIHRvIG1hdGNoIHdoYXQgd2lsbCBlbmQgdXAgaW4gdGhlIGlucHV0LCBpZiBpdCB3YXMgYSBrZXkgZXZlbnRcblx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgL15rZXkvLnRlc3QoIGV2ZW50Lm9yaWdpbmFsRXZlbnQudHlwZSApICkge1xuXHRcdFx0XHRcdFx0dGhpcy5fdmFsdWUoIGl0ZW0udmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gTm9ybWFsbHkgdGhlIGlucHV0IGlzIHBvcHVsYXRlZCB3aXRoIHRoZSBpdGVtJ3MgdmFsdWUgYXMgdGhlXG5cdFx0XHRcdFx0Ly8gbWVudSBpcyBuYXZpZ2F0ZWQsIGNhdXNpbmcgc2NyZWVuIHJlYWRlcnMgdG8gbm90aWNlIGEgY2hhbmdlIGFuZFxuXHRcdFx0XHRcdC8vIGFubm91bmNlIHRoZSBpdGVtLiBTaW5jZSB0aGUgZm9jdXMgZXZlbnQgd2FzIGNhbmNlbGVkLCB0aGlzIGRvZXNuJ3Rcblx0XHRcdFx0XHQvLyBoYXBwZW4sIHNvIHdlIHVwZGF0ZSB0aGUgbGl2ZSByZWdpb24gc28gdGhhdCBzY3JlZW4gcmVhZGVycyBjYW5cblx0XHRcdFx0XHQvLyBzdGlsbCBub3RpY2UgdGhlIGNoYW5nZSBhbmQgYW5ub3VuY2UgaXQuXG5cdFx0XHRcdFx0dGhpcy5saXZlUmVnaW9uLnRleHQoIGl0ZW0udmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG1lbnVzZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gdWkuaXRlbS5kYXRhKCBcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIgKSxcblx0XHRcdFx0XHRwcmV2aW91cyA9IHRoaXMucHJldmlvdXM7XG5cblx0XHRcdFx0Ly8gb25seSB0cmlnZ2VyIHdoZW4gZm9jdXMgd2FzIGxvc3QgKGNsaWNrIG9uIG1lbnUpXG5cdFx0XHRcdGlmICggdGhpcy5lbGVtZW50WzBdICE9PSB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LmZvY3VzKCk7XG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuXHRcdFx0XHRcdC8vICM2MTA5IC0gSUUgdHJpZ2dlcnMgdHdvIGZvY3VzIGV2ZW50cyBhbmQgdGhlIHNlY29uZFxuXHRcdFx0XHRcdC8vIGlzIGFzeW5jaHJvbm91cywgc28gd2UgbmVlZCB0byByZXNldCB0aGUgcHJldmlvdXNcblx0XHRcdFx0XHQvLyB0ZXJtIHN5bmNocm9ub3VzbHkgYW5kIGFzeW5jaHJvbm91c2x5IDotKFxuXHRcdFx0XHRcdHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuXHRcdFx0XHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBmYWxzZSAhPT0gdGhpcy5fdHJpZ2dlciggXCJzZWxlY3RcIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fdmFsdWUoIGl0ZW0udmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyByZXNldCB0aGUgdGVybSBhZnRlciB0aGUgc2VsZWN0IGV2ZW50XG5cdFx0XHRcdC8vIHRoaXMgYWxsb3dzIGN1c3RvbSBzZWxlY3QgaGFuZGxpbmcgdG8gd29yayBwcm9wZXJseVxuXHRcdFx0XHR0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpO1xuXG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMubGl2ZVJlZ2lvbiA9ICQoIFwiPHNwYW4+XCIsIHtcblx0XHRcdFx0cm9sZTogXCJzdGF0dXNcIixcblx0XHRcdFx0XCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIlxuXHRcdFx0fSlcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGVcIiApXG5cdFx0XHQuaW5zZXJ0QWZ0ZXIoIHRoaXMuZWxlbWVudCApO1xuXG5cdFx0Ly8gdHVybmluZyBvZmYgYXV0b2NvbXBsZXRlIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gcmVtZW1iZXJpbmcgdGhlXG5cdFx0Ly8gdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRocm91Z2ggaGlzdG9yeSwgc28gd2UgcmUtZW5hYmxlIGF1dG9jb21wbGV0ZVxuXHRcdC8vIGlmIHRoZSBwYWdlIGlzIHVubG9hZGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRlc3Ryb3llZC4gIzc3OTBcblx0XHR0aGlzLl9vbiggdGhpcy53aW5kb3csIHtcblx0XHRcdGJlZm9yZXVubG9hZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZVwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy5zZWFyY2hpbmcgKTtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtaW5wdXRcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhdXRvY29tcGxldGVcIiApO1xuXHRcdHRoaXMubWVudS5lbGVtZW50LnJlbW92ZSgpO1xuXHRcdHRoaXMubGl2ZVJlZ2lvbi5yZW1vdmUoKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXHRcdGlmICgga2V5ID09PSBcInNvdXJjZVwiICkge1xuXHRcdFx0dGhpcy5faW5pdFNvdXJjZSgpO1xuXHRcdH1cblx0XHRpZiAoIGtleSA9PT0gXCJhcHBlbmRUb1wiICkge1xuXHRcdFx0dGhpcy5tZW51LmVsZW1lbnQuYXBwZW5kVG8oIHRoaXMuX2FwcGVuZFRvKCkgKTtcblx0XHR9XG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiAmJiB2YWx1ZSAmJiB0aGlzLnhociApIHtcblx0XHRcdHRoaXMueGhyLmFib3J0KCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hcHBlbmRUbzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuYXBwZW5kVG87XG5cblx0XHRpZiAoIGVsZW1lbnQgKSB7XG5cdFx0XHRlbGVtZW50ID0gZWxlbWVudC5qcXVlcnkgfHwgZWxlbWVudC5ub2RlVHlwZSA/XG5cdFx0XHRcdCQoIGVsZW1lbnQgKSA6XG5cdFx0XHRcdHRoaXMuZG9jdW1lbnQuZmluZCggZWxlbWVudCApLmVxKCAwICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuY2xvc2VzdCggXCIudWktZnJvbnRcIiApO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQubGVuZ3RoICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMuZG9jdW1lbnRbMF0uYm9keTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbWVudDtcblx0fSxcblxuXHRfaW5pdFNvdXJjZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFycmF5LCB1cmwsXG5cdFx0XHR0aGF0ID0gdGhpcztcblx0XHRpZiAoICQuaXNBcnJheSh0aGlzLm9wdGlvbnMuc291cmNlKSApIHtcblx0XHRcdGFycmF5ID0gdGhpcy5vcHRpb25zLnNvdXJjZTtcblx0XHRcdHRoaXMuc291cmNlID0gZnVuY3Rpb24oIHJlcXVlc3QsIHJlc3BvbnNlICkge1xuXHRcdFx0XHRyZXNwb25zZSggJC51aS5hdXRvY29tcGxldGUuZmlsdGVyKCBhcnJheSwgcmVxdWVzdC50ZXJtICkgKTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5zb3VyY2UgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR1cmwgPSB0aGlzLm9wdGlvbnMuc291cmNlO1xuXHRcdFx0dGhpcy5zb3VyY2UgPSBmdW5jdGlvbiggcmVxdWVzdCwgcmVzcG9uc2UgKSB7XG5cdFx0XHRcdGlmICggdGhhdC54aHIgKSB7XG5cdFx0XHRcdFx0dGhhdC54aHIuYWJvcnQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGF0LnhociA9ICQuYWpheCh7XG5cdFx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdFx0ZGF0YTogcmVxdWVzdCxcblx0XHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSggZGF0YSApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UoIFtdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc291cmNlID0gdGhpcy5vcHRpb25zLnNvdXJjZTtcblx0XHR9XG5cdH0sXG5cblx0X3NlYXJjaFRpbWVvdXQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMuc2VhcmNoaW5nICk7XG5cdFx0dGhpcy5zZWFyY2hpbmcgPSB0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdC8vIG9ubHkgc2VhcmNoIGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuXHRcdFx0aWYgKCB0aGlzLnRlcm0gIT09IHRoaXMuX3ZhbHVlKCkgKSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcblx0XHRcdFx0dGhpcy5zZWFyY2goIG51bGwsIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSwgdGhpcy5vcHRpb25zLmRlbGF5ICk7XG5cdH0sXG5cblx0c2VhcmNoOiBmdW5jdGlvbiggdmFsdWUsIGV2ZW50ICkge1xuXHRcdHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy5fdmFsdWUoKTtcblxuXHRcdC8vIGFsd2F5cyBzYXZlIHRoZSBhY3R1YWwgdmFsdWUsIG5vdCB0aGUgb25lIHBhc3NlZCBhcyBhbiBhcmd1bWVudFxuXHRcdHRoaXMudGVybSA9IHRoaXMuX3ZhbHVlKCk7XG5cblx0XHRpZiAoIHZhbHVlLmxlbmd0aCA8IHRoaXMub3B0aW9ucy5taW5MZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jbG9zZSggZXZlbnQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX3RyaWdnZXIoIFwic2VhcmNoXCIsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9zZWFyY2goIHZhbHVlICk7XG5cdH0sXG5cblx0X3NlYXJjaDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHRoaXMucGVuZGluZysrO1xuXHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtbG9hZGluZ1wiICk7XG5cdFx0dGhpcy5jYW5jZWxTZWFyY2ggPSBmYWxzZTtcblxuXHRcdHRoaXMuc291cmNlKCB7IHRlcm06IHZhbHVlIH0sIHRoaXMuX3Jlc3BvbnNlKCkgKTtcblx0fSxcblxuXHRfcmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdGluZGV4ID0gKytyZXF1ZXN0SW5kZXg7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oIGNvbnRlbnQgKSB7XG5cdFx0XHRpZiAoIGluZGV4ID09PSByZXF1ZXN0SW5kZXggKSB7XG5cdFx0XHRcdHRoYXQuX19yZXNwb25zZSggY29udGVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGF0LnBlbmRpbmctLTtcblx0XHRcdGlmICggIXRoYXQucGVuZGluZyApIHtcblx0XHRcdFx0dGhhdC5lbGVtZW50LnJlbW92ZUNsYXNzKCBcInVpLWF1dG9jb21wbGV0ZS1sb2FkaW5nXCIgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9LFxuXG5cdF9fcmVzcG9uc2U6IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuXHRcdGlmICggY29udGVudCApIHtcblx0XHRcdGNvbnRlbnQgPSB0aGlzLl9ub3JtYWxpemUoIGNvbnRlbnQgKTtcblx0XHR9XG5cdFx0dGhpcy5fdHJpZ2dlciggXCJyZXNwb25zZVwiLCBudWxsLCB7IGNvbnRlbnQ6IGNvbnRlbnQgfSApO1xuXHRcdGlmICggIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBjb250ZW50ICYmIGNvbnRlbnQubGVuZ3RoICYmICF0aGlzLmNhbmNlbFNlYXJjaCApIHtcblx0XHRcdHRoaXMuX3N1Z2dlc3QoIGNvbnRlbnQgKTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwib3BlblwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHVzZSAuX2Nsb3NlKCkgaW5zdGVhZCBvZiAuY2xvc2UoKSBzbyB3ZSBkb24ndCBjYW5jZWwgZnV0dXJlIHNlYXJjaGVzXG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHRjbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuY2FuY2VsU2VhcmNoID0gdHJ1ZTtcblx0XHR0aGlzLl9jbG9zZSggZXZlbnQgKTtcblx0fSxcblxuXHRfY2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdHRoaXMubWVudS5lbGVtZW50LmhpZGUoKTtcblx0XHRcdHRoaXMubWVudS5ibHVyKCk7XG5cdFx0XHR0aGlzLmlzTmV3TWVudSA9IHRydWU7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNsb3NlXCIsIGV2ZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9jaGFuZ2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIHRoaXMucHJldmlvdXMgIT09IHRoaXMuX3ZhbHVlKCkgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiLCBldmVudCwgeyBpdGVtOiB0aGlzLnNlbGVjdGVkSXRlbSB9ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9ub3JtYWxpemU6IGZ1bmN0aW9uKCBpdGVtcyApIHtcblx0XHQvLyBhc3N1bWUgYWxsIGl0ZW1zIGhhdmUgdGhlIHJpZ2h0IGZvcm1hdCB3aGVuIHRoZSBmaXJzdCBpdGVtIGlzIGNvbXBsZXRlXG5cdFx0aWYgKCBpdGVtcy5sZW5ndGggJiYgaXRlbXNbMF0ubGFiZWwgJiYgaXRlbXNbMF0udmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fVxuXHRcdHJldHVybiAkLm1hcCggaXRlbXMsIGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRsYWJlbDogaXRlbSxcblx0XHRcdFx0XHR2YWx1ZTogaXRlbVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKHtcblx0XHRcdFx0bGFiZWw6IGl0ZW0ubGFiZWwgfHwgaXRlbS52YWx1ZSxcblx0XHRcdFx0dmFsdWU6IGl0ZW0udmFsdWUgfHwgaXRlbS5sYWJlbFxuXHRcdFx0fSwgaXRlbSApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdF9zdWdnZXN0OiBmdW5jdGlvbiggaXRlbXMgKSB7XG5cdFx0dmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQuZW1wdHkoKTtcblx0XHR0aGlzLl9yZW5kZXJNZW51KCB1bCwgaXRlbXMgKTtcblx0XHR0aGlzLm1lbnUucmVmcmVzaCgpO1xuXG5cdFx0Ly8gc2l6ZSBhbmQgcG9zaXRpb24gbWVudVxuXHRcdHVsLnNob3coKTtcblx0XHR0aGlzLl9yZXNpemVNZW51KCk7XG5cdFx0dWwucG9zaXRpb24oICQuZXh0ZW5kKHtcblx0XHRcdG9mOiB0aGlzLmVsZW1lbnRcblx0XHR9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKSk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgKSB7XG5cdFx0XHR0aGlzLm1lbnUubmV4dCgpO1xuXHRcdH1cblx0fSxcblxuXHRfcmVzaXplTWVudTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQ7XG5cdFx0dWwub3V0ZXJXaWR0aCggTWF0aC5tYXgoXG5cdFx0XHQvLyBGaXJlZm94IHdyYXBzIGxvbmcgdGV4dCAocG9zc2libHkgYSByb3VuZGluZyBidWcpXG5cdFx0XHQvLyBzbyB3ZSBhZGQgMXB4IHRvIGF2b2lkIHRoZSB3cmFwcGluZyAoIzc1MTMpXG5cdFx0XHR1bC53aWR0aCggXCJcIiApLm91dGVyV2lkdGgoKSArIDEsXG5cdFx0XHR0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpXG5cdFx0KSApO1xuXHR9LFxuXG5cdF9yZW5kZXJNZW51OiBmdW5jdGlvbiggdWwsIGl0ZW1zICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHQkLmVhY2goIGl0ZW1zLCBmdW5jdGlvbiggaW5kZXgsIGl0ZW0gKSB7XG5cdFx0XHR0aGF0Ll9yZW5kZXJJdGVtRGF0YSggdWwsIGl0ZW0gKTtcblx0XHR9KTtcblx0fSxcblxuXHRfcmVuZGVySXRlbURhdGE6IGZ1bmN0aW9uKCB1bCwgaXRlbSApIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVuZGVySXRlbSggdWwsIGl0ZW0gKS5kYXRhKCBcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIsIGl0ZW0gKTtcblx0fSxcblxuXHRfcmVuZGVySXRlbTogZnVuY3Rpb24oIHVsLCBpdGVtICkge1xuXHRcdHJldHVybiAkKCBcIjxsaT5cIiApXG5cdFx0XHQuYXBwZW5kKCAkKCBcIjxhPlwiICkudGV4dCggaXRlbS5sYWJlbCApIClcblx0XHRcdC5hcHBlbmRUbyggdWwgKTtcblx0fSxcblxuXHRfbW92ZTogZnVuY3Rpb24oIGRpcmVjdGlvbiwgZXZlbnQgKSB7XG5cdFx0aWYgKCAhdGhpcy5tZW51LmVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdFx0dGhpcy5zZWFyY2goIG51bGwsIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5tZW51LmlzRmlyc3RJdGVtKCkgJiYgL15wcmV2aW91cy8udGVzdCggZGlyZWN0aW9uICkgfHxcblx0XHRcdFx0dGhpcy5tZW51LmlzTGFzdEl0ZW0oKSAmJiAvXm5leHQvLnRlc3QoIGRpcmVjdGlvbiApICkge1xuXHRcdFx0dGhpcy5fdmFsdWUoIHRoaXMudGVybSApO1xuXHRcdFx0dGhpcy5tZW51LmJsdXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5tZW51WyBkaXJlY3Rpb24gXSggZXZlbnQgKTtcblx0fSxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1lbnUuZWxlbWVudDtcblx0fSxcblxuXHRfdmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlTWV0aG9kLmFwcGx5KCB0aGlzLmVsZW1lbnQsIGFyZ3VtZW50cyApO1xuXHR9LFxuXG5cdF9rZXlFdmVudDogZnVuY3Rpb24oIGtleUV2ZW50LCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLmlzTXVsdGlMaW5lIHx8IHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdHRoaXMuX21vdmUoIGtleUV2ZW50LCBldmVudCApO1xuXG5cdFx0XHQvLyBwcmV2ZW50cyBtb3ZpbmcgY3Vyc29yIHRvIGJlZ2lubmluZy9lbmQgb2YgdGhlIHRleHQgZmllbGQgaW4gc29tZSBicm93c2Vyc1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cbn0pO1xuXG4kLmV4dGVuZCggJC51aS5hdXRvY29tcGxldGUsIHtcblx0ZXNjYXBlUmVnZXg6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKGFycmF5LCB0ZXJtKSB7XG5cdFx0dmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCAkLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleCh0ZXJtKSwgXCJpXCIgKTtcblx0XHRyZXR1cm4gJC5ncmVwKCBhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiBtYXRjaGVyLnRlc3QoIHZhbHVlLmxhYmVsIHx8IHZhbHVlLnZhbHVlIHx8IHZhbHVlICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbi8vIGxpdmUgcmVnaW9uIGV4dGVuc2lvbiwgYWRkaW5nIGEgYG1lc3NhZ2VzYCBvcHRpb25cbi8vIE5PVEU6IFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIEFQSS4gV2UgYXJlIHN0aWxsIGludmVzdGlnYXRpbmdcbi8vIGEgZnVsbCBzb2x1dGlvbiBmb3Igc3RyaW5nIG1hbmlwdWxhdGlvbiBhbmQgaW50ZXJuYXRpb25hbGl6YXRpb24uXG4kLndpZGdldCggXCJ1aS5hdXRvY29tcGxldGVcIiwgJC51aS5hdXRvY29tcGxldGUsIHtcblx0b3B0aW9uczoge1xuXHRcdG1lc3NhZ2VzOiB7XG5cdFx0XHRub1Jlc3VsdHM6IFwiTm8gc2VhcmNoIHJlc3VsdHMuXCIsXG5cdFx0XHRyZXN1bHRzOiBmdW5jdGlvbiggYW1vdW50ICkge1xuXHRcdFx0XHRyZXR1cm4gYW1vdW50ICsgKCBhbW91bnQgPiAxID8gXCIgcmVzdWx0cyBhcmVcIiA6IFwiIHJlc3VsdCBpc1wiICkgK1xuXHRcdFx0XHRcdFwiIGF2YWlsYWJsZSwgdXNlIHVwIGFuZCBkb3duIGFycm93IGtleXMgdG8gbmF2aWdhdGUuXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9fcmVzcG9uc2U6IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuXHRcdHZhciBtZXNzYWdlO1xuXHRcdHRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApO1xuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMuY2FuY2VsU2VhcmNoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIGNvbnRlbnQgJiYgY29udGVudC5sZW5ndGggKSB7XG5cdFx0XHRtZXNzYWdlID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLnJlc3VsdHMoIGNvbnRlbnQubGVuZ3RoICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMubm9SZXN1bHRzO1xuXHRcdH1cblx0XHR0aGlzLmxpdmVSZWdpb24udGV4dCggbWVzc2FnZSApO1xuXHR9XG59KTtcblxufSggalF1ZXJ5ICkpO1xuKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7XG5cbnZhciBsYXN0QWN0aXZlLCBzdGFydFhQb3MsIHN0YXJ0WVBvcywgY2xpY2tEcmFnZ2VkLFxuXHRiYXNlQ2xhc3NlcyA9IFwidWktYnV0dG9uIHVpLXdpZGdldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGxcIixcblx0c3RhdGVDbGFzc2VzID0gXCJ1aS1zdGF0ZS1ob3ZlciB1aS1zdGF0ZS1hY3RpdmUgXCIsXG5cdHR5cGVDbGFzc2VzID0gXCJ1aS1idXR0b24taWNvbnMtb25seSB1aS1idXR0b24taWNvbi1vbmx5IHVpLWJ1dHRvbi10ZXh0LWljb25zIHVpLWJ1dHRvbi10ZXh0LWljb24tcHJpbWFyeSB1aS1idXR0b24tdGV4dC1pY29uLXNlY29uZGFyeSB1aS1idXR0b24tdGV4dC1vbmx5XCIsXG5cdGZvcm1SZXNldEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgYnV0dG9ucyA9ICQoIHRoaXMgKS5maW5kKCBcIjp1aS1idXR0b25cIiApO1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRidXR0b25zLmJ1dHRvbiggXCJyZWZyZXNoXCIgKTtcblx0XHR9LCAxICk7XG5cdH0sXG5cdHJhZGlvR3JvdXAgPSBmdW5jdGlvbiggcmFkaW8gKSB7XG5cdFx0dmFyIG5hbWUgPSByYWRpby5uYW1lLFxuXHRcdFx0Zm9ybSA9IHJhZGlvLmZvcm0sXG5cdFx0XHRyYWRpb3MgPSAkKCBbXSApO1xuXHRcdGlmICggbmFtZSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnJlcGxhY2UoIC8nL2csIFwiXFxcXCdcIiApO1xuXHRcdFx0aWYgKCBmb3JtICkge1xuXHRcdFx0XHRyYWRpb3MgPSAkKCBmb3JtICkuZmluZCggXCJbbmFtZT0nXCIgKyBuYW1lICsgXCInXVwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyYWRpb3MgPSAkKCBcIltuYW1lPSdcIiArIG5hbWUgKyBcIiddXCIsIHJhZGlvLm93bmVyRG9jdW1lbnQgKVxuXHRcdFx0XHRcdC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gIXRoaXMuZm9ybTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJhZGlvcztcblx0fTtcblxuJC53aWRnZXQoIFwidWkuYnV0dG9uXCIsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGJ1dHRvbj5cIixcblx0b3B0aW9uczoge1xuXHRcdGRpc2FibGVkOiBudWxsLFxuXHRcdHRleHQ6IHRydWUsXG5cdFx0bGFiZWw6IG51bGwsXG5cdFx0aWNvbnM6IHtcblx0XHRcdHByaW1hcnk6IG51bGwsXG5cdFx0XHRzZWNvbmRhcnk6IG51bGxcblx0XHR9XG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5jbG9zZXN0KCBcImZvcm1cIiApXG5cdFx0XHQudW5iaW5kKCBcInJlc2V0XCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlIClcblx0XHRcdC5iaW5kKCBcInJlc2V0XCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmb3JtUmVzZXRIYW5kbGVyICk7XG5cblx0XHRpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgIT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLmRpc2FibGVkID0gISF0aGlzLmVsZW1lbnQucHJvcCggXCJkaXNhYmxlZFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZWxlbWVudC5wcm9wKCBcImRpc2FibGVkXCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdH1cblxuXHRcdHRoaXMuX2RldGVybWluZUJ1dHRvblR5cGUoKTtcblx0XHR0aGlzLmhhc1RpdGxlID0gISF0aGlzLmJ1dHRvbkVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiICk7XG5cblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0dG9nZ2xlQnV0dG9uID0gdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgfHwgdGhpcy50eXBlID09PSBcInJhZGlvXCIsXG5cdFx0XHRhY3RpdmVDbGFzcyA9ICF0b2dnbGVCdXR0b24gPyBcInVpLXN0YXRlLWFjdGl2ZVwiIDogXCJcIixcblx0XHRcdGZvY3VzQ2xhc3MgPSBcInVpLXN0YXRlLWZvY3VzXCI7XG5cblx0XHRpZiAoIG9wdGlvbnMubGFiZWwgPT09IG51bGwgKSB7XG5cdFx0XHRvcHRpb25zLmxhYmVsID0gKHRoaXMudHlwZSA9PT0gXCJpbnB1dFwiID8gdGhpcy5idXR0b25FbGVtZW50LnZhbCgpIDogdGhpcy5idXR0b25FbGVtZW50Lmh0bWwoKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faG92ZXJhYmxlKCB0aGlzLmJ1dHRvbkVsZW1lbnQgKTtcblxuXHRcdHRoaXMuYnV0dG9uRWxlbWVudFxuXHRcdFx0LmFkZENsYXNzKCBiYXNlQ2xhc3NlcyApXG5cdFx0XHQuYXR0ciggXCJyb2xlXCIsIFwiYnV0dG9uXCIgKVxuXHRcdFx0LmJpbmQoIFwibW91c2VlbnRlclwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzID09PSBsYXN0QWN0aXZlICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmJpbmQoIFwibW91c2VsZWF2ZVwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCBhY3RpdmVDbGFzcyApO1xuXHRcdFx0fSlcblx0XHRcdC5iaW5kKCBcImNsaWNrXCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LmJpbmQoIFwiZm9jdXNcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBubyBuZWVkIHRvIGNoZWNrIGRpc2FibGVkLCBmb2N1cyB3b24ndCBiZSB0cmlnZ2VyZWQgYW55d2F5XG5cdFx0XHRcdHRoYXQuYnV0dG9uRWxlbWVudC5hZGRDbGFzcyggZm9jdXNDbGFzcyApO1xuXHRcdFx0fSlcblx0XHRcdC5iaW5kKCBcImJsdXJcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGF0LmJ1dHRvbkVsZW1lbnQucmVtb3ZlQ2xhc3MoIGZvY3VzQ2xhc3MgKTtcblx0XHRcdH0pO1xuXG5cdFx0aWYgKCB0b2dnbGVCdXR0b24gKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYmluZCggXCJjaGFuZ2VcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNsaWNrRHJhZ2dlZCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhhdC5yZWZyZXNoKCk7XG5cdFx0XHR9KTtcblx0XHRcdC8vIGlmIG1vdXNlIG1vdmVzIGJldHdlZW4gbW91c2Vkb3duIGFuZCBtb3VzZXVwIChkcmFnKSBzZXQgY2xpY2tEcmFnZ2VkIGZsYWdcblx0XHRcdC8vIHByZXZlbnRzIGlzc3VlIHdoZXJlIGJ1dHRvbiBzdGF0ZSBjaGFuZ2VzIGJ1dCBjaGVja2JveC9yYWRpbyBjaGVja2VkIHN0YXRlXG5cdFx0XHQvLyBkb2VzIG5vdCBpbiBGaXJlZm94IChzZWUgdGlja2V0ICM2OTcwKVxuXHRcdFx0dGhpcy5idXR0b25FbGVtZW50XG5cdFx0XHRcdC5iaW5kKCBcIm1vdXNlZG93blwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2xpY2tEcmFnZ2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0c3RhcnRYUG9zID0gZXZlbnQucGFnZVg7XG5cdFx0XHRcdFx0c3RhcnRZUG9zID0gZXZlbnQucGFnZVk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5iaW5kKCBcIm1vdXNldXBcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3RhcnRYUG9zICE9PSBldmVudC5wYWdlWCB8fCBzdGFydFlQb3MgIT09IGV2ZW50LnBhZ2VZICkge1xuXHRcdFx0XHRcdFx0Y2xpY2tEcmFnZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0dGhpcy5idXR0b25FbGVtZW50LmJpbmQoIFwiY2xpY2tcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIG9wdGlvbnMuZGlzYWJsZWQgfHwgY2xpY2tEcmFnZ2VkICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICggdGhpcy50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHR0aGlzLmJ1dHRvbkVsZW1lbnQuYmluZCggXCJjbGlja1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCB8fCBjbGlja0RyYWdnZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0XHR0aGF0LmJ1dHRvbkVsZW1lbnQuYXR0ciggXCJhcmlhLXByZXNzZWRcIiwgXCJ0cnVlXCIgKTtcblxuXHRcdFx0XHR2YXIgcmFkaW8gPSB0aGF0LmVsZW1lbnRbIDAgXTtcblx0XHRcdFx0cmFkaW9Hcm91cCggcmFkaW8gKVxuXHRcdFx0XHRcdC5ub3QoIHJhZGlvIClcblx0XHRcdFx0XHQubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICQoIHRoaXMgKS5idXR0b24oIFwid2lkZ2V0XCIgKVsgMCBdO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiIClcblx0XHRcdFx0XHQuYXR0ciggXCJhcmlhLXByZXNzZWRcIiwgXCJmYWxzZVwiICk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5idXR0b25FbGVtZW50XG5cdFx0XHRcdC5iaW5kKCBcIm1vdXNlZG93blwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdFx0XHRsYXN0QWN0aXZlID0gdGhpcztcblx0XHRcdFx0XHR0aGF0LmRvY3VtZW50Lm9uZSggXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bGFzdEFjdGl2ZSA9IG51bGw7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5iaW5kKCBcIm1vdXNldXBcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggb3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5iaW5kKCBcImtleWRvd25cIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5TUEFDRSB8fCBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuRU5URVIgKSB7XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC8vIHNlZSAjODU1OSwgd2UgYmluZCB0byBibHVyIGhlcmUgaW4gY2FzZSB0aGUgYnV0dG9uIGVsZW1lbnQgbG9zZXNcblx0XHRcdFx0Ly8gZm9jdXMgYmV0d2VlbiBrZXlkb3duIGFuZCBrZXl1cCwgaXQgd291bGQgYmUgbGVmdCBpbiBhbiBcImFjdGl2ZVwiIHN0YXRlXG5cdFx0XHRcdC5iaW5kKCBcImtleXVwXCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlICsgXCIgYmx1clwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIHRoaXMuYnV0dG9uRWxlbWVudC5pcyhcImFcIikgKSB7XG5cdFx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudC5rZXl1cChmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdGlmICggZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlNQQUNFICkge1xuXHRcdFx0XHRcdFx0Ly8gVE9ETyBwYXNzIHRocm91Z2ggb3JpZ2luYWwgZXZlbnQgY29ycmVjdGx5IChqdXN0IGFzIDJuZCBhcmd1bWVudCBkb2Vzbid0IHdvcmspXG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuY2xpY2soKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFRPRE86IHB1bGwgb3V0ICQuV2lkZ2V0J3MgaGFuZGxpbmcgZm9yIHRoZSBkaXNhYmxlZCBvcHRpb24gaW50b1xuXHRcdC8vICQuV2lkZ2V0LnByb3RvdHlwZS5fc2V0T3B0aW9uRGlzYWJsZWQgc28gaXQncyBlYXN5IHRvIHByb3h5IGFuZCBjYW5cblx0XHQvLyBiZSBvdmVycmlkZGVuIGJ5IGluZGl2aWR1YWwgcGx1Z2luc1xuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJkaXNhYmxlZFwiLCBvcHRpb25zLmRpc2FibGVkICk7XG5cdFx0dGhpcy5fcmVzZXRCdXR0b24oKTtcblx0fSxcblxuXHRfZGV0ZXJtaW5lQnV0dG9uVHlwZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFuY2VzdG9yLCBsYWJlbFNlbGVjdG9yLCBjaGVja2VkO1xuXG5cdFx0aWYgKCB0aGlzLmVsZW1lbnQuaXMoXCJbdHlwZT1jaGVja2JveF1cIikgKSB7XG5cdFx0XHR0aGlzLnR5cGUgPSBcImNoZWNrYm94XCI7XG5cdFx0fSBlbHNlIGlmICggdGhpcy5lbGVtZW50LmlzKFwiW3R5cGU9cmFkaW9dXCIpICkge1xuXHRcdFx0dGhpcy50eXBlID0gXCJyYWRpb1wiO1xuXHRcdH0gZWxzZSBpZiAoIHRoaXMuZWxlbWVudC5pcyhcImlucHV0XCIpICkge1xuXHRcdFx0dGhpcy50eXBlID0gXCJpbnB1dFwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnR5cGUgPSBcImJ1dHRvblwiO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgfHwgdGhpcy50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHQvLyB3ZSBkb24ndCBzZWFyY2ggYWdhaW5zdCB0aGUgZG9jdW1lbnQgaW4gY2FzZSB0aGUgZWxlbWVudFxuXHRcdFx0Ly8gaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIERPTVxuXHRcdFx0YW5jZXN0b3IgPSB0aGlzLmVsZW1lbnQucGFyZW50cygpLmxhc3QoKTtcblx0XHRcdGxhYmVsU2VsZWN0b3IgPSBcImxhYmVsW2Zvcj0nXCIgKyB0aGlzLmVsZW1lbnQuYXR0cihcImlkXCIpICsgXCInXVwiO1xuXHRcdFx0dGhpcy5idXR0b25FbGVtZW50ID0gYW5jZXN0b3IuZmluZCggbGFiZWxTZWxlY3RvciApO1xuXHRcdFx0aWYgKCAhdGhpcy5idXR0b25FbGVtZW50Lmxlbmd0aCApIHtcblx0XHRcdFx0YW5jZXN0b3IgPSBhbmNlc3Rvci5sZW5ndGggPyBhbmNlc3Rvci5zaWJsaW5ncygpIDogdGhpcy5lbGVtZW50LnNpYmxpbmdzKCk7XG5cdFx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudCA9IGFuY2VzdG9yLmZpbHRlciggbGFiZWxTZWxlY3RvciApO1xuXHRcdFx0XHRpZiAoICF0aGlzLmJ1dHRvbkVsZW1lbnQubGVuZ3RoICkge1xuXHRcdFx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudCA9IGFuY2VzdG9yLmZpbmQoIGxhYmVsU2VsZWN0b3IgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbGVtZW50LmFkZENsYXNzKCBcInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZVwiICk7XG5cblx0XHRcdGNoZWNrZWQgPSB0aGlzLmVsZW1lbnQuaXMoIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0aWYgKCBjaGVja2VkICkge1xuXHRcdFx0XHR0aGlzLmJ1dHRvbkVsZW1lbnQuYWRkQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudC5wcm9wKCBcImFyaWEtcHJlc3NlZFwiLCBjaGVja2VkICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHR9XG5cdH0sXG5cblx0d2lkZ2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5idXR0b25FbGVtZW50O1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGVcIiApO1xuXHRcdHRoaXMuYnV0dG9uRWxlbWVudFxuXHRcdFx0LnJlbW92ZUNsYXNzKCBiYXNlQ2xhc3NlcyArIFwiIFwiICsgc3RhdGVDbGFzc2VzICsgXCIgXCIgKyB0eXBlQ2xhc3NlcyApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1wcmVzc2VkXCIgKVxuXHRcdFx0Lmh0bWwoIHRoaXMuYnV0dG9uRWxlbWVudC5maW5kKFwiLnVpLWJ1dHRvbi10ZXh0XCIpLmh0bWwoKSApO1xuXG5cdFx0aWYgKCAhdGhpcy5oYXNUaXRsZSApIHtcblx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyKCBcInRpdGxlXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0aWYgKCB2YWx1ZSApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnByb3AoIFwiZGlzYWJsZWRcIiwgdHJ1ZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnByb3AoIFwiZGlzYWJsZWRcIiwgZmFsc2UgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fcmVzZXRCdXR0b24oKTtcblx0fSxcblxuXHRyZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHQvL1NlZSAjODIzNyAmICM4ODI4XG5cdFx0dmFyIGlzRGlzYWJsZWQgPSB0aGlzLmVsZW1lbnQuaXMoIFwiaW5wdXQsIGJ1dHRvblwiICkgPyB0aGlzLmVsZW1lbnQuaXMoIFwiOmRpc2FibGVkXCIgKSA6IHRoaXMuZWxlbWVudC5oYXNDbGFzcyggXCJ1aS1idXR0b24tZGlzYWJsZWRcIiApO1xuXG5cdFx0aWYgKCBpc0Rpc2FibGVkICE9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9zZXRPcHRpb24oIFwiZGlzYWJsZWRcIiwgaXNEaXNhYmxlZCApO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0cmFkaW9Hcm91cCggdGhpcy5lbGVtZW50WzBdICkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuaXMoIFwiOmNoZWNrZWRcIiApICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5idXR0b24oIFwid2lkZ2V0XCIgKVxuXHRcdFx0XHRcdFx0LmFkZENsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiIClcblx0XHRcdFx0XHRcdC5hdHRyKCBcImFyaWEtcHJlc3NlZFwiLCBcInRydWVcIiApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5idXR0b24oIFwid2lkZ2V0XCIgKVxuXHRcdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiIClcblx0XHRcdFx0XHRcdC5hdHRyKCBcImFyaWEtcHJlc3NlZFwiLCBcImZhbHNlXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgKSB7XG5cdFx0XHRpZiAoIHRoaXMuZWxlbWVudC5pcyggXCI6Y2hlY2tlZFwiICkgKSB7XG5cdFx0XHRcdHRoaXMuYnV0dG9uRWxlbWVudFxuXHRcdFx0XHRcdC5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1wcmVzc2VkXCIsIFwidHJ1ZVwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmJ1dHRvbkVsZW1lbnRcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBcImFyaWEtcHJlc3NlZFwiLCBcImZhbHNlXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X3Jlc2V0QnV0dG9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMubGFiZWwgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC52YWwoIHRoaXMub3B0aW9ucy5sYWJlbCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgYnV0dG9uRWxlbWVudCA9IHRoaXMuYnV0dG9uRWxlbWVudC5yZW1vdmVDbGFzcyggdHlwZUNsYXNzZXMgKSxcblx0XHRcdGJ1dHRvblRleHQgPSAkKCBcIjxzcGFuPjwvc3Bhbj5cIiwgdGhpcy5kb2N1bWVudFswXSApXG5cdFx0XHRcdC5hZGRDbGFzcyggXCJ1aS1idXR0b24tdGV4dFwiIClcblx0XHRcdFx0Lmh0bWwoIHRoaXMub3B0aW9ucy5sYWJlbCApXG5cdFx0XHRcdC5hcHBlbmRUbyggYnV0dG9uRWxlbWVudC5lbXB0eSgpIClcblx0XHRcdFx0LnRleHQoKSxcblx0XHRcdGljb25zID0gdGhpcy5vcHRpb25zLmljb25zLFxuXHRcdFx0bXVsdGlwbGVJY29ucyA9IGljb25zLnByaW1hcnkgJiYgaWNvbnMuc2Vjb25kYXJ5LFxuXHRcdFx0YnV0dG9uQ2xhc3NlcyA9IFtdO1xuXG5cdFx0aWYgKCBpY29ucy5wcmltYXJ5IHx8IGljb25zLnNlY29uZGFyeSApIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdGJ1dHRvbkNsYXNzZXMucHVzaCggXCJ1aS1idXR0b24tdGV4dC1pY29uXCIgKyAoIG11bHRpcGxlSWNvbnMgPyBcInNcIiA6ICggaWNvbnMucHJpbWFyeSA/IFwiLXByaW1hcnlcIiA6IFwiLXNlY29uZGFyeVwiICkgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGljb25zLnByaW1hcnkgKSB7XG5cdFx0XHRcdGJ1dHRvbkVsZW1lbnQucHJlcGVuZCggXCI8c3BhbiBjbGFzcz0ndWktYnV0dG9uLWljb24tcHJpbWFyeSB1aS1pY29uIFwiICsgaWNvbnMucHJpbWFyeSArIFwiJz48L3NwYW4+XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpY29ucy5zZWNvbmRhcnkgKSB7XG5cdFx0XHRcdGJ1dHRvbkVsZW1lbnQuYXBwZW5kKCBcIjxzcGFuIGNsYXNzPSd1aS1idXR0b24taWNvbi1zZWNvbmRhcnkgdWktaWNvbiBcIiArIGljb25zLnNlY29uZGFyeSArIFwiJz48L3NwYW4+XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdGJ1dHRvbkNsYXNzZXMucHVzaCggbXVsdGlwbGVJY29ucyA/IFwidWktYnV0dG9uLWljb25zLW9ubHlcIiA6IFwidWktYnV0dG9uLWljb24tb25seVwiICk7XG5cblx0XHRcdFx0aWYgKCAhdGhpcy5oYXNUaXRsZSApIHtcblx0XHRcdFx0XHRidXR0b25FbGVtZW50LmF0dHIoIFwidGl0bGVcIiwgJC50cmltKCBidXR0b25UZXh0ICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRidXR0b25DbGFzc2VzLnB1c2goIFwidWktYnV0dG9uLXRleHQtb25seVwiICk7XG5cdFx0fVxuXHRcdGJ1dHRvbkVsZW1lbnQuYWRkQ2xhc3MoIGJ1dHRvbkNsYXNzZXMuam9pbiggXCIgXCIgKSApO1xuXHR9XG59KTtcblxuJC53aWRnZXQoIFwidWkuYnV0dG9uc2V0XCIsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGl0ZW1zOiBcImJ1dHRvbiwgaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdLCBpbnB1dFt0eXBlPWNoZWNrYm94XSwgaW5wdXRbdHlwZT1yYWRpb10sIGEsIDpkYXRhKHVpLWJ1dHRvbilcIlxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5hZGRDbGFzcyggXCJ1aS1idXR0b25zZXRcIiApO1xuXHR9LFxuXG5cdF9pbml0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnJlZnJlc2goKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0dGhpcy5idXR0b25zLmJ1dHRvbiggXCJvcHRpb25cIiwga2V5LCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHJ0bCA9IHRoaXMuZWxlbWVudC5jc3MoIFwiZGlyZWN0aW9uXCIgKSA9PT0gXCJydGxcIjtcblxuXHRcdHRoaXMuYnV0dG9ucyA9IHRoaXMuZWxlbWVudC5maW5kKCB0aGlzLm9wdGlvbnMuaXRlbXMgKVxuXHRcdFx0LmZpbHRlciggXCI6dWktYnV0dG9uXCIgKVxuXHRcdFx0XHQuYnV0dG9uKCBcInJlZnJlc2hcIiApXG5cdFx0XHQuZW5kKClcblx0XHRcdC5ub3QoIFwiOnVpLWJ1dHRvblwiIClcblx0XHRcdFx0LmJ1dHRvbigpXG5cdFx0XHQuZW5kKClcblx0XHRcdC5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAkKCB0aGlzICkuYnV0dG9uKCBcIndpZGdldFwiIClbIDAgXTtcblx0XHRcdH0pXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1jb3JuZXItYWxsIHVpLWNvcm5lci1sZWZ0IHVpLWNvcm5lci1yaWdodFwiIClcblx0XHRcdFx0LmZpbHRlciggXCI6Zmlyc3RcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCBydGwgPyBcInVpLWNvcm5lci1yaWdodFwiIDogXCJ1aS1jb3JuZXItbGVmdFwiIClcblx0XHRcdFx0LmVuZCgpXG5cdFx0XHRcdC5maWx0ZXIoIFwiOmxhc3RcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCBydGwgPyBcInVpLWNvcm5lci1sZWZ0XCIgOiBcInVpLWNvcm5lci1yaWdodFwiIClcblx0XHRcdFx0LmVuZCgpXG5cdFx0XHQuZW5kKCk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggXCJ1aS1idXR0b25zZXRcIiApO1xuXHRcdHRoaXMuYnV0dG9uc1xuXHRcdFx0Lm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICQoIHRoaXMgKS5idXR0b24oIFwid2lkZ2V0XCIgKVsgMCBdO1xuXHRcdFx0fSlcblx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLWNvcm5lci1sZWZ0IHVpLWNvcm5lci1yaWdodFwiIClcblx0XHRcdC5lbmQoKVxuXHRcdFx0LmJ1dHRvbiggXCJkZXN0cm95XCIgKTtcblx0fVxufSk7XG5cbn0oIGpRdWVyeSApICk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5leHRlbmQoJC51aSwgeyBkYXRlcGlja2VyOiB7IHZlcnNpb246IFwiMS4xMC4xXCIgfSB9KTtcblxudmFyIFBST1BfTkFNRSA9IFwiZGF0ZXBpY2tlclwiLFxuXHRkcHV1aWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcblx0aW5zdEFjdGl2ZTtcblxuLyogRGF0ZSBwaWNrZXIgbWFuYWdlci5cbiAgIFVzZSB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MsICQuZGF0ZXBpY2tlciwgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgZGF0ZSBwaWNrZXIuXG4gICBTZXR0aW5ncyBmb3IgKGdyb3VwcyBvZikgZGF0ZSBwaWNrZXJzIGFyZSBtYWludGFpbmVkIGluIGFuIGluc3RhbmNlIG9iamVjdCxcbiAgIGFsbG93aW5nIG11bHRpcGxlIGRpZmZlcmVudCBzZXR0aW5ncyBvbiB0aGUgc2FtZSBwYWdlLiAqL1xuXG5mdW5jdGlvbiBEYXRlcGlja2VyKCkge1xuXHR0aGlzLl9jdXJJbnN0ID0gbnVsbDsgLy8gVGhlIGN1cnJlbnQgaW5zdGFuY2UgaW4gdXNlXG5cdHRoaXMuX2tleUV2ZW50ID0gZmFsc2U7IC8vIElmIHRoZSBsYXN0IGV2ZW50IHdhcyBhIGtleSBldmVudFxuXHR0aGlzLl9kaXNhYmxlZElucHV0cyA9IFtdOyAvLyBMaXN0IG9mIGRhdGUgcGlja2VyIGlucHV0cyB0aGF0IGhhdmUgYmVlbiBkaXNhYmxlZFxuXHR0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9IGZhbHNlOyAvLyBUcnVlIGlmIHRoZSBwb3B1cCBwaWNrZXIgaXMgc2hvd2luZyAsIGZhbHNlIGlmIG5vdFxuXHR0aGlzLl9pbkRpYWxvZyA9IGZhbHNlOyAvLyBUcnVlIGlmIHNob3dpbmcgd2l0aGluIGEgXCJkaWFsb2dcIiwgZmFsc2UgaWYgbm90XG5cdHRoaXMuX21haW5EaXZJZCA9IFwidWktZGF0ZXBpY2tlci1kaXZcIjsgLy8gVGhlIElEIG9mIHRoZSBtYWluIGRhdGVwaWNrZXIgZGl2aXNpb25cblx0dGhpcy5faW5saW5lQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItaW5saW5lXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBpbmxpbmUgbWFya2VyIGNsYXNzXG5cdHRoaXMuX2FwcGVuZENsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWFwcGVuZFwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgYXBwZW5kIG1hcmtlciBjbGFzc1xuXHR0aGlzLl90cmlnZ2VyQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItdHJpZ2dlclwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgdHJpZ2dlciBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fZGlhbG9nQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItZGlhbG9nXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBkaWFsb2cgbWFya2VyIGNsYXNzXG5cdHRoaXMuX2Rpc2FibGVDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1kaXNhYmxlZFwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgZGlzYWJsZWQgY292ZXJpbmcgbWFya2VyIGNsYXNzXG5cdHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzID0gXCJ1aS1kYXRlcGlja2VyLXVuc2VsZWN0YWJsZVwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgdW5zZWxlY3RhYmxlIGNlbGwgbWFya2VyIGNsYXNzXG5cdHRoaXMuX2N1cnJlbnRDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1jdXJyZW50LWRheVwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgY3VycmVudCBkYXkgbWFya2VyIGNsYXNzXG5cdHRoaXMuX2RheU92ZXJDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1kYXlzLWNlbGwtb3ZlclwiOyAvLyBUaGUgbmFtZSBvZiB0aGUgZGF5IGhvdmVyIG1hcmtlciBjbGFzc1xuXHR0aGlzLnJlZ2lvbmFsID0gW107IC8vIEF2YWlsYWJsZSByZWdpb25hbCBzZXR0aW5ncywgaW5kZXhlZCBieSBsYW5ndWFnZSBjb2RlXG5cdHRoaXMucmVnaW9uYWxbXCJcIl0gPSB7IC8vIERlZmF1bHQgcmVnaW9uYWwgc2V0dGluZ3Ncblx0XHRjbG9zZVRleHQ6IFwiRG9uZVwiLCAvLyBEaXNwbGF5IHRleHQgZm9yIGNsb3NlIGxpbmtcblx0XHRwcmV2VGV4dDogXCJQcmV2XCIsIC8vIERpc3BsYXkgdGV4dCBmb3IgcHJldmlvdXMgbW9udGggbGlua1xuXHRcdG5leHRUZXh0OiBcIk5leHRcIiwgLy8gRGlzcGxheSB0ZXh0IGZvciBuZXh0IG1vbnRoIGxpbmtcblx0XHRjdXJyZW50VGV4dDogXCJUb2RheVwiLCAvLyBEaXNwbGF5IHRleHQgZm9yIGN1cnJlbnQgbW9udGggbGlua1xuXHRcdG1vbnRoTmFtZXM6IFtcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFxuXHRcdFx0XCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLCAvLyBOYW1lcyBvZiBtb250aHMgZm9yIGRyb3AtZG93biBhbmQgZm9ybWF0dGluZ1xuXHRcdG1vbnRoTmFtZXNTaG9ydDogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLCAvLyBGb3IgZm9ybWF0dGluZ1xuXHRcdGRheU5hbWVzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSwgLy8gRm9yIGZvcm1hdHRpbmdcblx0XHRkYXlOYW1lc1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sIC8vIEZvciBmb3JtYXR0aW5nXG5cdFx0ZGF5TmFtZXNNaW46IFtcIlN1XCIsXCJNb1wiLFwiVHVcIixcIldlXCIsXCJUaFwiLFwiRnJcIixcIlNhXCJdLCAvLyBDb2x1bW4gaGVhZGluZ3MgZm9yIGRheXMgc3RhcnRpbmcgYXQgU3VuZGF5XG5cdFx0d2Vla0hlYWRlcjogXCJXa1wiLCAvLyBDb2x1bW4gaGVhZGVyIGZvciB3ZWVrIG9mIHRoZSB5ZWFyXG5cdFx0ZGF0ZUZvcm1hdDogXCJtbS9kZC95eVwiLCAvLyBTZWUgZm9ybWF0IG9wdGlvbnMgb24gcGFyc2VEYXRlXG5cdFx0Zmlyc3REYXk6IDAsIC8vIFRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIFN1biA9IDAsIE1vbiA9IDEsIC4uLlxuXHRcdGlzUlRMOiBmYWxzZSwgLy8gVHJ1ZSBpZiByaWdodC10by1sZWZ0IGxhbmd1YWdlLCBmYWxzZSBpZiBsZWZ0LXRvLXJpZ2h0XG5cdFx0c2hvd01vbnRoQWZ0ZXJZZWFyOiBmYWxzZSwgLy8gVHJ1ZSBpZiB0aGUgeWVhciBzZWxlY3QgcHJlY2VkZXMgbW9udGgsIGZhbHNlIGZvciBtb250aCB0aGVuIHllYXJcblx0XHR5ZWFyU3VmZml4OiBcIlwiIC8vIEFkZGl0aW9uYWwgdGV4dCB0byBhcHBlbmQgdG8gdGhlIHllYXIgaW4gdGhlIG1vbnRoIGhlYWRlcnNcblx0fTtcblx0dGhpcy5fZGVmYXVsdHMgPSB7IC8vIEdsb2JhbCBkZWZhdWx0cyBmb3IgYWxsIHRoZSBkYXRlIHBpY2tlciBpbnN0YW5jZXNcblx0XHRzaG93T246IFwiZm9jdXNcIiwgLy8gXCJmb2N1c1wiIGZvciBwb3B1cCBvbiBmb2N1cyxcblx0XHRcdC8vIFwiYnV0dG9uXCIgZm9yIHRyaWdnZXIgYnV0dG9uLCBvciBcImJvdGhcIiBmb3IgZWl0aGVyXG5cdFx0c2hvd0FuaW06IFwiZmFkZUluXCIsIC8vIE5hbWUgb2YgalF1ZXJ5IGFuaW1hdGlvbiBmb3IgcG9wdXBcblx0XHRzaG93T3B0aW9uczoge30sIC8vIE9wdGlvbnMgZm9yIGVuaGFuY2VkIGFuaW1hdGlvbnNcblx0XHRkZWZhdWx0RGF0ZTogbnVsbCwgLy8gVXNlZCB3aGVuIGZpZWxkIGlzIGJsYW5rOiBhY3R1YWwgZGF0ZSxcblx0XHRcdC8vICsvLW51bWJlciBmb3Igb2Zmc2V0IGZyb20gdG9kYXksIG51bGwgZm9yIHRvZGF5XG5cdFx0YXBwZW5kVGV4dDogXCJcIiwgLy8gRGlzcGxheSB0ZXh0IGZvbGxvd2luZyB0aGUgaW5wdXQgYm94LCBlLmcuIHNob3dpbmcgdGhlIGZvcm1hdFxuXHRcdGJ1dHRvblRleHQ6IFwiLi4uXCIsIC8vIFRleHQgZm9yIHRyaWdnZXIgYnV0dG9uXG5cdFx0YnV0dG9uSW1hZ2U6IFwiXCIsIC8vIFVSTCBmb3IgdHJpZ2dlciBidXR0b24gaW1hZ2Vcblx0XHRidXR0b25JbWFnZU9ubHk6IGZhbHNlLCAvLyBUcnVlIGlmIHRoZSBpbWFnZSBhcHBlYXJzIGFsb25lLCBmYWxzZSBpZiBpdCBhcHBlYXJzIG9uIGEgYnV0dG9uXG5cdFx0aGlkZUlmTm9QcmV2TmV4dDogZmFsc2UsIC8vIFRydWUgdG8gaGlkZSBuZXh0L3ByZXZpb3VzIG1vbnRoIGxpbmtzXG5cdFx0XHQvLyBpZiBub3QgYXBwbGljYWJsZSwgZmFsc2UgdG8ganVzdCBkaXNhYmxlIHRoZW1cblx0XHRuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0OiBmYWxzZSwgLy8gVHJ1ZSBpZiBkYXRlIGZvcm1hdHRpbmcgYXBwbGllZCB0byBwcmV2L3RvZGF5L25leHQgbGlua3Ncblx0XHRnb3RvQ3VycmVudDogZmFsc2UsIC8vIFRydWUgaWYgdG9kYXkgbGluayBnb2VzIGJhY2sgdG8gY3VycmVudCBzZWxlY3Rpb24gaW5zdGVhZFxuXHRcdGNoYW5nZU1vbnRoOiBmYWxzZSwgLy8gVHJ1ZSBpZiBtb250aCBjYW4gYmUgc2VsZWN0ZWQgZGlyZWN0bHksIGZhbHNlIGlmIG9ubHkgcHJldi9uZXh0XG5cdFx0Y2hhbmdlWWVhcjogZmFsc2UsIC8vIFRydWUgaWYgeWVhciBjYW4gYmUgc2VsZWN0ZWQgZGlyZWN0bHksIGZhbHNlIGlmIG9ubHkgcHJldi9uZXh0XG5cdFx0eWVhclJhbmdlOiBcImMtMTA6YysxMFwiLCAvLyBSYW5nZSBvZiB5ZWFycyB0byBkaXNwbGF5IGluIGRyb3AtZG93bixcblx0XHRcdC8vIGVpdGhlciByZWxhdGl2ZSB0byB0b2RheSdzIHllYXIgKC1ubjorbm4pLCByZWxhdGl2ZSB0byBjdXJyZW50bHkgZGlzcGxheWVkIHllYXJcblx0XHRcdC8vIChjLW5uOmMrbm4pLCBhYnNvbHV0ZSAobm5ubjpubm5uKSwgb3IgYSBjb21iaW5hdGlvbiBvZiB0aGUgYWJvdmUgKG5ubm46LW4pXG5cdFx0c2hvd090aGVyTW9udGhzOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaG93IGRhdGVzIGluIG90aGVyIG1vbnRocywgZmFsc2UgdG8gbGVhdmUgYmxhbmtcblx0XHRzZWxlY3RPdGhlck1vbnRoczogZmFsc2UsIC8vIFRydWUgdG8gYWxsb3cgc2VsZWN0aW9uIG9mIGRhdGVzIGluIG90aGVyIG1vbnRocywgZmFsc2UgZm9yIHVuc2VsZWN0YWJsZVxuXHRcdHNob3dXZWVrOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaG93IHdlZWsgb2YgdGhlIHllYXIsIGZhbHNlIHRvIG5vdCBzaG93IGl0XG5cdFx0Y2FsY3VsYXRlV2VlazogdGhpcy5pc284NjAxV2VlaywgLy8gSG93IHRvIGNhbGN1bGF0ZSB0aGUgd2VlayBvZiB0aGUgeWVhcixcblx0XHRcdC8vIHRha2VzIGEgRGF0ZSBhbmQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHRoZSB3ZWVrIGZvciBpdFxuXHRcdHNob3J0WWVhckN1dG9mZjogXCIrMTBcIiwgLy8gU2hvcnQgeWVhciB2YWx1ZXMgPCB0aGlzIGFyZSBpbiB0aGUgY3VycmVudCBjZW50dXJ5LFxuXHRcdFx0Ly8gPiB0aGlzIGFyZSBpbiB0aGUgcHJldmlvdXMgY2VudHVyeSxcblx0XHRcdC8vIHN0cmluZyB2YWx1ZSBzdGFydGluZyB3aXRoIFwiK1wiIGZvciBjdXJyZW50IHllYXIgKyB2YWx1ZVxuXHRcdG1pbkRhdGU6IG51bGwsIC8vIFRoZSBlYXJsaWVzdCBzZWxlY3RhYmxlIGRhdGUsIG9yIG51bGwgZm9yIG5vIGxpbWl0XG5cdFx0bWF4RGF0ZTogbnVsbCwgLy8gVGhlIGxhdGVzdCBzZWxlY3RhYmxlIGRhdGUsIG9yIG51bGwgZm9yIG5vIGxpbWl0XG5cdFx0ZHVyYXRpb246IFwiZmFzdFwiLCAvLyBEdXJhdGlvbiBvZiBkaXNwbGF5L2Nsb3N1cmVcblx0XHRiZWZvcmVTaG93RGF5OiBudWxsLCAvLyBGdW5jdGlvbiB0aGF0IHRha2VzIGEgZGF0ZSBhbmQgcmV0dXJucyBhbiBhcnJheSB3aXRoXG5cdFx0XHQvLyBbMF0gPSB0cnVlIGlmIHNlbGVjdGFibGUsIGZhbHNlIGlmIG5vdCwgWzFdID0gY3VzdG9tIENTUyBjbGFzcyBuYW1lKHMpIG9yIFwiXCIsXG5cdFx0XHQvLyBbMl0gPSBjZWxsIHRpdGxlIChvcHRpb25hbCksIGUuZy4gJC5kYXRlcGlja2VyLm5vV2Vla2VuZHNcblx0XHRiZWZvcmVTaG93OiBudWxsLCAvLyBGdW5jdGlvbiB0aGF0IHRha2VzIGFuIGlucHV0IGZpZWxkIGFuZFxuXHRcdFx0Ly8gcmV0dXJucyBhIHNldCBvZiBjdXN0b20gc2V0dGluZ3MgZm9yIHRoZSBkYXRlIHBpY2tlclxuXHRcdG9uU2VsZWN0OiBudWxsLCAvLyBEZWZpbmUgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGEgZGF0ZSBpcyBzZWxlY3RlZFxuXHRcdG9uQ2hhbmdlTW9udGhZZWFyOiBudWxsLCAvLyBEZWZpbmUgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHRoZSBtb250aCBvciB5ZWFyIGlzIGNoYW5nZWRcblx0XHRvbkNsb3NlOiBudWxsLCAvLyBEZWZpbmUgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHRoZSBkYXRlcGlja2VyIGlzIGNsb3NlZFxuXHRcdG51bWJlck9mTW9udGhzOiAxLCAvLyBOdW1iZXIgb2YgbW9udGhzIHRvIHNob3cgYXQgYSB0aW1lXG5cdFx0c2hvd0N1cnJlbnRBdFBvczogMCwgLy8gVGhlIHBvc2l0aW9uIGluIG11bHRpcGUgbW9udGhzIGF0IHdoaWNoIHRvIHNob3cgdGhlIGN1cnJlbnQgbW9udGggKHN0YXJ0aW5nIGF0IDApXG5cdFx0c3RlcE1vbnRoczogMSwgLy8gTnVtYmVyIG9mIG1vbnRocyB0byBzdGVwIGJhY2svZm9yd2FyZFxuXHRcdHN0ZXBCaWdNb250aHM6IDEyLCAvLyBOdW1iZXIgb2YgbW9udGhzIHRvIHN0ZXAgYmFjay9mb3J3YXJkIGZvciB0aGUgYmlnIGxpbmtzXG5cdFx0YWx0RmllbGQ6IFwiXCIsIC8vIFNlbGVjdG9yIGZvciBhbiBhbHRlcm5hdGUgZmllbGQgdG8gc3RvcmUgc2VsZWN0ZWQgZGF0ZXMgaW50b1xuXHRcdGFsdEZvcm1hdDogXCJcIiwgLy8gVGhlIGRhdGUgZm9ybWF0IHRvIHVzZSBmb3IgdGhlIGFsdGVybmF0ZSBmaWVsZFxuXHRcdGNvbnN0cmFpbklucHV0OiB0cnVlLCAvLyBUaGUgaW5wdXQgaXMgY29uc3RyYWluZWQgYnkgdGhlIGN1cnJlbnQgZGF0ZSBmb3JtYXRcblx0XHRzaG93QnV0dG9uUGFuZWw6IGZhbHNlLCAvLyBUcnVlIHRvIHNob3cgYnV0dG9uIHBhbmVsLCBmYWxzZSB0byBub3Qgc2hvdyBpdFxuXHRcdGF1dG9TaXplOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaXplIHRoZSBpbnB1dCBmb3IgdGhlIGRhdGUgZm9ybWF0LCBmYWxzZSB0byBsZWF2ZSBhcyBpc1xuXHRcdGRpc2FibGVkOiBmYWxzZSAvLyBUaGUgaW5pdGlhbCBkaXNhYmxlZCBzdGF0ZVxuXHR9O1xuXHQkLmV4dGVuZCh0aGlzLl9kZWZhdWx0cywgdGhpcy5yZWdpb25hbFtcIlwiXSk7XG5cdHRoaXMuZHBEaXYgPSBiaW5kSG92ZXIoJChcIjxkaXYgaWQ9J1wiICsgdGhpcy5fbWFpbkRpdklkICsgXCInIGNsYXNzPSd1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbCc+PC9kaXY+XCIpKTtcbn1cblxuJC5leHRlbmQoRGF0ZXBpY2tlci5wcm90b3R5cGUsIHtcblx0LyogQ2xhc3MgbmFtZSBhZGRlZCB0byBlbGVtZW50cyB0byBpbmRpY2F0ZSBhbHJlYWR5IGNvbmZpZ3VyZWQgd2l0aCBhIGRhdGUgcGlja2VyLiAqL1xuXHRtYXJrZXJDbGFzc05hbWU6IFwiaGFzRGF0ZXBpY2tlclwiLFxuXG5cdC8vS2VlcCB0cmFjayBvZiB0aGUgbWF4aW11bSBudW1iZXIgb2Ygcm93cyBkaXNwbGF5ZWQgKHNlZSAjNzA0Mylcblx0bWF4Um93czogNCxcblxuXHQvLyBUT0RPIHJlbmFtZSB0byBcIndpZGdldFwiIHdoZW4gc3dpdGNoaW5nIHRvIHdpZGdldCBmYWN0b3J5XG5cdF93aWRnZXREYXRlcGlja2VyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kcERpdjtcblx0fSxcblxuXHQvKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIGluc3RhbmNlcyBvZiB0aGUgZGF0ZSBwaWNrZXIuXG5cdCAqIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHRoZSBuZXcgc2V0dGluZ3MgdG8gdXNlIGFzIGRlZmF1bHRzIChhbm9ueW1vdXMgb2JqZWN0KVxuXHQgKiBAcmV0dXJuIHRoZSBtYW5hZ2VyIG9iamVjdFxuXHQgKi9cblx0c2V0RGVmYXVsdHM6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cdFx0ZXh0ZW5kUmVtb3ZlKHRoaXMuX2RlZmF1bHRzLCBzZXR0aW5ncyB8fCB7fSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0LyogQXR0YWNoIHRoZSBkYXRlIHBpY2tlciB0byBhIGpRdWVyeSBzZWxlY3Rpb24uXG5cdCAqIEBwYXJhbSAgdGFyZ2V0XHRlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHRoZSBuZXcgc2V0dGluZ3MgdG8gdXNlIGZvciB0aGlzIGRhdGUgcGlja2VyIGluc3RhbmNlIChhbm9ueW1vdXMpXG5cdCAqL1xuXHRfYXR0YWNoRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBzZXR0aW5ncykge1xuXHRcdHZhciBub2RlTmFtZSwgaW5saW5lLCBpbnN0O1xuXHRcdG5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0aW5saW5lID0gKG5vZGVOYW1lID09PSBcImRpdlwiIHx8IG5vZGVOYW1lID09PSBcInNwYW5cIik7XG5cdFx0aWYgKCF0YXJnZXQuaWQpIHtcblx0XHRcdHRoaXMudXVpZCArPSAxO1xuXHRcdFx0dGFyZ2V0LmlkID0gXCJkcFwiICsgdGhpcy51dWlkO1xuXHRcdH1cblx0XHRpbnN0ID0gdGhpcy5fbmV3SW5zdCgkKHRhcmdldCksIGlubGluZSk7XG5cdFx0aW5zdC5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBzZXR0aW5ncyB8fCB7fSk7XG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIpIHtcblx0XHRcdHRoaXMuX2Nvbm5lY3REYXRlcGlja2VyKHRhcmdldCwgaW5zdCk7XG5cdFx0fSBlbHNlIGlmIChpbmxpbmUpIHtcblx0XHRcdHRoaXMuX2lubGluZURhdGVwaWNrZXIodGFyZ2V0LCBpbnN0KTtcblx0XHR9XG5cdH0sXG5cblx0LyogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9iamVjdC4gKi9cblx0X25ld0luc3Q6IGZ1bmN0aW9uKHRhcmdldCwgaW5saW5lKSB7XG5cdFx0dmFyIGlkID0gdGFyZ2V0WzBdLmlkLnJlcGxhY2UoLyhbXkEtWmEtejAtOV9cXC1dKS9nLCBcIlxcXFxcXFxcJDFcIik7IC8vIGVzY2FwZSBqUXVlcnkgbWV0YSBjaGFyc1xuXHRcdHJldHVybiB7aWQ6IGlkLCBpbnB1dDogdGFyZ2V0LCAvLyBhc3NvY2lhdGVkIHRhcmdldFxuXHRcdFx0c2VsZWN0ZWREYXk6IDAsIHNlbGVjdGVkTW9udGg6IDAsIHNlbGVjdGVkWWVhcjogMCwgLy8gY3VycmVudCBzZWxlY3Rpb25cblx0XHRcdGRyYXdNb250aDogMCwgZHJhd1llYXI6IDAsIC8vIG1vbnRoIGJlaW5nIGRyYXduXG5cdFx0XHRpbmxpbmU6IGlubGluZSwgLy8gaXMgZGF0ZXBpY2tlciBpbmxpbmUgb3Igbm90XG5cdFx0XHRkcERpdjogKCFpbmxpbmUgPyB0aGlzLmRwRGl2IDogLy8gcHJlc2VudGF0aW9uIGRpdlxuXHRcdFx0YmluZEhvdmVyKCQoXCI8ZGl2IGNsYXNzPSdcIiArIHRoaXMuX2lubGluZUNsYXNzICsgXCIgdWktZGF0ZXBpY2tlciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktaGVscGVyLWNsZWFyZml4IHVpLWNvcm5lci1hbGwnPjwvZGl2PlwiKSkpfTtcblx0fSxcblxuXHQvKiBBdHRhY2ggdGhlIGRhdGUgcGlja2VyIHRvIGFuIGlucHV0IGZpZWxkLiAqL1xuXHRfY29ubmVjdERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgaW5zdCkge1xuXHRcdHZhciBpbnB1dCA9ICQodGFyZ2V0KTtcblx0XHRpbnN0LmFwcGVuZCA9ICQoW10pO1xuXHRcdGluc3QudHJpZ2dlciA9ICQoW10pO1xuXHRcdGlmIChpbnB1dC5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fYXR0YWNobWVudHMoaW5wdXQsIGluc3QpO1xuXHRcdGlucHV0LmFkZENsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5rZXlkb3duKHRoaXMuX2RvS2V5RG93bikuXG5cdFx0XHRrZXlwcmVzcyh0aGlzLl9kb0tleVByZXNzKS5rZXl1cCh0aGlzLl9kb0tleVVwKTtcblx0XHR0aGlzLl9hdXRvU2l6ZShpbnN0KTtcblx0XHQkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUsIGluc3QpO1xuXHRcdC8vSWYgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUsIGRpc2FibGUgdGhlIGRhdGVwaWNrZXIgb25jZSBpdCBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgaW5wdXQgKHNlZSB0aWNrZXQgIzU2NjUpXG5cdFx0aWYoIGluc3Quc2V0dGluZ3MuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlciggdGFyZ2V0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIE1ha2UgYXR0YWNobWVudHMgYmFzZWQgb24gc2V0dGluZ3MuICovXG5cdF9hdHRhY2htZW50czogZnVuY3Rpb24oaW5wdXQsIGluc3QpIHtcblx0XHR2YXIgc2hvd09uLCBidXR0b25UZXh0LCBidXR0b25JbWFnZSxcblx0XHRcdGFwcGVuZFRleHQgPSB0aGlzLl9nZXQoaW5zdCwgXCJhcHBlbmRUZXh0XCIpLFxuXHRcdFx0aXNSVEwgPSB0aGlzLl9nZXQoaW5zdCwgXCJpc1JUTFwiKTtcblxuXHRcdGlmIChpbnN0LmFwcGVuZCkge1xuXHRcdFx0aW5zdC5hcHBlbmQucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdGlmIChhcHBlbmRUZXh0KSB7XG5cdFx0XHRpbnN0LmFwcGVuZCA9ICQoXCI8c3BhbiBjbGFzcz0nXCIgKyB0aGlzLl9hcHBlbmRDbGFzcyArIFwiJz5cIiArIGFwcGVuZFRleHQgKyBcIjwvc3Bhbj5cIik7XG5cdFx0XHRpbnB1dFtpc1JUTCA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCJdKGluc3QuYXBwZW5kKTtcblx0XHR9XG5cblx0XHRpbnB1dC51bmJpbmQoXCJmb2N1c1wiLCB0aGlzLl9zaG93RGF0ZXBpY2tlcik7XG5cblx0XHRpZiAoaW5zdC50cmlnZ2VyKSB7XG5cdFx0XHRpbnN0LnRyaWdnZXIucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0c2hvd09uID0gdGhpcy5fZ2V0KGluc3QsIFwic2hvd09uXCIpO1xuXHRcdGlmIChzaG93T24gPT09IFwiZm9jdXNcIiB8fCBzaG93T24gPT09IFwiYm90aFwiKSB7IC8vIHBvcC11cCBkYXRlIHBpY2tlciB3aGVuIGluIHRoZSBtYXJrZWQgZmllbGRcblx0XHRcdGlucHV0LmZvY3VzKHRoaXMuX3Nob3dEYXRlcGlja2VyKTtcblx0XHR9XG5cdFx0aWYgKHNob3dPbiA9PT0gXCJidXR0b25cIiB8fCBzaG93T24gPT09IFwiYm90aFwiKSB7IC8vIHBvcC11cCBkYXRlIHBpY2tlciB3aGVuIGJ1dHRvbiBjbGlja2VkXG5cdFx0XHRidXR0b25UZXh0ID0gdGhpcy5fZ2V0KGluc3QsIFwiYnV0dG9uVGV4dFwiKTtcblx0XHRcdGJ1dHRvbkltYWdlID0gdGhpcy5fZ2V0KGluc3QsIFwiYnV0dG9uSW1hZ2VcIik7XG5cdFx0XHRpbnN0LnRyaWdnZXIgPSAkKHRoaXMuX2dldChpbnN0LCBcImJ1dHRvbkltYWdlT25seVwiKSA/XG5cdFx0XHRcdCQoXCI8aW1nLz5cIikuYWRkQ2xhc3ModGhpcy5fdHJpZ2dlckNsYXNzKS5cblx0XHRcdFx0XHRhdHRyKHsgc3JjOiBidXR0b25JbWFnZSwgYWx0OiBidXR0b25UZXh0LCB0aXRsZTogYnV0dG9uVGV4dCB9KSA6XG5cdFx0XHRcdCQoXCI8YnV0dG9uIHR5cGU9J2J1dHRvbic+PC9idXR0b24+XCIpLmFkZENsYXNzKHRoaXMuX3RyaWdnZXJDbGFzcykuXG5cdFx0XHRcdFx0aHRtbCghYnV0dG9uSW1hZ2UgPyBidXR0b25UZXh0IDogJChcIjxpbWcvPlwiKS5hdHRyKFxuXHRcdFx0XHRcdHsgc3JjOmJ1dHRvbkltYWdlLCBhbHQ6YnV0dG9uVGV4dCwgdGl0bGU6YnV0dG9uVGV4dCB9KSkpO1xuXHRcdFx0aW5wdXRbaXNSVEwgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiXShpbnN0LnRyaWdnZXIpO1xuXHRcdFx0aW5zdC50cmlnZ2VyLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9PT0gaW5wdXRbMF0pIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCAhPT0gaW5wdXRbMF0pIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlcihpbnB1dFswXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlcihpbnB1dFswXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEFwcGx5IHRoZSBtYXhpbXVtIGxlbmd0aCBmb3IgdGhlIGRhdGUgZm9ybWF0LiAqL1xuXHRfYXV0b1NpemU6IGZ1bmN0aW9uKGluc3QpIHtcblx0XHRpZiAodGhpcy5fZ2V0KGluc3QsIFwiYXV0b1NpemVcIikgJiYgIWluc3QuaW5saW5lKSB7XG5cdFx0XHR2YXIgZmluZE1heCwgbWF4LCBtYXhJLCBpLFxuXHRcdFx0XHRkYXRlID0gbmV3IERhdGUoMjAwOSwgMTIgLSAxLCAyMCksIC8vIEVuc3VyZSBkb3VibGUgZGlnaXRzXG5cdFx0XHRcdGRhdGVGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgXCJkYXRlRm9ybWF0XCIpO1xuXG5cdFx0XHRpZiAoZGF0ZUZvcm1hdC5tYXRjaCgvW0RNXS8pKSB7XG5cdFx0XHRcdGZpbmRNYXggPSBmdW5jdGlvbihuYW1lcykge1xuXHRcdFx0XHRcdG1heCA9IDA7XG5cdFx0XHRcdFx0bWF4SSA9IDA7XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpZiAobmFtZXNbaV0ubGVuZ3RoID4gbWF4KSB7XG5cdFx0XHRcdFx0XHRcdG1heCA9IG5hbWVzW2ldLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0bWF4SSA9IGk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXhJO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRkYXRlLnNldE1vbnRoKGZpbmRNYXgodGhpcy5fZ2V0KGluc3QsIChkYXRlRm9ybWF0Lm1hdGNoKC9NTS8pID9cblx0XHRcdFx0XHRcIm1vbnRoTmFtZXNcIiA6IFwibW9udGhOYW1lc1Nob3J0XCIpKSkpO1xuXHRcdFx0XHRkYXRlLnNldERhdGUoZmluZE1heCh0aGlzLl9nZXQoaW5zdCwgKGRhdGVGb3JtYXQubWF0Y2goL0RELykgP1xuXHRcdFx0XHRcdFwiZGF5TmFtZXNcIiA6IFwiZGF5TmFtZXNTaG9ydFwiKSkpICsgMjAgLSBkYXRlLmdldERheSgpKTtcblx0XHRcdH1cblx0XHRcdGluc3QuaW5wdXQuYXR0cihcInNpemVcIiwgdGhpcy5fZm9ybWF0RGF0ZShpbnN0LCBkYXRlKS5sZW5ndGgpO1xuXHRcdH1cblx0fSxcblxuXHQvKiBBdHRhY2ggYW4gaW5saW5lIGRhdGUgcGlja2VyIHRvIGEgZGl2LiAqL1xuXHRfaW5saW5lRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBpbnN0KSB7XG5cdFx0dmFyIGRpdlNwYW4gPSAkKHRhcmdldCk7XG5cdFx0aWYgKGRpdlNwYW4uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGRpdlNwYW4uYWRkQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmFwcGVuZChpbnN0LmRwRGl2KTtcblx0XHQkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUsIGluc3QpO1xuXHRcdHRoaXMuX3NldERhdGUoaW5zdCwgdGhpcy5fZ2V0RGVmYXVsdERhdGUoaW5zdCksIHRydWUpO1xuXHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7XG5cdFx0dGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpO1xuXHRcdC8vSWYgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUsIGRpc2FibGUgdGhlIGRhdGVwaWNrZXIgYmVmb3JlIHNob3dpbmcgaXQgKHNlZSB0aWNrZXQgIzU2NjUpXG5cdFx0aWYoIGluc3Quc2V0dGluZ3MuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlciggdGFyZ2V0ICk7XG5cdFx0fVxuXHRcdC8vIFNldCBkaXNwbGF5OmJsb2NrIGluIHBsYWNlIG9mIGluc3QuZHBEaXYuc2hvdygpIHdoaWNoIHdvbid0IHdvcmsgb24gZGlzY29ubmVjdGVkIGVsZW1lbnRzXG5cdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5dWkuY29tL3RpY2tldC83NTUyIC0gQSBEYXRlcGlja2VyIGNyZWF0ZWQgb24gYSBkZXRhY2hlZCBkaXYgaGFzIHplcm8gaGVpZ2h0XG5cdFx0aW5zdC5kcERpdi5jc3MoIFwiZGlzcGxheVwiLCBcImJsb2NrXCIgKTtcblx0fSxcblxuXHQvKiBQb3AtdXAgdGhlIGRhdGUgcGlja2VyIGluIGEgXCJkaWFsb2dcIiBib3guXG5cdCAqIEBwYXJhbSAgaW5wdXQgZWxlbWVudCAtIGlnbm9yZWRcblx0ICogQHBhcmFtICBkYXRlXHRzdHJpbmcgb3IgRGF0ZSAtIHRoZSBpbml0aWFsIGRhdGUgdG8gZGlzcGxheVxuXHQgKiBAcGFyYW0gIG9uU2VsZWN0ICBmdW5jdGlvbiAtIHRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBkYXRlIGlzIHNlbGVjdGVkXG5cdCAqIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHVwZGF0ZSB0aGUgZGlhbG9nIGRhdGUgcGlja2VyIGluc3RhbmNlJ3Mgc2V0dGluZ3MgKGFub255bW91cyBvYmplY3QpXG5cdCAqIEBwYXJhbSAgcG9zIGludFsyXSAtIGNvb3JkaW5hdGVzIGZvciB0aGUgZGlhbG9nJ3MgcG9zaXRpb24gd2l0aGluIHRoZSBzY3JlZW4gb3Jcblx0ICpcdFx0XHRcdFx0ZXZlbnQgLSB3aXRoIHgveSBjb29yZGluYXRlcyBvclxuXHQgKlx0XHRcdFx0XHRsZWF2ZSBlbXB0eSBmb3IgZGVmYXVsdCAoc2NyZWVuIGNlbnRyZSlcblx0ICogQHJldHVybiB0aGUgbWFuYWdlciBvYmplY3Rcblx0ICovXG5cdF9kaWFsb2dEYXRlcGlja2VyOiBmdW5jdGlvbihpbnB1dCwgZGF0ZSwgb25TZWxlY3QsIHNldHRpbmdzLCBwb3MpIHtcblx0XHR2YXIgaWQsIGJyb3dzZXJXaWR0aCwgYnJvd3NlckhlaWdodCwgc2Nyb2xsWCwgc2Nyb2xsWSxcblx0XHRcdGluc3QgPSB0aGlzLl9kaWFsb2dJbnN0OyAvLyBpbnRlcm5hbCBpbnN0YW5jZVxuXG5cdFx0aWYgKCFpbnN0KSB7XG5cdFx0XHR0aGlzLnV1aWQgKz0gMTtcblx0XHRcdGlkID0gXCJkcFwiICsgdGhpcy51dWlkO1xuXHRcdFx0dGhpcy5fZGlhbG9nSW5wdXQgPSAkKFwiPGlucHV0IHR5cGU9J3RleHQnIGlkPSdcIiArIGlkICtcblx0XHRcdFx0XCInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPlwiKTtcblx0XHRcdHRoaXMuX2RpYWxvZ0lucHV0LmtleWRvd24odGhpcy5fZG9LZXlEb3duKTtcblx0XHRcdCQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLl9kaWFsb2dJbnB1dCk7XG5cdFx0XHRpbnN0ID0gdGhpcy5fZGlhbG9nSW5zdCA9IHRoaXMuX25ld0luc3QodGhpcy5fZGlhbG9nSW5wdXQsIGZhbHNlKTtcblx0XHRcdGluc3Quc2V0dGluZ3MgPSB7fTtcblx0XHRcdCQuZGF0YSh0aGlzLl9kaWFsb2dJbnB1dFswXSwgUFJPUF9OQU1FLCBpbnN0KTtcblx0XHR9XG5cdFx0ZXh0ZW5kUmVtb3ZlKGluc3Quc2V0dGluZ3MsIHNldHRpbmdzIHx8IHt9KTtcblx0XHRkYXRlID0gKGRhdGUgJiYgZGF0ZS5jb25zdHJ1Y3RvciA9PT0gRGF0ZSA/IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCwgZGF0ZSkgOiBkYXRlKTtcblx0XHR0aGlzLl9kaWFsb2dJbnB1dC52YWwoZGF0ZSk7XG5cblx0XHR0aGlzLl9wb3MgPSAocG9zID8gKHBvcy5sZW5ndGggPyBwb3MgOiBbcG9zLnBhZ2VYLCBwb3MucGFnZVldKSA6IG51bGwpO1xuXHRcdGlmICghdGhpcy5fcG9zKSB7XG5cdFx0XHRicm93c2VyV2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRicm93c2VySGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRcdHNjcm9sbFggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XG5cdFx0XHRzY3JvbGxZID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcblx0XHRcdHRoaXMuX3BvcyA9IC8vIHNob3VsZCB1c2UgYWN0dWFsIHdpZHRoL2hlaWdodCBiZWxvd1xuXHRcdFx0XHRbKGJyb3dzZXJXaWR0aCAvIDIpIC0gMTAwICsgc2Nyb2xsWCwgKGJyb3dzZXJIZWlnaHQgLyAyKSAtIDE1MCArIHNjcm9sbFldO1xuXHRcdH1cblxuXHRcdC8vIG1vdmUgaW5wdXQgb24gc2NyZWVuIGZvciBmb2N1cywgYnV0IGhpZGRlbiBiZWhpbmQgZGlhbG9nXG5cdFx0dGhpcy5fZGlhbG9nSW5wdXQuY3NzKFwibGVmdFwiLCAodGhpcy5fcG9zWzBdICsgMjApICsgXCJweFwiKS5jc3MoXCJ0b3BcIiwgdGhpcy5fcG9zWzFdICsgXCJweFwiKTtcblx0XHRpbnN0LnNldHRpbmdzLm9uU2VsZWN0ID0gb25TZWxlY3Q7XG5cdFx0dGhpcy5faW5EaWFsb2cgPSB0cnVlO1xuXHRcdHRoaXMuZHBEaXYuYWRkQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpO1xuXHRcdHRoaXMuX3Nob3dEYXRlcGlja2VyKHRoaXMuX2RpYWxvZ0lucHV0WzBdKTtcblx0XHRpZiAoJC5ibG9ja1VJKSB7XG5cdFx0XHQkLmJsb2NrVUkodGhpcy5kcERpdik7XG5cdFx0fVxuXHRcdCQuZGF0YSh0aGlzLl9kaWFsb2dJbnB1dFswXSwgUFJPUF9OQU1FLCBpbnN0KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHQvKiBEZXRhY2ggYSBkYXRlcGlja2VyIGZyb20gaXRzIGNvbnRyb2wuXG5cdCAqIEBwYXJhbSAgdGFyZ2V0XHRlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqL1xuXHRfZGVzdHJveURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHZhciBub2RlTmFtZSxcblx0XHRcdCR0YXJnZXQgPSAkKHRhcmdldCksXG5cdFx0XHRpbnN0ID0gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTtcblxuXHRcdGlmICghJHRhcmdldC5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdCQucmVtb3ZlRGF0YSh0YXJnZXQsIFBST1BfTkFNRSk7XG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIpIHtcblx0XHRcdGluc3QuYXBwZW5kLnJlbW92ZSgpO1xuXHRcdFx0aW5zdC50cmlnZ2VyLnJlbW92ZSgpO1xuXHRcdFx0JHRhcmdldC5yZW1vdmVDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkuXG5cdFx0XHRcdHVuYmluZChcImZvY3VzXCIsIHRoaXMuX3Nob3dEYXRlcGlja2VyKS5cblx0XHRcdFx0dW5iaW5kKFwia2V5ZG93blwiLCB0aGlzLl9kb0tleURvd24pLlxuXHRcdFx0XHR1bmJpbmQoXCJrZXlwcmVzc1wiLCB0aGlzLl9kb0tleVByZXNzKS5cblx0XHRcdFx0dW5iaW5kKFwia2V5dXBcIiwgdGhpcy5fZG9LZXlVcCk7XG5cdFx0fSBlbHNlIGlmIChub2RlTmFtZSA9PT0gXCJkaXZcIiB8fCBub2RlTmFtZSA9PT0gXCJzcGFuXCIpIHtcblx0XHRcdCR0YXJnZXQucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmVtcHR5KCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEVuYWJsZSB0aGUgZGF0ZSBwaWNrZXIgdG8gYSBqUXVlcnkgc2VsZWN0aW9uLlxuXHQgKiBAcGFyYW0gIHRhcmdldFx0ZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhblxuXHQgKi9cblx0X2VuYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHZhciBub2RlTmFtZSwgaW5saW5lLFxuXHRcdFx0JHRhcmdldCA9ICQodGFyZ2V0KSxcblx0XHRcdGluc3QgPSAkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUpO1xuXG5cdFx0aWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIpIHtcblx0XHRcdHRhcmdldC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0aW5zdC50cmlnZ2VyLmZpbHRlcihcImJ1dHRvblwiKS5cblx0XHRcdFx0ZWFjaChmdW5jdGlvbigpIHsgdGhpcy5kaXNhYmxlZCA9IGZhbHNlOyB9KS5lbmQoKS5cblx0XHRcdFx0ZmlsdGVyKFwiaW1nXCIpLmNzcyh7b3BhY2l0eTogXCIxLjBcIiwgY3Vyc29yOiBcIlwifSk7XG5cdFx0fSBlbHNlIGlmIChub2RlTmFtZSA9PT0gXCJkaXZcIiB8fCBub2RlTmFtZSA9PT0gXCJzcGFuXCIpIHtcblx0XHRcdGlubGluZSA9ICR0YXJnZXQuY2hpbGRyZW4oXCIuXCIgKyB0aGlzLl9pbmxpbmVDbGFzcyk7XG5cdFx0XHRpbmxpbmUuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcyhcInVpLXN0YXRlLWRpc2FibGVkXCIpO1xuXHRcdFx0aW5saW5lLmZpbmQoXCJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhclwiKS5cblx0XHRcdFx0cHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcblx0XHR9XG5cdFx0dGhpcy5fZGlzYWJsZWRJbnB1dHMgPSAkLm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cyxcblx0XHRcdGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT09IHRhcmdldCA/IG51bGwgOiB2YWx1ZSk7IH0pOyAvLyBkZWxldGUgZW50cnlcblx0fSxcblxuXHQvKiBEaXNhYmxlIHRoZSBkYXRlIHBpY2tlciB0byBhIGpRdWVyeSBzZWxlY3Rpb24uXG5cdCAqIEBwYXJhbSAgdGFyZ2V0XHRlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqL1xuXHRfZGlzYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHZhciBub2RlTmFtZSwgaW5saW5lLFxuXHRcdFx0JHRhcmdldCA9ICQodGFyZ2V0KSxcblx0XHRcdGluc3QgPSAkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUpO1xuXG5cdFx0aWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIpIHtcblx0XHRcdHRhcmdldC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpbnN0LnRyaWdnZXIuZmlsdGVyKFwiYnV0dG9uXCIpLlxuXHRcdFx0XHRlYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLmRpc2FibGVkID0gdHJ1ZTsgfSkuZW5kKCkuXG5cdFx0XHRcdGZpbHRlcihcImltZ1wiKS5jc3Moe29wYWNpdHk6IFwiMC41XCIsIGN1cnNvcjogXCJkZWZhdWx0XCJ9KTtcblx0XHR9IGVsc2UgaWYgKG5vZGVOYW1lID09PSBcImRpdlwiIHx8IG5vZGVOYW1lID09PSBcInNwYW5cIikge1xuXHRcdFx0aW5saW5lID0gJHRhcmdldC5jaGlsZHJlbihcIi5cIiArIHRoaXMuX2lubGluZUNsYXNzKTtcblx0XHRcdGlubGluZS5jaGlsZHJlbigpLmFkZENsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIik7XG5cdFx0XHRpbmxpbmUuZmluZChcInNlbGVjdC51aS1kYXRlcGlja2VyLW1vbnRoLCBzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyXCIpLlxuXHRcdFx0XHRwcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG5cdFx0fVxuXHRcdHRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAodGhpcy5fZGlzYWJsZWRJbnB1dHMsXG5cdFx0XHRmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gKHZhbHVlID09PSB0YXJnZXQgPyBudWxsIDogdmFsdWUpOyB9KTsgLy8gZGVsZXRlIGVudHJ5XG5cdFx0dGhpcy5fZGlzYWJsZWRJbnB1dHNbdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoXSA9IHRhcmdldDtcblx0fSxcblxuXHQvKiBJcyB0aGUgZmlyc3QgZmllbGQgaW4gYSBqUXVlcnkgY29sbGVjdGlvbiBkaXNhYmxlZCBhcyBhIGRhdGVwaWNrZXI/XG5cdCAqIEBwYXJhbSAgdGFyZ2V0XHRlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqIEByZXR1cm4gYm9vbGVhbiAtIHRydWUgaWYgZGlzYWJsZWQsIGZhbHNlIGlmIGVuYWJsZWRcblx0ICovXG5cdF9pc0Rpc2FibGVkRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0aWYgKCF0YXJnZXQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9kaXNhYmxlZElucHV0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHRoaXMuX2Rpc2FibGVkSW5wdXRzW2ldID09PSB0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvKiBSZXRyaWV2ZSB0aGUgaW5zdGFuY2UgZGF0YSBmb3IgdGhlIHRhcmdldCBjb250cm9sLlxuXHQgKiBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhblxuXHQgKiBAcmV0dXJuICBvYmplY3QgLSB0aGUgYXNzb2NpYXRlZCBpbnN0YW5jZSBkYXRhXG5cdCAqIEB0aHJvd3MgIGVycm9yIGlmIGEgalF1ZXJ5IHByb2JsZW0gZ2V0dGluZyBkYXRhXG5cdCAqL1xuXHRfZ2V0SW5zdDogZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiAkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUpO1xuXHRcdH1cblx0XHRjYXRjaCAoZXJyKSB7XG5cdFx0XHR0aHJvdyBcIk1pc3NpbmcgaW5zdGFuY2UgZGF0YSBmb3IgdGhpcyBkYXRlcGlja2VyXCI7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIFVwZGF0ZSBvciByZXRyaWV2ZSB0aGUgc2V0dGluZ3MgZm9yIGEgZGF0ZSBwaWNrZXIgYXR0YWNoZWQgdG8gYW4gaW5wdXQgZmllbGQgb3IgZGl2aXNpb24uXG5cdCAqIEBwYXJhbSAgdGFyZ2V0ICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqIEBwYXJhbSAgbmFtZVx0b2JqZWN0IC0gdGhlIG5ldyBzZXR0aW5ncyB0byB1cGRhdGUgb3Jcblx0ICpcdFx0XHRcdHN0cmluZyAtIHRoZSBuYW1lIG9mIHRoZSBzZXR0aW5nIHRvIGNoYW5nZSBvciByZXRyaWV2ZSxcblx0ICpcdFx0XHRcdHdoZW4gcmV0cmlldmluZyBhbHNvIFwiYWxsXCIgZm9yIGFsbCBpbnN0YW5jZSBzZXR0aW5ncyBvclxuXHQgKlx0XHRcdFx0XCJkZWZhdWx0c1wiIGZvciBhbGwgZ2xvYmFsIGRlZmF1bHRzXG5cdCAqIEBwYXJhbSAgdmFsdWUgICBhbnkgLSB0aGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZ1xuXHQgKlx0XHRcdFx0KG9taXQgaWYgYWJvdmUgaXMgYW4gb2JqZWN0IG9yIHRvIHJldHJpZXZlIGEgdmFsdWUpXG5cdCAqL1xuXHRfb3B0aW9uRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCB2YWx1ZSkge1xuXHRcdHZhciBzZXR0aW5ncywgZGF0ZSwgbWluRGF0ZSwgbWF4RGF0ZSxcblx0XHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldCk7XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIChuYW1lID09PSBcImRlZmF1bHRzXCIgPyAkLmV4dGVuZCh7fSwgJC5kYXRlcGlja2VyLl9kZWZhdWx0cykgOlxuXHRcdFx0XHQoaW5zdCA/IChuYW1lID09PSBcImFsbFwiID8gJC5leHRlbmQoe30sIGluc3Quc2V0dGluZ3MpIDpcblx0XHRcdFx0dGhpcy5fZ2V0KGluc3QsIG5hbWUpKSA6IG51bGwpKTtcblx0XHR9XG5cblx0XHRzZXR0aW5ncyA9IG5hbWUgfHwge307XG5cdFx0aWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRzZXR0aW5ncyA9IHt9O1xuXHRcdFx0c2V0dGluZ3NbbmFtZV0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoaW5zdCkge1xuXHRcdFx0aWYgKHRoaXMuX2N1ckluc3QgPT09IGluc3QpIHtcblx0XHRcdFx0dGhpcy5faGlkZURhdGVwaWNrZXIoKTtcblx0XHRcdH1cblxuXHRcdFx0ZGF0ZSA9IHRoaXMuX2dldERhdGVEYXRlcGlja2VyKHRhcmdldCwgdHJ1ZSk7XG5cdFx0XHRtaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCBcIm1pblwiKTtcblx0XHRcdG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsIFwibWF4XCIpO1xuXHRcdFx0ZXh0ZW5kUmVtb3ZlKGluc3Quc2V0dGluZ3MsIHNldHRpbmdzKTtcblx0XHRcdC8vIHJlZm9ybWF0IHRoZSBvbGQgbWluRGF0ZS9tYXhEYXRlIHZhbHVlcyBpZiBkYXRlRm9ybWF0IGNoYW5nZXMgYW5kIGEgbmV3IG1pbkRhdGUvbWF4RGF0ZSBpc24ndCBwcm92aWRlZFxuXHRcdFx0aWYgKG1pbkRhdGUgIT09IG51bGwgJiYgc2V0dGluZ3MuZGF0ZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm1pbkRhdGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRpbnN0LnNldHRpbmdzLm1pbkRhdGUgPSB0aGlzLl9mb3JtYXREYXRlKGluc3QsIG1pbkRhdGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1heERhdGUgIT09IG51bGwgJiYgc2V0dGluZ3MuZGF0ZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm1heERhdGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRpbnN0LnNldHRpbmdzLm1heERhdGUgPSB0aGlzLl9mb3JtYXREYXRlKGluc3QsIG1heERhdGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBcImRpc2FibGVkXCIgaW4gc2V0dGluZ3MgKSB7XG5cdFx0XHRcdGlmICggc2V0dGluZ3MuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZGlzYWJsZURhdGVwaWNrZXIodGFyZ2V0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9lbmFibGVEYXRlcGlja2VyKHRhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2F0dGFjaG1lbnRzKCQodGFyZ2V0KSwgaW5zdCk7XG5cdFx0XHR0aGlzLl9hdXRvU2l6ZShpbnN0KTtcblx0XHRcdHRoaXMuX3NldERhdGUoaW5zdCwgZGF0ZSk7XG5cdFx0XHR0aGlzLl91cGRhdGVBbHRlcm5hdGUoaW5zdCk7XG5cdFx0XHR0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBjaGFuZ2UgbWV0aG9kIGRlcHJlY2F0ZWRcblx0X2NoYW5nZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgdmFsdWUpIHtcblx0XHR0aGlzLl9vcHRpb25EYXRlcGlja2VyKHRhcmdldCwgbmFtZSwgdmFsdWUpO1xuXHR9LFxuXG5cdC8qIFJlZHJhdyB0aGUgZGF0ZSBwaWNrZXIgYXR0YWNoZWQgdG8gYW4gaW5wdXQgZmllbGQgb3IgZGl2aXNpb24uXG5cdCAqIEBwYXJhbSAgdGFyZ2V0ICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqL1xuXHRfcmVmcmVzaERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpO1xuXHRcdGlmIChpbnN0KSB7XG5cdFx0XHR0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpO1xuXHRcdH1cblx0fSxcblxuXHQvKiBTZXQgdGhlIGRhdGVzIGZvciBhIGpRdWVyeSBzZWxlY3Rpb24uXG5cdCAqIEBwYXJhbSAgdGFyZ2V0IGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICogQHBhcmFtICBkYXRlXHREYXRlIC0gdGhlIG5ldyBkYXRlXG5cdCAqL1xuXHRfc2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgZGF0ZSkge1xuXHRcdHZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpO1xuXHRcdGlmIChpbnN0KSB7XG5cdFx0XHR0aGlzLl9zZXREYXRlKGluc3QsIGRhdGUpO1xuXHRcdFx0dGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTtcblx0XHRcdHRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpbnN0KTtcblx0XHR9XG5cdH0sXG5cblx0LyogR2V0IHRoZSBkYXRlKHMpIGZvciB0aGUgZmlyc3QgZW50cnkgaW4gYSBqUXVlcnkgc2VsZWN0aW9uLlxuXHQgKiBAcGFyYW0gIHRhcmdldCBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqIEBwYXJhbSAgbm9EZWZhdWx0IGJvb2xlYW4gLSB0cnVlIGlmIG5vIGRlZmF1bHQgZGF0ZSBpcyB0byBiZSB1c2VkXG5cdCAqIEByZXR1cm4gRGF0ZSAtIHRoZSBjdXJyZW50IGRhdGVcblx0ICovXG5cdF9nZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBub0RlZmF1bHQpIHtcblx0XHR2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0KTtcblx0XHRpZiAoaW5zdCAmJiAhaW5zdC5pbmxpbmUpIHtcblx0XHRcdHRoaXMuX3NldERhdGVGcm9tRmllbGQoaW5zdCwgbm9EZWZhdWx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIChpbnN0ID8gdGhpcy5fZ2V0RGF0ZShpbnN0KSA6IG51bGwpO1xuXHR9LFxuXG5cdC8qIEhhbmRsZSBrZXlzdHJva2VzLiAqL1xuXHRfZG9LZXlEb3duOiBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBvblNlbGVjdCwgZGF0ZVN0ciwgc2VsLFxuXHRcdFx0aW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChldmVudC50YXJnZXQpLFxuXHRcdFx0aGFuZGxlZCA9IHRydWUsXG5cdFx0XHRpc1JUTCA9IGluc3QuZHBEaXYuaXMoXCIudWktZGF0ZXBpY2tlci1ydGxcIik7XG5cblx0XHRpbnN0Ll9rZXlFdmVudCA9IHRydWU7XG5cdFx0aWYgKCQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcpIHtcblx0XHRcdHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuXHRcdFx0XHRjYXNlIDk6ICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGJyZWFrOyAvLyBoaWRlIG9uIHRhYiBvdXRcblx0XHRcdFx0Y2FzZSAxMzogc2VsID0gJChcInRkLlwiICsgJC5kYXRlcGlja2VyLl9kYXlPdmVyQ2xhc3MgKyBcIjpub3QoLlwiICtcblx0XHRcdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fY3VycmVudENsYXNzICsgXCIpXCIsIGluc3QuZHBEaXYpO1xuXHRcdFx0XHRcdFx0aWYgKHNlbFswXSkge1xuXHRcdFx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3NlbGVjdERheShldmVudC50YXJnZXQsIGluc3Quc2VsZWN0ZWRNb250aCwgaW5zdC5zZWxlY3RlZFllYXIsIHNlbFswXSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG9uU2VsZWN0ID0gJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJvblNlbGVjdFwiKTtcblx0XHRcdFx0XHRcdGlmIChvblNlbGVjdCkge1xuXHRcdFx0XHRcdFx0XHRkYXRlU3RyID0gJC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKGluc3QpO1xuXG5cdFx0XHRcdFx0XHRcdC8vIHRyaWdnZXIgY3VzdG9tIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRcdG9uU2VsZWN0LmFwcGx5KChpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFswXSA6IG51bGwpLCBbZGF0ZVN0ciwgaW5zdF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGRvbid0IHN1Ym1pdCB0aGUgZm9ybVxuXHRcdFx0XHRjYXNlIDI3OiAkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gaGlkZSBvbiBlc2NhcGVcblx0XHRcdFx0Y2FzZSAzMzogJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGV2ZW50LmN0cmxLZXkgP1xuXHRcdFx0XHRcdFx0XHQtJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJzdGVwQmlnTW9udGhzXCIpIDpcblx0XHRcdFx0XHRcdFx0LSQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsIFwic3RlcE1vbnRoc1wiKSksIFwiTVwiKTtcblx0XHRcdFx0XHRcdGJyZWFrOyAvLyBwcmV2aW91cyBtb250aC95ZWFyIG9uIHBhZ2UgdXAvKyBjdHJsXG5cdFx0XHRcdGNhc2UgMzQ6ICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChldmVudC5jdHJsS2V5ID9cblx0XHRcdFx0XHRcdFx0KyQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsIFwic3RlcEJpZ01vbnRoc1wiKSA6XG5cdFx0XHRcdFx0XHRcdCskLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcInN0ZXBNb250aHNcIikpLCBcIk1cIik7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gbmV4dCBtb250aC95ZWFyIG9uIHBhZ2UgZG93bi8rIGN0cmxcblx0XHRcdFx0Y2FzZSAzNTogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkge1xuXHRcdFx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2NsZWFyRGF0ZShldmVudC50YXJnZXQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcblx0XHRcdFx0XHRcdGJyZWFrOyAvLyBjbGVhciBvbiBjdHJsIG9yIGNvbW1hbmQgK2VuZFxuXHRcdFx0XHRjYXNlIDM2OiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fZ290b1RvZGF5KGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRoYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5O1xuXHRcdFx0XHRcdFx0YnJlYWs7IC8vIGN1cnJlbnQgb24gY3RybCBvciBjb21tYW5kICtob21lXG5cdFx0XHRcdGNhc2UgMzc6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGlzUlRMID8gKzEgOiAtMSksIFwiRFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHQvLyAtMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtsZWZ0XG5cdFx0XHRcdFx0XHRpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkpIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGV2ZW50LmN0cmxLZXkgP1xuXHRcdFx0XHRcdFx0XHRcdC0kLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcInN0ZXBCaWdNb250aHNcIikgOlxuXHRcdFx0XHRcdFx0XHRcdC0kLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcInN0ZXBNb250aHNcIikpLCBcIk1cIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBuZXh0IG1vbnRoL3llYXIgb24gYWx0ICtsZWZ0IG9uIE1hY1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzg6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgLTcsIFwiRFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gLTEgd2VlayBvbiBjdHJsIG9yIGNvbW1hbmQgK3VwXG5cdFx0XHRcdGNhc2UgMzk6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGlzUlRMID8gLTEgOiArMSksIFwiRFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHQvLyArMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtyaWdodFxuXHRcdFx0XHRcdFx0aWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQuYWx0S2V5KSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChldmVudC5jdHJsS2V5ID9cblx0XHRcdFx0XHRcdFx0XHQrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJzdGVwQmlnTW9udGhzXCIpIDpcblx0XHRcdFx0XHRcdFx0XHQrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJzdGVwTW9udGhzXCIpKSwgXCJNXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gbmV4dCBtb250aC95ZWFyIG9uIGFsdCArcmlnaHRcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDQwOiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsICs3LCBcIkRcIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRoYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5O1xuXHRcdFx0XHRcdFx0YnJlYWs7IC8vICsxIHdlZWsgb24gY3RybCBvciBjb21tYW5kICtkb3duXG5cdFx0XHRcdGRlZmF1bHQ6IGhhbmRsZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM2ICYmIGV2ZW50LmN0cmxLZXkpIHsgLy8gZGlzcGxheSB0aGUgZGF0ZSBwaWNrZXIgb24gY3RybCtob21lXG5cdFx0XHQkLmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoYW5kbGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKGhhbmRsZWQpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cblx0LyogRmlsdGVyIGVudGVyZWQgY2hhcmFjdGVycyAtIGJhc2VkIG9uIGRhdGUgZm9ybWF0LiAqL1xuXHRfZG9LZXlQcmVzczogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgY2hhcnMsIGNocixcblx0XHRcdGluc3QgPSAkLmRhdGVwaWNrZXIuX2dldEluc3QoZXZlbnQudGFyZ2V0KTtcblxuXHRcdGlmICgkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcImNvbnN0cmFpbklucHV0XCIpKSB7XG5cdFx0XHRjaGFycyA9ICQuZGF0ZXBpY2tlci5fcG9zc2libGVDaGFycygkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcImRhdGVGb3JtYXRcIikpO1xuXHRcdFx0Y2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC5jaGFyQ29kZSA9PSBudWxsID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LmNoYXJDb2RlKTtcblx0XHRcdHJldHVybiBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgKGNociA8IFwiIFwiIHx8ICFjaGFycyB8fCBjaGFycy5pbmRleE9mKGNocikgPiAtMSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIFN5bmNocm9uaXNlIG1hbnVhbCBlbnRyeSBhbmQgZmllbGQvYWx0ZXJuYXRlIGZpZWxkLiAqL1xuXHRfZG9LZXlVcDogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgZGF0ZSxcblx0XHRcdGluc3QgPSAkLmRhdGVwaWNrZXIuX2dldEluc3QoZXZlbnQudGFyZ2V0KTtcblxuXHRcdGlmIChpbnN0LmlucHV0LnZhbCgpICE9PSBpbnN0Lmxhc3RWYWwpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGUgPSAkLmRhdGVwaWNrZXIucGFyc2VEYXRlKCQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsIFwiZGF0ZUZvcm1hdFwiKSxcblx0XHRcdFx0XHQoaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsKSxcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7XG5cblx0XHRcdFx0aWYgKGRhdGUpIHsgLy8gb25seSBpZiB2YWxpZFxuXHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZChpbnN0KTtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3VwZGF0ZUFsdGVybmF0ZShpbnN0KTtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0LyogUG9wLXVwIHRoZSBkYXRlIHBpY2tlciBmb3IgYSBnaXZlbiBpbnB1dCBmaWVsZC5cblx0ICogSWYgZmFsc2UgcmV0dXJuZWQgZnJvbSBiZWZvcmVTaG93IGV2ZW50IGhhbmRsZXIgZG8gbm90IHNob3cuXG5cdCAqIEBwYXJhbSAgaW5wdXQgIGVsZW1lbnQgLSB0aGUgaW5wdXQgZmllbGQgYXR0YWNoZWQgdG8gdGhlIGRhdGUgcGlja2VyIG9yXG5cdCAqXHRcdFx0XHRcdGV2ZW50IC0gaWYgdHJpZ2dlcmVkIGJ5IGZvY3VzXG5cdCAqL1xuXHRfc2hvd0RhdGVwaWNrZXI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0aW5wdXQgPSBpbnB1dC50YXJnZXQgfHwgaW5wdXQ7XG5cdFx0aWYgKGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwiaW5wdXRcIikgeyAvLyBmaW5kIGZyb20gYnV0dG9uL2ltYWdlIHRyaWdnZXJcblx0XHRcdGlucHV0ID0gJChcImlucHV0XCIsIGlucHV0LnBhcmVudE5vZGUpWzBdO1xuXHRcdH1cblxuXHRcdGlmICgkLmRhdGVwaWNrZXIuX2lzRGlzYWJsZWREYXRlcGlja2VyKGlucHV0KSB8fCAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9PT0gaW5wdXQpIHsgLy8gYWxyZWFkeSBoZXJlXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGluc3QsIGJlZm9yZVNob3csIGJlZm9yZVNob3dTZXR0aW5ncywgaXNGaXhlZCxcblx0XHRcdG9mZnNldCwgc2hvd0FuaW0sIGR1cmF0aW9uO1xuXG5cdFx0aW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChpbnB1dCk7XG5cdFx0aWYgKCQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJiAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT09IGluc3QpIHtcblx0XHRcdCQuZGF0ZXBpY2tlci5fY3VySW5zdC5kcERpdi5zdG9wKHRydWUsIHRydWUpO1xuXHRcdFx0aWYgKCBpbnN0ICYmICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgKSB7XG5cdFx0XHRcdCQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoICQuZGF0ZXBpY2tlci5fY3VySW5zdC5pbnB1dFswXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGJlZm9yZVNob3cgPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcImJlZm9yZVNob3dcIik7XG5cdFx0YmVmb3JlU2hvd1NldHRpbmdzID0gYmVmb3JlU2hvdyA/IGJlZm9yZVNob3cuYXBwbHkoaW5wdXQsIFtpbnB1dCwgaW5zdF0pIDoge307XG5cdFx0aWYoYmVmb3JlU2hvd1NldHRpbmdzID09PSBmYWxzZSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV4dGVuZFJlbW92ZShpbnN0LnNldHRpbmdzLCBiZWZvcmVTaG93U2V0dGluZ3MpO1xuXG5cdFx0aW5zdC5sYXN0VmFsID0gbnVsbDtcblx0XHQkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9IGlucHV0O1xuXHRcdCQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZChpbnN0KTtcblxuXHRcdGlmICgkLmRhdGVwaWNrZXIuX2luRGlhbG9nKSB7IC8vIGhpZGUgY3Vyc29yXG5cdFx0XHRpbnB1dC52YWx1ZSA9IFwiXCI7XG5cdFx0fVxuXHRcdGlmICghJC5kYXRlcGlja2VyLl9wb3MpIHsgLy8gcG9zaXRpb24gYmVsb3cgaW5wdXRcblx0XHRcdCQuZGF0ZXBpY2tlci5fcG9zID0gJC5kYXRlcGlja2VyLl9maW5kUG9zKGlucHV0KTtcblx0XHRcdCQuZGF0ZXBpY2tlci5fcG9zWzFdICs9IGlucHV0Lm9mZnNldEhlaWdodDsgLy8gYWRkIHRoZSBoZWlnaHRcblx0XHR9XG5cblx0XHRpc0ZpeGVkID0gZmFsc2U7XG5cdFx0JChpbnB1dCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpc0ZpeGVkIHw9ICQodGhpcykuY3NzKFwicG9zaXRpb25cIikgPT09IFwiZml4ZWRcIjtcblx0XHRcdHJldHVybiAhaXNGaXhlZDtcblx0XHR9KTtcblxuXHRcdG9mZnNldCA9IHtsZWZ0OiAkLmRhdGVwaWNrZXIuX3Bvc1swXSwgdG9wOiAkLmRhdGVwaWNrZXIuX3Bvc1sxXX07XG5cdFx0JC5kYXRlcGlja2VyLl9wb3MgPSBudWxsO1xuXHRcdC8vdG8gYXZvaWQgZmxhc2hlcyBvbiBGaXJlZm94XG5cdFx0aW5zdC5kcERpdi5lbXB0eSgpO1xuXHRcdC8vIGRldGVybWluZSBzaXppbmcgb2Zmc2NyZWVuXG5cdFx0aW5zdC5kcERpdi5jc3Moe3Bvc2l0aW9uOiBcImFic29sdXRlXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiwgdG9wOiBcIi0xMDAwcHhcIn0pO1xuXHRcdCQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTtcblx0XHQvLyBmaXggd2lkdGggZm9yIGR5bmFtaWMgbnVtYmVyIG9mIGRhdGUgcGlja2Vyc1xuXHRcdC8vIGFuZCBhZGp1c3QgcG9zaXRpb24gYmVmb3JlIHNob3dpbmdcblx0XHRvZmZzZXQgPSAkLmRhdGVwaWNrZXIuX2NoZWNrT2Zmc2V0KGluc3QsIG9mZnNldCwgaXNGaXhlZCk7XG5cdFx0aW5zdC5kcERpdi5jc3Moe3Bvc2l0aW9uOiAoJC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiAkLmJsb2NrVUkgP1xuXHRcdFx0XCJzdGF0aWNcIiA6IChpc0ZpeGVkID8gXCJmaXhlZFwiIDogXCJhYnNvbHV0ZVwiKSksIGRpc3BsYXk6IFwibm9uZVwiLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgKyBcInB4XCIsIHRvcDogb2Zmc2V0LnRvcCArIFwicHhcIn0pO1xuXG5cdFx0aWYgKCFpbnN0LmlubGluZSkge1xuXHRcdFx0c2hvd0FuaW0gPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcInNob3dBbmltXCIpO1xuXHRcdFx0ZHVyYXRpb24gPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcImR1cmF0aW9uXCIpO1xuXHRcdFx0aW5zdC5kcERpdi56SW5kZXgoJChpbnB1dCkuekluZGV4KCkrMSk7XG5cdFx0XHQkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCAkLmVmZmVjdHMgJiYgJC5lZmZlY3RzLmVmZmVjdFsgc2hvd0FuaW0gXSApIHtcblx0XHRcdFx0aW5zdC5kcERpdi5zaG93KHNob3dBbmltLCAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCBcInNob3dPcHRpb25zXCIpLCBkdXJhdGlvbik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbnN0LmRwRGl2W3Nob3dBbmltIHx8IFwic2hvd1wiXShzaG93QW5pbSA/IGR1cmF0aW9uIDogbnVsbCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpbnN0LmlucHV0LmlzKFwiOnZpc2libGVcIikgJiYgIWluc3QuaW5wdXQuaXMoXCI6ZGlzYWJsZWRcIikpIHtcblx0XHRcdFx0aW5zdC5pbnB1dC5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdFx0JC5kYXRlcGlja2VyLl9jdXJJbnN0ID0gaW5zdDtcblx0XHR9XG5cdH0sXG5cblx0LyogR2VuZXJhdGUgdGhlIGRhdGUgcGlja2VyIGNvbnRlbnQuICovXG5cdF91cGRhdGVEYXRlcGlja2VyOiBmdW5jdGlvbihpbnN0KSB7XG5cdFx0dGhpcy5tYXhSb3dzID0gNDsgLy9SZXNldCB0aGUgbWF4IG51bWJlciBvZiByb3dzIGJlaW5nIGRpc3BsYXllZCAoc2VlICM3MDQzKVxuXHRcdGluc3RBY3RpdmUgPSBpbnN0OyAvLyBmb3IgZGVsZWdhdGUgaG92ZXIgZXZlbnRzXG5cdFx0aW5zdC5kcERpdi5lbXB0eSgpLmFwcGVuZCh0aGlzLl9nZW5lcmF0ZUhUTUwoaW5zdCkpO1xuXHRcdHRoaXMuX2F0dGFjaEhhbmRsZXJzKGluc3QpO1xuXHRcdGluc3QuZHBEaXYuZmluZChcIi5cIiArIHRoaXMuX2RheU92ZXJDbGFzcyArIFwiIGFcIikubW91c2VvdmVyKCk7XG5cblx0XHR2YXIgb3JpZ3llYXJzaHRtbCxcblx0XHRcdG51bU1vbnRocyA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGluc3QpLFxuXHRcdFx0Y29scyA9IG51bU1vbnRoc1sxXSxcblx0XHRcdHdpZHRoID0gMTc7XG5cblx0XHRpbnN0LmRwRGl2LnJlbW92ZUNsYXNzKFwidWktZGF0ZXBpY2tlci1tdWx0aS0yIHVpLWRhdGVwaWNrZXItbXVsdGktMyB1aS1kYXRlcGlja2VyLW11bHRpLTRcIikud2lkdGgoXCJcIik7XG5cdFx0aWYgKGNvbHMgPiAxKSB7XG5cdFx0XHRpbnN0LmRwRGl2LmFkZENsYXNzKFwidWktZGF0ZXBpY2tlci1tdWx0aS1cIiArIGNvbHMpLmNzcyhcIndpZHRoXCIsICh3aWR0aCAqIGNvbHMpICsgXCJlbVwiKTtcblx0XHR9XG5cdFx0aW5zdC5kcERpdlsobnVtTW9udGhzWzBdICE9PSAxIHx8IG51bU1vbnRoc1sxXSAhPT0gMSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiKSArXG5cdFx0XHRcIkNsYXNzXCJdKFwidWktZGF0ZXBpY2tlci1tdWx0aVwiKTtcblx0XHRpbnN0LmRwRGl2Wyh0aGlzLl9nZXQoaW5zdCwgXCJpc1JUTFwiKSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiKSArXG5cdFx0XHRcIkNsYXNzXCJdKFwidWktZGF0ZXBpY2tlci1ydGxcIik7XG5cblx0XHQvLyAjNjY5NCAtIGRvbid0IGZvY3VzIHRoZSBpbnB1dCBpZiBpdCdzIGFscmVhZHkgZm9jdXNlZFxuXHRcdC8vIHRoaXMgYnJlYWtzIHRoZSBjaGFuZ2UgZXZlbnQgaW4gSUVcblx0XHRpZiAoaW5zdCA9PT0gJC5kYXRlcGlja2VyLl9jdXJJbnN0ICYmICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgaW5zdC5pbnB1dCAmJlxuXHRcdFx0aW5zdC5pbnB1dC5pcyhcIjp2aXNpYmxlXCIpICYmICFpbnN0LmlucHV0LmlzKFwiOmRpc2FibGVkXCIpICYmIGluc3QuaW5wdXRbMF0gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcblx0XHRcdGluc3QuaW5wdXQuZm9jdXMoKTtcblx0XHR9XG5cblx0XHQvLyBkZWZmZXJlZCByZW5kZXIgb2YgdGhlIHllYXJzIHNlbGVjdCAodG8gYXZvaWQgZmxhc2hlcyBvbiBGaXJlZm94KVxuXHRcdGlmKCBpbnN0LnllYXJzaHRtbCApe1xuXHRcdFx0b3JpZ3llYXJzaHRtbCA9IGluc3QueWVhcnNodG1sO1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHQvL2Fzc3VyZSB0aGF0IGluc3QueWVhcnNodG1sIGRpZG4ndCBjaGFuZ2UuXG5cdFx0XHRcdGlmKCBvcmlneWVhcnNodG1sID09PSBpbnN0LnllYXJzaHRtbCAmJiBpbnN0LnllYXJzaHRtbCApe1xuXHRcdFx0XHRcdGluc3QuZHBEaXYuZmluZChcInNlbGVjdC51aS1kYXRlcGlja2VyLXllYXI6Zmlyc3RcIikucmVwbGFjZVdpdGgoaW5zdC55ZWFyc2h0bWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWd5ZWFyc2h0bWwgPSBpbnN0LnllYXJzaHRtbCA9IG51bGw7XG5cdFx0XHR9LCAwKTtcblx0XHR9XG5cdH0sXG5cblx0LyogUmV0cmlldmUgdGhlIHNpemUgb2YgbGVmdCBhbmQgdG9wIGJvcmRlcnMgZm9yIGFuIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSAgZWxlbSAgKGpRdWVyeSBvYmplY3QpIHRoZSBlbGVtZW50IG9mIGludGVyZXN0XG5cdCAqIEByZXR1cm4gIChudW1iZXJbMl0pIHRoZSBsZWZ0IGFuZCB0b3AgYm9yZGVyc1xuXHQgKi9cblx0X2dldEJvcmRlcnM6IGZ1bmN0aW9uKGVsZW0pIHtcblx0XHR2YXIgY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4ge3RoaW46IDEsIG1lZGl1bTogMiwgdGhpY2s6IDN9W3ZhbHVlXSB8fCB2YWx1ZTtcblx0XHR9O1xuXHRcdHJldHVybiBbcGFyc2VGbG9hdChjb252ZXJ0KGVsZW0uY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikpKSxcblx0XHRcdHBhcnNlRmxvYXQoY29udmVydChlbGVtLmNzcyhcImJvcmRlci10b3Atd2lkdGhcIikpKV07XG5cdH0sXG5cblx0LyogQ2hlY2sgcG9zaXRpb25pbmcgdG8gcmVtYWluIG9uIHNjcmVlbi4gKi9cblx0X2NoZWNrT2Zmc2V0OiBmdW5jdGlvbihpbnN0LCBvZmZzZXQsIGlzRml4ZWQpIHtcblx0XHR2YXIgZHBXaWR0aCA9IGluc3QuZHBEaXYub3V0ZXJXaWR0aCgpLFxuXHRcdFx0ZHBIZWlnaHQgPSBpbnN0LmRwRGl2Lm91dGVySGVpZ2h0KCksXG5cdFx0XHRpbnB1dFdpZHRoID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQub3V0ZXJXaWR0aCgpIDogMCxcblx0XHRcdGlucHV0SGVpZ2h0ID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQub3V0ZXJIZWlnaHQoKSA6IDAsXG5cdFx0XHR2aWV3V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggKyAoaXNGaXhlZCA/IDAgOiAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpLFxuXHRcdFx0dmlld0hlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgKyAoaXNGaXhlZCA/IDAgOiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSk7XG5cblx0XHRvZmZzZXQubGVmdCAtPSAodGhpcy5fZ2V0KGluc3QsIFwiaXNSVExcIikgPyAoZHBXaWR0aCAtIGlucHV0V2lkdGgpIDogMCk7XG5cdFx0b2Zmc2V0LmxlZnQgLT0gKGlzRml4ZWQgJiYgb2Zmc2V0LmxlZnQgPT09IGluc3QuaW5wdXQub2Zmc2V0KCkubGVmdCkgPyAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgOiAwO1xuXHRcdG9mZnNldC50b3AgLT0gKGlzRml4ZWQgJiYgb2Zmc2V0LnRvcCA9PT0gKGluc3QuaW5wdXQub2Zmc2V0KCkudG9wICsgaW5wdXRIZWlnaHQpKSA/ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIDogMDtcblxuXHRcdC8vIG5vdyBjaGVjayBpZiBkYXRlcGlja2VyIGlzIHNob3dpbmcgb3V0c2lkZSB3aW5kb3cgdmlld3BvcnQgLSBtb3ZlIHRvIGEgYmV0dGVyIHBsYWNlIGlmIHNvLlxuXHRcdG9mZnNldC5sZWZ0IC09IE1hdGgubWluKG9mZnNldC5sZWZ0LCAob2Zmc2V0LmxlZnQgKyBkcFdpZHRoID4gdmlld1dpZHRoICYmIHZpZXdXaWR0aCA+IGRwV2lkdGgpID9cblx0XHRcdE1hdGguYWJzKG9mZnNldC5sZWZ0ICsgZHBXaWR0aCAtIHZpZXdXaWR0aCkgOiAwKTtcblx0XHRvZmZzZXQudG9wIC09IE1hdGgubWluKG9mZnNldC50b3AsIChvZmZzZXQudG9wICsgZHBIZWlnaHQgPiB2aWV3SGVpZ2h0ICYmIHZpZXdIZWlnaHQgPiBkcEhlaWdodCkgP1xuXHRcdFx0TWF0aC5hYnMoZHBIZWlnaHQgKyBpbnB1dEhlaWdodCkgOiAwKTtcblxuXHRcdHJldHVybiBvZmZzZXQ7XG5cdH0sXG5cblx0LyogRmluZCBhbiBvYmplY3QncyBwb3NpdGlvbiBvbiB0aGUgc2NyZWVuLiAqL1xuXHRfZmluZFBvczogZnVuY3Rpb24ob2JqKSB7XG5cdFx0dmFyIHBvc2l0aW9uLFxuXHRcdFx0aW5zdCA9IHRoaXMuX2dldEluc3Qob2JqKSxcblx0XHRcdGlzUlRMID0gdGhpcy5fZ2V0KGluc3QsIFwiaXNSVExcIik7XG5cblx0XHR3aGlsZSAob2JqICYmIChvYmoudHlwZSA9PT0gXCJoaWRkZW5cIiB8fCBvYmoubm9kZVR5cGUgIT09IDEgfHwgJC5leHByLmZpbHRlcnMuaGlkZGVuKG9iaikpKSB7XG5cdFx0XHRvYmogPSBvYmpbaXNSVEwgPyBcInByZXZpb3VzU2libGluZ1wiIDogXCJuZXh0U2libGluZ1wiXTtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9ICQob2JqKS5vZmZzZXQoKTtcblx0XHRyZXR1cm4gW3Bvc2l0aW9uLmxlZnQsIHBvc2l0aW9uLnRvcF07XG5cdH0sXG5cblx0LyogSGlkZSB0aGUgZGF0ZSBwaWNrZXIgZnJvbSB2aWV3LlxuXHQgKiBAcGFyYW0gIGlucHV0ICBlbGVtZW50IC0gdGhlIGlucHV0IGZpZWxkIGF0dGFjaGVkIHRvIHRoZSBkYXRlIHBpY2tlclxuXHQgKi9cblx0X2hpZGVEYXRlcGlja2VyOiBmdW5jdGlvbihpbnB1dCkge1xuXHRcdHZhciBzaG93QW5pbSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzLCBvbkNsb3NlLFxuXHRcdFx0aW5zdCA9IHRoaXMuX2N1ckluc3Q7XG5cblx0XHRpZiAoIWluc3QgfHwgKGlucHV0ICYmIGluc3QgIT09ICQuZGF0YShpbnB1dCwgUFJPUF9OQU1FKSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fZGF0ZXBpY2tlclNob3dpbmcpIHtcblx0XHRcdHNob3dBbmltID0gdGhpcy5fZ2V0KGluc3QsIFwic2hvd0FuaW1cIik7XG5cdFx0XHRkdXJhdGlvbiA9IHRoaXMuX2dldChpbnN0LCBcImR1cmF0aW9uXCIpO1xuXHRcdFx0cG9zdFByb2Nlc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0JC5kYXRlcGlja2VyLl90aWR5RGlhbG9nKGluc3QpO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gREVQUkVDQVRFRDogYWZ0ZXIgQkMgZm9yIDEuOC54ICQuZWZmZWN0c1sgc2hvd0FuaW0gXSBpcyBub3QgbmVlZGVkXG5cdFx0XHRpZiAoICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIHNob3dBbmltIF0gfHwgJC5lZmZlY3RzWyBzaG93QW5pbSBdICkgKSB7XG5cdFx0XHRcdGluc3QuZHBEaXYuaGlkZShzaG93QW5pbSwgJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJzaG93T3B0aW9uc1wiKSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluc3QuZHBEaXZbKHNob3dBbmltID09PSBcInNsaWRlRG93blwiID8gXCJzbGlkZVVwXCIgOlxuXHRcdFx0XHRcdChzaG93QW5pbSA9PT0gXCJmYWRlSW5cIiA/IFwiZmFkZU91dFwiIDogXCJoaWRlXCIpKV0oKHNob3dBbmltID8gZHVyYXRpb24gOiBudWxsKSwgcG9zdFByb2Nlc3MpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXNob3dBbmltKSB7XG5cdFx0XHRcdHBvc3RQcm9jZXNzKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9IGZhbHNlO1xuXG5cdFx0XHRvbkNsb3NlID0gdGhpcy5fZ2V0KGluc3QsIFwib25DbG9zZVwiKTtcblx0XHRcdGlmIChvbkNsb3NlKSB7XG5cdFx0XHRcdG9uQ2xvc2UuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksIFsoaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBcIlwiKSwgaW5zdF0pO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9sYXN0SW5wdXQgPSBudWxsO1xuXHRcdFx0aWYgKHRoaXMuX2luRGlhbG9nKSB7XG5cdFx0XHRcdHRoaXMuX2RpYWxvZ0lucHV0LmNzcyh7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGxlZnQ6IFwiMFwiLCB0b3A6IFwiLTEwMHB4XCIgfSk7XG5cdFx0XHRcdGlmICgkLmJsb2NrVUkpIHtcblx0XHRcdFx0XHQkLnVuYmxvY2tVSSgpO1xuXHRcdFx0XHRcdCQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLmRwRGl2KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5faW5EaWFsb2cgPSBmYWxzZTtcblx0XHR9XG5cdH0sXG5cblx0LyogVGlkeSB1cCBhZnRlciBhIGRpYWxvZyBkaXNwbGF5LiAqL1xuXHRfdGlkeURpYWxvZzogZnVuY3Rpb24oaW5zdCkge1xuXHRcdGluc3QuZHBEaXYucmVtb3ZlQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLnVuYmluZChcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIpO1xuXHR9LFxuXG5cdC8qIENsb3NlIGRhdGUgcGlja2VyIGlmIGNsaWNrZWQgZWxzZXdoZXJlLiAqL1xuXHRfY2hlY2tFeHRlcm5hbENsaWNrOiBmdW5jdGlvbihldmVudCkge1xuXHRcdGlmICghJC5kYXRlcGlja2VyLl9jdXJJbnN0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCksXG5cdFx0XHRpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCR0YXJnZXRbMF0pO1xuXG5cdFx0aWYgKCAoICggJHRhcmdldFswXS5pZCAhPT0gJC5kYXRlcGlja2VyLl9tYWluRGl2SWQgJiZcblx0XHRcdFx0JHRhcmdldC5wYXJlbnRzKFwiI1wiICsgJC5kYXRlcGlja2VyLl9tYWluRGl2SWQpLmxlbmd0aCA9PT0gMCAmJlxuXHRcdFx0XHQhJHRhcmdldC5oYXNDbGFzcygkLmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lKSAmJlxuXHRcdFx0XHQhJHRhcmdldC5jbG9zZXN0KFwiLlwiICsgJC5kYXRlcGlja2VyLl90cmlnZ2VyQ2xhc3MpLmxlbmd0aCAmJlxuXHRcdFx0XHQkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmICEoJC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiAkLmJsb2NrVUkpICkgKSB8fFxuXHRcdFx0KCAkdGFyZ2V0Lmhhc0NsYXNzKCQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUpICYmICQuZGF0ZXBpY2tlci5fY3VySW5zdCAhPT0gaW5zdCApICkge1xuXHRcdFx0XHQkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEFkanVzdCBvbmUgb2YgdGhlIGRhdGUgc3ViLWZpZWxkcy4gKi9cblx0X2FkanVzdERhdGU6IGZ1bmN0aW9uKGlkLCBvZmZzZXQsIHBlcmlvZCkge1xuXHRcdHZhciB0YXJnZXQgPSAkKGlkKSxcblx0XHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7XG5cblx0XHRpZiAodGhpcy5faXNEaXNhYmxlZERhdGVwaWNrZXIodGFyZ2V0WzBdKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9hZGp1c3RJbnN0RGF0ZShpbnN0LCBvZmZzZXQgK1xuXHRcdFx0KHBlcmlvZCA9PT0gXCJNXCIgPyB0aGlzLl9nZXQoaW5zdCwgXCJzaG93Q3VycmVudEF0UG9zXCIpIDogMCksIC8vIHVuZG8gcG9zaXRpb25pbmdcblx0XHRcdHBlcmlvZCk7XG5cdFx0dGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTtcblx0fSxcblxuXHQvKiBBY3Rpb24gZm9yIGN1cnJlbnQgbGluay4gKi9cblx0X2dvdG9Ub2RheTogZnVuY3Rpb24oaWQpIHtcblx0XHR2YXIgZGF0ZSxcblx0XHRcdHRhcmdldCA9ICQoaWQpLFxuXHRcdFx0aW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTtcblxuXHRcdGlmICh0aGlzLl9nZXQoaW5zdCwgXCJnb3RvQ3VycmVudFwiKSAmJiBpbnN0LmN1cnJlbnREYXkpIHtcblx0XHRcdGluc3Quc2VsZWN0ZWREYXkgPSBpbnN0LmN1cnJlbnREYXk7XG5cdFx0XHRpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoO1xuXHRcdFx0aW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gaW5zdC5jdXJyZW50WWVhcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0XHRpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcblx0XHRcdGluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHR9XG5cdFx0dGhpcy5fbm90aWZ5Q2hhbmdlKGluc3QpO1xuXHRcdHRoaXMuX2FkanVzdERhdGUodGFyZ2V0KTtcblx0fSxcblxuXHQvKiBBY3Rpb24gZm9yIHNlbGVjdGluZyBhIG5ldyBtb250aC95ZWFyLiAqL1xuXHRfc2VsZWN0TW9udGhZZWFyOiBmdW5jdGlvbihpZCwgc2VsZWN0LCBwZXJpb2QpIHtcblx0XHR2YXIgdGFyZ2V0ID0gJChpZCksXG5cdFx0XHRpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXRbMF0pO1xuXG5cdFx0aW5zdFtcInNlbGVjdGVkXCIgKyAocGVyaW9kID09PSBcIk1cIiA/IFwiTW9udGhcIiA6IFwiWWVhclwiKV0gPVxuXHRcdGluc3RbXCJkcmF3XCIgKyAocGVyaW9kID09PSBcIk1cIiA/IFwiTW9udGhcIiA6IFwiWWVhclwiKV0gPVxuXHRcdFx0cGFyc2VJbnQoc2VsZWN0Lm9wdGlvbnNbc2VsZWN0LnNlbGVjdGVkSW5kZXhdLnZhbHVlLDEwKTtcblxuXHRcdHRoaXMuX25vdGlmeUNoYW5nZShpbnN0KTtcblx0XHR0aGlzLl9hZGp1c3REYXRlKHRhcmdldCk7XG5cdH0sXG5cblx0LyogQWN0aW9uIGZvciBzZWxlY3RpbmcgYSBkYXkuICovXG5cdF9zZWxlY3REYXk6IGZ1bmN0aW9uKGlkLCBtb250aCwgeWVhciwgdGQpIHtcblx0XHR2YXIgaW5zdCxcblx0XHRcdHRhcmdldCA9ICQoaWQpO1xuXG5cdFx0aWYgKCQodGQpLmhhc0NsYXNzKHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzKSB8fCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcih0YXJnZXRbMF0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTtcblx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5ID0gJChcImFcIiwgdGQpLmh0bWwoKTtcblx0XHRpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aCA9IG1vbnRoO1xuXHRcdGluc3Quc2VsZWN0ZWRZZWFyID0gaW5zdC5jdXJyZW50WWVhciA9IHllYXI7XG5cdFx0dGhpcy5fc2VsZWN0RGF0ZShpZCwgdGhpcy5fZm9ybWF0RGF0ZShpbnN0LFxuXHRcdFx0aW5zdC5jdXJyZW50RGF5LCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50WWVhcikpO1xuXHR9LFxuXG5cdC8qIEVyYXNlIHRoZSBpbnB1dCBmaWVsZCBhbmQgaGlkZSB0aGUgZGF0ZSBwaWNrZXIuICovXG5cdF9jbGVhckRhdGU6IGZ1bmN0aW9uKGlkKSB7XG5cdFx0dmFyIHRhcmdldCA9ICQoaWQpO1xuXHRcdHRoaXMuX3NlbGVjdERhdGUodGFyZ2V0LCBcIlwiKTtcblx0fSxcblxuXHQvKiBVcGRhdGUgdGhlIGlucHV0IGZpZWxkIHdpdGggdGhlIHNlbGVjdGVkIGRhdGUuICovXG5cdF9zZWxlY3REYXRlOiBmdW5jdGlvbihpZCwgZGF0ZVN0cikge1xuXHRcdHZhciBvblNlbGVjdCxcblx0XHRcdHRhcmdldCA9ICQoaWQpLFxuXHRcdFx0aW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTtcblxuXHRcdGRhdGVTdHIgPSAoZGF0ZVN0ciAhPSBudWxsID8gZGF0ZVN0ciA6IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCkpO1xuXHRcdGlmIChpbnN0LmlucHV0KSB7XG5cdFx0XHRpbnN0LmlucHV0LnZhbChkYXRlU3RyKTtcblx0XHR9XG5cdFx0dGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpO1xuXG5cdFx0b25TZWxlY3QgPSB0aGlzLl9nZXQoaW5zdCwgXCJvblNlbGVjdFwiKTtcblx0XHRpZiAob25TZWxlY3QpIHtcblx0XHRcdG9uU2VsZWN0LmFwcGx5KChpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFswXSA6IG51bGwpLCBbZGF0ZVN0ciwgaW5zdF0pOyAgLy8gdHJpZ2dlciBjdXN0b20gY2FsbGJhY2tcblx0XHR9IGVsc2UgaWYgKGluc3QuaW5wdXQpIHtcblx0XHRcdGluc3QuaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTsgLy8gZmlyZSB0aGUgY2hhbmdlIGV2ZW50XG5cdFx0fVxuXG5cdFx0aWYgKGluc3QuaW5saW5lKXtcblx0XHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHR0aGlzLl9sYXN0SW5wdXQgPSBpbnN0LmlucHV0WzBdO1xuXHRcdFx0aWYgKHR5cGVvZihpbnN0LmlucHV0WzBdKSAhPT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRpbnN0LmlucHV0LmZvY3VzKCk7IC8vIHJlc3RvcmUgZm9jdXNcblx0XHRcdH1cblx0XHRcdHRoaXMuX2xhc3RJbnB1dCA9IG51bGw7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIFVwZGF0ZSBhbnkgYWx0ZXJuYXRlIGZpZWxkIHRvIHN5bmNocm9uaXNlIHdpdGggdGhlIG1haW4gZmllbGQuICovXG5cdF91cGRhdGVBbHRlcm5hdGU6IGZ1bmN0aW9uKGluc3QpIHtcblx0XHR2YXIgYWx0Rm9ybWF0LCBkYXRlLCBkYXRlU3RyLFxuXHRcdFx0YWx0RmllbGQgPSB0aGlzLl9nZXQoaW5zdCwgXCJhbHRGaWVsZFwiKTtcblxuXHRcdGlmIChhbHRGaWVsZCkgeyAvLyB1cGRhdGUgYWx0ZXJuYXRlIGZpZWxkIHRvb1xuXHRcdFx0YWx0Rm9ybWF0ID0gdGhpcy5fZ2V0KGluc3QsIFwiYWx0Rm9ybWF0XCIpIHx8IHRoaXMuX2dldChpbnN0LCBcImRhdGVGb3JtYXRcIik7XG5cdFx0XHRkYXRlID0gdGhpcy5fZ2V0RGF0ZShpbnN0KTtcblx0XHRcdGRhdGVTdHIgPSB0aGlzLmZvcm1hdERhdGUoYWx0Rm9ybWF0LCBkYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpO1xuXHRcdFx0JChhbHRGaWVsZCkuZWFjaChmdW5jdGlvbigpIHsgJCh0aGlzKS52YWwoZGF0ZVN0cik7IH0pO1xuXHRcdH1cblx0fSxcblxuXHQvKiBTZXQgYXMgYmVmb3JlU2hvd0RheSBmdW5jdGlvbiB0byBwcmV2ZW50IHNlbGVjdGlvbiBvZiB3ZWVrZW5kcy5cblx0ICogQHBhcmFtICBkYXRlICBEYXRlIC0gdGhlIGRhdGUgdG8gY3VzdG9taXNlXG5cdCAqIEByZXR1cm4gW2Jvb2xlYW4sIHN0cmluZ10gLSBpcyB0aGlzIGRhdGUgc2VsZWN0YWJsZT8sIHdoYXQgaXMgaXRzIENTUyBjbGFzcz9cblx0ICovXG5cdG5vV2Vla2VuZHM6IGZ1bmN0aW9uKGRhdGUpIHtcblx0XHR2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcblx0XHRyZXR1cm4gWyhkYXkgPiAwICYmIGRheSA8IDYpLCBcIlwiXTtcblx0fSxcblxuXHQvKiBTZXQgYXMgY2FsY3VsYXRlV2VlayB0byBkZXRlcm1pbmUgdGhlIHdlZWsgb2YgdGhlIHllYXIgYmFzZWQgb24gdGhlIElTTyA4NjAxIGRlZmluaXRpb24uXG5cdCAqIEBwYXJhbSAgZGF0ZSAgRGF0ZSAtIHRoZSBkYXRlIHRvIGdldCB0aGUgd2VlayBmb3Jcblx0ICogQHJldHVybiAgbnVtYmVyIC0gdGhlIG51bWJlciBvZiB0aGUgd2VlayB3aXRoaW4gdGhlIHllYXIgdGhhdCBjb250YWlucyB0aGlzIGRhdGVcblx0ICovXG5cdGlzbzg2MDFXZWVrOiBmdW5jdGlvbihkYXRlKSB7XG5cdFx0dmFyIHRpbWUsXG5cdFx0XHRjaGVja0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG5cblx0XHQvLyBGaW5kIFRodXJzZGF5IG9mIHRoaXMgd2VlayBzdGFydGluZyBvbiBNb25kYXlcblx0XHRjaGVja0RhdGUuc2V0RGF0ZShjaGVja0RhdGUuZ2V0RGF0ZSgpICsgNCAtIChjaGVja0RhdGUuZ2V0RGF5KCkgfHwgNykpO1xuXG5cdFx0dGltZSA9IGNoZWNrRGF0ZS5nZXRUaW1lKCk7XG5cdFx0Y2hlY2tEYXRlLnNldE1vbnRoKDApOyAvLyBDb21wYXJlIHdpdGggSmFuIDFcblx0XHRjaGVja0RhdGUuc2V0RGF0ZSgxKTtcblx0XHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJvdW5kKCh0aW1lIC0gY2hlY2tEYXRlKSAvIDg2NDAwMDAwKSAvIDcpICsgMTtcblx0fSxcblxuXHQvKiBQYXJzZSBhIHN0cmluZyB2YWx1ZSBpbnRvIGEgZGF0ZSBvYmplY3QuXG5cdCAqIFNlZSBmb3JtYXREYXRlIGJlbG93IGZvciB0aGUgcG9zc2libGUgZm9ybWF0cy5cblx0ICpcblx0ICogQHBhcmFtICBmb3JtYXQgc3RyaW5nIC0gdGhlIGV4cGVjdGVkIGZvcm1hdCBvZiB0aGUgZGF0ZVxuXHQgKiBAcGFyYW0gIHZhbHVlIHN0cmluZyAtIHRoZSBkYXRlIGluIHRoZSBhYm92ZSBmb3JtYXRcblx0ICogQHBhcmFtICBzZXR0aW5ncyBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6XG5cdCAqXHRcdFx0XHRcdHNob3J0WWVhckN1dG9mZiAgbnVtYmVyIC0gdGhlIGN1dG9mZiB5ZWFyIGZvciBkZXRlcm1pbmluZyB0aGUgY2VudHVyeSAob3B0aW9uYWwpXG5cdCAqXHRcdFx0XHRcdGRheU5hbWVzU2hvcnRcdHN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbClcblx0ICpcdFx0XHRcdFx0ZGF5TmFtZXNcdFx0c3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzU2hvcnQgc3RyaW5nWzEyXSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzXHRcdHN0cmluZ1sxMl0gLSBuYW1lcyBvZiB0aGUgbW9udGhzIChvcHRpb25hbClcblx0ICogQHJldHVybiAgRGF0ZSAtIHRoZSBleHRyYWN0ZWQgZGF0ZSB2YWx1ZSBvciBudWxsIGlmIHZhbHVlIGlzIGJsYW5rXG5cdCAqL1xuXHRwYXJzZURhdGU6IGZ1bmN0aW9uIChmb3JtYXQsIHZhbHVlLCBzZXR0aW5ncykge1xuXHRcdGlmIChmb3JtYXQgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBcIkludmFsaWQgYXJndW1lbnRzXCI7XG5cdFx0fVxuXG5cdFx0dmFsdWUgPSAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlICsgXCJcIik7XG5cdFx0aWYgKHZhbHVlID09PSBcIlwiKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHR2YXIgaUZvcm1hdCwgZGltLCBleHRyYSxcblx0XHRcdGlWYWx1ZSA9IDAsXG5cdFx0XHRzaG9ydFllYXJDdXRvZmZUZW1wID0gKHNldHRpbmdzID8gc2V0dGluZ3Muc2hvcnRZZWFyQ3V0b2ZmIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuc2hvcnRZZWFyQ3V0b2ZmLFxuXHRcdFx0c2hvcnRZZWFyQ3V0b2ZmID0gKHR5cGVvZiBzaG9ydFllYXJDdXRvZmZUZW1wICE9PSBcInN0cmluZ1wiID8gc2hvcnRZZWFyQ3V0b2ZmVGVtcCA6XG5cdFx0XHRcdG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArIHBhcnNlSW50KHNob3J0WWVhckN1dG9mZlRlbXAsIDEwKSksXG5cdFx0XHRkYXlOYW1lc1Nob3J0ID0gKHNldHRpbmdzID8gc2V0dGluZ3MuZGF5TmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsXG5cdFx0XHRkYXlOYW1lcyA9IChzZXR0aW5ncyA/IHNldHRpbmdzLmRheU5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMsXG5cdFx0XHRtb250aE5hbWVzU2hvcnQgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQsXG5cdFx0XHRtb250aE5hbWVzID0gKHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsXG5cdFx0XHR5ZWFyID0gLTEsXG5cdFx0XHRtb250aCA9IC0xLFxuXHRcdFx0ZGF5ID0gLTEsXG5cdFx0XHRkb3kgPSAtMSxcblx0XHRcdGxpdGVyYWwgPSBmYWxzZSxcblx0XHRcdGRhdGUsXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkXG5cdFx0XHRsb29rQWhlYWQgPSBmdW5jdGlvbihtYXRjaCkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyA9IChpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdChpRm9ybWF0ICsgMSkgPT09IG1hdGNoKTtcblx0XHRcdFx0aWYgKG1hdGNoZXMpIHtcblx0XHRcdFx0XHRpRm9ybWF0Kys7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoZXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gRXh0cmFjdCBhIG51bWJlciBmcm9tIHRoZSBzdHJpbmcgdmFsdWVcblx0XHRcdGdldE51bWJlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG5cdFx0XHRcdHZhciBpc0RvdWJsZWQgPSBsb29rQWhlYWQobWF0Y2gpLFxuXHRcdFx0XHRcdHNpemUgPSAobWF0Y2ggPT09IFwiQFwiID8gMTQgOiAobWF0Y2ggPT09IFwiIVwiID8gMjAgOlxuXHRcdFx0XHRcdChtYXRjaCA9PT0gXCJ5XCIgJiYgaXNEb3VibGVkID8gNCA6IChtYXRjaCA9PT0gXCJvXCIgPyAzIDogMikpKSksXG5cdFx0XHRcdFx0ZGlnaXRzID0gbmV3IFJlZ0V4cChcIl5cXFxcZHsxLFwiICsgc2l6ZSArIFwifVwiKSxcblx0XHRcdFx0XHRudW0gPSB2YWx1ZS5zdWJzdHJpbmcoaVZhbHVlKS5tYXRjaChkaWdpdHMpO1xuXHRcdFx0XHRpZiAoIW51bSkge1xuXHRcdFx0XHRcdHRocm93IFwiTWlzc2luZyBudW1iZXIgYXQgcG9zaXRpb24gXCIgKyBpVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aVZhbHVlICs9IG51bVswXS5sZW5ndGg7XG5cdFx0XHRcdHJldHVybiBwYXJzZUludChudW1bMF0sIDEwKTtcblx0XHRcdH0sXG5cdFx0XHQvLyBFeHRyYWN0IGEgbmFtZSBmcm9tIHRoZSBzdHJpbmcgdmFsdWUgYW5kIGNvbnZlcnQgdG8gYW4gaW5kZXhcblx0XHRcdGdldE5hbWUgPSBmdW5jdGlvbihtYXRjaCwgc2hvcnROYW1lcywgbG9uZ05hbWVzKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IC0xLFxuXHRcdFx0XHRcdG5hbWVzID0gJC5tYXAobG9va0FoZWFkKG1hdGNoKSA/IGxvbmdOYW1lcyA6IHNob3J0TmFtZXMsIGZ1bmN0aW9uICh2LCBrKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBbaywgdl0gXTtcblx0XHRcdFx0XHR9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLShhWzFdLmxlbmd0aCAtIGJbMV0ubGVuZ3RoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHQkLmVhY2gobmFtZXMsIGZ1bmN0aW9uIChpLCBwYWlyKSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBwYWlyWzFdO1xuXHRcdFx0XHRcdGlmICh2YWx1ZS5zdWJzdHIoaVZhbHVlLCBuYW1lLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRcdFx0XHRpbmRleCA9IHBhaXJbMF07XG5cdFx0XHRcdFx0XHRpVmFsdWUgKz0gbmFtZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgXCJVbmtub3duIG5hbWUgYXQgcG9zaXRpb24gXCIgKyBpVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQvLyBDb25maXJtIHRoYXQgYSBsaXRlcmFsIGNoYXJhY3RlciBtYXRjaGVzIHRoZSBzdHJpbmcgdmFsdWVcblx0XHRcdGNoZWNrTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodmFsdWUuY2hhckF0KGlWYWx1ZSkgIT09IGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHtcblx0XHRcdFx0XHR0aHJvdyBcIlVuZXhwZWN0ZWQgbGl0ZXJhbCBhdCBwb3NpdGlvbiBcIiArIGlWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpVmFsdWUrKztcblx0XHRcdH07XG5cblx0XHRmb3IgKGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrKSB7XG5cdFx0XHRpZiAobGl0ZXJhbCkge1xuXHRcdFx0XHRpZiAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSA9PT0gXCInXCIgJiYgIWxvb2tBaGVhZChcIidcIikpIHtcblx0XHRcdFx0XHRsaXRlcmFsID0gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2hlY2tMaXRlcmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN3aXRjaCAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSkge1xuXHRcdFx0XHRcdGNhc2UgXCJkXCI6XG5cdFx0XHRcdFx0XHRkYXkgPSBnZXROdW1iZXIoXCJkXCIpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIkRcIjpcblx0XHRcdFx0XHRcdGdldE5hbWUoXCJEXCIsIGRheU5hbWVzU2hvcnQsIGRheU5hbWVzKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJvXCI6XG5cdFx0XHRcdFx0XHRkb3kgPSBnZXROdW1iZXIoXCJvXCIpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIm1cIjpcblx0XHRcdFx0XHRcdG1vbnRoID0gZ2V0TnVtYmVyKFwibVwiKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJNXCI6XG5cdFx0XHRcdFx0XHRtb250aCA9IGdldE5hbWUoXCJNXCIsIG1vbnRoTmFtZXNTaG9ydCwgbW9udGhOYW1lcyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwieVwiOlxuXHRcdFx0XHRcdFx0eWVhciA9IGdldE51bWJlcihcInlcIik7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiQFwiOlxuXHRcdFx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKGdldE51bWJlcihcIkBcIikpO1xuXHRcdFx0XHRcdFx0eWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHRcdFx0XHRcdG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcblx0XHRcdFx0XHRcdGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIiFcIjpcblx0XHRcdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSgoZ2V0TnVtYmVyKFwiIVwiKSAtIHRoaXMuX3RpY2tzVG8xOTcwKSAvIDEwMDAwKTtcblx0XHRcdFx0XHRcdHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRcdFx0XHRtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG5cdFx0XHRcdFx0XHRkYXkgPSBkYXRlLmdldERhdGUoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCInXCI6XG5cdFx0XHRcdFx0XHRpZiAobG9va0FoZWFkKFwiJ1wiKSl7XG5cdFx0XHRcdFx0XHRcdGNoZWNrTGl0ZXJhbCgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0bGl0ZXJhbCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hlY2tMaXRlcmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaVZhbHVlIDwgdmFsdWUubGVuZ3RoKXtcblx0XHRcdGV4dHJhID0gdmFsdWUuc3Vic3RyKGlWYWx1ZSk7XG5cdFx0XHRpZiAoIS9eXFxzKy8udGVzdChleHRyYSkpIHtcblx0XHRcdFx0dGhyb3cgXCJFeHRyYS91bnBhcnNlZCBjaGFyYWN0ZXJzIGZvdW5kIGluIGRhdGU6IFwiICsgZXh0cmE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHllYXIgPT09IC0xKSB7XG5cdFx0XHR5ZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXHRcdH0gZWxzZSBpZiAoeWVhciA8IDEwMCkge1xuXHRcdFx0eWVhciArPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgLSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgK1xuXHRcdFx0XHQoeWVhciA8PSBzaG9ydFllYXJDdXRvZmYgPyAwIDogLTEwMCk7XG5cdFx0fVxuXG5cdFx0aWYgKGRveSA+IC0xKSB7XG5cdFx0XHRtb250aCA9IDE7XG5cdFx0XHRkYXkgPSBkb3k7XG5cdFx0XHRkbyB7XG5cdFx0XHRcdGRpbSA9IHRoaXMuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoIC0gMSk7XG5cdFx0XHRcdGlmIChkYXkgPD0gZGltKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bW9udGgrKztcblx0XHRcdFx0ZGF5IC09IGRpbTtcblx0XHRcdH0gd2hpbGUgKHRydWUpO1xuXHRcdH1cblxuXHRcdGRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSkpO1xuXHRcdGlmIChkYXRlLmdldEZ1bGxZZWFyKCkgIT09IHllYXIgfHwgZGF0ZS5nZXRNb250aCgpICsgMSAhPT0gbW9udGggfHwgZGF0ZS5nZXREYXRlKCkgIT09IGRheSkge1xuXHRcdFx0dGhyb3cgXCJJbnZhbGlkIGRhdGVcIjsgLy8gRS5nLiAzMS8wMi8wMFxuXHRcdH1cblx0XHRyZXR1cm4gZGF0ZTtcblx0fSxcblxuXHQvKiBTdGFuZGFyZCBkYXRlIGZvcm1hdHMuICovXG5cdEFUT006IFwieXktbW0tZGRcIiwgLy8gUkZDIDMzMzkgKElTTyA4NjAxKVxuXHRDT09LSUU6IFwiRCwgZGQgTSB5eVwiLFxuXHRJU09fODYwMTogXCJ5eS1tbS1kZFwiLFxuXHRSRkNfODIyOiBcIkQsIGQgTSB5XCIsXG5cdFJGQ184NTA6IFwiREQsIGRkLU0teVwiLFxuXHRSRkNfMTAzNjogXCJELCBkIE0geVwiLFxuXHRSRkNfMTEyMzogXCJELCBkIE0geXlcIixcblx0UkZDXzI4MjI6IFwiRCwgZCBNIHl5XCIsXG5cdFJTUzogXCJELCBkIE0geVwiLCAvLyBSRkMgODIyXG5cdFRJQ0tTOiBcIiFcIixcblx0VElNRVNUQU1QOiBcIkBcIixcblx0VzNDOiBcInl5LW1tLWRkXCIsIC8vIElTTyA4NjAxXG5cblx0X3RpY2tzVG8xOTcwOiAoKCgxOTcwIC0gMSkgKiAzNjUgKyBNYXRoLmZsb29yKDE5NzAgLyA0KSAtIE1hdGguZmxvb3IoMTk3MCAvIDEwMCkgK1xuXHRcdE1hdGguZmxvb3IoMTk3MCAvIDQwMCkpICogMjQgKiA2MCAqIDYwICogMTAwMDAwMDApLFxuXG5cdC8qIEZvcm1hdCBhIGRhdGUgb2JqZWN0IGludG8gYSBzdHJpbmcgdmFsdWUuXG5cdCAqIFRoZSBmb3JtYXQgY2FuIGJlIGNvbWJpbmF0aW9ucyBvZiB0aGUgZm9sbG93aW5nOlxuXHQgKiBkICAtIGRheSBvZiBtb250aCAobm8gbGVhZGluZyB6ZXJvKVxuXHQgKiBkZCAtIGRheSBvZiBtb250aCAodHdvIGRpZ2l0KVxuXHQgKiBvICAtIGRheSBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm9zKVxuXHQgKiBvbyAtIGRheSBvZiB5ZWFyICh0aHJlZSBkaWdpdClcblx0ICogRCAgLSBkYXkgbmFtZSBzaG9ydFxuXHQgKiBERCAtIGRheSBuYW1lIGxvbmdcblx0ICogbSAgLSBtb250aCBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm8pXG5cdCAqIG1tIC0gbW9udGggb2YgeWVhciAodHdvIGRpZ2l0KVxuXHQgKiBNICAtIG1vbnRoIG5hbWUgc2hvcnRcblx0ICogTU0gLSBtb250aCBuYW1lIGxvbmdcblx0ICogeSAgLSB5ZWFyICh0d28gZGlnaXQpXG5cdCAqIHl5IC0geWVhciAoZm91ciBkaWdpdClcblx0ICogQCAtIFVuaXggdGltZXN0YW1wIChtcyBzaW5jZSAwMS8wMS8xOTcwKVxuXHQgKiAhIC0gV2luZG93cyB0aWNrcyAoMTAwbnMgc2luY2UgMDEvMDEvMDAwMSlcblx0ICogXCIuLi5cIiAtIGxpdGVyYWwgdGV4dFxuXHQgKiAnJyAtIHNpbmdsZSBxdW90ZVxuXHQgKlxuXHQgKiBAcGFyYW0gIGZvcm1hdCBzdHJpbmcgLSB0aGUgZGVzaXJlZCBmb3JtYXQgb2YgdGhlIGRhdGVcblx0ICogQHBhcmFtICBkYXRlIERhdGUgLSB0aGUgZGF0ZSB2YWx1ZSB0byBmb3JtYXRcblx0ICogQHBhcmFtICBzZXR0aW5ncyBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6XG5cdCAqXHRcdFx0XHRcdGRheU5hbWVzU2hvcnRcdHN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbClcblx0ICpcdFx0XHRcdFx0ZGF5TmFtZXNcdFx0c3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzU2hvcnQgc3RyaW5nWzEyXSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzXHRcdHN0cmluZ1sxMl0gLSBuYW1lcyBvZiB0aGUgbW9udGhzIChvcHRpb25hbClcblx0ICogQHJldHVybiAgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdFxuXHQgKi9cblx0Zm9ybWF0RGF0ZTogZnVuY3Rpb24gKGZvcm1hdCwgZGF0ZSwgc2V0dGluZ3MpIHtcblx0XHRpZiAoIWRhdGUpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdHZhciBpRm9ybWF0LFxuXHRcdFx0ZGF5TmFtZXNTaG9ydCA9IChzZXR0aW5ncyA/IHNldHRpbmdzLmRheU5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LFxuXHRcdFx0ZGF5TmFtZXMgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzLFxuXHRcdFx0bW9udGhOYW1lc1Nob3J0ID0gKHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lc1Nob3J0IDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMubW9udGhOYW1lc1Nob3J0LFxuXHRcdFx0bW9udGhOYW1lcyA9IChzZXR0aW5ncyA/IHNldHRpbmdzLm1vbnRoTmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLFxuXHRcdFx0Ly8gQ2hlY2sgd2hldGhlciBhIGZvcm1hdCBjaGFyYWN0ZXIgaXMgZG91YmxlZFxuXHRcdFx0bG9va0FoZWFkID0gZnVuY3Rpb24obWF0Y2gpIHtcblx0XHRcdFx0dmFyIG1hdGNoZXMgPSAoaUZvcm1hdCArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdC5jaGFyQXQoaUZvcm1hdCArIDEpID09PSBtYXRjaCk7XG5cdFx0XHRcdGlmIChtYXRjaGVzKSB7XG5cdFx0XHRcdFx0aUZvcm1hdCsrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaGVzO1xuXHRcdFx0fSxcblx0XHRcdC8vIEZvcm1hdCBhIG51bWJlciwgd2l0aCBsZWFkaW5nIHplcm8gaWYgbmVjZXNzYXJ5XG5cdFx0XHRmb3JtYXROdW1iZXIgPSBmdW5jdGlvbihtYXRjaCwgdmFsdWUsIGxlbikge1xuXHRcdFx0XHR2YXIgbnVtID0gXCJcIiArIHZhbHVlO1xuXHRcdFx0XHRpZiAobG9va0FoZWFkKG1hdGNoKSkge1xuXHRcdFx0XHRcdHdoaWxlIChudW0ubGVuZ3RoIDwgbGVuKSB7XG5cdFx0XHRcdFx0XHRudW0gPSBcIjBcIiArIG51bTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG51bTtcblx0XHRcdH0sXG5cdFx0XHQvLyBGb3JtYXQgYSBuYW1lLCBzaG9ydCBvciBsb25nIGFzIHJlcXVlc3RlZFxuXHRcdFx0Zm9ybWF0TmFtZSA9IGZ1bmN0aW9uKG1hdGNoLCB2YWx1ZSwgc2hvcnROYW1lcywgbG9uZ05hbWVzKSB7XG5cdFx0XHRcdHJldHVybiAobG9va0FoZWFkKG1hdGNoKSA/IGxvbmdOYW1lc1t2YWx1ZV0gOiBzaG9ydE5hbWVzW3ZhbHVlXSk7XG5cdFx0XHR9LFxuXHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdGxpdGVyYWwgPSBmYWxzZTtcblxuXHRcdGlmIChkYXRlKSB7XG5cdFx0XHRmb3IgKGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrKSB7XG5cdFx0XHRcdGlmIChsaXRlcmFsKSB7XG5cdFx0XHRcdFx0aWYgKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkgPT09IFwiJ1wiICYmICFsb29rQWhlYWQoXCInXCIpKSB7XG5cdFx0XHRcdFx0XHRsaXRlcmFsID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXQuY2hhckF0KGlGb3JtYXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJkXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXROdW1iZXIoXCJkXCIsIGRhdGUuZ2V0RGF0ZSgpLCAyKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwiRFwiOlxuXHRcdFx0XHRcdFx0XHRvdXRwdXQgKz0gZm9ybWF0TmFtZShcIkRcIiwgZGF0ZS5nZXREYXkoKSwgZGF5TmFtZXNTaG9ydCwgZGF5TmFtZXMpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJvXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXROdW1iZXIoXCJvXCIsXG5cdFx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZCgobmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDApLmdldFRpbWUoKSkgLyA4NjQwMDAwMCksIDMpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJtXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXROdW1iZXIoXCJtXCIsIGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJNXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXROYW1lKFwiTVwiLCBkYXRlLmdldE1vbnRoKCksIG1vbnRoTmFtZXNTaG9ydCwgbW9udGhOYW1lcyk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInlcIjpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IChsb29rQWhlYWQoXCJ5XCIpID8gZGF0ZS5nZXRGdWxsWWVhcigpIDpcblx0XHRcdFx0XHRcdFx0XHQoZGF0ZS5nZXRZZWFyKCkgJSAxMDAgPCAxMCA/IFwiMFwiIDogXCJcIikgKyBkYXRlLmdldFllYXIoKSAlIDEwMCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIkBcIjpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCIhXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBkYXRlLmdldFRpbWUoKSAqIDEwMDAwICsgdGhpcy5fdGlja3NUbzE5NzA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIidcIjpcblx0XHRcdFx0XHRcdFx0aWYgKGxvb2tBaGVhZChcIidcIikpIHtcblx0XHRcdFx0XHRcdFx0XHRvdXRwdXQgKz0gXCInXCI7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0bGl0ZXJhbCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRvdXRwdXQgKz0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fSxcblxuXHQvKiBFeHRyYWN0IGFsbCBwb3NzaWJsZSBjaGFyYWN0ZXJzIGZyb20gdGhlIGRhdGUgZm9ybWF0LiAqL1xuXHRfcG9zc2libGVDaGFyczogZnVuY3Rpb24gKGZvcm1hdCkge1xuXHRcdHZhciBpRm9ybWF0LFxuXHRcdFx0Y2hhcnMgPSBcIlwiLFxuXHRcdFx0bGl0ZXJhbCA9IGZhbHNlLFxuXHRcdFx0Ly8gQ2hlY2sgd2hldGhlciBhIGZvcm1hdCBjaGFyYWN0ZXIgaXMgZG91YmxlZFxuXHRcdFx0bG9va0FoZWFkID0gZnVuY3Rpb24obWF0Y2gpIHtcblx0XHRcdFx0dmFyIG1hdGNoZXMgPSAoaUZvcm1hdCArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdC5jaGFyQXQoaUZvcm1hdCArIDEpID09PSBtYXRjaCk7XG5cdFx0XHRcdGlmIChtYXRjaGVzKSB7XG5cdFx0XHRcdFx0aUZvcm1hdCsrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaGVzO1xuXHRcdFx0fTtcblxuXHRcdGZvciAoaUZvcm1hdCA9IDA7IGlGb3JtYXQgPCBmb3JtYXQubGVuZ3RoOyBpRm9ybWF0KyspIHtcblx0XHRcdGlmIChsaXRlcmFsKSB7XG5cdFx0XHRcdGlmIChmb3JtYXQuY2hhckF0KGlGb3JtYXQpID09PSBcIidcIiAmJiAhbG9va0FoZWFkKFwiJ1wiKSkge1xuXHRcdFx0XHRcdGxpdGVyYWwgPSBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjaGFycyArPSBmb3JtYXQuY2hhckF0KGlGb3JtYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHtcblx0XHRcdFx0XHRjYXNlIFwiZFwiOiBjYXNlIFwibVwiOiBjYXNlIFwieVwiOiBjYXNlIFwiQFwiOlxuXHRcdFx0XHRcdFx0Y2hhcnMgKz0gXCIwMTIzNDU2Nzg5XCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiRFwiOiBjYXNlIFwiTVwiOlxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7IC8vIEFjY2VwdCBhbnl0aGluZ1xuXHRcdFx0XHRcdGNhc2UgXCInXCI6XG5cdFx0XHRcdFx0XHRpZiAobG9va0FoZWFkKFwiJ1wiKSkge1xuXHRcdFx0XHRcdFx0XHRjaGFycyArPSBcIidcIjtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxpdGVyYWwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJzICs9IGZvcm1hdC5jaGFyQXQoaUZvcm1hdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNoYXJzO1xuXHR9LFxuXG5cdC8qIEdldCBhIHNldHRpbmcgdmFsdWUsIGRlZmF1bHRpbmcgaWYgbmVjZXNzYXJ5LiAqL1xuXHRfZ2V0OiBmdW5jdGlvbihpbnN0LCBuYW1lKSB7XG5cdFx0cmV0dXJuIGluc3Quc2V0dGluZ3NbbmFtZV0gIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRpbnN0LnNldHRpbmdzW25hbWVdIDogdGhpcy5fZGVmYXVsdHNbbmFtZV07XG5cdH0sXG5cblx0LyogUGFyc2UgZXhpc3RpbmcgZGF0ZSBhbmQgaW5pdGlhbGlzZSBkYXRlIHBpY2tlci4gKi9cblx0X3NldERhdGVGcm9tRmllbGQ6IGZ1bmN0aW9uKGluc3QsIG5vRGVmYXVsdCkge1xuXHRcdGlmIChpbnN0LmlucHV0LnZhbCgpID09PSBpbnN0Lmxhc3RWYWwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGF0ZUZvcm1hdCA9IHRoaXMuX2dldChpbnN0LCBcImRhdGVGb3JtYXRcIiksXG5cdFx0XHRkYXRlcyA9IGluc3QubGFzdFZhbCA9IGluc3QuaW5wdXQgPyBpbnN0LmlucHV0LnZhbCgpIDogbnVsbCxcblx0XHRcdGRlZmF1bHREYXRlID0gdGhpcy5fZ2V0RGVmYXVsdERhdGUoaW5zdCksXG5cdFx0XHRkYXRlID0gZGVmYXVsdERhdGUsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2dldEZvcm1hdENvbmZpZyhpbnN0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRkYXRlID0gdGhpcy5wYXJzZURhdGUoZGF0ZUZvcm1hdCwgZGF0ZXMsIHNldHRpbmdzKSB8fCBkZWZhdWx0RGF0ZTtcblx0XHR9IGNhdGNoIChldmVudCkge1xuXHRcdFx0ZGF0ZXMgPSAobm9EZWZhdWx0ID8gXCJcIiA6IGRhdGVzKTtcblx0XHR9XG5cdFx0aW5zdC5zZWxlY3RlZERheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXHRcdGluc3QuZHJhd01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuXHRcdGluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHRpbnN0LmN1cnJlbnREYXkgPSAoZGF0ZXMgPyBkYXRlLmdldERhdGUoKSA6IDApO1xuXHRcdGluc3QuY3VycmVudE1vbnRoID0gKGRhdGVzID8gZGF0ZS5nZXRNb250aCgpIDogMCk7XG5cdFx0aW5zdC5jdXJyZW50WWVhciA9IChkYXRlcyA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IDApO1xuXHRcdHRoaXMuX2FkanVzdEluc3REYXRlKGluc3QpO1xuXHR9LFxuXG5cdC8qIFJldHJpZXZlIHRoZSBkZWZhdWx0IGRhdGUgc2hvd24gb24gb3BlbmluZy4gKi9cblx0X2dldERlZmF1bHREYXRlOiBmdW5jdGlvbihpbnN0KSB7XG5cdFx0cmV0dXJuIHRoaXMuX3Jlc3RyaWN0TWluTWF4KGluc3QsXG5cdFx0XHR0aGlzLl9kZXRlcm1pbmVEYXRlKGluc3QsIHRoaXMuX2dldChpbnN0LCBcImRlZmF1bHREYXRlXCIpLCBuZXcgRGF0ZSgpKSk7XG5cdH0sXG5cblx0LyogQSBkYXRlIG1heSBiZSBzcGVjaWZpZWQgYXMgYW4gZXhhY3QgdmFsdWUgb3IgYSByZWxhdGl2ZSBvbmUuICovXG5cdF9kZXRlcm1pbmVEYXRlOiBmdW5jdGlvbihpbnN0LCBkYXRlLCBkZWZhdWx0RGF0ZSkge1xuXHRcdHZhciBvZmZzZXROdW1lcmljID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0XHRcdHZhciBkYXRlID0gbmV3IERhdGUoKTtcblx0XHRcdFx0ZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgb2Zmc2V0KTtcblx0XHRcdFx0cmV0dXJuIGRhdGU7XG5cdFx0XHR9LFxuXHRcdFx0b2Zmc2V0U3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgXCJkYXRlRm9ybWF0XCIpLFxuXHRcdFx0XHRcdFx0b2Zmc2V0LCAkLmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0XHQvLyBJZ25vcmVcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBkYXRlID0gKG9mZnNldC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eYy8pID9cblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2dldERhdGUoaW5zdCkgOiBudWxsKSB8fCBuZXcgRGF0ZSgpLFxuXHRcdFx0XHRcdHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCksXG5cdFx0XHRcdFx0bW9udGggPSBkYXRlLmdldE1vbnRoKCksXG5cdFx0XHRcdFx0ZGF5ID0gZGF0ZS5nZXREYXRlKCksXG5cdFx0XHRcdFx0cGF0dGVybiA9IC8oWytcXC1dP1swLTldKylcXHMqKGR8RHx3fFd8bXxNfHl8WSk/L2csXG5cdFx0XHRcdFx0bWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyhvZmZzZXQpO1xuXG5cdFx0XHRcdHdoaWxlIChtYXRjaGVzKSB7XG5cdFx0XHRcdFx0c3dpdGNoIChtYXRjaGVzWzJdIHx8IFwiZFwiKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwiZFwiIDogY2FzZSBcIkRcIiA6XG5cdFx0XHRcdFx0XHRcdGRheSArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwid1wiIDogY2FzZSBcIldcIiA6XG5cdFx0XHRcdFx0XHRcdGRheSArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKSAqIDc7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIm1cIiA6IGNhc2UgXCJNXCIgOlxuXHRcdFx0XHRcdFx0XHRtb250aCArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKTtcblx0XHRcdFx0XHRcdFx0ZGF5ID0gTWF0aC5taW4oZGF5LCAkLmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInlcIjogY2FzZSBcIllcIiA6XG5cdFx0XHRcdFx0XHRcdHllYXIgKz0gcGFyc2VJbnQobWF0Y2hlc1sxXSwxMCk7XG5cdFx0XHRcdFx0XHRcdGRheSA9IE1hdGgubWluKGRheSwgJC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCkpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyhvZmZzZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KTtcblx0XHRcdH0sXG5cdFx0XHRuZXdEYXRlID0gKGRhdGUgPT0gbnVsbCB8fCBkYXRlID09PSBcIlwiID8gZGVmYXVsdERhdGUgOiAodHlwZW9mIGRhdGUgPT09IFwic3RyaW5nXCIgPyBvZmZzZXRTdHJpbmcoZGF0ZSkgOlxuXHRcdFx0XHQodHlwZW9mIGRhdGUgPT09IFwibnVtYmVyXCIgPyAoaXNOYU4oZGF0ZSkgPyBkZWZhdWx0RGF0ZSA6IG9mZnNldE51bWVyaWMoZGF0ZSkpIDogbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpKSkpO1xuXG5cdFx0bmV3RGF0ZSA9IChuZXdEYXRlICYmIG5ld0RhdGUudG9TdHJpbmcoKSA9PT0gXCJJbnZhbGlkIERhdGVcIiA/IGRlZmF1bHREYXRlIDogbmV3RGF0ZSk7XG5cdFx0aWYgKG5ld0RhdGUpIHtcblx0XHRcdG5ld0RhdGUuc2V0SG91cnMoMCk7XG5cdFx0XHRuZXdEYXRlLnNldE1pbnV0ZXMoMCk7XG5cdFx0XHRuZXdEYXRlLnNldFNlY29uZHMoMCk7XG5cdFx0XHRuZXdEYXRlLnNldE1pbGxpc2Vjb25kcygwKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ld0RhdGUpO1xuXHR9LFxuXG5cdC8qIEhhbmRsZSBzd2l0Y2ggdG8vZnJvbSBkYXlsaWdodCBzYXZpbmcuXG5cdCAqIEhvdXJzIG1heSBiZSBub24temVybyBvbiBkYXlsaWdodCBzYXZpbmcgY3V0LW92ZXI6XG5cdCAqID4gMTIgd2hlbiBtaWRuaWdodCBjaGFuZ2VvdmVyLCBidXQgdGhlbiBjYW5ub3QgZ2VuZXJhdGVcblx0ICogbWlkbmlnaHQgZGF0ZXRpbWUsIHNvIGp1bXAgdG8gMUFNLCBvdGhlcndpc2UgcmVzZXQuXG5cdCAqIEBwYXJhbSAgZGF0ZSAgKERhdGUpIHRoZSBkYXRlIHRvIGNoZWNrXG5cdCAqIEByZXR1cm4gIChEYXRlKSB0aGUgY29ycmVjdGVkIGRhdGVcblx0ICovXG5cdF9kYXlsaWdodFNhdmluZ0FkanVzdDogZnVuY3Rpb24oZGF0ZSkge1xuXHRcdGlmICghZGF0ZSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpID4gMTIgPyBkYXRlLmdldEhvdXJzKCkgKyAyIDogMCk7XG5cdFx0cmV0dXJuIGRhdGU7XG5cdH0sXG5cblx0LyogU2V0IHRoZSBkYXRlKHMpIGRpcmVjdGx5LiAqL1xuXHRfc2V0RGF0ZTogZnVuY3Rpb24oaW5zdCwgZGF0ZSwgbm9DaGFuZ2UpIHtcblx0XHR2YXIgY2xlYXIgPSAhZGF0ZSxcblx0XHRcdG9yaWdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCxcblx0XHRcdG9yaWdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIsXG5cdFx0XHRuZXdEYXRlID0gdGhpcy5fcmVzdHJpY3RNaW5NYXgoaW5zdCwgdGhpcy5fZGV0ZXJtaW5lRGF0ZShpbnN0LCBkYXRlLCBuZXcgRGF0ZSgpKSk7XG5cblx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5ID0gbmV3RGF0ZS5nZXREYXRlKCk7XG5cdFx0aW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aCA9IG5ld0RhdGUuZ2V0TW9udGgoKTtcblx0XHRpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0gbmV3RGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdGlmICgob3JpZ01vbnRoICE9PSBpbnN0LnNlbGVjdGVkTW9udGggfHwgb3JpZ1llYXIgIT09IGluc3Quc2VsZWN0ZWRZZWFyKSAmJiAhbm9DaGFuZ2UpIHtcblx0XHRcdHRoaXMuX25vdGlmeUNoYW5nZShpbnN0KTtcblx0XHR9XG5cdFx0dGhpcy5fYWRqdXN0SW5zdERhdGUoaW5zdCk7XG5cdFx0aWYgKGluc3QuaW5wdXQpIHtcblx0XHRcdGluc3QuaW5wdXQudmFsKGNsZWFyID8gXCJcIiA6IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCkpO1xuXHRcdH1cblx0fSxcblxuXHQvKiBSZXRyaWV2ZSB0aGUgZGF0ZShzKSBkaXJlY3RseS4gKi9cblx0X2dldERhdGU6IGZ1bmN0aW9uKGluc3QpIHtcblx0XHR2YXIgc3RhcnREYXRlID0gKCFpbnN0LmN1cnJlbnRZZWFyIHx8IChpbnN0LmlucHV0ICYmIGluc3QuaW5wdXQudmFsKCkgPT09IFwiXCIpID8gbnVsbCA6XG5cdFx0XHR0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShcblx0XHRcdGluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkpKSk7XG5cdFx0XHRyZXR1cm4gc3RhcnREYXRlO1xuXHR9LFxuXG5cdC8qIEF0dGFjaCB0aGUgb254eHggaGFuZGxlcnMuICBUaGVzZSBhcmUgZGVjbGFyZWQgc3RhdGljYWxseSBzb1xuXHQgKiB0aGV5IHdvcmsgd2l0aCBzdGF0aWMgY29kZSB0cmFuc2Zvcm1lcnMgbGlrZSBDYWphLlxuXHQgKi9cblx0X2F0dGFjaEhhbmRsZXJzOiBmdW5jdGlvbihpbnN0KSB7XG5cdFx0dmFyIHN0ZXBNb250aHMgPSB0aGlzLl9nZXQoaW5zdCwgXCJzdGVwTW9udGhzXCIpLFxuXHRcdFx0aWQgPSBcIiNcIiArIGluc3QuaWQucmVwbGFjZSggL1xcXFxcXFxcL2csIFwiXFxcXFwiICk7XG5cdFx0aW5zdC5kcERpdi5maW5kKFwiW2RhdGEtaGFuZGxlcl1cIikubWFwKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBoYW5kbGVyID0ge1xuXHRcdFx0XHRwcmV2OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0d2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXS5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGlkLCAtc3RlcE1vbnRocywgXCJNXCIpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0d2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXS5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGlkLCArc3RlcE1vbnRocywgXCJNXCIpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRoaWRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0d2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXS5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0b2RheTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHdpbmRvd1tcIkRQX2pRdWVyeV9cIiArIGRwdXVpZF0uZGF0ZXBpY2tlci5fZ290b1RvZGF5KGlkKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2VsZWN0RGF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0d2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3REYXkoaWQsICt0aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtbW9udGhcIiksICt0aGlzLmdldEF0dHJpYnV0ZShcImRhdGEteWVhclwiKSwgdGhpcyk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWxlY3RNb250aDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHdpbmRvd1tcIkRQX2pRdWVyeV9cIiArIGRwdXVpZF0uZGF0ZXBpY2tlci5fc2VsZWN0TW9udGhZZWFyKGlkLCB0aGlzLCBcIk1cIik7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWxlY3RZZWFyOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0d2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3RNb250aFllYXIoaWQsIHRoaXMsIFwiWVwiKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHQkKHRoaXMpLmJpbmQodGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50XCIpLCBoYW5kbGVyW3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVyXCIpXSk7XG5cdFx0fSk7XG5cdH0sXG5cblx0LyogR2VuZXJhdGUgdGhlIEhUTUwgZm9yIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBkYXRlIHBpY2tlci4gKi9cblx0X2dlbmVyYXRlSFRNTDogZnVuY3Rpb24oaW5zdCkge1xuXHRcdHZhciBtYXhEcmF3LCBwcmV2VGV4dCwgcHJldiwgbmV4dFRleHQsIG5leHQsIGN1cnJlbnRUZXh0LCBnb3RvRGF0ZSxcblx0XHRcdGNvbnRyb2xzLCBidXR0b25QYW5lbCwgZmlyc3REYXksIHNob3dXZWVrLCBkYXlOYW1lcywgZGF5TmFtZXNNaW4sXG5cdFx0XHRtb250aE5hbWVzLCBtb250aE5hbWVzU2hvcnQsIGJlZm9yZVNob3dEYXksIHNob3dPdGhlck1vbnRocyxcblx0XHRcdHNlbGVjdE90aGVyTW9udGhzLCBkZWZhdWx0RGF0ZSwgaHRtbCwgZG93LCByb3csIGdyb3VwLCBjb2wsIHNlbGVjdGVkRGF0ZSxcblx0XHRcdGNvcm5lckNsYXNzLCBjYWxlbmRlciwgdGhlYWQsIGRheSwgZGF5c0luTW9udGgsIGxlYWREYXlzLCBjdXJSb3dzLCBudW1Sb3dzLFxuXHRcdFx0cHJpbnREYXRlLCBkUm93LCB0Ym9keSwgZGF5U2V0dGluZ3MsIG90aGVyTW9udGgsIHVuc2VsZWN0YWJsZSxcblx0XHRcdHRlbXBEYXRlID0gbmV3IERhdGUoKSxcblx0XHRcdHRvZGF5ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoXG5cdFx0XHRcdG5ldyBEYXRlKHRlbXBEYXRlLmdldEZ1bGxZZWFyKCksIHRlbXBEYXRlLmdldE1vbnRoKCksIHRlbXBEYXRlLmdldERhdGUoKSkpLCAvLyBjbGVhciB0aW1lXG5cdFx0XHRpc1JUTCA9IHRoaXMuX2dldChpbnN0LCBcImlzUlRMXCIpLFxuXHRcdFx0c2hvd0J1dHRvblBhbmVsID0gdGhpcy5fZ2V0KGluc3QsIFwic2hvd0J1dHRvblBhbmVsXCIpLFxuXHRcdFx0aGlkZUlmTm9QcmV2TmV4dCA9IHRoaXMuX2dldChpbnN0LCBcImhpZGVJZk5vUHJldk5leHRcIiksXG5cdFx0XHRuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID0gdGhpcy5fZ2V0KGluc3QsIFwibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdFwiKSxcblx0XHRcdG51bU1vbnRocyA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGluc3QpLFxuXHRcdFx0c2hvd0N1cnJlbnRBdFBvcyA9IHRoaXMuX2dldChpbnN0LCBcInNob3dDdXJyZW50QXRQb3NcIiksXG5cdFx0XHRzdGVwTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsIFwic3RlcE1vbnRoc1wiKSxcblx0XHRcdGlzTXVsdGlNb250aCA9IChudW1Nb250aHNbMF0gIT09IDEgfHwgbnVtTW9udGhzWzFdICE9PSAxKSxcblx0XHRcdGN1cnJlbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoKCFpbnN0LmN1cnJlbnREYXkgPyBuZXcgRGF0ZSg5OTk5LCA5LCA5KSA6XG5cdFx0XHRcdG5ldyBEYXRlKGluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkpKSksXG5cdFx0XHRtaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCBcIm1pblwiKSxcblx0XHRcdG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsIFwibWF4XCIpLFxuXHRcdFx0ZHJhd01vbnRoID0gaW5zdC5kcmF3TW9udGggLSBzaG93Q3VycmVudEF0UG9zLFxuXHRcdFx0ZHJhd1llYXIgPSBpbnN0LmRyYXdZZWFyO1xuXG5cdFx0aWYgKGRyYXdNb250aCA8IDApIHtcblx0XHRcdGRyYXdNb250aCArPSAxMjtcblx0XHRcdGRyYXdZZWFyLS07XG5cdFx0fVxuXHRcdGlmIChtYXhEYXRlKSB7XG5cdFx0XHRtYXhEcmF3ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUobWF4RGF0ZS5nZXRGdWxsWWVhcigpLFxuXHRcdFx0XHRtYXhEYXRlLmdldE1vbnRoKCkgLSAobnVtTW9udGhzWzBdICogbnVtTW9udGhzWzFdKSArIDEsIG1heERhdGUuZ2V0RGF0ZSgpKSk7XG5cdFx0XHRtYXhEcmF3ID0gKG1pbkRhdGUgJiYgbWF4RHJhdyA8IG1pbkRhdGUgPyBtaW5EYXRlIDogbWF4RHJhdyk7XG5cdFx0XHR3aGlsZSAodGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZHJhd1llYXIsIGRyYXdNb250aCwgMSkpID4gbWF4RHJhdykge1xuXHRcdFx0XHRkcmF3TW9udGgtLTtcblx0XHRcdFx0aWYgKGRyYXdNb250aCA8IDApIHtcblx0XHRcdFx0XHRkcmF3TW9udGggPSAxMTtcblx0XHRcdFx0XHRkcmF3WWVhci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGluc3QuZHJhd01vbnRoID0gZHJhd01vbnRoO1xuXHRcdGluc3QuZHJhd1llYXIgPSBkcmF3WWVhcjtcblxuXHRcdHByZXZUZXh0ID0gdGhpcy5fZ2V0KGluc3QsIFwicHJldlRleHRcIik7XG5cdFx0cHJldlRleHQgPSAoIW5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPyBwcmV2VGV4dCA6IHRoaXMuZm9ybWF0RGF0ZShwcmV2VGV4dCxcblx0XHRcdHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGRyYXdZZWFyLCBkcmF3TW9udGggLSBzdGVwTW9udGhzLCAxKSksXG5cdFx0XHR0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTtcblxuXHRcdHByZXYgPSAodGhpcy5fY2FuQWRqdXN0TW9udGgoaW5zdCwgLTEsIGRyYXdZZWFyLCBkcmF3TW9udGgpID9cblx0XHRcdFwiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3ByZXYnIGRhdGEtZXZlbnQ9J2NsaWNrJ1wiICtcblx0XHRcdFwiIHRpdGxlPSdcIiArIHByZXZUZXh0ICsgXCInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLVwiICsgKCBpc1JUTCA/IFwiZVwiIDogXCJ3XCIpICsgXCInPlwiICsgcHJldlRleHQgKyBcIjwvc3Bhbj48L2E+XCIgOlxuXHRcdFx0KGhpZGVJZk5vUHJldk5leHQgPyBcIlwiIDogXCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSdcIisgcHJldlRleHQgK1wiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArICggaXNSVEwgPyBcImVcIiA6IFwid1wiKSArIFwiJz5cIiArIHByZXZUZXh0ICsgXCI8L3NwYW4+PC9hPlwiKSk7XG5cblx0XHRuZXh0VGV4dCA9IHRoaXMuX2dldChpbnN0LCBcIm5leHRUZXh0XCIpO1xuXHRcdG5leHRUZXh0ID0gKCFuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID8gbmV4dFRleHQgOiB0aGlzLmZvcm1hdERhdGUobmV4dFRleHQsXG5cdFx0XHR0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoICsgc3RlcE1vbnRocywgMSkpLFxuXHRcdFx0dGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGluc3QpKSk7XG5cblx0XHRuZXh0ID0gKHRoaXMuX2NhbkFkanVzdE1vbnRoKGluc3QsICsxLCBkcmF3WWVhciwgZHJhd01vbnRoKSA/XG5cdFx0XHRcIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSduZXh0JyBkYXRhLWV2ZW50PSdjbGljaydcIiArXG5cdFx0XHRcIiB0aXRsZT0nXCIgKyBuZXh0VGV4dCArIFwiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArICggaXNSVEwgPyBcIndcIiA6IFwiZVwiKSArIFwiJz5cIiArIG5leHRUZXh0ICsgXCI8L3NwYW4+PC9hPlwiIDpcblx0XHRcdChoaWRlSWZOb1ByZXZOZXh0ID8gXCJcIiA6IFwiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItbmV4dCB1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWRpc2FibGVkJyB0aXRsZT0nXCIrIG5leHRUZXh0ICsgXCInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLVwiICsgKCBpc1JUTCA/IFwid1wiIDogXCJlXCIpICsgXCInPlwiICsgbmV4dFRleHQgKyBcIjwvc3Bhbj48L2E+XCIpKTtcblxuXHRcdGN1cnJlbnRUZXh0ID0gdGhpcy5fZ2V0KGluc3QsIFwiY3VycmVudFRleHRcIik7XG5cdFx0Z290b0RhdGUgPSAodGhpcy5fZ2V0KGluc3QsIFwiZ290b0N1cnJlbnRcIikgJiYgaW5zdC5jdXJyZW50RGF5ID8gY3VycmVudERhdGUgOiB0b2RheSk7XG5cdFx0Y3VycmVudFRleHQgPSAoIW5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPyBjdXJyZW50VGV4dCA6XG5cdFx0XHR0aGlzLmZvcm1hdERhdGUoY3VycmVudFRleHQsIGdvdG9EYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTtcblxuXHRcdGNvbnRyb2xzID0gKCFpbnN0LmlubGluZSA/IFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNsb3NlIHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktcHJpbWFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J2hpZGUnIGRhdGEtZXZlbnQ9J2NsaWNrJz5cIiArXG5cdFx0XHR0aGlzLl9nZXQoaW5zdCwgXCJjbG9zZVRleHRcIikgKyBcIjwvYnV0dG9uPlwiIDogXCJcIik7XG5cblx0XHRidXR0b25QYW5lbCA9IChzaG93QnV0dG9uUGFuZWwpID8gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgdWktd2lkZ2V0LWNvbnRlbnQnPlwiICsgKGlzUlRMID8gY29udHJvbHMgOiBcIlwiKSArXG5cdFx0XHQodGhpcy5faXNJblJhbmdlKGluc3QsIGdvdG9EYXRlKSA/IFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWN1cnJlbnQgdWktc3RhdGUtZGVmYXVsdCB1aS1wcmlvcml0eS1zZWNvbmRhcnkgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSd0b2RheScgZGF0YS1ldmVudD0nY2xpY2snXCIgK1xuXHRcdFx0XCI+XCIgKyBjdXJyZW50VGV4dCArIFwiPC9idXR0b24+XCIgOiBcIlwiKSArIChpc1JUTCA/IFwiXCIgOiBjb250cm9scykgKyBcIjwvZGl2PlwiIDogXCJcIjtcblxuXHRcdGZpcnN0RGF5ID0gcGFyc2VJbnQodGhpcy5fZ2V0KGluc3QsIFwiZmlyc3REYXlcIiksMTApO1xuXHRcdGZpcnN0RGF5ID0gKGlzTmFOKGZpcnN0RGF5KSA/IDAgOiBmaXJzdERheSk7XG5cblx0XHRzaG93V2VlayA9IHRoaXMuX2dldChpbnN0LCBcInNob3dXZWVrXCIpO1xuXHRcdGRheU5hbWVzID0gdGhpcy5fZ2V0KGluc3QsIFwiZGF5TmFtZXNcIik7XG5cdFx0ZGF5TmFtZXNNaW4gPSB0aGlzLl9nZXQoaW5zdCwgXCJkYXlOYW1lc01pblwiKTtcblx0XHRtb250aE5hbWVzID0gdGhpcy5fZ2V0KGluc3QsIFwibW9udGhOYW1lc1wiKTtcblx0XHRtb250aE5hbWVzU2hvcnQgPSB0aGlzLl9nZXQoaW5zdCwgXCJtb250aE5hbWVzU2hvcnRcIik7XG5cdFx0YmVmb3JlU2hvd0RheSA9IHRoaXMuX2dldChpbnN0LCBcImJlZm9yZVNob3dEYXlcIik7XG5cdFx0c2hvd090aGVyTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsIFwic2hvd090aGVyTW9udGhzXCIpO1xuXHRcdHNlbGVjdE90aGVyTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsIFwic2VsZWN0T3RoZXJNb250aHNcIik7XG5cdFx0ZGVmYXVsdERhdGUgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZShpbnN0KTtcblx0XHRodG1sID0gXCJcIjtcblx0XHRkb3c7XG5cdFx0Zm9yIChyb3cgPSAwOyByb3cgPCBudW1Nb250aHNbMF07IHJvdysrKSB7XG5cdFx0XHRncm91cCA9IFwiXCI7XG5cdFx0XHR0aGlzLm1heFJvd3MgPSA0O1xuXHRcdFx0Zm9yIChjb2wgPSAwOyBjb2wgPCBudW1Nb250aHNbMV07IGNvbCsrKSB7XG5cdFx0XHRcdHNlbGVjdGVkRGF0ZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGRyYXdZZWFyLCBkcmF3TW9udGgsIGluc3Quc2VsZWN0ZWREYXkpKTtcblx0XHRcdFx0Y29ybmVyQ2xhc3MgPSBcIiB1aS1jb3JuZXItYWxsXCI7XG5cdFx0XHRcdGNhbGVuZGVyID0gXCJcIjtcblx0XHRcdFx0aWYgKGlzTXVsdGlNb250aCkge1xuXHRcdFx0XHRcdGNhbGVuZGVyICs9IFwiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci1ncm91cFwiO1xuXHRcdFx0XHRcdGlmIChudW1Nb250aHNbMV0gPiAxKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKGNvbCkge1xuXHRcdFx0XHRcdFx0XHRjYXNlIDA6IGNhbGVuZGVyICs9IFwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtZmlyc3RcIjtcblx0XHRcdFx0XHRcdFx0XHRjb3JuZXJDbGFzcyA9IFwiIHVpLWNvcm5lci1cIiArIChpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgbnVtTW9udGhzWzFdLTE6IGNhbGVuZGVyICs9IFwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbGFzdFwiO1xuXHRcdFx0XHRcdFx0XHRcdGNvcm5lckNsYXNzID0gXCIgdWktY29ybmVyLVwiICsgKGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIpOyBicmVhaztcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDogY2FsZW5kZXIgKz0gXCIgdWktZGF0ZXBpY2tlci1ncm91cC1taWRkbGVcIjsgY29ybmVyQ2xhc3MgPSBcIlwiOyBicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FsZW5kZXIgKz0gXCInPlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhbGVuZGVyICs9IFwiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci1oZWFkZXIgdWktd2lkZ2V0LWhlYWRlciB1aS1oZWxwZXItY2xlYXJmaXhcIiArIGNvcm5lckNsYXNzICsgXCInPlwiICtcblx0XHRcdFx0XHQoL2FsbHxsZWZ0Ly50ZXN0KGNvcm5lckNsYXNzKSAmJiByb3cgPT09IDAgPyAoaXNSVEwgPyBuZXh0IDogcHJldikgOiBcIlwiKSArXG5cdFx0XHRcdFx0KC9hbGx8cmlnaHQvLnRlc3QoY29ybmVyQ2xhc3MpICYmIHJvdyA9PT0gMCA/IChpc1JUTCA/IHByZXYgOiBuZXh0KSA6IFwiXCIpICtcblx0XHRcdFx0XHR0aGlzLl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcihpbnN0LCBkcmF3TW9udGgsIGRyYXdZZWFyLCBtaW5EYXRlLCBtYXhEYXRlLFxuXHRcdFx0XHRcdHJvdyA+IDAgfHwgY29sID4gMCwgbW9udGhOYW1lcywgbW9udGhOYW1lc1Nob3J0KSArIC8vIGRyYXcgbW9udGggaGVhZGVyc1xuXHRcdFx0XHRcdFwiPC9kaXY+PHRhYmxlIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNhbGVuZGFyJz48dGhlYWQ+XCIgK1xuXHRcdFx0XHRcdFwiPHRyPlwiO1xuXHRcdFx0XHR0aGVhZCA9IChzaG93V2VlayA/IFwiPHRoIGNsYXNzPSd1aS1kYXRlcGlja2VyLXdlZWstY29sJz5cIiArIHRoaXMuX2dldChpbnN0LCBcIndlZWtIZWFkZXJcIikgKyBcIjwvdGg+XCIgOiBcIlwiKTtcblx0XHRcdFx0Zm9yIChkb3cgPSAwOyBkb3cgPCA3OyBkb3crKykgeyAvLyBkYXlzIG9mIHRoZSB3ZWVrXG5cdFx0XHRcdFx0ZGF5ID0gKGRvdyArIGZpcnN0RGF5KSAlIDc7XG5cdFx0XHRcdFx0dGhlYWQgKz0gXCI8dGhcIiArICgoZG93ICsgZmlyc3REYXkgKyA2KSAlIDcgPj0gNSA/IFwiIGNsYXNzPSd1aS1kYXRlcGlja2VyLXdlZWstZW5kJ1wiIDogXCJcIikgKyBcIj5cIiArXG5cdFx0XHRcdFx0XHRcIjxzcGFuIHRpdGxlPSdcIiArIGRheU5hbWVzW2RheV0gKyBcIic+XCIgKyBkYXlOYW1lc01pbltkYXldICsgXCI8L3NwYW4+PC90aD5cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYWxlbmRlciArPSB0aGVhZCArIFwiPC90cj48L3RoZWFkPjx0Ym9keT5cIjtcblx0XHRcdFx0ZGF5c0luTW9udGggPSB0aGlzLl9nZXREYXlzSW5Nb250aChkcmF3WWVhciwgZHJhd01vbnRoKTtcblx0XHRcdFx0aWYgKGRyYXdZZWFyID09PSBpbnN0LnNlbGVjdGVkWWVhciAmJiBkcmF3TW9udGggPT09IGluc3Quc2VsZWN0ZWRNb250aCkge1xuXHRcdFx0XHRcdGluc3Quc2VsZWN0ZWREYXkgPSBNYXRoLm1pbihpbnN0LnNlbGVjdGVkRGF5LCBkYXlzSW5Nb250aCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGVhZERheXMgPSAodGhpcy5fZ2V0Rmlyc3REYXlPZk1vbnRoKGRyYXdZZWFyLCBkcmF3TW9udGgpIC0gZmlyc3REYXkgKyA3KSAlIDc7XG5cdFx0XHRcdGN1clJvd3MgPSBNYXRoLmNlaWwoKGxlYWREYXlzICsgZGF5c0luTW9udGgpIC8gNyk7IC8vIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIHJvd3MgdG8gZ2VuZXJhdGVcblx0XHRcdFx0bnVtUm93cyA9IChpc011bHRpTW9udGggPyB0aGlzLm1heFJvd3MgPiBjdXJSb3dzID8gdGhpcy5tYXhSb3dzIDogY3VyUm93cyA6IGN1clJvd3MpOyAvL0lmIG11bHRpcGxlIG1vbnRocywgdXNlIHRoZSBoaWdoZXIgbnVtYmVyIG9mIHJvd3MgKHNlZSAjNzA0Mylcblx0XHRcdFx0dGhpcy5tYXhSb3dzID0gbnVtUm93cztcblx0XHRcdFx0cHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZHJhd1llYXIsIGRyYXdNb250aCwgMSAtIGxlYWREYXlzKSk7XG5cdFx0XHRcdGZvciAoZFJvdyA9IDA7IGRSb3cgPCBudW1Sb3dzOyBkUm93KyspIHsgLy8gY3JlYXRlIGRhdGUgcGlja2VyIHJvd3Ncblx0XHRcdFx0XHRjYWxlbmRlciArPSBcIjx0cj5cIjtcblx0XHRcdFx0XHR0Ym9keSA9ICghc2hvd1dlZWsgPyBcIlwiIDogXCI8dGQgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPlwiICtcblx0XHRcdFx0XHRcdHRoaXMuX2dldChpbnN0LCBcImNhbGN1bGF0ZVdlZWtcIikocHJpbnREYXRlKSArIFwiPC90ZD5cIik7XG5cdFx0XHRcdFx0Zm9yIChkb3cgPSAwOyBkb3cgPCA3OyBkb3crKykgeyAvLyBjcmVhdGUgZGF0ZSBwaWNrZXIgZGF5c1xuXHRcdFx0XHRcdFx0ZGF5U2V0dGluZ3MgPSAoYmVmb3JlU2hvd0RheSA/XG5cdFx0XHRcdFx0XHRcdGJlZm9yZVNob3dEYXkuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksIFtwcmludERhdGVdKSA6IFt0cnVlLCBcIlwiXSk7XG5cdFx0XHRcdFx0XHRvdGhlck1vbnRoID0gKHByaW50RGF0ZS5nZXRNb250aCgpICE9PSBkcmF3TW9udGgpO1xuXHRcdFx0XHRcdFx0dW5zZWxlY3RhYmxlID0gKG90aGVyTW9udGggJiYgIXNlbGVjdE90aGVyTW9udGhzKSB8fCAhZGF5U2V0dGluZ3NbMF0gfHxcblx0XHRcdFx0XHRcdFx0KG1pbkRhdGUgJiYgcHJpbnREYXRlIDwgbWluRGF0ZSkgfHwgKG1heERhdGUgJiYgcHJpbnREYXRlID4gbWF4RGF0ZSk7XG5cdFx0XHRcdFx0XHR0Ym9keSArPSBcIjx0ZCBjbGFzcz0nXCIgK1xuXHRcdFx0XHRcdFx0XHQoKGRvdyArIGZpcnN0RGF5ICsgNikgJSA3ID49IDUgPyBcIiB1aS1kYXRlcGlja2VyLXdlZWstZW5kXCIgOiBcIlwiKSArIC8vIGhpZ2hsaWdodCB3ZWVrZW5kc1xuXHRcdFx0XHRcdFx0XHQob3RoZXJNb250aCA/IFwiIHVpLWRhdGVwaWNrZXItb3RoZXItbW9udGhcIiA6IFwiXCIpICsgLy8gaGlnaGxpZ2h0IGRheXMgZnJvbSBvdGhlciBtb250aHNcblx0XHRcdFx0XHRcdFx0KChwcmludERhdGUuZ2V0VGltZSgpID09PSBzZWxlY3RlZERhdGUuZ2V0VGltZSgpICYmIGRyYXdNb250aCA9PT0gaW5zdC5zZWxlY3RlZE1vbnRoICYmIGluc3QuX2tleUV2ZW50KSB8fCAvLyB1c2VyIHByZXNzZWQga2V5XG5cdFx0XHRcdFx0XHRcdChkZWZhdWx0RGF0ZS5nZXRUaW1lKCkgPT09IHByaW50RGF0ZS5nZXRUaW1lKCkgJiYgZGVmYXVsdERhdGUuZ2V0VGltZSgpID09PSBzZWxlY3RlZERhdGUuZ2V0VGltZSgpKSA/XG5cdFx0XHRcdFx0XHRcdC8vIG9yIGRlZmF1bHREYXRlIGlzIGN1cnJlbnQgcHJpbnRlZERhdGUgYW5kIGRlZmF1bHREYXRlIGlzIHNlbGVjdGVkRGF0ZVxuXHRcdFx0XHRcdFx0XHRcIiBcIiArIHRoaXMuX2RheU92ZXJDbGFzcyA6IFwiXCIpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheVxuXHRcdFx0XHRcdFx0XHQodW5zZWxlY3RhYmxlID8gXCIgXCIgKyB0aGlzLl91bnNlbGVjdGFibGVDbGFzcyArIFwiIHVpLXN0YXRlLWRpc2FibGVkXCI6IFwiXCIpICsgIC8vIGhpZ2hsaWdodCB1bnNlbGVjdGFibGUgZGF5c1xuXHRcdFx0XHRcdFx0XHQob3RoZXJNb250aCAmJiAhc2hvd090aGVyTW9udGhzID8gXCJcIiA6IFwiIFwiICsgZGF5U2V0dGluZ3NbMV0gKyAvLyBoaWdobGlnaHQgY3VzdG9tIGRhdGVzXG5cdFx0XHRcdFx0XHRcdChwcmludERhdGUuZ2V0VGltZSgpID09PSBjdXJyZW50RGF0ZS5nZXRUaW1lKCkgPyBcIiBcIiArIHRoaXMuX2N1cnJlbnRDbGFzcyA6IFwiXCIpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheVxuXHRcdFx0XHRcdFx0XHQocHJpbnREYXRlLmdldFRpbWUoKSA9PT0gdG9kYXkuZ2V0VGltZSgpID8gXCIgdWktZGF0ZXBpY2tlci10b2RheVwiIDogXCJcIikpICsgXCInXCIgKyAvLyBoaWdobGlnaHQgdG9kYXkgKGlmIGRpZmZlcmVudClcblx0XHRcdFx0XHRcdFx0KCghb3RoZXJNb250aCB8fCBzaG93T3RoZXJNb250aHMpICYmIGRheVNldHRpbmdzWzJdID8gXCIgdGl0bGU9J1wiICsgZGF5U2V0dGluZ3NbMl0ucmVwbGFjZSgvJy9nLCBcIiYjMzk7XCIpICsgXCInXCIgOiBcIlwiKSArIC8vIGNlbGwgdGl0bGVcblx0XHRcdFx0XHRcdFx0KHVuc2VsZWN0YWJsZSA/IFwiXCIgOiBcIiBkYXRhLWhhbmRsZXI9J3NlbGVjdERheScgZGF0YS1ldmVudD0nY2xpY2snIGRhdGEtbW9udGg9J1wiICsgcHJpbnREYXRlLmdldE1vbnRoKCkgKyBcIicgZGF0YS15ZWFyPSdcIiArIHByaW50RGF0ZS5nZXRGdWxsWWVhcigpICsgXCInXCIpICsgXCI+XCIgKyAvLyBhY3Rpb25zXG5cdFx0XHRcdFx0XHRcdChvdGhlck1vbnRoICYmICFzaG93T3RoZXJNb250aHMgPyBcIiYjeGEwO1wiIDogLy8gZGlzcGxheSBmb3Igb3RoZXIgbW9udGhzXG5cdFx0XHRcdFx0XHRcdCh1bnNlbGVjdGFibGUgPyBcIjxzcGFuIGNsYXNzPSd1aS1zdGF0ZS1kZWZhdWx0Jz5cIiArIHByaW50RGF0ZS5nZXREYXRlKCkgKyBcIjwvc3Bhbj5cIiA6IFwiPGEgY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHRcIiArXG5cdFx0XHRcdFx0XHRcdChwcmludERhdGUuZ2V0VGltZSgpID09PSB0b2RheS5nZXRUaW1lKCkgPyBcIiB1aS1zdGF0ZS1oaWdobGlnaHRcIiA6IFwiXCIpICtcblx0XHRcdFx0XHRcdFx0KHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IGN1cnJlbnREYXRlLmdldFRpbWUoKSA/IFwiIHVpLXN0YXRlLWFjdGl2ZVwiIDogXCJcIikgKyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgZGF5XG5cdFx0XHRcdFx0XHRcdChvdGhlck1vbnRoID8gXCIgdWktcHJpb3JpdHktc2Vjb25kYXJ5XCIgOiBcIlwiKSArIC8vIGRpc3Rpbmd1aXNoIGRhdGVzIGZyb20gb3RoZXIgbW9udGhzXG5cdFx0XHRcdFx0XHRcdFwiJyBocmVmPScjJz5cIiArIHByaW50RGF0ZS5nZXREYXRlKCkgKyBcIjwvYT5cIikpICsgXCI8L3RkPlwiOyAvLyBkaXNwbGF5IHNlbGVjdGFibGUgZGF0ZVxuXHRcdFx0XHRcdFx0cHJpbnREYXRlLnNldERhdGUocHJpbnREYXRlLmdldERhdGUoKSArIDEpO1xuXHRcdFx0XHRcdFx0cHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QocHJpbnREYXRlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FsZW5kZXIgKz0gdGJvZHkgKyBcIjwvdHI+XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZHJhd01vbnRoKys7XG5cdFx0XHRcdGlmIChkcmF3TW9udGggPiAxMSkge1xuXHRcdFx0XHRcdGRyYXdNb250aCA9IDA7XG5cdFx0XHRcdFx0ZHJhd1llYXIrKztcblx0XHRcdFx0fVxuXHRcdFx0XHRjYWxlbmRlciArPSBcIjwvdGJvZHk+PC90YWJsZT5cIiArIChpc011bHRpTW9udGggPyBcIjwvZGl2PlwiICtcblx0XHRcdFx0XHRcdFx0KChudW1Nb250aHNbMF0gPiAwICYmIGNvbCA9PT0gbnVtTW9udGhzWzFdLTEpID8gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXJvdy1icmVhayc+PC9kaXY+XCIgOiBcIlwiKSA6IFwiXCIpO1xuXHRcdFx0XHRncm91cCArPSBjYWxlbmRlcjtcblx0XHRcdH1cblx0XHRcdGh0bWwgKz0gZ3JvdXA7XG5cdFx0fVxuXHRcdGh0bWwgKz0gYnV0dG9uUGFuZWw7XG5cdFx0aW5zdC5fa2V5RXZlbnQgPSBmYWxzZTtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHQvKiBHZW5lcmF0ZSB0aGUgbW9udGggYW5kIHllYXIgaGVhZGVyLiAqL1xuXHRfZ2VuZXJhdGVNb250aFllYXJIZWFkZXI6IGZ1bmN0aW9uKGluc3QsIGRyYXdNb250aCwgZHJhd1llYXIsIG1pbkRhdGUsIG1heERhdGUsXG5cdFx0XHRzZWNvbmRhcnksIG1vbnRoTmFtZXMsIG1vbnRoTmFtZXNTaG9ydCkge1xuXG5cdFx0dmFyIGluTWluWWVhciwgaW5NYXhZZWFyLCBtb250aCwgeWVhcnMsIHRoaXNZZWFyLCBkZXRlcm1pbmVZZWFyLCB5ZWFyLCBlbmRZZWFyLFxuXHRcdFx0Y2hhbmdlTW9udGggPSB0aGlzLl9nZXQoaW5zdCwgXCJjaGFuZ2VNb250aFwiKSxcblx0XHRcdGNoYW5nZVllYXIgPSB0aGlzLl9nZXQoaW5zdCwgXCJjaGFuZ2VZZWFyXCIpLFxuXHRcdFx0c2hvd01vbnRoQWZ0ZXJZZWFyID0gdGhpcy5fZ2V0KGluc3QsIFwic2hvd01vbnRoQWZ0ZXJZZWFyXCIpLFxuXHRcdFx0aHRtbCA9IFwiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci10aXRsZSc+XCIsXG5cdFx0XHRtb250aEh0bWwgPSBcIlwiO1xuXG5cdFx0Ly8gbW9udGggc2VsZWN0aW9uXG5cdFx0aWYgKHNlY29uZGFyeSB8fCAhY2hhbmdlTW9udGgpIHtcblx0XHRcdG1vbnRoSHRtbCArPSBcIjxzcGFuIGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJz5cIiArIG1vbnRoTmFtZXNbZHJhd01vbnRoXSArIFwiPC9zcGFuPlwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbk1pblllYXIgPSAobWluRGF0ZSAmJiBtaW5EYXRlLmdldEZ1bGxZZWFyKCkgPT09IGRyYXdZZWFyKTtcblx0XHRcdGluTWF4WWVhciA9IChtYXhEYXRlICYmIG1heERhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHJhd1llYXIpO1xuXHRcdFx0bW9udGhIdG1sICs9IFwiPHNlbGVjdCBjbGFzcz0ndWktZGF0ZXBpY2tlci1tb250aCcgZGF0YS1oYW5kbGVyPSdzZWxlY3RNb250aCcgZGF0YS1ldmVudD0nY2hhbmdlJz5cIjtcblx0XHRcdGZvciAoIG1vbnRoID0gMDsgbW9udGggPCAxMjsgbW9udGgrKykge1xuXHRcdFx0XHRpZiAoKCFpbk1pblllYXIgfHwgbW9udGggPj0gbWluRGF0ZS5nZXRNb250aCgpKSAmJiAoIWluTWF4WWVhciB8fCBtb250aCA8PSBtYXhEYXRlLmdldE1vbnRoKCkpKSB7XG5cdFx0XHRcdFx0bW9udGhIdG1sICs9IFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBtb250aCArIFwiJ1wiICtcblx0XHRcdFx0XHRcdChtb250aCA9PT0gZHJhd01vbnRoID8gXCIgc2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIDogXCJcIikgK1xuXHRcdFx0XHRcdFx0XCI+XCIgKyBtb250aE5hbWVzU2hvcnRbbW9udGhdICsgXCI8L29wdGlvbj5cIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bW9udGhIdG1sICs9IFwiPC9zZWxlY3Q+XCI7XG5cdFx0fVxuXG5cdFx0aWYgKCFzaG93TW9udGhBZnRlclllYXIpIHtcblx0XHRcdGh0bWwgKz0gbW9udGhIdG1sICsgKHNlY29uZGFyeSB8fCAhKGNoYW5nZU1vbnRoICYmIGNoYW5nZVllYXIpID8gXCImI3hhMDtcIiA6IFwiXCIpO1xuXHRcdH1cblxuXHRcdC8vIHllYXIgc2VsZWN0aW9uXG5cdFx0aWYgKCAhaW5zdC55ZWFyc2h0bWwgKSB7XG5cdFx0XHRpbnN0LnllYXJzaHRtbCA9IFwiXCI7XG5cdFx0XHRpZiAoc2Vjb25kYXJ5IHx8ICFjaGFuZ2VZZWFyKSB7XG5cdFx0XHRcdGh0bWwgKz0gXCI8c3BhbiBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJz5cIiArIGRyYXdZZWFyICsgXCI8L3NwYW4+XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBkZXRlcm1pbmUgcmFuZ2Ugb2YgeWVhcnMgdG8gZGlzcGxheVxuXHRcdFx0XHR5ZWFycyA9IHRoaXMuX2dldChpbnN0LCBcInllYXJSYW5nZVwiKS5zcGxpdChcIjpcIik7XG5cdFx0XHRcdHRoaXNZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXHRcdFx0XHRkZXRlcm1pbmVZZWFyID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgeWVhciA9ICh2YWx1ZS5tYXRjaCgvY1srXFwtXS4qLykgPyBkcmF3WWVhciArIHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZygxKSwgMTApIDpcblx0XHRcdFx0XHRcdCh2YWx1ZS5tYXRjaCgvWytcXC1dLiovKSA/IHRoaXNZZWFyICsgcGFyc2VJbnQodmFsdWUsIDEwKSA6XG5cdFx0XHRcdFx0XHRwYXJzZUludCh2YWx1ZSwgMTApKSk7XG5cdFx0XHRcdFx0cmV0dXJuIChpc05hTih5ZWFyKSA/IHRoaXNZZWFyIDogeWVhcik7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHllYXIgPSBkZXRlcm1pbmVZZWFyKHllYXJzWzBdKTtcblx0XHRcdFx0ZW5kWWVhciA9IE1hdGgubWF4KHllYXIsIGRldGVybWluZVllYXIoeWVhcnNbMV0gfHwgXCJcIikpO1xuXHRcdFx0XHR5ZWFyID0gKG1pbkRhdGUgPyBNYXRoLm1heCh5ZWFyLCBtaW5EYXRlLmdldEZ1bGxZZWFyKCkpIDogeWVhcik7XG5cdFx0XHRcdGVuZFllYXIgPSAobWF4RGF0ZSA/IE1hdGgubWluKGVuZFllYXIsIG1heERhdGUuZ2V0RnVsbFllYXIoKSkgOiBlbmRZZWFyKTtcblx0XHRcdFx0aW5zdC55ZWFyc2h0bWwgKz0gXCI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInIGRhdGEtaGFuZGxlcj0nc2VsZWN0WWVhcicgZGF0YS1ldmVudD0nY2hhbmdlJz5cIjtcblx0XHRcdFx0Zm9yICg7IHllYXIgPD0gZW5kWWVhcjsgeWVhcisrKSB7XG5cdFx0XHRcdFx0aW5zdC55ZWFyc2h0bWwgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIHllYXIgKyBcIidcIiArXG5cdFx0XHRcdFx0XHQoeWVhciA9PT0gZHJhd1llYXIgPyBcIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcIj5cIiArIHllYXIgKyBcIjwvb3B0aW9uPlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluc3QueWVhcnNodG1sICs9IFwiPC9zZWxlY3Q+XCI7XG5cblx0XHRcdFx0aHRtbCArPSBpbnN0LnllYXJzaHRtbDtcblx0XHRcdFx0aW5zdC55ZWFyc2h0bWwgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGh0bWwgKz0gdGhpcy5fZ2V0KGluc3QsIFwieWVhclN1ZmZpeFwiKTtcblx0XHRpZiAoc2hvd01vbnRoQWZ0ZXJZZWFyKSB7XG5cdFx0XHRodG1sICs9IChzZWNvbmRhcnkgfHwgIShjaGFuZ2VNb250aCAmJiBjaGFuZ2VZZWFyKSA/IFwiJiN4YTA7XCIgOiBcIlwiKSArIG1vbnRoSHRtbDtcblx0XHR9XG5cdFx0aHRtbCArPSBcIjwvZGl2PlwiOyAvLyBDbG9zZSBkYXRlcGlja2VyX2hlYWRlclxuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdC8qIEFkanVzdCBvbmUgb2YgdGhlIGRhdGUgc3ViLWZpZWxkcy4gKi9cblx0X2FkanVzdEluc3REYXRlOiBmdW5jdGlvbihpbnN0LCBvZmZzZXQsIHBlcmlvZCkge1xuXHRcdHZhciB5ZWFyID0gaW5zdC5kcmF3WWVhciArIChwZXJpb2QgPT09IFwiWVwiID8gb2Zmc2V0IDogMCksXG5cdFx0XHRtb250aCA9IGluc3QuZHJhd01vbnRoICsgKHBlcmlvZCA9PT0gXCJNXCIgPyBvZmZzZXQgOiAwKSxcblx0XHRcdGRheSA9IE1hdGgubWluKGluc3Quc2VsZWN0ZWREYXksIHRoaXMuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSkgKyAocGVyaW9kID09PSBcIkRcIiA/IG9mZnNldCA6IDApLFxuXHRcdFx0ZGF0ZSA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KGluc3QsIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXkpKSk7XG5cblx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0aW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG5cdFx0aW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdGlmIChwZXJpb2QgPT09IFwiTVwiIHx8IHBlcmlvZCA9PT0gXCJZXCIpIHtcblx0XHRcdHRoaXMuX25vdGlmeUNoYW5nZShpbnN0KTtcblx0XHR9XG5cdH0sXG5cblx0LyogRW5zdXJlIGEgZGF0ZSBpcyB3aXRoaW4gYW55IG1pbi9tYXggYm91bmRzLiAqL1xuXHRfcmVzdHJpY3RNaW5NYXg6IGZ1bmN0aW9uKGluc3QsIGRhdGUpIHtcblx0XHR2YXIgbWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgXCJtaW5cIiksXG5cdFx0XHRtYXhEYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCBcIm1heFwiKSxcblx0XHRcdG5ld0RhdGUgPSAobWluRGF0ZSAmJiBkYXRlIDwgbWluRGF0ZSA/IG1pbkRhdGUgOiBkYXRlKTtcblx0XHRyZXR1cm4gKG1heERhdGUgJiYgbmV3RGF0ZSA+IG1heERhdGUgPyBtYXhEYXRlIDogbmV3RGF0ZSk7XG5cdH0sXG5cblx0LyogTm90aWZ5IGNoYW5nZSBvZiBtb250aC95ZWFyLiAqL1xuXHRfbm90aWZ5Q2hhbmdlOiBmdW5jdGlvbihpbnN0KSB7XG5cdFx0dmFyIG9uQ2hhbmdlID0gdGhpcy5fZ2V0KGluc3QsIFwib25DaGFuZ2VNb250aFllYXJcIik7XG5cdFx0aWYgKG9uQ2hhbmdlKSB7XG5cdFx0XHRvbkNoYW5nZS5hcHBseSgoaW5zdC5pbnB1dCA/IGluc3QuaW5wdXRbMF0gOiBudWxsKSxcblx0XHRcdFx0W2luc3Quc2VsZWN0ZWRZZWFyLCBpbnN0LnNlbGVjdGVkTW9udGggKyAxLCBpbnN0XSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIG1vbnRocyB0byBzaG93LiAqL1xuXHRfZ2V0TnVtYmVyT2ZNb250aHM6IGZ1bmN0aW9uKGluc3QpIHtcblx0XHR2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsIFwibnVtYmVyT2ZNb250aHNcIik7XG5cdFx0cmV0dXJuIChudW1Nb250aHMgPT0gbnVsbCA/IFsxLCAxXSA6ICh0eXBlb2YgbnVtTW9udGhzID09PSBcIm51bWJlclwiID8gWzEsIG51bU1vbnRoc10gOiBudW1Nb250aHMpKTtcblx0fSxcblxuXHQvKiBEZXRlcm1pbmUgdGhlIGN1cnJlbnQgbWF4aW11bSBkYXRlIC0gZW5zdXJlIG5vIHRpbWUgY29tcG9uZW50cyBhcmUgc2V0LiAqL1xuXHRfZ2V0TWluTWF4RGF0ZTogZnVuY3Rpb24oaW5zdCwgbWluTWF4KSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUoaW5zdCwgdGhpcy5fZ2V0KGluc3QsIG1pbk1heCArIFwiRGF0ZVwiKSwgbnVsbCk7XG5cdH0sXG5cblx0LyogRmluZCB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBnaXZlbiBtb250aC4gKi9cblx0X2dldERheXNJbk1vbnRoOiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuXHRcdHJldHVybiAzMiAtIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHllYXIsIG1vbnRoLCAzMikpLmdldERhdGUoKTtcblx0fSxcblxuXHQvKiBGaW5kIHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIGZpcnN0IG9mIGEgbW9udGguICovXG5cdF9nZXRGaXJzdERheU9mTW9udGg6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKS5nZXREYXkoKTtcblx0fSxcblxuXHQvKiBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBhbGxvdyBhIFwibmV4dC9wcmV2XCIgbW9udGggZGlzcGxheSBjaGFuZ2UuICovXG5cdF9jYW5BZGp1c3RNb250aDogZnVuY3Rpb24oaW5zdCwgb2Zmc2V0LCBjdXJZZWFyLCBjdXJNb250aCkge1xuXHRcdHZhciBudW1Nb250aHMgPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyhpbnN0KSxcblx0XHRcdGRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShjdXJZZWFyLFxuXHRcdFx0Y3VyTW9udGggKyAob2Zmc2V0IDwgMCA/IG9mZnNldCA6IG51bU1vbnRoc1swXSAqIG51bU1vbnRoc1sxXSksIDEpKTtcblxuXHRcdGlmIChvZmZzZXQgPCAwKSB7XG5cdFx0XHRkYXRlLnNldERhdGUodGhpcy5fZ2V0RGF5c0luTW9udGgoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2lzSW5SYW5nZShpbnN0LCBkYXRlKTtcblx0fSxcblxuXHQvKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgYWNjZXB0ZWQgcmFuZ2U/ICovXG5cdF9pc0luUmFuZ2U6IGZ1bmN0aW9uKGluc3QsIGRhdGUpIHtcblx0XHR2YXIgeWVhclNwbGl0LCBjdXJyZW50WWVhcixcblx0XHRcdG1pbkRhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsIFwibWluXCIpLFxuXHRcdFx0bWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgXCJtYXhcIiksXG5cdFx0XHRtaW5ZZWFyID0gbnVsbCxcblx0XHRcdG1heFllYXIgPSBudWxsLFxuXHRcdFx0eWVhcnMgPSB0aGlzLl9nZXQoaW5zdCwgXCJ5ZWFyUmFuZ2VcIik7XG5cdFx0XHRpZiAoeWVhcnMpe1xuXHRcdFx0XHR5ZWFyU3BsaXQgPSB5ZWFycy5zcGxpdChcIjpcIik7XG5cdFx0XHRcdGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXHRcdFx0XHRtaW5ZZWFyID0gcGFyc2VJbnQoeWVhclNwbGl0WzBdLCAxMCk7XG5cdFx0XHRcdG1heFllYXIgPSBwYXJzZUludCh5ZWFyU3BsaXRbMV0sIDEwKTtcblx0XHRcdFx0aWYgKCB5ZWFyU3BsaXRbMF0ubWF0Y2goL1srXFwtXS4qLykgKSB7XG5cdFx0XHRcdFx0bWluWWVhciArPSBjdXJyZW50WWVhcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHllYXJTcGxpdFsxXS5tYXRjaCgvWytcXC1dLiovKSApIHtcblx0XHRcdFx0XHRtYXhZZWFyICs9IGN1cnJlbnRZZWFyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRyZXR1cm4gKCghbWluRGF0ZSB8fCBkYXRlLmdldFRpbWUoKSA+PSBtaW5EYXRlLmdldFRpbWUoKSkgJiZcblx0XHRcdCghbWF4RGF0ZSB8fCBkYXRlLmdldFRpbWUoKSA8PSBtYXhEYXRlLmdldFRpbWUoKSkgJiZcblx0XHRcdCghbWluWWVhciB8fCBkYXRlLmdldEZ1bGxZZWFyKCkgPj0gbWluWWVhcikgJiZcblx0XHRcdCghbWF4WWVhciB8fCBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gbWF4WWVhcikpO1xuXHR9LFxuXG5cdC8qIFByb3ZpZGUgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIGZvcm1hdHRpbmcvcGFyc2luZy4gKi9cblx0X2dldEZvcm1hdENvbmZpZzogZnVuY3Rpb24oaW5zdCkge1xuXHRcdHZhciBzaG9ydFllYXJDdXRvZmYgPSB0aGlzLl9nZXQoaW5zdCwgXCJzaG9ydFllYXJDdXRvZmZcIik7XG5cdFx0c2hvcnRZZWFyQ3V0b2ZmID0gKHR5cGVvZiBzaG9ydFllYXJDdXRvZmYgIT09IFwic3RyaW5nXCIgPyBzaG9ydFllYXJDdXRvZmYgOlxuXHRcdFx0bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICUgMTAwICsgcGFyc2VJbnQoc2hvcnRZZWFyQ3V0b2ZmLCAxMCkpO1xuXHRcdHJldHVybiB7c2hvcnRZZWFyQ3V0b2ZmOiBzaG9ydFllYXJDdXRvZmYsXG5cdFx0XHRkYXlOYW1lc1Nob3J0OiB0aGlzLl9nZXQoaW5zdCwgXCJkYXlOYW1lc1Nob3J0XCIpLCBkYXlOYW1lczogdGhpcy5fZ2V0KGluc3QsIFwiZGF5TmFtZXNcIiksXG5cdFx0XHRtb250aE5hbWVzU2hvcnQ6IHRoaXMuX2dldChpbnN0LCBcIm1vbnRoTmFtZXNTaG9ydFwiKSwgbW9udGhOYW1lczogdGhpcy5fZ2V0KGluc3QsIFwibW9udGhOYW1lc1wiKX07XG5cdH0sXG5cblx0LyogRm9ybWF0IHRoZSBnaXZlbiBkYXRlIGZvciBkaXNwbGF5LiAqL1xuXHRfZm9ybWF0RGF0ZTogZnVuY3Rpb24oaW5zdCwgZGF5LCBtb250aCwgeWVhcikge1xuXHRcdGlmICghZGF5KSB7XG5cdFx0XHRpbnN0LmN1cnJlbnREYXkgPSBpbnN0LnNlbGVjdGVkRGF5O1xuXHRcdFx0aW5zdC5jdXJyZW50TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGg7XG5cdFx0XHRpbnN0LmN1cnJlbnRZZWFyID0gaW5zdC5zZWxlY3RlZFllYXI7XG5cdFx0fVxuXHRcdHZhciBkYXRlID0gKGRheSA/ICh0eXBlb2YgZGF5ID09PSBcIm9iamVjdFwiID8gZGF5IDpcblx0XHRcdHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXkpKSkgOlxuXHRcdFx0dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoaW5zdC5jdXJyZW50WWVhciwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudERheSkpKTtcblx0XHRyZXR1cm4gdGhpcy5mb3JtYXREYXRlKHRoaXMuX2dldChpbnN0LCBcImRhdGVGb3JtYXRcIiksIGRhdGUsIHRoaXMuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7XG5cdH1cbn0pO1xuXG4vKlxuICogQmluZCBob3ZlciBldmVudHMgZm9yIGRhdGVwaWNrZXIgZWxlbWVudHMuXG4gKiBEb25lIHZpYSBkZWxlZ2F0ZSBzbyB0aGUgYmluZGluZyBvbmx5IG9jY3VycyBvbmNlIGluIHRoZSBsaWZldGltZSBvZiB0aGUgcGFyZW50IGRpdi5cbiAqIEdsb2JhbCBpbnN0QWN0aXZlLCBzZXQgYnkgX3VwZGF0ZURhdGVwaWNrZXIgYWxsb3dzIHRoZSBoYW5kbGVycyB0byBmaW5kIHRoZWlyIHdheSBiYWNrIHRvIHRoZSBhY3RpdmUgcGlja2VyLlxuICovXG5mdW5jdGlvbiBiaW5kSG92ZXIoZHBEaXYpIHtcblx0dmFyIHNlbGVjdG9yID0gXCJidXR0b24sIC51aS1kYXRlcGlja2VyLXByZXYsIC51aS1kYXRlcGlja2VyLW5leHQsIC51aS1kYXRlcGlja2VyLWNhbGVuZGFyIHRkIGFcIjtcblx0cmV0dXJuIGRwRGl2LmRlbGVnYXRlKHNlbGVjdG9yLCBcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcyhcInVpLXN0YXRlLWhvdmVyXCIpO1xuXHRcdFx0aWYgKHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aS1kYXRlcGlja2VyLXByZXZcIikgIT09IC0xKSB7XG5cdFx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLXByZXYtaG92ZXJcIik7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5jbGFzc05hbWUuaW5kZXhPZihcInVpLWRhdGVwaWNrZXItbmV4dFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcyhcInVpLWRhdGVwaWNrZXItbmV4dC1ob3ZlclwiKTtcblx0XHRcdH1cblx0XHR9KVxuXHRcdC5kZWxlZ2F0ZShzZWxlY3RvciwgXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcblx0XHRcdGlmICghJC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggaW5zdEFjdGl2ZS5pbmxpbmUgPyBkcERpdi5wYXJlbnQoKVswXSA6IGluc3RBY3RpdmUuaW5wdXRbMF0pKSB7XG5cdFx0XHRcdCQodGhpcykucGFyZW50cyhcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIpLmZpbmQoXCJhXCIpLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIik7XG5cdFx0XHRcdCQodGhpcykuYWRkQ2xhc3MoXCJ1aS1zdGF0ZS1ob3ZlclwiKTtcblx0XHRcdFx0aWYgKHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aS1kYXRlcGlja2VyLXByZXZcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcyhcInVpLWRhdGVwaWNrZXItcHJldi1ob3ZlclwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5jbGFzc05hbWUuaW5kZXhPZihcInVpLWRhdGVwaWNrZXItbmV4dFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKFwidWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG59XG5cbi8qIGpRdWVyeSBleHRlbmQgbm93IGlnbm9yZXMgbnVsbHMhICovXG5mdW5jdGlvbiBleHRlbmRSZW1vdmUodGFyZ2V0LCBwcm9wcykge1xuXHQkLmV4dGVuZCh0YXJnZXQsIHByb3BzKTtcblx0Zm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xuXHRcdGlmIChwcm9wc1tuYW1lXSA9PSBudWxsKSB7XG5cdFx0XHR0YXJnZXRbbmFtZV0gPSBwcm9wc1tuYW1lXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSW52b2tlIHRoZSBkYXRlcGlja2VyIGZ1bmN0aW9uYWxpdHkuXG4gICBAcGFyYW0gIG9wdGlvbnMgIHN0cmluZyAtIGEgY29tbWFuZCwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgb3Jcblx0XHRcdFx0XHRPYmplY3QgLSBzZXR0aW5ncyBmb3IgYXR0YWNoaW5nIG5ldyBkYXRlcGlja2VyIGZ1bmN0aW9uYWxpdHlcbiAgIEByZXR1cm4gIGpRdWVyeSBvYmplY3QgKi9cbiQuZm4uZGF0ZXBpY2tlciA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuXG5cdC8qIFZlcmlmeSBhbiBlbXB0eSBjb2xsZWN0aW9uIHdhc24ndCBwYXNzZWQgLSBGaXhlcyAjNjk3NiAqL1xuXHRpZiAoICF0aGlzLmxlbmd0aCApIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qIEluaXRpYWxpc2UgdGhlIGRhdGUgcGlja2VyLiAqL1xuXHRpZiAoISQuZGF0ZXBpY2tlci5pbml0aWFsaXplZCkge1xuXHRcdCQoZG9jdW1lbnQpLm1vdXNlZG93bigkLmRhdGVwaWNrZXIuX2NoZWNrRXh0ZXJuYWxDbGljayk7XG5cdFx0JC5kYXRlcGlja2VyLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXG5cdC8qIEFwcGVuZCBkYXRlcGlja2VyIG1haW4gY29udGFpbmVyIHRvIGJvZHkgaWYgbm90IGV4aXN0LiAqL1xuXHRpZiAoJChcIiNcIiskLmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoID09PSAwKSB7XG5cdFx0JChcImJvZHlcIikuYXBwZW5kKCQuZGF0ZXBpY2tlci5kcERpdik7XG5cdH1cblxuXHR2YXIgb3RoZXJBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICYmIChvcHRpb25zID09PSBcImlzRGlzYWJsZWRcIiB8fCBvcHRpb25zID09PSBcImdldERhdGVcIiB8fCBvcHRpb25zID09PSBcIndpZGdldFwiKSkge1xuXHRcdHJldHVybiAkLmRhdGVwaWNrZXJbXCJfXCIgKyBvcHRpb25zICsgXCJEYXRlcGlja2VyXCJdLlxuXHRcdFx0YXBwbHkoJC5kYXRlcGlja2VyLCBbdGhpc1swXV0uY29uY2F0KG90aGVyQXJncykpO1xuXHR9XG5cdGlmIChvcHRpb25zID09PSBcIm9wdGlvblwiICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdHJldHVybiAkLmRhdGVwaWNrZXJbXCJfXCIgKyBvcHRpb25zICsgXCJEYXRlcGlja2VyXCJdLlxuXHRcdFx0YXBwbHkoJC5kYXRlcGlja2VyLCBbdGhpc1swXV0uY29uY2F0KG90aGVyQXJncykpO1xuXHR9XG5cdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0dHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0JC5kYXRlcGlja2VyW1wiX1wiICsgb3B0aW9ucyArIFwiRGF0ZXBpY2tlclwiXS5cblx0XHRcdFx0YXBwbHkoJC5kYXRlcGlja2VyLCBbdGhpc10uY29uY2F0KG90aGVyQXJncykpIDpcblx0XHRcdCQuZGF0ZXBpY2tlci5fYXR0YWNoRGF0ZXBpY2tlcih0aGlzLCBvcHRpb25zKTtcblx0fSk7XG59O1xuXG4kLmRhdGVwaWNrZXIgPSBuZXcgRGF0ZXBpY2tlcigpOyAvLyBzaW5nbGV0b24gaW5zdGFuY2VcbiQuZGF0ZXBpY2tlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuJC5kYXRlcGlja2VyLnV1aWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiQuZGF0ZXBpY2tlci52ZXJzaW9uID0gXCIxLjEwLjFcIjtcblxuLy8gV29ya2Fyb3VuZCBmb3IgIzQwNTVcbi8vIEFkZCBhbm90aGVyIGdsb2JhbCB0byBhdm9pZCBub0NvbmZsaWN0IGlzc3VlcyB3aXRoIGlubGluZSBldmVudCBoYW5kbGVyc1xud2luZG93W1wiRFBfalF1ZXJ5X1wiICsgZHB1dWlkXSA9ICQ7XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxudmFyIHNpemVSZWxhdGVkT3B0aW9ucyA9IHtcblx0XHRidXR0b25zOiB0cnVlLFxuXHRcdGhlaWdodDogdHJ1ZSxcblx0XHRtYXhIZWlnaHQ6IHRydWUsXG5cdFx0bWF4V2lkdGg6IHRydWUsXG5cdFx0bWluSGVpZ2h0OiB0cnVlLFxuXHRcdG1pbldpZHRoOiB0cnVlLFxuXHRcdHdpZHRoOiB0cnVlXG5cdH0sXG5cdHJlc2l6YWJsZVJlbGF0ZWRPcHRpb25zID0ge1xuXHRcdG1heEhlaWdodDogdHJ1ZSxcblx0XHRtYXhXaWR0aDogdHJ1ZSxcblx0XHRtaW5IZWlnaHQ6IHRydWUsXG5cdFx0bWluV2lkdGg6IHRydWVcblx0fTtcblxuJC53aWRnZXQoIFwidWkuZGlhbG9nXCIsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGFwcGVuZFRvOiBcImJvZHlcIixcblx0XHRhdXRvT3BlbjogdHJ1ZSxcblx0XHRidXR0b25zOiBbXSxcblx0XHRjbG9zZU9uRXNjYXBlOiB0cnVlLFxuXHRcdGNsb3NlVGV4dDogXCJcIixcblx0XHRkaWFsb2dDbGFzczogXCJcIixcblx0XHRkcmFnZ2FibGU6IHRydWUsXG5cdFx0aGlkZTogbnVsbCxcblx0XHRoZWlnaHQ6IFwiYXV0b1wiLFxuXHRcdG1heEhlaWdodDogbnVsbCxcblx0XHRtYXhXaWR0aDogbnVsbCxcblx0XHRtaW5IZWlnaHQ6IDE1MCxcblx0XHRtaW5XaWR0aDogMTUwLFxuXHRcdG1vZGFsOiBmYWxzZSxcblx0XHRwb3NpdGlvbjoge1xuXHRcdFx0bXk6IFwiY2VudGVyXCIsXG5cdFx0XHRhdDogXCJjZW50ZXJcIixcblx0XHRcdG9mOiB3aW5kb3csXG5cdFx0XHRjb2xsaXNpb246IFwiZml0XCIsXG5cdFx0XHQvLyBFbnN1cmUgdGhlIHRpdGxlYmFyIGlzIGFsd2F5cyB2aXNpYmxlXG5cdFx0XHR1c2luZzogZnVuY3Rpb24oIHBvcyApIHtcblx0XHRcdFx0dmFyIHRvcE9mZnNldCA9ICQoIHRoaXMgKS5jc3MoIHBvcyApLm9mZnNldCgpLnRvcDtcblx0XHRcdFx0aWYgKCB0b3BPZmZzZXQgPCAwICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5jc3MoIFwidG9wXCIsIHBvcy50b3AgLSB0b3BPZmZzZXQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVzaXphYmxlOiB0cnVlLFxuXHRcdHNob3c6IG51bGwsXG5cdFx0dGl0bGU6IG51bGwsXG5cdFx0d2lkdGg6IDMwMCxcblxuXHRcdC8vIGNhbGxiYWNrc1xuXHRcdGJlZm9yZUNsb3NlOiBudWxsLFxuXHRcdGNsb3NlOiBudWxsLFxuXHRcdGRyYWc6IG51bGwsXG5cdFx0ZHJhZ1N0YXJ0OiBudWxsLFxuXHRcdGRyYWdTdG9wOiBudWxsLFxuXHRcdGZvY3VzOiBudWxsLFxuXHRcdG9wZW46IG51bGwsXG5cdFx0cmVzaXplOiBudWxsLFxuXHRcdHJlc2l6ZVN0YXJ0OiBudWxsLFxuXHRcdHJlc2l6ZVN0b3A6IG51bGxcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm9yaWdpbmFsQ3NzID0ge1xuXHRcdFx0ZGlzcGxheTogdGhpcy5lbGVtZW50WzBdLnN0eWxlLmRpc3BsYXksXG5cdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50WzBdLnN0eWxlLndpZHRoLFxuXHRcdFx0bWluSGVpZ2h0OiB0aGlzLmVsZW1lbnRbMF0uc3R5bGUubWluSGVpZ2h0LFxuXHRcdFx0bWF4SGVpZ2h0OiB0aGlzLmVsZW1lbnRbMF0uc3R5bGUubWF4SGVpZ2h0LFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0XG5cdFx0fTtcblx0XHR0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB7XG5cdFx0XHRwYXJlbnQ6IHRoaXMuZWxlbWVudC5wYXJlbnQoKSxcblx0XHRcdGluZGV4OiB0aGlzLmVsZW1lbnQucGFyZW50KCkuY2hpbGRyZW4oKS5pbmRleCggdGhpcy5lbGVtZW50IClcblx0XHR9O1xuXHRcdHRoaXMub3JpZ2luYWxUaXRsZSA9IHRoaXMuZWxlbWVudC5hdHRyKFwidGl0bGVcIik7XG5cdFx0dGhpcy5vcHRpb25zLnRpdGxlID0gdGhpcy5vcHRpb25zLnRpdGxlIHx8IHRoaXMub3JpZ2luYWxUaXRsZTtcblxuXHRcdHRoaXMuX2NyZWF0ZVdyYXBwZXIoKTtcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LnNob3coKVxuXHRcdFx0LnJlbW92ZUF0dHIoXCJ0aXRsZVwiKVxuXHRcdFx0LmFkZENsYXNzKFwidWktZGlhbG9nLWNvbnRlbnQgdWktd2lkZ2V0LWNvbnRlbnRcIilcblx0XHRcdC5hcHBlbmRUbyggdGhpcy51aURpYWxvZyApO1xuXG5cdFx0dGhpcy5fY3JlYXRlVGl0bGViYXIoKTtcblx0XHR0aGlzLl9jcmVhdGVCdXR0b25QYW5lKCk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUgJiYgJC5mbi5kcmFnZ2FibGUgKSB7XG5cdFx0XHR0aGlzLl9tYWtlRHJhZ2dhYmxlKCk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5vcHRpb25zLnJlc2l6YWJsZSAmJiAkLmZuLnJlc2l6YWJsZSApIHtcblx0XHRcdHRoaXMuX21ha2VSZXNpemFibGUoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9pc09wZW4gPSBmYWxzZTtcblx0fSxcblxuXHRfaW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuYXV0b09wZW4gKSB7XG5cdFx0XHR0aGlzLm9wZW4oKTtcblx0XHR9XG5cdH0sXG5cblx0X2FwcGVuZFRvOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMub3B0aW9ucy5hcHBlbmRUbztcblx0XHRpZiAoIGVsZW1lbnQgJiYgKGVsZW1lbnQuanF1ZXJ5IHx8IGVsZW1lbnQubm9kZVR5cGUpICkge1xuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZG9jdW1lbnQuZmluZCggZWxlbWVudCB8fCBcImJvZHlcIiApLmVxKCAwICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXh0LFxuXHRcdFx0b3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbjtcblxuXHRcdHRoaXMuX2Rlc3Ryb3lPdmVybGF5KCk7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpXG5cdFx0XHQucmVtb3ZlQ2xhc3MoXCJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudFwiKVxuXHRcdFx0LmNzcyggdGhpcy5vcmlnaW5hbENzcyApXG5cdFx0XHQvLyBXaXRob3V0IGRldGFjaGluZyBmaXJzdCwgdGhlIGZvbGxvd2luZyBiZWNvbWVzIHJlYWxseSBzbG93XG5cdFx0XHQuZGV0YWNoKCk7XG5cblx0XHR0aGlzLnVpRGlhbG9nLnN0b3AoIHRydWUsIHRydWUgKS5yZW1vdmUoKTtcblxuXHRcdGlmICggdGhpcy5vcmlnaW5hbFRpdGxlICkge1xuXHRcdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiwgdGhpcy5vcmlnaW5hbFRpdGxlICk7XG5cdFx0fVxuXG5cdFx0bmV4dCA9IG9yaWdpbmFsUG9zaXRpb24ucGFyZW50LmNoaWxkcmVuKCkuZXEoIG9yaWdpbmFsUG9zaXRpb24uaW5kZXggKTtcblx0XHQvLyBEb24ndCB0cnkgdG8gcGxhY2UgdGhlIGRpYWxvZyBuZXh0IHRvIGl0c2VsZiAoIzg2MTMpXG5cdFx0aWYgKCBuZXh0Lmxlbmd0aCAmJiBuZXh0WzBdICE9PSB0aGlzLmVsZW1lbnRbMF0gKSB7XG5cdFx0XHRuZXh0LmJlZm9yZSggdGhpcy5lbGVtZW50ICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9yaWdpbmFsUG9zaXRpb24ucGFyZW50LmFwcGVuZCggdGhpcy5lbGVtZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdHdpZGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMudWlEaWFsb2c7XG5cdH0sXG5cblx0ZGlzYWJsZTogJC5ub29wLFxuXHRlbmFibGU6ICQubm9vcCxcblxuXHRjbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGlmICggIXRoaXMuX2lzT3BlbiB8fCB0aGlzLl90cmlnZ2VyKCBcImJlZm9yZUNsb3NlXCIsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMuX2Rlc3Ryb3lPdmVybGF5KCk7XG5cblx0XHRpZiAoICF0aGlzLm9wZW5lci5maWx0ZXIoXCI6Zm9jdXNhYmxlXCIpLmZvY3VzKCkubGVuZ3RoICkge1xuXHRcdFx0Ly8gSGlkaW5nIGEgZm9jdXNlZCBlbGVtZW50IGRvZXNuJ3QgdHJpZ2dlciBibHVyIGluIFdlYktpdFxuXHRcdFx0Ly8gc28gaW4gY2FzZSB3ZSBoYXZlIG5vdGhpbmcgdG8gZm9jdXMgb24sIGV4cGxpY2l0bHkgYmx1ciB0aGUgYWN0aXZlIGVsZW1lbnRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD00NzE4MlxuXHRcdFx0JCggdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ICkuYmx1cigpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2hpZGUoIHRoaXMudWlEaWFsb2csIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHtcblx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiY2xvc2VcIiwgZXZlbnQgKTtcblx0XHR9KTtcblx0fSxcblxuXHRpc09wZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pc09wZW47XG5cdH0sXG5cblx0bW92ZVRvVG9wOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9tb3ZlVG9Ub3AoKTtcblx0fSxcblxuXHRfbW92ZVRvVG9wOiBmdW5jdGlvbiggZXZlbnQsIHNpbGVudCApIHtcblx0XHR2YXIgbW92ZWQgPSAhIXRoaXMudWlEaWFsb2cubmV4dEFsbChcIjp2aXNpYmxlXCIpLmluc2VydEJlZm9yZSggdGhpcy51aURpYWxvZyApLmxlbmd0aDtcblx0XHRpZiAoIG1vdmVkICYmICFzaWxlbnQgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImZvY3VzXCIsIGV2ZW50ICk7XG5cdFx0fVxuXHRcdHJldHVybiBtb3ZlZDtcblx0fSxcblxuXHRvcGVuOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCB0aGlzLl9pc09wZW4gKSB7XG5cdFx0XHRpZiAoIHRoaXMuX21vdmVUb1RvcCgpICkge1xuXHRcdFx0XHR0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5faXNPcGVuID0gdHJ1ZTtcblx0XHR0aGlzLm9wZW5lciA9ICQoIHRoaXMuZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCApO1xuXG5cdFx0dGhpcy5fc2l6ZSgpO1xuXHRcdHRoaXMuX3Bvc2l0aW9uKCk7XG5cdFx0dGhpcy5fY3JlYXRlT3ZlcmxheSgpO1xuXHRcdHRoaXMuX21vdmVUb1RvcCggbnVsbCwgdHJ1ZSApO1xuXHRcdHRoaXMuX3Nob3coIHRoaXMudWlEaWFsb2csIHRoaXMub3B0aW9ucy5zaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdHRoYXQuX2ZvY3VzVGFiYmFibGUoKTtcblx0XHRcdHRoYXQuX3RyaWdnZXIoXCJmb2N1c1wiKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoXCJvcGVuXCIpO1xuXHR9LFxuXG5cdF9mb2N1c1RhYmJhYmxlOiBmdW5jdGlvbigpIHtcblx0XHQvLyBTZXQgZm9jdXMgdG8gdGhlIGZpcnN0IG1hdGNoOlxuXHRcdC8vIDEuIEZpcnN0IGVsZW1lbnQgaW5zaWRlIHRoZSBkaWFsb2cgbWF0Y2hpbmcgW2F1dG9mb2N1c11cblx0XHQvLyAyLiBUYWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgY29udGVudCBlbGVtZW50XG5cdFx0Ly8gMy4gVGFiYmFibGUgZWxlbWVudCBpbnNpZGUgdGhlIGJ1dHRvbnBhbmVcblx0XHQvLyA0LiBUaGUgY2xvc2UgYnV0dG9uXG5cdFx0Ly8gNS4gVGhlIGRpYWxvZyBpdHNlbGZcblx0XHR2YXIgaGFzRm9jdXMgPSB0aGlzLmVsZW1lbnQuZmluZChcIlthdXRvZm9jdXNdXCIpO1xuXHRcdGlmICggIWhhc0ZvY3VzLmxlbmd0aCApIHtcblx0XHRcdGhhc0ZvY3VzID0gdGhpcy5lbGVtZW50LmZpbmQoXCI6dGFiYmFibGVcIik7XG5cdFx0fVxuXHRcdGlmICggIWhhc0ZvY3VzLmxlbmd0aCApIHtcblx0XHRcdGhhc0ZvY3VzID0gdGhpcy51aURpYWxvZ0J1dHRvblBhbmUuZmluZChcIjp0YWJiYWJsZVwiKTtcblx0XHR9XG5cdFx0aWYgKCAhaGFzRm9jdXMubGVuZ3RoICkge1xuXHRcdFx0aGFzRm9jdXMgPSB0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZS5maWx0ZXIoXCI6dGFiYmFibGVcIik7XG5cdFx0fVxuXHRcdGlmICggIWhhc0ZvY3VzLmxlbmd0aCApIHtcblx0XHRcdGhhc0ZvY3VzID0gdGhpcy51aURpYWxvZztcblx0XHR9XG5cdFx0aGFzRm9jdXMuZXEoIDAgKS5mb2N1cygpO1xuXHR9LFxuXG5cdF9rZWVwRm9jdXM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRmdW5jdGlvbiBjaGVja0ZvY3VzKCkge1xuXHRcdFx0dmFyIGFjdGl2ZUVsZW1lbnQgPSB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQsXG5cdFx0XHRcdGlzQWN0aXZlID0gdGhpcy51aURpYWxvZ1swXSA9PT0gYWN0aXZlRWxlbWVudCB8fFxuXHRcdFx0XHRcdCQuY29udGFpbnMoIHRoaXMudWlEaWFsb2dbMF0sIGFjdGl2ZUVsZW1lbnQgKTtcblx0XHRcdGlmICggIWlzQWN0aXZlICkge1xuXHRcdFx0XHR0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7XG5cdFx0Ly8gc3VwcG9ydDogSUVcblx0XHQvLyBJRSA8PSA4IGRvZXNuJ3QgcHJldmVudCBtb3ZpbmcgZm9jdXMgZXZlbiB3aXRoIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHQvLyBzbyB3ZSBjaGVjayBhZ2FpbiBsYXRlclxuXHRcdHRoaXMuX2RlbGF5KCBjaGVja0ZvY3VzICk7XG5cdH0sXG5cblx0X2NyZWF0ZVdyYXBwZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudWlEaWFsb2cgPSAkKFwiPGRpdj5cIilcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1kaWFsb2cgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwgdWktZnJvbnQgXCIgK1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuZGlhbG9nQ2xhc3MgKVxuXHRcdFx0LmhpZGUoKVxuXHRcdFx0LmF0dHIoe1xuXHRcdFx0XHQvLyBTZXR0aW5nIHRhYkluZGV4IG1ha2VzIHRoZSBkaXYgZm9jdXNhYmxlXG5cdFx0XHRcdHRhYkluZGV4OiAtMSxcblx0XHRcdFx0cm9sZTogXCJkaWFsb2dcIlxuXHRcdFx0fSlcblx0XHRcdC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXG5cdFx0dGhpcy5fb24oIHRoaXMudWlEaWFsb2csIHtcblx0XHRcdGtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuY2xvc2VPbkVzY2FwZSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgJiYgZXZlbnQua2V5Q29kZSAmJlxuXHRcdFx0XHRcdFx0ZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLkVTQ0FQRSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcHJldmVudCB0YWJiaW5nIG91dCBvZiBkaWFsb2dzXG5cdFx0XHRcdGlmICggZXZlbnQua2V5Q29kZSAhPT0gJC51aS5rZXlDb2RlLlRBQiApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHRhYmJhYmxlcyA9IHRoaXMudWlEaWFsb2cuZmluZChcIjp0YWJiYWJsZVwiKSxcblx0XHRcdFx0XHRmaXJzdCA9IHRhYmJhYmxlcy5maWx0ZXIoXCI6Zmlyc3RcIiksXG5cdFx0XHRcdFx0bGFzdCAgPSB0YWJiYWJsZXMuZmlsdGVyKFwiOmxhc3RcIik7XG5cblx0XHRcdFx0aWYgKCAoIGV2ZW50LnRhcmdldCA9PT0gbGFzdFswXSB8fCBldmVudC50YXJnZXQgPT09IHRoaXMudWlEaWFsb2dbMF0gKSAmJiAhZXZlbnQuc2hpZnRLZXkgKSB7XG5cdFx0XHRcdFx0Zmlyc3QuZm9jdXMoIDEgKTtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGV2ZW50LnRhcmdldCA9PT0gZmlyc3RbMF0gfHwgZXZlbnQudGFyZ2V0ID09PSB0aGlzLnVpRGlhbG9nWzBdICkgJiYgZXZlbnQuc2hpZnRLZXkgKSB7XG5cdFx0XHRcdFx0bGFzdC5mb2N1cyggMSApO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRtb3VzZWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLl9tb3ZlVG9Ub3AoIGV2ZW50ICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZm9jdXNUYWJiYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBhbnkgZXhpc3RpbmcgYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUgbWVhbnNcblx0XHQvLyB0aGF0IHRoZSBkaWFsb2cgY29udGVudCBpcyBtYXJrZWQgdXAgcHJvcGVybHlcblx0XHQvLyBvdGhlcndpc2Ugd2UgYnJ1dGUgZm9yY2UgdGhlIGNvbnRlbnQgYXMgdGhlIGRlc2NyaXB0aW9uXG5cdFx0aWYgKCAhdGhpcy5lbGVtZW50LmZpbmQoXCJbYXJpYS1kZXNjcmliZWRieV1cIikubGVuZ3RoICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5hdHRyKHtcblx0XHRcdFx0XCJhcmlhLWRlc2NyaWJlZGJ5XCI6IHRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoXCJpZFwiKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdF9jcmVhdGVUaXRsZWJhcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHVpRGlhbG9nVGl0bGU7XG5cblx0XHR0aGlzLnVpRGlhbG9nVGl0bGViYXIgPSAkKFwiPGRpdj5cIilcblx0XHRcdC5hZGRDbGFzcyhcInVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4XCIpXG5cdFx0XHQucHJlcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7XG5cdFx0dGhpcy5fb24oIHRoaXMudWlEaWFsb2dUaXRsZWJhciwge1xuXHRcdFx0bW91c2Vkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIERvbid0IHByZXZlbnQgY2xpY2sgb24gY2xvc2UgYnV0dG9uICgjODgzOClcblx0XHRcdFx0Ly8gRm9jdXNpbmcgYSBkaWFsb2cgdGhhdCBpcyBwYXJ0aWFsbHkgc2Nyb2xsZWQgb3V0IG9mIHZpZXdcblx0XHRcdFx0Ly8gY2F1c2VzIHRoZSBicm93c2VyIHRvIHNjcm9sbCBpdCBpbnRvIHZpZXcsIHByZXZlbnRpbmcgdGhlIGNsaWNrIGV2ZW50XG5cdFx0XHRcdGlmICggISQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoXCIudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIpICkge1xuXHRcdFx0XHRcdC8vIERpYWxvZyBpc24ndCBnZXR0aW5nIGZvY3VzIHdoZW4gZHJhZ2dpbmcgKCM4MDYzKVxuXHRcdFx0XHRcdHRoaXMudWlEaWFsb2cuZm9jdXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UgPSAkKFwiPGJ1dHRvbj48L2J1dHRvbj5cIilcblx0XHRcdC5idXR0b24oe1xuXHRcdFx0XHRsYWJlbDogdGhpcy5vcHRpb25zLmNsb3NlVGV4dCxcblx0XHRcdFx0aWNvbnM6IHtcblx0XHRcdFx0XHRwcmltYXJ5OiBcInVpLWljb24tY2xvc2V0aGlja1wiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRleHQ6IGZhbHNlXG5cdFx0XHR9KVxuXHRcdFx0LmFkZENsYXNzKFwidWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIpXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2dUaXRsZWJhciApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZSwge1xuXHRcdFx0Y2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy5jbG9zZSggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHVpRGlhbG9nVGl0bGUgPSAkKFwiPHNwYW4+XCIpXG5cdFx0XHQudW5pcXVlSWQoKVxuXHRcdFx0LmFkZENsYXNzKFwidWktZGlhbG9nLXRpdGxlXCIpXG5cdFx0XHQucHJlcGVuZFRvKCB0aGlzLnVpRGlhbG9nVGl0bGViYXIgKTtcblx0XHR0aGlzLl90aXRsZSggdWlEaWFsb2dUaXRsZSApO1xuXG5cdFx0dGhpcy51aURpYWxvZy5hdHRyKHtcblx0XHRcdFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHVpRGlhbG9nVGl0bGUuYXR0cihcImlkXCIpXG5cdFx0fSk7XG5cdH0sXG5cblx0X3RpdGxlOiBmdW5jdGlvbiggdGl0bGUgKSB7XG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLnRpdGxlICkge1xuXHRcdFx0dGl0bGUuaHRtbChcIiYjMTYwO1wiKTtcblx0XHR9XG5cdFx0dGl0bGUudGV4dCggdGhpcy5vcHRpb25zLnRpdGxlICk7XG5cdH0sXG5cblx0X2NyZWF0ZUJ1dHRvblBhbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudWlEaWFsb2dCdXR0b25QYW5lID0gJChcIjxkaXY+XCIpXG5cdFx0XHQuYWRkQ2xhc3MoXCJ1aS1kaWFsb2ctYnV0dG9ucGFuZSB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXhcIik7XG5cblx0XHR0aGlzLnVpQnV0dG9uU2V0ID0gJChcIjxkaXY+XCIpXG5cdFx0XHQuYWRkQ2xhc3MoXCJ1aS1kaWFsb2ctYnV0dG9uc2V0XCIpXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2dCdXR0b25QYW5lICk7XG5cblx0XHR0aGlzLl9jcmVhdGVCdXR0b25zKCk7XG5cdH0sXG5cblx0X2NyZWF0ZUJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdGJ1dHRvbnMgPSB0aGlzLm9wdGlvbnMuYnV0dG9ucztcblxuXHRcdC8vIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGJ1dHRvbiBwYW5lLCByZW1vdmUgaXRcblx0XHR0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5yZW1vdmUoKTtcblx0XHR0aGlzLnVpQnV0dG9uU2V0LmVtcHR5KCk7XG5cblx0XHRpZiAoICQuaXNFbXB0eU9iamVjdCggYnV0dG9ucyApIHx8ICgkLmlzQXJyYXkoIGJ1dHRvbnMgKSAmJiAhYnV0dG9ucy5sZW5ndGgpICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5yZW1vdmVDbGFzcyhcInVpLWRpYWxvZy1idXR0b25zXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdCQuZWFjaCggYnV0dG9ucywgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRcdFx0dmFyIGNsaWNrLCBidXR0b25PcHRpb25zO1xuXHRcdFx0cHJvcHMgPSAkLmlzRnVuY3Rpb24oIHByb3BzICkgP1xuXHRcdFx0XHR7IGNsaWNrOiBwcm9wcywgdGV4dDogbmFtZSB9IDpcblx0XHRcdFx0cHJvcHM7XG5cdFx0XHQvLyBEZWZhdWx0IHRvIGEgbm9uLXN1Ym1pdHRpbmcgYnV0dG9uXG5cdFx0XHRwcm9wcyA9ICQuZXh0ZW5kKCB7IHR5cGU6IFwiYnV0dG9uXCIgfSwgcHJvcHMgKTtcblx0XHRcdC8vIENoYW5nZSB0aGUgY29udGV4dCBmb3IgdGhlIGNsaWNrIGNhbGxiYWNrIHRvIGJlIHRoZSBtYWluIGVsZW1lbnRcblx0XHRcdGNsaWNrID0gcHJvcHMuY2xpY2s7XG5cdFx0XHRwcm9wcy5jbGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjbGljay5hcHBseSggdGhhdC5lbGVtZW50WzBdLCBhcmd1bWVudHMgKTtcblx0XHRcdH07XG5cdFx0XHRidXR0b25PcHRpb25zID0ge1xuXHRcdFx0XHRpY29uczogcHJvcHMuaWNvbnMsXG5cdFx0XHRcdHRleHQ6IHByb3BzLnNob3dUZXh0XG5cdFx0XHR9O1xuXHRcdFx0ZGVsZXRlIHByb3BzLmljb25zO1xuXHRcdFx0ZGVsZXRlIHByb3BzLnNob3dUZXh0O1xuXHRcdFx0JCggXCI8YnV0dG9uPjwvYnV0dG9uPlwiLCBwcm9wcyApXG5cdFx0XHRcdC5idXR0b24oIGJ1dHRvbk9wdGlvbnMgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIHRoYXQudWlCdXR0b25TZXQgKTtcblx0XHR9KTtcblx0XHR0aGlzLnVpRGlhbG9nLmFkZENsYXNzKFwidWktZGlhbG9nLWJ1dHRvbnNcIik7XG5cdFx0dGhpcy51aURpYWxvZ0J1dHRvblBhbmUuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2cgKTtcblx0fSxcblxuXHRfbWFrZURyYWdnYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdGZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cG9zaXRpb246IHVpLnBvc2l0aW9uLFxuXHRcdFx0XHRvZmZzZXQ6IHVpLm9mZnNldFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzLnVpRGlhbG9nLmRyYWdnYWJsZSh7XG5cdFx0XHRjYW5jZWw6IFwiLnVpLWRpYWxvZy1jb250ZW50LCAudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIsXG5cdFx0XHRoYW5kbGU6IFwiLnVpLWRpYWxvZy10aXRsZWJhclwiLFxuXHRcdFx0Y29udGFpbm1lbnQ6IFwiZG9jdW1lbnRcIixcblx0XHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIik7XG5cdFx0XHRcdHRoYXQuX2Jsb2NrRnJhbWVzKCk7XG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiZHJhZ1N0YXJ0XCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7XG5cdFx0XHR9LFxuXHRcdFx0ZHJhZzogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJkcmFnXCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0b3B0aW9ucy5wb3NpdGlvbiA9IFtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi5sZWZ0IC0gdGhhdC5kb2N1bWVudC5zY3JvbGxMZWZ0KCksXG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wIC0gdGhhdC5kb2N1bWVudC5zY3JvbGxUb3AoKVxuXHRcdFx0XHRdO1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlQ2xhc3MoXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIik7XG5cdFx0XHRcdHRoYXQuX3VuYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJkcmFnU3RvcFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9tYWtlUmVzaXphYmxlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0aGFuZGxlcyA9IG9wdGlvbnMucmVzaXphYmxlLFxuXHRcdFx0Ly8gLnVpLXJlc2l6YWJsZSBoYXMgcG9zaXRpb246IHJlbGF0aXZlIGRlZmluZWQgaW4gdGhlIHN0eWxlc2hlZXRcblx0XHRcdC8vIGJ1dCBkaWFsb2dzIGhhdmUgdG8gdXNlIGFic29sdXRlIG9yIGZpeGVkIHBvc2l0aW9uaW5nXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMudWlEaWFsb2cuY3NzKFwicG9zaXRpb25cIiksXG5cdFx0XHRyZXNpemVIYW5kbGVzID0gdHlwZW9mIGhhbmRsZXMgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRoYW5kbGVzXHQ6XG5cdFx0XHRcdFwibixlLHMsdyxzZSxzdyxuZSxud1wiO1xuXG5cdFx0ZnVuY3Rpb24gZmlsdGVyZWRVaSggdWkgKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRvcmlnaW5hbFBvc2l0aW9uOiB1aS5vcmlnaW5hbFBvc2l0aW9uLFxuXHRcdFx0XHRvcmlnaW5hbFNpemU6IHVpLm9yaWdpbmFsU2l6ZSxcblx0XHRcdFx0cG9zaXRpb246IHVpLnBvc2l0aW9uLFxuXHRcdFx0XHRzaXplOiB1aS5zaXplXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHRoaXMudWlEaWFsb2cucmVzaXphYmxlKHtcblx0XHRcdGNhbmNlbDogXCIudWktZGlhbG9nLWNvbnRlbnRcIixcblx0XHRcdGNvbnRhaW5tZW50OiBcImRvY3VtZW50XCIsXG5cdFx0XHRhbHNvUmVzaXplOiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRtYXhXaWR0aDogb3B0aW9ucy5tYXhXaWR0aCxcblx0XHRcdG1heEhlaWdodDogb3B0aW9ucy5tYXhIZWlnaHQsXG5cdFx0XHRtaW5XaWR0aDogb3B0aW9ucy5taW5XaWR0aCxcblx0XHRcdG1pbkhlaWdodDogdGhpcy5fbWluSGVpZ2h0KCksXG5cdFx0XHRoYW5kbGVzOiByZXNpemVIYW5kbGVzLFxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyhcInVpLWRpYWxvZy1yZXNpemluZ1wiKTtcblx0XHRcdFx0dGhhdC5fYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJyZXNpemVTdGFydFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fSxcblx0XHRcdHJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJyZXNpemVcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHRvcHRpb25zLmhlaWdodCA9ICQoIHRoaXMgKS5oZWlnaHQoKTtcblx0XHRcdFx0b3B0aW9ucy53aWR0aCA9ICQoIHRoaXMgKS53aWR0aCgpO1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlQ2xhc3MoXCJ1aS1kaWFsb2ctcmVzaXppbmdcIik7XG5cdFx0XHRcdHRoYXQuX3VuYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJyZXNpemVTdG9wXCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7XG5cdFx0XHR9XG5cdFx0fSlcblx0XHQuY3NzKCBcInBvc2l0aW9uXCIsIHBvc2l0aW9uICk7XG5cdH0sXG5cblx0X21pbkhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRyZXR1cm4gb3B0aW9ucy5oZWlnaHQgPT09IFwiYXV0b1wiID9cblx0XHRcdG9wdGlvbnMubWluSGVpZ2h0IDpcblx0XHRcdE1hdGgubWluKCBvcHRpb25zLm1pbkhlaWdodCwgb3B0aW9ucy5oZWlnaHQgKTtcblx0fSxcblxuXHRfcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdC8vIE5lZWQgdG8gc2hvdyB0aGUgZGlhbG9nIHRvIGdldCB0aGUgYWN0dWFsIG9mZnNldCBpbiB0aGUgcG9zaXRpb24gcGx1Z2luXG5cdFx0dmFyIGlzVmlzaWJsZSA9IHRoaXMudWlEaWFsb2cuaXMoXCI6dmlzaWJsZVwiKTtcblx0XHRpZiAoICFpc1Zpc2libGUgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLnNob3coKTtcblx0XHR9XG5cdFx0dGhpcy51aURpYWxvZy5wb3NpdGlvbiggdGhpcy5vcHRpb25zLnBvc2l0aW9uICk7XG5cdFx0aWYgKCAhaXNWaXNpYmxlICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5oaWRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRyZXNpemUgPSBmYWxzZSxcblx0XHRcdHJlc2l6YWJsZU9wdGlvbnMgPSB7fTtcblxuXHRcdCQuZWFjaCggb3B0aW9ucywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHR0aGF0Ll9zZXRPcHRpb24oIGtleSwgdmFsdWUgKTtcblxuXHRcdFx0aWYgKCBrZXkgaW4gc2l6ZVJlbGF0ZWRPcHRpb25zICkge1xuXHRcdFx0XHRyZXNpemUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBrZXkgaW4gcmVzaXphYmxlUmVsYXRlZE9wdGlvbnMgKSB7XG5cdFx0XHRcdHJlc2l6YWJsZU9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoIHJlc2l6ZSApIHtcblx0XHRcdHRoaXMuX3NpemUoKTtcblx0XHRcdHRoaXMuX3Bvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy51aURpYWxvZy5pcyhcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIikgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSggXCJvcHRpb25cIiwgcmVzaXphYmxlT3B0aW9ucyApO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjE1Ki9cblx0XHR2YXIgaXNEcmFnZ2FibGUsIGlzUmVzaXphYmxlLFxuXHRcdFx0dWlEaWFsb2cgPSB0aGlzLnVpRGlhbG9nO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlhbG9nQ2xhc3NcIiApIHtcblx0XHRcdHVpRGlhbG9nXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzIClcblx0XHRcdFx0LmFkZENsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImFwcGVuZFRvXCIgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiYnV0dG9uc1wiICkge1xuXHRcdFx0dGhpcy5fY3JlYXRlQnV0dG9ucygpO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImNsb3NlVGV4dFwiICkge1xuXHRcdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UuYnV0dG9uKHtcblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgd2UgYWx3YXlzIHBhc3MgYSBzdHJpbmdcblx0XHRcdFx0bGFiZWw6IFwiXCIgKyB2YWx1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiZHJhZ2dhYmxlXCIgKSB7XG5cdFx0XHRpc0RyYWdnYWJsZSA9IHVpRGlhbG9nLmlzKFwiOmRhdGEodWktZHJhZ2dhYmxlKVwiKTtcblx0XHRcdGlmICggaXNEcmFnZ2FibGUgJiYgIXZhbHVlICkge1xuXHRcdFx0XHR1aURpYWxvZy5kcmFnZ2FibGUoXCJkZXN0cm95XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFpc0RyYWdnYWJsZSAmJiB2YWx1ZSApIHtcblx0XHRcdFx0dGhpcy5fbWFrZURyYWdnYWJsZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInBvc2l0aW9uXCIgKSB7XG5cdFx0XHR0aGlzLl9wb3NpdGlvbigpO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInJlc2l6YWJsZVwiICkge1xuXHRcdFx0Ly8gY3VycmVudGx5IHJlc2l6YWJsZSwgYmVjb21pbmcgbm9uLXJlc2l6YWJsZVxuXHRcdFx0aXNSZXNpemFibGUgPSB1aURpYWxvZy5pcyhcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIik7XG5cdFx0XHRpZiAoIGlzUmVzaXphYmxlICYmICF2YWx1ZSApIHtcblx0XHRcdFx0dWlEaWFsb2cucmVzaXphYmxlKFwiZGVzdHJveVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY3VycmVudGx5IHJlc2l6YWJsZSwgY2hhbmdpbmcgaGFuZGxlc1xuXHRcdFx0aWYgKCBpc1Jlc2l6YWJsZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHVpRGlhbG9nLnJlc2l6YWJsZSggXCJvcHRpb25cIiwgXCJoYW5kbGVzXCIsIHZhbHVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGN1cnJlbnRseSBub24tcmVzaXphYmxlLCBiZWNvbWluZyByZXNpemFibGVcblx0XHRcdGlmICggIWlzUmVzaXphYmxlICYmIHZhbHVlICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fbWFrZVJlc2l6YWJsZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInRpdGxlXCIgKSB7XG5cdFx0XHR0aGlzLl90aXRsZSggdGhpcy51aURpYWxvZ1RpdGxlYmFyLmZpbmQoXCIudWktZGlhbG9nLXRpdGxlXCIpICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyBJZiB0aGUgdXNlciBoYXMgcmVzaXplZCB0aGUgZGlhbG9nLCB0aGUgLnVpLWRpYWxvZyBhbmQgLnVpLWRpYWxvZy1jb250ZW50XG5cdFx0Ly8gZGl2cyB3aWxsIGJvdGggaGF2ZSB3aWR0aCBhbmQgaGVpZ2h0IHNldCwgc28gd2UgbmVlZCB0byByZXNldCB0aGVtXG5cdFx0dmFyIG5vbkNvbnRlbnRIZWlnaHQsIG1pbkNvbnRlbnRIZWlnaHQsIG1heENvbnRlbnRIZWlnaHQsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0Ly8gUmVzZXQgY29udGVudCBzaXppbmdcblx0XHR0aGlzLmVsZW1lbnQuc2hvdygpLmNzcyh7XG5cdFx0XHR3aWR0aDogXCJhdXRvXCIsXG5cdFx0XHRtaW5IZWlnaHQ6IDAsXG5cdFx0XHRtYXhIZWlnaHQ6IFwibm9uZVwiLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fSk7XG5cblx0XHRpZiAoIG9wdGlvbnMubWluV2lkdGggPiBvcHRpb25zLndpZHRoICkge1xuXHRcdFx0b3B0aW9ucy53aWR0aCA9IG9wdGlvbnMubWluV2lkdGg7XG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXQgd3JhcHBlciBzaXppbmdcblx0XHQvLyBkZXRlcm1pbmUgdGhlIGhlaWdodCBvZiBhbGwgdGhlIG5vbi1jb250ZW50IGVsZW1lbnRzXG5cdFx0bm9uQ29udGVudEhlaWdodCA9IHRoaXMudWlEaWFsb2cuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBcImF1dG9cIixcblx0XHRcdFx0d2lkdGg6IG9wdGlvbnMud2lkdGhcblx0XHRcdH0pXG5cdFx0XHQub3V0ZXJIZWlnaHQoKTtcblx0XHRtaW5Db250ZW50SGVpZ2h0ID0gTWF0aC5tYXgoIDAsIG9wdGlvbnMubWluSGVpZ2h0IC0gbm9uQ29udGVudEhlaWdodCApO1xuXHRcdG1heENvbnRlbnRIZWlnaHQgPSB0eXBlb2Ygb3B0aW9ucy5tYXhIZWlnaHQgPT09IFwibnVtYmVyXCIgP1xuXHRcdFx0TWF0aC5tYXgoIDAsIG9wdGlvbnMubWF4SGVpZ2h0IC0gbm9uQ29udGVudEhlaWdodCApIDpcblx0XHRcdFwibm9uZVwiO1xuXG5cdFx0aWYgKCBvcHRpb25zLmhlaWdodCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY3NzKHtcblx0XHRcdFx0bWluSGVpZ2h0OiBtaW5Db250ZW50SGVpZ2h0LFxuXHRcdFx0XHRtYXhIZWlnaHQ6IG1heENvbnRlbnRIZWlnaHQsXG5cdFx0XHRcdGhlaWdodDogXCJhdXRvXCJcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuaGVpZ2h0KCBNYXRoLm1heCggMCwgb3B0aW9ucy5oZWlnaHQgLSBub25Db250ZW50SGVpZ2h0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy51aURpYWxvZy5pcyhcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIikgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSggXCJvcHRpb25cIiwgXCJtaW5IZWlnaHRcIiwgdGhpcy5fbWluSGVpZ2h0KCkgKTtcblx0XHR9XG5cdH0sXG5cblx0X2Jsb2NrRnJhbWVzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmlmcmFtZUJsb2NrcyA9IHRoaXMuZG9jdW1lbnQuZmluZCggXCJpZnJhbWVcIiApLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpZnJhbWUgPSAkKCB0aGlzICk7XG5cblx0XHRcdHJldHVybiAkKCBcIjxkaXY+XCIgKVxuXHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdHdpZHRoOiBpZnJhbWUub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRcdGhlaWdodDogaWZyYW1lLm91dGVySGVpZ2h0KClcblx0XHRcdFx0fSlcblx0XHRcdFx0LmFwcGVuZFRvKCBpZnJhbWUucGFyZW50KCkgKVxuXHRcdFx0XHQub2Zmc2V0KCBpZnJhbWUub2Zmc2V0KCkgKVswXTtcblx0XHR9KTtcblx0fSxcblxuXHRfdW5ibG9ja0ZyYW1lczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLmlmcmFtZUJsb2NrcyApIHtcblx0XHRcdHRoaXMuaWZyYW1lQmxvY2tzLnJlbW92ZSgpO1xuXHRcdFx0ZGVsZXRlIHRoaXMuaWZyYW1lQmxvY2tzO1xuXHRcdH1cblx0fSxcblxuXHRfY3JlYXRlT3ZlcmxheTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLm1vZGFsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggISQudWkuZGlhbG9nLm92ZXJsYXlJbnN0YW5jZXMgKSB7XG5cdFx0XHQvLyBQcmV2ZW50IHVzZSBvZiBhbmNob3JzIGFuZCBpbnB1dHMuXG5cdFx0XHQvLyBXZSB1c2UgYSBkZWxheSBpbiBjYXNlIHRoZSBvdmVybGF5IGlzIGNyZWF0ZWQgZnJvbSBhblxuXHRcdFx0Ly8gZXZlbnQgdGhhdCB3ZSdyZSBnb2luZyB0byBiZSBjYW5jZWxsaW5nLiAoIzI4MDQpXG5cdFx0XHR0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gSGFuZGxlIC5kaWFsb2coKS5kaWFsb2coXCJjbG9zZVwiKSAoIzQwNjUpXG5cdFx0XHRcdGlmICggJC51aS5kaWFsb2cub3ZlcmxheUluc3RhbmNlcyApIHtcblx0XHRcdFx0XHR0aGlzLmRvY3VtZW50LmJpbmQoIFwiZm9jdXNpbi5kaWFsb2dcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdChcIi51aS1kaWFsb2dcIikubGVuZ3RoICYmXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogUmVtb3ZlIGhhY2sgd2hlbiBkYXRlcGlja2VyIGltcGxlbWVudHNcblx0XHRcdFx0XHRcdFx0XHQvLyB0aGUgLnVpLWZyb250IGxvZ2ljICgjODk4OSlcblx0XHRcdFx0XHRcdFx0XHQhJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdChcIi51aS1kYXRlcGlja2VyXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0JChcIi51aS1kaWFsb2c6dmlzaWJsZTpsYXN0IC51aS1kaWFsb2ctY29udGVudFwiKVxuXHRcdFx0XHRcdFx0XHRcdC5kYXRhKFwidWktZGlhbG9nXCIpLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMub3ZlcmxheSA9ICQoXCI8ZGl2PlwiKVxuXHRcdFx0LmFkZENsYXNzKFwidWktd2lkZ2V0LW92ZXJsYXkgdWktZnJvbnRcIilcblx0XHRcdC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXHRcdHRoaXMuX29uKCB0aGlzLm92ZXJsYXksIHtcblx0XHRcdG1vdXNlZG93bjogXCJfa2VlcEZvY3VzXCJcblx0XHR9KTtcblx0XHQkLnVpLmRpYWxvZy5vdmVybGF5SW5zdGFuY2VzKys7XG5cdH0sXG5cblx0X2Rlc3Ryb3lPdmVybGF5OiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzLm9wdGlvbnMubW9kYWwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm92ZXJsYXkgKSB7XG5cdFx0XHQkLnVpLmRpYWxvZy5vdmVybGF5SW5zdGFuY2VzLS07XG5cblx0XHRcdGlmICggISQudWkuZGlhbG9nLm92ZXJsYXlJbnN0YW5jZXMgKSB7XG5cdFx0XHRcdHRoaXMuZG9jdW1lbnQudW5iaW5kKCBcImZvY3VzaW4uZGlhbG9nXCIgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMub3ZlcmxheS5yZW1vdmUoKTtcblx0XHRcdHRoaXMub3ZlcmxheSA9IG51bGw7XG5cdFx0fVxuXHR9XG59KTtcblxuJC51aS5kaWFsb2cub3ZlcmxheUluc3RhbmNlcyA9IDA7XG5cbi8vIERFUFJFQ0FURURcbmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkge1xuXHQvLyBwb3NpdGlvbiBvcHRpb24gd2l0aCBhcnJheSBub3RhdGlvblxuXHQvLyBqdXN0IG92ZXJyaWRlIHdpdGggb2xkIGltcGxlbWVudGF0aW9uXG5cdCQud2lkZ2V0KCBcInVpLmRpYWxvZ1wiLCAkLnVpLmRpYWxvZywge1xuXHRcdF9wb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb24sXG5cdFx0XHRcdG15QXQgPSBbXSxcblx0XHRcdFx0b2Zmc2V0ID0gWyAwLCAwIF0sXG5cdFx0XHRcdGlzVmlzaWJsZTtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2YgcG9zaXRpb24gPT09IFwic3RyaW5nXCIgfHwgKHR5cGVvZiBwb3NpdGlvbiA9PT0gXCJvYmplY3RcIiAmJiBcIjBcIiBpbiBwb3NpdGlvbiApICkge1xuXHRcdFx0XHRcdG15QXQgPSBwb3NpdGlvbi5zcGxpdCA/IHBvc2l0aW9uLnNwbGl0KFwiIFwiKSA6IFsgcG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdIF07XG5cdFx0XHRcdFx0aWYgKCBteUF0Lmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdG15QXRbMV0gPSBteUF0WzBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCQuZWFjaCggWyBcImxlZnRcIiwgXCJ0b3BcIiBdLCBmdW5jdGlvbiggaSwgb2Zmc2V0UG9zaXRpb24gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICtteUF0WyBpIF0gPT09IG15QXRbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0b2Zmc2V0WyBpIF0gPSBteUF0WyBpIF07XG5cdFx0XHRcdFx0XHRcdG15QXRbIGkgXSA9IG9mZnNldFBvc2l0aW9uO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24gPSB7XG5cdFx0XHRcdFx0XHRteTogbXlBdFswXSArIChvZmZzZXRbMF0gPCAwID8gb2Zmc2V0WzBdIDogXCIrXCIgKyBvZmZzZXRbMF0pICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHRteUF0WzFdICsgKG9mZnNldFsxXSA8IDAgPyBvZmZzZXRbMV0gOiBcIitcIiArIG9mZnNldFsxXSksXG5cdFx0XHRcdFx0XHRhdDogbXlBdC5qb2luKFwiIFwiKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgJC51aS5kaWFsb2cucHJvdG90eXBlLm9wdGlvbnMucG9zaXRpb24sIHBvc2l0aW9uICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NpdGlvbiA9ICQudWkuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zLnBvc2l0aW9uO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBuZWVkIHRvIHNob3cgdGhlIGRpYWxvZyB0byBnZXQgdGhlIGFjdHVhbCBvZmZzZXQgaW4gdGhlIHBvc2l0aW9uIHBsdWdpblxuXHRcdFx0aXNWaXNpYmxlID0gdGhpcy51aURpYWxvZy5pcyhcIjp2aXNpYmxlXCIpO1xuXHRcdFx0aWYgKCAhaXNWaXNpYmxlICkge1xuXHRcdFx0XHR0aGlzLnVpRGlhbG9nLnNob3coKTtcblx0XHRcdH1cblx0XHRcdHRoaXMudWlEaWFsb2cucG9zaXRpb24oIHBvc2l0aW9uICk7XG5cdFx0XHRpZiAoICFpc1Zpc2libGUgKSB7XG5cdFx0XHRcdHRoaXMudWlEaWFsb2cuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbn0oIGpRdWVyeSApICk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC53aWRnZXQoIFwidWkubWVudVwiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjx1bD5cIixcblx0ZGVsYXk6IDMwMCxcblx0b3B0aW9uczoge1xuXHRcdGljb25zOiB7XG5cdFx0XHRzdWJtZW51OiBcInVpLWljb24tY2FyYXQtMS1lXCJcblx0XHR9LFxuXHRcdG1lbnVzOiBcInVsXCIsXG5cdFx0cG9zaXRpb246IHtcblx0XHRcdG15OiBcImxlZnQgdG9wXCIsXG5cdFx0XHRhdDogXCJyaWdodCB0b3BcIlxuXHRcdH0sXG5cdFx0cm9sZTogXCJtZW51XCIsXG5cblx0XHQvLyBjYWxsYmFja3Ncblx0XHRibHVyOiBudWxsLFxuXHRcdGZvY3VzOiBudWxsLFxuXHRcdHNlbGVjdDogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWN0aXZlTWVudSA9IHRoaXMuZWxlbWVudDtcblx0XHQvLyBmbGFnIHVzZWQgdG8gcHJldmVudCBmaXJpbmcgb2YgdGhlIGNsaWNrIGhhbmRsZXJcblx0XHQvLyBhcyB0aGUgZXZlbnQgYnViYmxlcyB1cCB0aHJvdWdoIG5lc3RlZCBtZW51c1xuXHRcdHRoaXMubW91c2VIYW5kbGVkID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQudW5pcXVlSWQoKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLW1lbnUgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGxcIiApXG5cdFx0XHQudG9nZ2xlQ2xhc3MoIFwidWktbWVudS1pY29uc1wiLCAhIXRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1pY29uXCIgKS5sZW5ndGggKVxuXHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRyb2xlOiB0aGlzLm9wdGlvbnMucm9sZSxcblx0XHRcdFx0dGFiSW5kZXg6IDBcblx0XHRcdH0pXG5cdFx0XHQvLyBuZWVkIHRvIGNhdGNoIGFsbCBjbGlja3Mgb24gZGlzYWJsZWQgbWVudVxuXHRcdFx0Ly8gbm90IHBvc3NpYmxlIHRocm91Z2ggX29uXG5cdFx0XHQuYmluZCggXCJjbGlja1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgJC5wcm94eShmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMgKSk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktc3RhdGUtZGlzYWJsZWRcIiApXG5cdFx0XHRcdC5hdHRyKCBcImFyaWEtZGlzYWJsZWRcIiwgXCJ0cnVlXCIgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9vbih7XG5cdFx0XHQvLyBQcmV2ZW50IGZvY3VzIGZyb20gc3RpY2tpbmcgdG8gbGlua3MgaW5zaWRlIG1lbnUgYWZ0ZXIgY2xpY2tpbmdcblx0XHRcdC8vIHRoZW0gKGZvY3VzIHNob3VsZCBhbHdheXMgc3RheSBvbiBVTCBkdXJpbmcgbmF2aWdhdGlvbikuXG5cdFx0XHRcIm1vdXNlZG93biAudWktbWVudS1pdGVtID4gYVwiOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9LFxuXHRcdFx0XCJjbGljayAudWktc3RhdGUtZGlzYWJsZWQgPiBhXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH0sXG5cdFx0XHRcImNsaWNrIC51aS1tZW51LWl0ZW06aGFzKGEpXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLW1lbnUtaXRlbVwiICk7XG5cdFx0XHRcdGlmICggIXRoaXMubW91c2VIYW5kbGVkICYmIHRhcmdldC5ub3QoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5tb3VzZUhhbmRsZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0dGhpcy5zZWxlY3QoIGV2ZW50ICk7XG5cdFx0XHRcdFx0Ly8gT3BlbiBzdWJtZW51IG9uIGNsaWNrXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXQuaGFzKCBcIi51aS1tZW51XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmV4cGFuZCggZXZlbnQgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhdGhpcy5lbGVtZW50LmlzKCBcIjpmb2N1c1wiICkgKSB7XG5cdFx0XHRcdFx0XHQvLyBSZWRpcmVjdCBmb2N1cyB0byB0aGUgbWVudVxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiZm9jdXNcIiwgWyB0cnVlIF0gKTtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIGFjdGl2ZSBpdGVtIGlzIG9uIHRoZSB0b3AgbGV2ZWwsIGxldCBpdCBzdGF5IGFjdGl2ZS5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgYmx1ciB0aGUgYWN0aXZlIGl0ZW0gc2luY2UgaXQgaXMgbm8gbG9uZ2VyIHZpc2libGUuXG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuYWN0aXZlICYmIHRoaXMuYWN0aXZlLnBhcmVudHMoIFwiLnVpLW1lbnVcIiApLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0XCJtb3VzZWVudGVyIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gJCggZXZlbnQuY3VycmVudFRhcmdldCApO1xuXHRcdFx0XHQvLyBSZW1vdmUgdWktc3RhdGUtYWN0aXZlIGNsYXNzIGZyb20gc2libGluZ3Mgb2YgdGhlIG5ld2x5IGZvY3VzZWQgbWVudSBpdGVtXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGEganVtcCBjYXVzZWQgYnkgYWRqYWNlbnQgZWxlbWVudHMgYm90aCBoYXZpbmcgYSBjbGFzcyB3aXRoIGEgYm9yZGVyXG5cdFx0XHRcdHRhcmdldC5zaWJsaW5ncygpLmNoaWxkcmVuKCBcIi51aS1zdGF0ZS1hY3RpdmVcIiApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCB0YXJnZXQgKTtcblx0XHRcdH0sXG5cdFx0XHRtb3VzZWxlYXZlOiBcImNvbGxhcHNlQWxsXCIsXG5cdFx0XHRcIm1vdXNlbGVhdmUgLnVpLW1lbnVcIjogXCJjb2xsYXBzZUFsbFwiLFxuXHRcdFx0Zm9jdXM6IGZ1bmN0aW9uKCBldmVudCwga2VlcEFjdGl2ZUl0ZW0gKSB7XG5cdFx0XHRcdC8vIElmIHRoZXJlJ3MgYWxyZWFkeSBhbiBhY3RpdmUgaXRlbSwga2VlcCBpdCBhY3RpdmVcblx0XHRcdFx0Ly8gSWYgbm90LCBhY3RpdmF0ZSB0aGUgZmlyc3QgaXRlbVxuXHRcdFx0XHR2YXIgaXRlbSA9IHRoaXMuYWN0aXZlIHx8IHRoaXMuZWxlbWVudC5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtXCIgKS5lcSggMCApO1xuXG5cdFx0XHRcdGlmICggIWtlZXBBY3RpdmVJdGVtICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBpdGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggISQuY29udGFpbnMoIHRoaXMuZWxlbWVudFswXSwgdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ICkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbGxhcHNlQWxsKCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0a2V5ZG93bjogXCJfa2V5ZG93blwiXG5cdFx0fSk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblxuXHRcdC8vIENsaWNrcyBvdXRzaWRlIG9mIGEgbWVudSBjb2xsYXBzZSBhbnkgb3BlbiBtZW51c1xuXHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB7XG5cdFx0XHRjbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoICEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCBcIi51aS1tZW51XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUFsbCggZXZlbnQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc2V0IHRoZSBtb3VzZUhhbmRsZWQgZmxhZ1xuXHRcdFx0XHR0aGlzLm1vdXNlSGFuZGxlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHQvLyBEZXN0cm95IChzdWIpbWVudXNcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiIClcblx0XHRcdC5maW5kKCBcIi51aS1tZW51XCIgKS5hZGRCYWNrKClcblx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLW1lbnUgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwgdWktbWVudS1pY29uc1wiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwidGFiSW5kZXhcIiApXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtbGFiZWxsZWRieVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1leHBhbmRlZFwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1oaWRkZW5cIiApXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtZGlzYWJsZWRcIiApXG5cdFx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpXG5cdFx0XHRcdC5zaG93KCk7XG5cblx0XHQvLyBEZXN0cm95IG1lbnUgaXRlbXNcblx0XHR0aGlzLmVsZW1lbnQuZmluZCggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLW1lbnUtaXRlbVwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcInJvbGVcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWRpc2FibGVkXCIgKVxuXHRcdFx0LmNoaWxkcmVuKCBcImFcIiApXG5cdFx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWhvdmVyXCIgKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJ0YWJJbmRleFwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1oYXNwb3B1cFwiIClcblx0XHRcdFx0LmNoaWxkcmVuKCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmRhdGEoIFwidWktbWVudS1zdWJtZW51LWNhcmF0XCIgKSApIHtcblx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdC8vIERlc3Ryb3kgbWVudSBkaXZpZGVyc1xuXHRcdHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51LWRpdmlkZXJcIiApLnJlbW92ZUNsYXNzKCBcInVpLW1lbnUtZGl2aWRlciB1aS13aWRnZXQtY29udGVudFwiICk7XG5cdH0sXG5cblx0X2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjIwKi9cblx0XHR2YXIgbWF0Y2gsIHByZXYsIGNoYXJhY3Rlciwgc2tpcCwgcmVnZXgsXG5cdFx0XHRwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cblx0XHRmdW5jdGlvbiBlc2NhcGUoIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlLnJlcGxhY2UoIC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIiApO1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9VUDpcblx0XHRcdHRoaXMucHJldmlvdXNQYWdlKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0dGhpcy5uZXh0UGFnZSggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHR0aGlzLl9tb3ZlKCBcImZpcnN0XCIsIFwiZmlyc3RcIiwgZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkVORDpcblx0XHRcdHRoaXMuX21vdmUoIFwibGFzdFwiLCBcImxhc3RcIiwgZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlVQOlxuXHRcdFx0dGhpcy5wcmV2aW91cyggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkRPV046XG5cdFx0XHR0aGlzLm5leHQoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5MRUZUOlxuXHRcdFx0dGhpcy5jb2xsYXBzZSggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlJJR0hUOlxuXHRcdFx0aWYgKCB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUuaXMoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdFx0dGhpcy5leHBhbmQoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5FTlRFUjpcblx0XHRjYXNlICQudWkua2V5Q29kZS5TUEFDRTpcblx0XHRcdHRoaXMuX2FjdGl2YXRlKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRVNDQVBFOlxuXHRcdFx0dGhpcy5jb2xsYXBzZSggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXHRcdFx0cHJldiA9IHRoaXMucHJldmlvdXNGaWx0ZXIgfHwgXCJcIjtcblx0XHRcdGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGV2ZW50LmtleUNvZGUgKTtcblx0XHRcdHNraXAgPSBmYWxzZTtcblxuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLmZpbHRlclRpbWVyICk7XG5cblx0XHRcdGlmICggY2hhcmFjdGVyID09PSBwcmV2ICkge1xuXHRcdFx0XHRza2lwID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoYXJhY3RlciA9IHByZXYgKyBjaGFyYWN0ZXI7XG5cdFx0XHR9XG5cblx0XHRcdHJlZ2V4ID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBlc2NhcGUoIGNoYXJhY3RlciApLCBcImlcIiApO1xuXHRcdFx0bWF0Y2ggPSB0aGlzLmFjdGl2ZU1lbnUuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbVwiICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVnZXgudGVzdCggJCggdGhpcyApLmNoaWxkcmVuKCBcImFcIiApLnRleHQoKSApO1xuXHRcdFx0fSk7XG5cdFx0XHRtYXRjaCA9IHNraXAgJiYgbWF0Y2guaW5kZXgoIHRoaXMuYWN0aXZlLm5leHQoKSApICE9PSAtMSA/XG5cdFx0XHRcdHRoaXMuYWN0aXZlLm5leHRBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkgOlxuXHRcdFx0XHRtYXRjaDtcblxuXHRcdFx0Ly8gSWYgbm8gbWF0Y2hlcyBvbiB0aGUgY3VycmVudCBmaWx0ZXIsIHJlc2V0IHRvIHRoZSBsYXN0IGNoYXJhY3RlciBwcmVzc2VkXG5cdFx0XHQvLyB0byBtb3ZlIGRvd24gdGhlIG1lbnUgdG8gdGhlIGZpcnN0IGl0ZW0gdGhhdCBzdGFydHMgd2l0aCB0aGF0IGNoYXJhY3RlclxuXHRcdFx0aWYgKCAhbWF0Y2gubGVuZ3RoICkge1xuXHRcdFx0XHRjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBldmVudC5rZXlDb2RlICk7XG5cdFx0XHRcdHJlZ2V4ID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBlc2NhcGUoIGNoYXJhY3RlciApLCBcImlcIiApO1xuXHRcdFx0XHRtYXRjaCA9IHRoaXMuYWN0aXZlTWVudS5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtXCIgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlZ2V4LnRlc3QoICQoIHRoaXMgKS5jaGlsZHJlbiggXCJhXCIgKS50ZXh0KCkgKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0Y2gubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgbWF0Y2ggKTtcblx0XHRcdFx0aWYgKCBtYXRjaC5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRcdHRoaXMucHJldmlvdXNGaWx0ZXIgPSBjaGFyYWN0ZXI7XG5cdFx0XHRcdFx0dGhpcy5maWx0ZXJUaW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7XG5cdFx0XHRcdFx0fSwgMTAwMCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5wcmV2aW91c0ZpbHRlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cblx0X2FjdGl2YXRlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUuaXMoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdGlmICggdGhpcy5hY3RpdmUuY2hpbGRyZW4oIFwiYVthcmlhLWhhc3BvcHVwPSd0cnVlJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy5leHBhbmQoIGV2ZW50ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnNlbGVjdCggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lbnVzLFxuXHRcdFx0aWNvbiA9IHRoaXMub3B0aW9ucy5pY29ucy5zdWJtZW51LFxuXHRcdFx0c3VibWVudXMgPSB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLm1lbnVzICk7XG5cblx0XHQvLyBJbml0aWFsaXplIG5lc3RlZCBtZW51c1xuXHRcdHN1Ym1lbnVzLmZpbHRlciggXCI6bm90KC51aS1tZW51KVwiIClcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1tZW51IHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsXCIgKVxuXHRcdFx0LmhpZGUoKVxuXHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRyb2xlOiB0aGlzLm9wdGlvbnMucm9sZSxcblx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcblx0XHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIlxuXHRcdFx0fSlcblx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbWVudSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRpdGVtID0gbWVudS5wcmV2KCBcImFcIiApLFxuXHRcdFx0XHRcdHN1Ym1lbnVDYXJhdCA9ICQoIFwiPHNwYW4+XCIgKVxuXHRcdFx0XHRcdFx0LmFkZENsYXNzKCBcInVpLW1lbnUtaWNvbiB1aS1pY29uIFwiICsgaWNvbiApXG5cdFx0XHRcdFx0XHQuZGF0YSggXCJ1aS1tZW51LXN1Ym1lbnUtY2FyYXRcIiwgdHJ1ZSApO1xuXG5cdFx0XHRcdGl0ZW1cblx0XHRcdFx0XHQuYXR0ciggXCJhcmlhLWhhc3BvcHVwXCIsIFwidHJ1ZVwiIClcblx0XHRcdFx0XHQucHJlcGVuZCggc3VibWVudUNhcmF0ICk7XG5cdFx0XHRcdG1lbnUuYXR0ciggXCJhcmlhLWxhYmVsbGVkYnlcIiwgaXRlbS5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0fSk7XG5cblx0XHRtZW51cyA9IHN1Ym1lbnVzLmFkZCggdGhpcy5lbGVtZW50ICk7XG5cblx0XHQvLyBEb24ndCByZWZyZXNoIGxpc3QgaXRlbXMgdGhhdCBhcmUgYWxyZWFkeSBhZGFwdGVkXG5cdFx0bWVudXMuY2hpbGRyZW4oIFwiOm5vdCgudWktbWVudS1pdGVtKTpoYXMoYSlcIiApXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktbWVudS1pdGVtXCIgKVxuXHRcdFx0LmF0dHIoIFwicm9sZVwiLCBcInByZXNlbnRhdGlvblwiIClcblx0XHRcdC5jaGlsZHJlbiggXCJhXCIgKVxuXHRcdFx0XHQudW5pcXVlSWQoKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktY29ybmVyLWFsbFwiIClcblx0XHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRcdHRhYkluZGV4OiAtMSxcblx0XHRcdFx0XHRyb2xlOiB0aGlzLl9pdGVtUm9sZSgpXG5cdFx0XHRcdH0pO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB1bmxpbmtlZCBtZW51LWl0ZW1zIGNvbnRhaW5pbmcgc3BhY2VzIGFuZC9vciBkYXNoZXMgb25seSBhcyBkaXZpZGVyc1xuXHRcdG1lbnVzLmNoaWxkcmVuKCBcIjpub3QoLnVpLW1lbnUtaXRlbSlcIiApLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaXRlbSA9ICQoIHRoaXMgKTtcblx0XHRcdC8vIGh5cGhlbiwgZW0gZGFzaCwgZW4gZGFzaFxuXHRcdFx0aWYgKCAhL1teXFwtXFx1MjAxNFxcdTIwMTNcXHNdLy50ZXN0KCBpdGVtLnRleHQoKSApICkge1xuXHRcdFx0XHRpdGVtLmFkZENsYXNzKCBcInVpLXdpZGdldC1jb250ZW50IHVpLW1lbnUtZGl2aWRlclwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBBZGQgYXJpYS1kaXNhYmxlZCBhdHRyaWJ1dGUgdG8gYW55IGRpc2FibGVkIG1lbnUgaXRlbVxuXHRcdG1lbnVzLmNoaWxkcmVuKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkuYXR0ciggXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiICk7XG5cblx0XHQvLyBJZiB0aGUgYWN0aXZlIGl0ZW0gaGFzIGJlZW4gcmVtb3ZlZCwgYmx1ciB0aGUgbWVudVxuXHRcdGlmICggdGhpcy5hY3RpdmUgJiYgISQuY29udGFpbnMoIHRoaXMuZWxlbWVudFsgMCBdLCB0aGlzLmFjdGl2ZVsgMCBdICkgKSB7XG5cdFx0XHR0aGlzLmJsdXIoKTtcblx0XHR9XG5cdH0sXG5cblx0X2l0ZW1Sb2xlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVudTogXCJtZW51aXRlbVwiLFxuXHRcdFx0bGlzdGJveDogXCJvcHRpb25cIlxuXHRcdH1bIHRoaXMub3B0aW9ucy5yb2xlIF07XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiaWNvbnNcIiApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51LWljb25cIiApXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUgKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIHZhbHVlLnN1Ym1lbnUgKTtcblx0XHR9XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0fSxcblxuXHRmb2N1czogZnVuY3Rpb24oIGV2ZW50LCBpdGVtICkge1xuXHRcdHZhciBuZXN0ZWQsIGZvY3VzZWQ7XG5cdFx0dGhpcy5ibHVyKCBldmVudCwgZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJmb2N1c1wiICk7XG5cblx0XHR0aGlzLl9zY3JvbGxJbnRvVmlldyggaXRlbSApO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBpdGVtLmZpcnN0KCk7XG5cdFx0Zm9jdXNlZCA9IHRoaXMuYWN0aXZlLmNoaWxkcmVuKCBcImFcIiApLmFkZENsYXNzKCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHQvLyBPbmx5IHVwZGF0ZSBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQgaWYgdGhlcmUncyBhIHJvbGVcblx0XHQvLyBvdGhlcndpc2Ugd2UgYXNzdW1lIGZvY3VzIGlzIG1hbmFnZWQgZWxzZXdoZXJlXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMucm9sZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLCBmb2N1c2VkLmF0dHIoIFwiaWRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gSGlnaGxpZ2h0IGFjdGl2ZSBwYXJlbnQgbWVudSBpdGVtLCBpZiBhbnlcblx0XHR0aGlzLmFjdGl2ZVxuXHRcdFx0LnBhcmVudCgpXG5cdFx0XHQuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0LmNoaWxkcmVuKCBcImE6Zmlyc3RcIiApXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblxuXHRcdGlmICggZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIgKSB7XG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0XHR9LCB0aGlzLmRlbGF5ICk7XG5cdFx0fVxuXG5cdFx0bmVzdGVkID0gaXRlbS5jaGlsZHJlbiggXCIudWktbWVudVwiICk7XG5cdFx0aWYgKCBuZXN0ZWQubGVuZ3RoICYmICggL15tb3VzZS8udGVzdCggZXZlbnQudHlwZSApICkgKSB7XG5cdFx0XHR0aGlzLl9zdGFydE9wZW5pbmcobmVzdGVkKTtcblx0XHR9XG5cdFx0dGhpcy5hY3RpdmVNZW51ID0gaXRlbS5wYXJlbnQoKTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiZm9jdXNcIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICk7XG5cdH0sXG5cblx0X3Njcm9sbEludG9WaWV3OiBmdW5jdGlvbiggaXRlbSApIHtcblx0XHR2YXIgYm9yZGVyVG9wLCBwYWRkaW5nVG9wLCBvZmZzZXQsIHNjcm9sbCwgZWxlbWVudEhlaWdodCwgaXRlbUhlaWdodDtcblx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkge1xuXHRcdFx0Ym9yZGVyVG9wID0gcGFyc2VGbG9hdCggJC5jc3MoIHRoaXMuYWN0aXZlTWVudVswXSwgXCJib3JkZXJUb3BXaWR0aFwiICkgKSB8fCAwO1xuXHRcdFx0cGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQoICQuY3NzKCB0aGlzLmFjdGl2ZU1lbnVbMF0sIFwicGFkZGluZ1RvcFwiICkgKSB8fCAwO1xuXHRcdFx0b2Zmc2V0ID0gaXRlbS5vZmZzZXQoKS50b3AgLSB0aGlzLmFjdGl2ZU1lbnUub2Zmc2V0KCkudG9wIC0gYm9yZGVyVG9wIC0gcGFkZGluZ1RvcDtcblx0XHRcdHNjcm9sbCA9IHRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoKTtcblx0XHRcdGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFjdGl2ZU1lbnUuaGVpZ2h0KCk7XG5cdFx0XHRpdGVtSGVpZ2h0ID0gaXRlbS5oZWlnaHQoKTtcblxuXHRcdFx0aWYgKCBvZmZzZXQgPCAwICkge1xuXHRcdFx0XHR0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCBzY3JvbGwgKyBvZmZzZXQgKTtcblx0XHRcdH0gZWxzZSBpZiAoIG9mZnNldCArIGl0ZW1IZWlnaHQgPiBlbGVtZW50SGVpZ2h0ICkge1xuXHRcdFx0XHR0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCBzY3JvbGwgKyBvZmZzZXQgLSBlbGVtZW50SGVpZ2h0ICsgaXRlbUhlaWdodCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRibHVyOiBmdW5jdGlvbiggZXZlbnQsIGZyb21Gb2N1cyApIHtcblx0XHRpZiAoICFmcm9tRm9jdXMgKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR9XG5cblx0XHRpZiAoICF0aGlzLmFjdGl2ZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmFjdGl2ZS5jaGlsZHJlbiggXCJhXCIgKS5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1mb2N1c1wiICk7XG5cdFx0dGhpcy5hY3RpdmUgPSBudWxsO1xuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJibHVyXCIsIGV2ZW50LCB7IGl0ZW06IHRoaXMuYWN0aXZlIH0gKTtcblx0fSxcblxuXHRfc3RhcnRPcGVuaW5nOiBmdW5jdGlvbiggc3VibWVudSApIHtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblxuXHRcdC8vIERvbid0IG9wZW4gaWYgYWxyZWFkeSBvcGVuIGZpeGVzIGEgRmlyZWZveCBidWcgdGhhdCBjYXVzZWQgYSAuNSBwaXhlbFxuXHRcdC8vIHNoaWZ0IGluIHRoZSBzdWJtZW51IHBvc2l0aW9uIHdoZW4gbW91c2luZyBvdmVyIHRoZSBjYXJhdCBpY29uXG5cdFx0aWYgKCBzdWJtZW51LmF0dHIoIFwiYXJpYS1oaWRkZW5cIiApICE9PSBcInRydWVcIiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdFx0dGhpcy5fb3Blbiggc3VibWVudSApO1xuXHRcdH0sIHRoaXMuZGVsYXkgKTtcblx0fSxcblxuXHRfb3BlbjogZnVuY3Rpb24oIHN1Ym1lbnUgKSB7XG5cdFx0dmFyIHBvc2l0aW9uID0gJC5leHRlbmQoe1xuXHRcdFx0b2Y6IHRoaXMuYWN0aXZlXG5cdFx0fSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uICk7XG5cblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR0aGlzLmVsZW1lbnQuZmluZCggXCIudWktbWVudVwiICkubm90KCBzdWJtZW51LnBhcmVudHMoIFwiLnVpLW1lbnVcIiApIClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiICk7XG5cblx0XHRzdWJtZW51XG5cdFx0XHQuc2hvdygpXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWhpZGRlblwiIClcblx0XHRcdC5hdHRyKCBcImFyaWEtZXhwYW5kZWRcIiwgXCJ0cnVlXCIgKVxuXHRcdFx0LnBvc2l0aW9uKCBwb3NpdGlvbiApO1xuXHR9LFxuXG5cdGNvbGxhcHNlQWxsOiBmdW5jdGlvbiggZXZlbnQsIGFsbCApIHtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBJZiB3ZSB3ZXJlIHBhc3NlZCBhbiBldmVudCwgbG9vayBmb3IgdGhlIHN1Ym1lbnUgdGhhdCBjb250YWlucyB0aGUgZXZlbnRcblx0XHRcdHZhciBjdXJyZW50TWVudSA9IGFsbCA/IHRoaXMuZWxlbWVudCA6XG5cdFx0XHRcdCQoIGV2ZW50ICYmIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51XCIgKSApO1xuXG5cdFx0XHQvLyBJZiB3ZSBmb3VuZCBubyB2YWxpZCBzdWJtZW51IGFuY2VzdG9yLCB1c2UgdGhlIG1haW4gbWVudSB0byBjbG9zZSBhbGwgc3ViIG1lbnVzIGFueXdheVxuXHRcdFx0aWYgKCAhY3VycmVudE1lbnUubGVuZ3RoICkge1xuXHRcdFx0XHRjdXJyZW50TWVudSA9IHRoaXMuZWxlbWVudDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY2xvc2UoIGN1cnJlbnRNZW51ICk7XG5cblx0XHRcdHRoaXMuYmx1ciggZXZlbnQgKTtcblx0XHRcdHRoaXMuYWN0aXZlTWVudSA9IGN1cnJlbnRNZW51O1xuXHRcdH0sIHRoaXMuZGVsYXkgKTtcblx0fSxcblxuXHQvLyBXaXRoIG5vIGFyZ3VtZW50cywgY2xvc2VzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1lbnUgLSBpZiBub3RoaW5nIGlzIGFjdGl2ZVxuXHQvLyBpdCBjbG9zZXMgYWxsIG1lbnVzLiAgSWYgcGFzc2VkIGFuIGFyZ3VtZW50LCBpdCB3aWxsIHNlYXJjaCBmb3IgbWVudXMgQkVMT1dcblx0X2Nsb3NlOiBmdW5jdGlvbiggc3RhcnRNZW51ICkge1xuXHRcdGlmICggIXN0YXJ0TWVudSApIHtcblx0XHRcdHN0YXJ0TWVudSA9IHRoaXMuYWN0aXZlID8gdGhpcy5hY3RpdmUucGFyZW50KCkgOiB0aGlzLmVsZW1lbnQ7XG5cdFx0fVxuXG5cdFx0c3RhcnRNZW51XG5cdFx0XHQuZmluZCggXCIudWktbWVudVwiIClcblx0XHRcdFx0LmhpZGUoKVxuXHRcdFx0XHQuYXR0ciggXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiApXG5cdFx0XHRcdC5hdHRyKCBcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiIClcblx0XHRcdC5lbmQoKVxuXHRcdFx0LmZpbmQoIFwiYS51aS1zdGF0ZS1hY3RpdmVcIiApXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHR9LFxuXG5cdGNvbGxhcHNlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG5ld0l0ZW0gPSB0aGlzLmFjdGl2ZSAmJlxuXHRcdFx0dGhpcy5hY3RpdmUucGFyZW50KCkuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIsIHRoaXMuZWxlbWVudCApO1xuXHRcdGlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHtcblx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgbmV3SXRlbSApO1xuXHRcdH1cblx0fSxcblxuXHRleHBhbmQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgbmV3SXRlbSA9IHRoaXMuYWN0aXZlICYmXG5cdFx0XHR0aGlzLmFjdGl2ZVxuXHRcdFx0XHQuY2hpbGRyZW4oIFwiLnVpLW1lbnUgXCIgKVxuXHRcdFx0XHQuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbVwiIClcblx0XHRcdFx0LmZpcnN0KCk7XG5cblx0XHRpZiAoIG5ld0l0ZW0gJiYgbmV3SXRlbS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLl9vcGVuKCBuZXdJdGVtLnBhcmVudCgpICk7XG5cblx0XHRcdC8vIERlbGF5IHNvIEZpcmVmb3ggd2lsbCBub3QgaGlkZSBhY3RpdmVkZXNjZW5kYW50IGNoYW5nZSBpbiBleHBhbmRpbmcgc3VibWVudSBmcm9tIEFUXG5cdFx0XHR0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIG5ld0l0ZW0gKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRuZXh0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5fbW92ZSggXCJuZXh0XCIsIFwiZmlyc3RcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRwcmV2aW91czogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuX21vdmUoIFwicHJldlwiLCBcImxhc3RcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRpc0ZpcnN0SXRlbTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5wcmV2QWxsKCBcIi51aS1tZW51LWl0ZW1cIiApLmxlbmd0aDtcblx0fSxcblxuXHRpc0xhc3RJdGVtOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLm5leHRBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkubGVuZ3RoO1xuXHR9LFxuXG5cdF9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBmaWx0ZXIsIGV2ZW50ICkge1xuXHRcdHZhciBuZXh0O1xuXHRcdGlmICggdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHRpZiAoIGRpcmVjdGlvbiA9PT0gXCJmaXJzdFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJsYXN0XCIgKSB7XG5cdFx0XHRcdG5leHQgPSB0aGlzLmFjdGl2ZVxuXHRcdFx0XHRcdFsgZGlyZWN0aW9uID09PSBcImZpcnN0XCIgPyBcInByZXZBbGxcIiA6IFwibmV4dEFsbFwiIF0oIFwiLnVpLW1lbnUtaXRlbVwiIClcblx0XHRcdFx0XHQuZXEoIC0xICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXh0ID0gdGhpcy5hY3RpdmVcblx0XHRcdFx0XHRbIGRpcmVjdGlvbiArIFwiQWxsXCIgXSggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0XHRcdC5lcSggMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoICFuZXh0IHx8ICFuZXh0Lmxlbmd0aCB8fCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHRuZXh0ID0gdGhpcy5hY3RpdmVNZW51LmNoaWxkcmVuKCBcIi51aS1tZW51LWl0ZW1cIiApWyBmaWx0ZXIgXSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBuZXh0ICk7XG5cdH0sXG5cblx0bmV4dFBhZ2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgaXRlbSwgYmFzZSwgaGVpZ2h0O1xuXG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHR0aGlzLm5leHQoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5pc0xhc3RJdGVtKCkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7XG5cdFx0XHRiYXNlID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wO1xuXHRcdFx0aGVpZ2h0ID0gdGhpcy5lbGVtZW50LmhlaWdodCgpO1xuXHRcdFx0dGhpcy5hY3RpdmUubmV4dEFsbCggXCIudWktbWVudS1pdGVtXCIgKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpdGVtID0gJCggdGhpcyApO1xuXHRcdFx0XHRyZXR1cm4gaXRlbS5vZmZzZXQoKS50b3AgLSBiYXNlIC0gaGVpZ2h0IDwgMDtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgdGhpcy5hY3RpdmVNZW51LmNoaWxkcmVuKCBcIi51aS1tZW51LWl0ZW1cIiApXG5cdFx0XHRcdFsgIXRoaXMuYWN0aXZlID8gXCJmaXJzdFwiIDogXCJsYXN0XCIgXSgpICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZXZpb3VzUGFnZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpdGVtLCBiYXNlLCBoZWlnaHQ7XG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHR0aGlzLm5leHQoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5pc0ZpcnN0SXRlbSgpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkge1xuXHRcdFx0YmFzZSA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcDtcblx0XHRcdGhlaWdodCA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKTtcblx0XHRcdHRoaXMuYWN0aXZlLnByZXZBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0aXRlbSA9ICQoIHRoaXMgKTtcblx0XHRcdFx0cmV0dXJuIGl0ZW0ub2Zmc2V0KCkudG9wIC0gYmFzZSArIGhlaWdodCA+IDA7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIGl0ZW0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIHRoaXMuYWN0aXZlTWVudS5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtXCIgKS5maXJzdCgpICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9oYXNTY3JvbGw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSA8IHRoaXMuZWxlbWVudC5wcm9wKCBcInNjcm9sbEhlaWdodFwiICk7XG5cdH0sXG5cblx0c2VsZWN0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0Ly8gVE9ETzogSXQgc2hvdWxkIG5ldmVyIGJlIHBvc3NpYmxlIHRvIG5vdCBoYXZlIGFuIGFjdGl2ZSBpdGVtIGF0IHRoaXNcblx0XHQvLyBwb2ludCwgYnV0IHRoZSB0ZXN0cyBkb24ndCB0cmlnZ2VyIG1vdXNlZW50ZXIgYmVmb3JlIGNsaWNrLlxuXHRcdHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUgfHwgJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKTtcblx0XHR2YXIgdWkgPSB7IGl0ZW06IHRoaXMuYWN0aXZlIH07XG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUuaGFzKCBcIi51aS1tZW51XCIgKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmNvbGxhcHNlQWxsKCBldmVudCwgdHJ1ZSApO1xuXHRcdH1cblx0XHR0aGlzLl90cmlnZ2VyKCBcInNlbGVjdFwiLCBldmVudCwgdWkgKTtcblx0fVxufSk7XG5cbn0oIGpRdWVyeSApKTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLndpZGdldCggXCJ1aS5wcm9ncmVzc2JhclwiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRtYXg6IDEwMCxcblx0XHR2YWx1ZTogMCxcblxuXHRcdGNoYW5nZTogbnVsbCxcblx0XHRjb21wbGV0ZTogbnVsbFxuXHR9LFxuXG5cdG1pbjogMCxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHQvLyBDb25zdHJhaW4gaW5pdGlhbCB2YWx1ZVxuXHRcdHRoaXMub2xkVmFsdWUgPSB0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCk7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1wcm9ncmVzc2JhciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbFwiIClcblx0XHRcdC5hdHRyKHtcblx0XHRcdFx0Ly8gT25seSBzZXQgc3RhdGljIHZhbHVlcywgYXJpYS12YWx1ZW5vdyBhbmQgYXJpYS12YWx1ZW1heCBhcmVcblx0XHRcdFx0Ly8gc2V0IGluc2lkZSBfcmVmcmVzaFZhbHVlKClcblx0XHRcdFx0cm9sZTogXCJwcm9ncmVzc2JhclwiLFxuXHRcdFx0XHRcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW5cblx0XHRcdH0pO1xuXG5cdFx0dGhpcy52YWx1ZURpdiA9ICQoIFwiPGRpdiBjbGFzcz0ndWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCc+PC9kaXY+XCIgKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKTtcblxuXHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1wcm9ncmVzc2JhciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbFwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcInJvbGVcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLXZhbHVlbWluXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS12YWx1ZW1heFwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtdmFsdWVub3dcIiApO1xuXG5cdFx0dGhpcy52YWx1ZURpdi5yZW1vdmUoKTtcblx0fSxcblxuXHR2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbHVlICkge1xuXHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMudmFsdWU7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fY29uc3RyYWluZWRWYWx1ZSggbmV3VmFsdWUgKTtcblx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0fSxcblxuXHRfY29uc3RyYWluZWRWYWx1ZTogZnVuY3Rpb24oIG5ld1ZhbHVlICkge1xuXHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlO1xuXHRcdH1cblxuXHRcdHRoaXMuaW5kZXRlcm1pbmF0ZSA9IG5ld1ZhbHVlID09PSBmYWxzZTtcblxuXHRcdC8vIHNhbml0aXplIHZhbHVlXG5cdFx0aWYgKCB0eXBlb2YgbmV3VmFsdWUgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRuZXdWYWx1ZSA9IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaW5kZXRlcm1pbmF0ZSA/IGZhbHNlIDpcblx0XHRcdE1hdGgubWluKCB0aGlzLm9wdGlvbnMubWF4LCBNYXRoLm1heCggdGhpcy5taW4sIG5ld1ZhbHVlICkgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0Ly8gRW5zdXJlIFwidmFsdWVcIiBvcHRpb24gaXMgc2V0IGFmdGVyIG90aGVyIHZhbHVlcyAobGlrZSBtYXgpXG5cdFx0dmFyIHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0XHRkZWxldGUgb3B0aW9ucy52YWx1ZTtcblxuXHRcdHRoaXMuX3N1cGVyKCBvcHRpb25zICk7XG5cblx0XHR0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCB2YWx1ZSApO1xuXHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcIm1heFwiICkge1xuXHRcdFx0Ly8gRG9uJ3QgYWxsb3cgYSBtYXggbGVzcyB0aGFuIG1pblxuXHRcdFx0dmFsdWUgPSBNYXRoLm1heCggdGhpcy5taW4sIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0fSxcblxuXHRfcGVyY2VudGFnZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuaW5kZXRlcm1pbmF0ZSA/IDEwMCA6IDEwMCAqICggdGhpcy5vcHRpb25zLnZhbHVlIC0gdGhpcy5taW4gKSAvICggdGhpcy5vcHRpb25zLm1heCAtIHRoaXMubWluICk7XG5cdH0sXG5cblx0X3JlZnJlc2hWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlLFxuXHRcdFx0cGVyY2VudGFnZSA9IHRoaXMuX3BlcmNlbnRhZ2UoKTtcblxuXHRcdHRoaXMudmFsdWVEaXZcblx0XHRcdC50b2dnbGUoIHRoaXMuaW5kZXRlcm1pbmF0ZSB8fCB2YWx1ZSA+IHRoaXMubWluIClcblx0XHRcdC50b2dnbGVDbGFzcyggXCJ1aS1jb3JuZXItcmlnaHRcIiwgdmFsdWUgPT09IHRoaXMub3B0aW9ucy5tYXggKVxuXHRcdFx0LndpZHRoKCBwZXJjZW50YWdlLnRvRml4ZWQoMCkgKyBcIiVcIiApO1xuXG5cdFx0dGhpcy5lbGVtZW50LnRvZ2dsZUNsYXNzKCBcInVpLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGVcIiwgdGhpcy5pbmRldGVybWluYXRlICk7XG5cblx0XHRpZiAoIHRoaXMuaW5kZXRlcm1pbmF0ZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImFyaWEtdmFsdWVub3dcIiApO1xuXHRcdFx0aWYgKCAhdGhpcy5vdmVybGF5RGl2ICkge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXlEaXYgPSAkKCBcIjxkaXYgY2xhc3M9J3VpLXByb2dyZXNzYmFyLW92ZXJsYXknPjwvZGl2PlwiICkuYXBwZW5kVG8oIHRoaXMudmFsdWVEaXYgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmF0dHIoe1xuXHRcdFx0XHRcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5vcHRpb25zLm1heCxcblx0XHRcdFx0XCJhcmlhLXZhbHVlbm93XCI6IHZhbHVlXG5cdFx0XHR9KTtcblx0XHRcdGlmICggdGhpcy5vdmVybGF5RGl2ICkge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXlEaXYucmVtb3ZlKCk7XG5cdFx0XHRcdHRoaXMub3ZlcmxheURpdiA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm9sZFZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdHRoaXMub2xkVmFsdWUgPSB2YWx1ZTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiY2hhbmdlXCIgKTtcblx0XHR9XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdGhpcy5vcHRpb25zLm1heCApIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiY29tcGxldGVcIiApO1xuXHRcdH1cblx0fVxufSk7XG5cbn0pKCBqUXVlcnkgKTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4vLyBudW1iZXIgb2YgcGFnZXMgaW4gYSBzbGlkZXJcbi8vIChob3cgbWFueSB0aW1lcyBjYW4geW91IHBhZ2UgdXAvZG93biB0byBnbyB0aHJvdWdoIHRoZSB3aG9sZSByYW5nZSlcbnZhciBudW1QYWdlcyA9IDU7XG5cbiQud2lkZ2V0KCBcInVpLnNsaWRlclwiLCAkLnVpLm1vdXNlLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdHdpZGdldEV2ZW50UHJlZml4OiBcInNsaWRlXCIsXG5cblx0b3B0aW9uczoge1xuXHRcdGFuaW1hdGU6IGZhbHNlLFxuXHRcdGRpc3RhbmNlOiAwLFxuXHRcdG1heDogMTAwLFxuXHRcdG1pbjogMCxcblx0XHRvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG5cdFx0cmFuZ2U6IGZhbHNlLFxuXHRcdHN0ZXA6IDEsXG5cdFx0dmFsdWU6IDAsXG5cdFx0dmFsdWVzOiBudWxsLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdHNsaWRlOiBudWxsLFxuXHRcdHN0YXJ0OiBudWxsLFxuXHRcdHN0b3A6IG51bGxcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9rZXlTbGlkaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5fbW91c2VTbGlkaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7XG5cdFx0dGhpcy5faGFuZGxlSW5kZXggPSBudWxsO1xuXHRcdHRoaXMuX2RldGVjdE9yaWVudGF0aW9uKCk7XG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1zbGlkZXJcIiArXG5cdFx0XHRcdFwiIHVpLXNsaWRlci1cIiArIHRoaXMub3JpZW50YXRpb24gK1xuXHRcdFx0XHRcIiB1aS13aWRnZXRcIiArXG5cdFx0XHRcdFwiIHVpLXdpZGdldC1jb250ZW50XCIgK1xuXHRcdFx0XHRcIiB1aS1jb3JuZXItYWxsXCIpO1xuXG5cdFx0dGhpcy5fcmVmcmVzaCgpO1xuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJkaXNhYmxlZFwiLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKTtcblxuXHRcdHRoaXMuX2FuaW1hdGVPZmYgPSBmYWxzZTtcblx0fSxcblxuXHRfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fY3JlYXRlUmFuZ2UoKTtcblx0XHR0aGlzLl9jcmVhdGVIYW5kbGVzKCk7XG5cdFx0dGhpcy5fc2V0dXBFdmVudHMoKTtcblx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0fSxcblxuXHRfY3JlYXRlSGFuZGxlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGksIGhhbmRsZUNvdW50LFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGV4aXN0aW5nSGFuZGxlcyA9IHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1zbGlkZXItaGFuZGxlXCIgKS5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGxcIiApLFxuXHRcdFx0aGFuZGxlID0gXCI8YSBjbGFzcz0ndWktc2xpZGVyLWhhbmRsZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGwnIGhyZWY9JyMnPjwvYT5cIixcblx0XHRcdGhhbmRsZXMgPSBbXTtcblxuXHRcdGhhbmRsZUNvdW50ID0gKCBvcHRpb25zLnZhbHVlcyAmJiBvcHRpb25zLnZhbHVlcy5sZW5ndGggKSB8fCAxO1xuXG5cdFx0aWYgKCBleGlzdGluZ0hhbmRsZXMubGVuZ3RoID4gaGFuZGxlQ291bnQgKSB7XG5cdFx0XHRleGlzdGluZ0hhbmRsZXMuc2xpY2UoIGhhbmRsZUNvdW50ICkucmVtb3ZlKCk7XG5cdFx0XHRleGlzdGluZ0hhbmRsZXMgPSBleGlzdGluZ0hhbmRsZXMuc2xpY2UoIDAsIGhhbmRsZUNvdW50ICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IGV4aXN0aW5nSGFuZGxlcy5sZW5ndGg7IGkgPCBoYW5kbGVDb3VudDsgaSsrICkge1xuXHRcdFx0aGFuZGxlcy5wdXNoKCBoYW5kbGUgKTtcblx0XHR9XG5cblx0XHR0aGlzLmhhbmRsZXMgPSBleGlzdGluZ0hhbmRsZXMuYWRkKCAkKCBoYW5kbGVzLmpvaW4oIFwiXCIgKSApLmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKSApO1xuXG5cdFx0dGhpcy5oYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoIDAgKTtcblxuXHRcdHRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0JCggdGhpcyApLmRhdGEoIFwidWktc2xpZGVyLWhhbmRsZS1pbmRleFwiLCBpICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0X2NyZWF0ZVJhbmdlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGNsYXNzZXMgPSBcIlwiO1xuXG5cdFx0aWYgKCBvcHRpb25zLnJhbmdlICkge1xuXHRcdFx0aWYgKCBvcHRpb25zLnJhbmdlID09PSB0cnVlICkge1xuXHRcdFx0XHRpZiAoICFvcHRpb25zLnZhbHVlcyApIHtcblx0XHRcdFx0XHRvcHRpb25zLnZhbHVlcyA9IFsgdGhpcy5fdmFsdWVNaW4oKSwgdGhpcy5fdmFsdWVNaW4oKSBdO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBvcHRpb25zLnZhbHVlcy5sZW5ndGggJiYgb3B0aW9ucy52YWx1ZXMubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRcdG9wdGlvbnMudmFsdWVzID0gWyBvcHRpb25zLnZhbHVlc1swXSwgb3B0aW9ucy52YWx1ZXNbMF0gXTtcblx0XHRcdFx0fSBlbHNlIGlmICggJC5pc0FycmF5KCBvcHRpb25zLnZhbHVlcyApICkge1xuXHRcdFx0XHRcdG9wdGlvbnMudmFsdWVzID0gb3B0aW9ucy52YWx1ZXMuc2xpY2UoMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhdGhpcy5yYW5nZSB8fCAhdGhpcy5yYW5nZS5sZW5ndGggKSB7XG5cdFx0XHRcdHRoaXMucmFuZ2UgPSAkKCBcIjxkaXY+PC9kaXY+XCIgKVxuXHRcdFx0XHRcdC5hcHBlbmRUbyggdGhpcy5lbGVtZW50ICk7XG5cblx0XHRcdFx0Y2xhc3NlcyA9IFwidWktc2xpZGVyLXJhbmdlXCIgK1xuXHRcdFx0XHQvLyBub3RlOiB0aGlzIGlzbid0IHRoZSBtb3N0IGZpdHRpbmdseSBzZW1hbnRpYyBmcmFtZXdvcmsgY2xhc3MgZm9yIHRoaXMgZWxlbWVudCxcblx0XHRcdFx0Ly8gYnV0IHdvcmtlZCBiZXN0IHZpc3VhbGx5IHdpdGggYSB2YXJpZXR5IG9mIHRoZW1lc1xuXHRcdFx0XHRcIiB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGxcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmFuZ2UucmVtb3ZlQ2xhc3MoIFwidWktc2xpZGVyLXJhbmdlLW1pbiB1aS1zbGlkZXItcmFuZ2UtbWF4XCIgKVxuXHRcdFx0XHRcdC8vIEhhbmRsZSByYW5nZSBzd2l0Y2hpbmcgZnJvbSB0cnVlIHRvIG1pbi9tYXhcblx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFwibGVmdFwiOiBcIlwiLFxuXHRcdFx0XHRcdFx0XCJib3R0b21cIjogXCJcIlxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJhbmdlLmFkZENsYXNzKCBjbGFzc2VzICtcblx0XHRcdFx0KCAoIG9wdGlvbnMucmFuZ2UgPT09IFwibWluXCIgfHwgb3B0aW9ucy5yYW5nZSA9PT0gXCJtYXhcIiApID8gXCIgdWktc2xpZGVyLXJhbmdlLVwiICsgb3B0aW9ucy5yYW5nZSA6IFwiXCIgKSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnJhbmdlID0gJChbXSk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXR1cEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzID0gdGhpcy5oYW5kbGVzLmFkZCggdGhpcy5yYW5nZSApLmZpbHRlciggXCJhXCIgKTtcblx0XHR0aGlzLl9vZmYoIGVsZW1lbnRzICk7XG5cdFx0dGhpcy5fb24oIGVsZW1lbnRzLCB0aGlzLl9oYW5kbGVFdmVudHMgKTtcblx0XHR0aGlzLl9ob3ZlcmFibGUoIGVsZW1lbnRzICk7XG5cdFx0dGhpcy5fZm9jdXNhYmxlKCBlbGVtZW50cyApO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmhhbmRsZXMucmVtb3ZlKCk7XG5cdFx0dGhpcy5yYW5nZS5yZW1vdmUoKTtcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLXNsaWRlclwiICtcblx0XHRcdFx0XCIgdWktc2xpZGVyLWhvcml6b250YWxcIiArXG5cdFx0XHRcdFwiIHVpLXNsaWRlci12ZXJ0aWNhbFwiICtcblx0XHRcdFx0XCIgdWktd2lkZ2V0XCIgK1xuXHRcdFx0XHRcIiB1aS13aWRnZXQtY29udGVudFwiICtcblx0XHRcdFx0XCIgdWktY29ybmVyLWFsbFwiICk7XG5cblx0XHR0aGlzLl9tb3VzZURlc3Ryb3koKTtcblx0fSxcblxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHBvc2l0aW9uLCBub3JtVmFsdWUsIGRpc3RhbmNlLCBjbG9zZXN0SGFuZGxlLCBpbmRleCwgYWxsb3dlZCwgb2Zmc2V0LCBtb3VzZU92ZXJIYW5kbGUsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRpZiAoIG8uZGlzYWJsZWQgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50U2l6ZSA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpLFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKVxuXHRcdH07XG5cdFx0dGhpcy5lbGVtZW50T2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpO1xuXG5cdFx0cG9zaXRpb24gPSB7IHg6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWSB9O1xuXHRcdG5vcm1WYWx1ZSA9IHRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZSggcG9zaXRpb24gKTtcblx0XHRkaXN0YW5jZSA9IHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpICsgMTtcblx0XHR0aGlzLmhhbmRsZXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB0aGlzRGlzdGFuY2UgPSBNYXRoLmFicyggbm9ybVZhbHVlIC0gdGhhdC52YWx1ZXMoaSkgKTtcblx0XHRcdGlmICgoIGRpc3RhbmNlID4gdGhpc0Rpc3RhbmNlICkgfHxcblx0XHRcdFx0KCBkaXN0YW5jZSA9PT0gdGhpc0Rpc3RhbmNlICYmXG5cdFx0XHRcdFx0KGkgPT09IHRoYXQuX2xhc3RDaGFuZ2VkVmFsdWUgfHwgdGhhdC52YWx1ZXMoaSkgPT09IG8ubWluICkpKSB7XG5cdFx0XHRcdGRpc3RhbmNlID0gdGhpc0Rpc3RhbmNlO1xuXHRcdFx0XHRjbG9zZXN0SGFuZGxlID0gJCggdGhpcyApO1xuXHRcdFx0XHRpbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhbGxvd2VkID0gdGhpcy5fc3RhcnQoIGV2ZW50LCBpbmRleCApO1xuXHRcdGlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRoaXMuX21vdXNlU2xpZGluZyA9IHRydWU7XG5cblx0XHR0aGlzLl9oYW5kbGVJbmRleCA9IGluZGV4O1xuXG5cdFx0aWYgKHR5cGVvZiBjbG9zZXN0SGFuZGxlID09PSBcInVuZGVmaW5lZFwiIHx8IGNsb3Nlc3RIYW5kbGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuXHRcdGNsb3Nlc3RIYW5kbGVcblx0XHRcdC5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApXG5cdFx0XHQuZm9jdXMoKTtcblxuXHRcdG9mZnNldCA9IGNsb3Nlc3RIYW5kbGUub2Zmc2V0KCk7XG5cdFx0bW91c2VPdmVySGFuZGxlID0gISQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoKS5hZGRCYWNrKCkuaXMoIFwiLnVpLXNsaWRlci1oYW5kbGVcIiApO1xuXHRcdHRoaXMuX2NsaWNrT2Zmc2V0ID0gbW91c2VPdmVySGFuZGxlID8geyBsZWZ0OiAwLCB0b3A6IDAgfSA6IHtcblx0XHRcdGxlZnQ6IGV2ZW50LnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSAoIGNsb3Nlc3RIYW5kbGUud2lkdGgoKSAvIDIgKSxcblx0XHRcdHRvcDogZXZlbnQucGFnZVkgLSBvZmZzZXQudG9wIC1cblx0XHRcdFx0KCBjbG9zZXN0SGFuZGxlLmhlaWdodCgpIC8gMiApIC1cblx0XHRcdFx0KCBwYXJzZUludCggY2xvc2VzdEhhbmRsZS5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHQoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcyhcImJvcmRlckJvdHRvbVdpZHRoXCIpLCAxMCApIHx8IDApICtcblx0XHRcdFx0KCBwYXJzZUludCggY2xvc2VzdEhhbmRsZS5jc3MoXCJtYXJnaW5Ub3BcIiksIDEwICkgfHwgMClcblx0XHR9O1xuXG5cdFx0aWYgKCAhdGhpcy5oYW5kbGVzLmhhc0NsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKSApIHtcblx0XHRcdHRoaXMuX3NsaWRlKCBldmVudCwgaW5kZXgsIG5vcm1WYWx1ZSApO1xuXHRcdH1cblx0XHR0aGlzLl9hbmltYXRlT2ZmID0gdHJ1ZTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBwb3NpdGlvbiA9IHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH0sXG5cdFx0XHRub3JtVmFsdWUgPSB0aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoIHBvc2l0aW9uICk7XG5cblx0XHR0aGlzLl9zbGlkZSggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4LCBub3JtVmFsdWUgKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5oYW5kbGVzLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0dGhpcy5fbW91c2VTbGlkaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLl9zdG9wKCBldmVudCwgdGhpcy5faGFuZGxlSW5kZXggKTtcblx0XHR0aGlzLl9jaGFuZ2UoIGV2ZW50LCB0aGlzLl9oYW5kbGVJbmRleCApO1xuXG5cdFx0dGhpcy5faGFuZGxlSW5kZXggPSBudWxsO1xuXHRcdHRoaXMuX2NsaWNrT2Zmc2V0ID0gbnVsbDtcblx0XHR0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X2RldGVjdE9yaWVudGF0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm9yaWVudGF0aW9uID0gKCB0aGlzLm9wdGlvbnMub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiApID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCI7XG5cdH0sXG5cblx0X25vcm1WYWx1ZUZyb21Nb3VzZTogZnVuY3Rpb24oIHBvc2l0aW9uICkge1xuXHRcdHZhciBwaXhlbFRvdGFsLFxuXHRcdFx0cGl4ZWxNb3VzZSxcblx0XHRcdHBlcmNlbnRNb3VzZSxcblx0XHRcdHZhbHVlVG90YWwsXG5cdFx0XHR2YWx1ZU1vdXNlO1xuXG5cdFx0aWYgKCB0aGlzLm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiApIHtcblx0XHRcdHBpeGVsVG90YWwgPSB0aGlzLmVsZW1lbnRTaXplLndpZHRoO1xuXHRcdFx0cGl4ZWxNb3VzZSA9IHBvc2l0aW9uLnggLSB0aGlzLmVsZW1lbnRPZmZzZXQubGVmdCAtICggdGhpcy5fY2xpY2tPZmZzZXQgPyB0aGlzLl9jbGlja09mZnNldC5sZWZ0IDogMCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwaXhlbFRvdGFsID0gdGhpcy5lbGVtZW50U2l6ZS5oZWlnaHQ7XG5cdFx0XHRwaXhlbE1vdXNlID0gcG9zaXRpb24ueSAtIHRoaXMuZWxlbWVudE9mZnNldC50b3AgLSAoIHRoaXMuX2NsaWNrT2Zmc2V0ID8gdGhpcy5fY2xpY2tPZmZzZXQudG9wIDogMCApO1xuXHRcdH1cblxuXHRcdHBlcmNlbnRNb3VzZSA9ICggcGl4ZWxNb3VzZSAvIHBpeGVsVG90YWwgKTtcblx0XHRpZiAoIHBlcmNlbnRNb3VzZSA+IDEgKSB7XG5cdFx0XHRwZXJjZW50TW91c2UgPSAxO1xuXHRcdH1cblx0XHRpZiAoIHBlcmNlbnRNb3VzZSA8IDAgKSB7XG5cdFx0XHRwZXJjZW50TW91c2UgPSAwO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiApIHtcblx0XHRcdHBlcmNlbnRNb3VzZSA9IDEgLSBwZXJjZW50TW91c2U7XG5cdFx0fVxuXG5cdFx0dmFsdWVUb3RhbCA9IHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpO1xuXHRcdHZhbHVlTW91c2UgPSB0aGlzLl92YWx1ZU1pbigpICsgcGVyY2VudE1vdXNlICogdmFsdWVUb3RhbDtcblxuXHRcdHJldHVybiB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsdWVNb3VzZSApO1xuXHR9LFxuXG5cdF9zdGFydDogZnVuY3Rpb24oIGV2ZW50LCBpbmRleCApIHtcblx0XHR2YXIgdWlIYXNoID0ge1xuXHRcdFx0aGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sXG5cdFx0XHR2YWx1ZTogdGhpcy52YWx1ZSgpXG5cdFx0fTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7XG5cdFx0XHR1aUhhc2gudmFsdWUgPSB0aGlzLnZhbHVlcyggaW5kZXggKTtcblx0XHRcdHVpSGFzaC52YWx1ZXMgPSB0aGlzLnZhbHVlcygpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fdHJpZ2dlciggXCJzdGFydFwiLCBldmVudCwgdWlIYXNoICk7XG5cdH0sXG5cblx0X3NsaWRlOiBmdW5jdGlvbiggZXZlbnQsIGluZGV4LCBuZXdWYWwgKSB7XG5cdFx0dmFyIG90aGVyVmFsLFxuXHRcdFx0bmV3VmFsdWVzLFxuXHRcdFx0YWxsb3dlZDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHtcblx0XHRcdG90aGVyVmFsID0gdGhpcy52YWx1ZXMoIGluZGV4ID8gMCA6IDEgKTtcblxuXHRcdFx0aWYgKCAoIHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoID09PSAyICYmIHRoaXMub3B0aW9ucy5yYW5nZSA9PT0gdHJ1ZSApICYmXG5cdFx0XHRcdFx0KCAoIGluZGV4ID09PSAwICYmIG5ld1ZhbCA+IG90aGVyVmFsKSB8fCAoIGluZGV4ID09PSAxICYmIG5ld1ZhbCA8IG90aGVyVmFsICkgKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0bmV3VmFsID0gb3RoZXJWYWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmV3VmFsICE9PSB0aGlzLnZhbHVlcyggaW5kZXggKSApIHtcblx0XHRcdFx0bmV3VmFsdWVzID0gdGhpcy52YWx1ZXMoKTtcblx0XHRcdFx0bmV3VmFsdWVzWyBpbmRleCBdID0gbmV3VmFsO1xuXHRcdFx0XHQvLyBBIHNsaWRlIGNhbiBiZSBjYW5jZWxlZCBieSByZXR1cm5pbmcgZmFsc2UgZnJvbSB0aGUgc2xpZGUgY2FsbGJhY2tcblx0XHRcdFx0YWxsb3dlZCA9IHRoaXMuX3RyaWdnZXIoIFwic2xpZGVcIiwgZXZlbnQsIHtcblx0XHRcdFx0XHRoYW5kbGU6IHRoaXMuaGFuZGxlc1sgaW5kZXggXSxcblx0XHRcdFx0XHR2YWx1ZTogbmV3VmFsLFxuXHRcdFx0XHRcdHZhbHVlczogbmV3VmFsdWVzXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0b3RoZXJWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggPyAwIDogMSApO1xuXHRcdFx0XHRpZiAoIGFsbG93ZWQgIT09IGZhbHNlICkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWVzKCBpbmRleCwgbmV3VmFsLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBuZXdWYWwgIT09IHRoaXMudmFsdWUoKSApIHtcblx0XHRcdFx0Ly8gQSBzbGlkZSBjYW4gYmUgY2FuY2VsZWQgYnkgcmV0dXJuaW5nIGZhbHNlIGZyb20gdGhlIHNsaWRlIGNhbGxiYWNrXG5cdFx0XHRcdGFsbG93ZWQgPSB0aGlzLl90cmlnZ2VyKCBcInNsaWRlXCIsIGV2ZW50LCB7XG5cdFx0XHRcdFx0aGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sXG5cdFx0XHRcdFx0dmFsdWU6IG5ld1ZhbFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdGlmICggYWxsb3dlZCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0dGhpcy52YWx1ZSggbmV3VmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X3N0b3A6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXggKSB7XG5cdFx0dmFyIHVpSGFzaCA9IHtcblx0XHRcdGhhbmRsZTogdGhpcy5oYW5kbGVzWyBpbmRleCBdLFxuXHRcdFx0dmFsdWU6IHRoaXMudmFsdWUoKVxuXHRcdH07XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMudmFsdWVzICYmIHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoICkge1xuXHRcdFx0dWlIYXNoLnZhbHVlID0gdGhpcy52YWx1ZXMoIGluZGV4ICk7XG5cdFx0XHR1aUhhc2gudmFsdWVzID0gdGhpcy52YWx1ZXMoKTtcblx0XHR9XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcInN0b3BcIiwgZXZlbnQsIHVpSGFzaCApO1xuXHR9LFxuXG5cdF9jaGFuZ2U6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXggKSB7XG5cdFx0aWYgKCAhdGhpcy5fa2V5U2xpZGluZyAmJiAhdGhpcy5fbW91c2VTbGlkaW5nICkge1xuXHRcdFx0dmFyIHVpSGFzaCA9IHtcblx0XHRcdFx0aGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sXG5cdFx0XHRcdHZhbHVlOiB0aGlzLnZhbHVlKClcblx0XHRcdH07XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7XG5cdFx0XHRcdHVpSGFzaC52YWx1ZSA9IHRoaXMudmFsdWVzKCBpbmRleCApO1xuXHRcdFx0XHR1aUhhc2gudmFsdWVzID0gdGhpcy52YWx1ZXMoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly9zdG9yZSB0aGUgbGFzdCBjaGFuZ2VkIHZhbHVlIGluZGV4IGZvciByZWZlcmVuY2Ugd2hlbiBoYW5kbGVzIG92ZXJsYXBcblx0XHRcdHRoaXMuX2xhc3RDaGFuZ2VkVmFsdWUgPSBpbmRleDtcblxuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQsIHVpSGFzaCApO1xuXHRcdH1cblx0fSxcblxuXHR2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbHVlICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBuZXdWYWx1ZSApO1xuXHRcdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdFx0XHR0aGlzLl9jaGFuZ2UoIG51bGwsIDAgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fdmFsdWUoKTtcblx0fSxcblxuXHR2YWx1ZXM6IGZ1bmN0aW9uKCBpbmRleCwgbmV3VmFsdWUgKSB7XG5cdFx0dmFyIHZhbHMsXG5cdFx0XHRuZXdWYWx1ZXMsXG5cdFx0XHRpO1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblx0XHRcdHRoaXMub3B0aW9ucy52YWx1ZXNbIGluZGV4IF0gPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggbmV3VmFsdWUgKTtcblx0XHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHRcdFx0dGhpcy5fY2hhbmdlKCBudWxsLCBpbmRleCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggJC5pc0FycmF5KCBhcmd1bWVudHNbIDAgXSApICkge1xuXHRcdFx0XHR2YWxzID0gdGhpcy5vcHRpb25zLnZhbHVlcztcblx0XHRcdFx0bmV3VmFsdWVzID0gYXJndW1lbnRzWyAwIF07XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkgKz0gMSApIHtcblx0XHRcdFx0XHR2YWxzWyBpIF0gPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggbmV3VmFsdWVzWyBpIF0gKTtcblx0XHRcdFx0XHR0aGlzLl9jaGFuZ2UoIG51bGwsIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fdmFsdWVzKCBpbmRleCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnZhbHVlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3ZhbHVlcygpO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSxcblx0XHRcdHZhbHNMZW5ndGggPSAwO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwicmFuZ2VcIiAmJiB0aGlzLm9wdGlvbnMucmFuZ2UgPT09IHRydWUgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBcIm1pblwiICkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl92YWx1ZXMoIDAgKTtcblx0XHRcdFx0dGhpcy5vcHRpb25zLnZhbHVlcyA9IG51bGw7XG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gXCJtYXhcIiApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdmFsdWVzKCB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aC0xICk7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy52YWx1ZXMgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggJC5pc0FycmF5KCB0aGlzLm9wdGlvbnMudmFsdWVzICkgKSB7XG5cdFx0XHR2YWxzTGVuZ3RoID0gdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0JC5XaWRnZXQucHJvdG90eXBlLl9zZXRPcHRpb24uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXG5cdFx0c3dpdGNoICgga2V5ICkge1xuXHRcdFx0Y2FzZSBcIm9yaWVudGF0aW9uXCI6XG5cdFx0XHRcdHRoaXMuX2RldGVjdE9yaWVudGF0aW9uKCk7XG5cdFx0XHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1zbGlkZXItaG9yaXpvbnRhbCB1aS1zbGlkZXItdmVydGljYWxcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCBcInVpLXNsaWRlci1cIiArIHRoaXMub3JpZW50YXRpb24gKTtcblx0XHRcdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInZhbHVlXCI6XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0XHRcdFx0dGhpcy5fY2hhbmdlKCBudWxsLCAwICk7XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwidmFsdWVzXCI6XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCB2YWxzTGVuZ3RoOyBpICs9IDEgKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2hhbmdlKCBudWxsLCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJtaW5cIjpcblx0XHRcdGNhc2UgXCJtYXhcIjpcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHRcdFx0XHR0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInJhbmdlXCI6XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9LFxuXG5cdC8vaW50ZXJuYWwgdmFsdWUgZ2V0dGVyXG5cdC8vIF92YWx1ZSgpIHJldHVybnMgdmFsdWUgdHJpbW1lZCBieSBtaW4gYW5kIG1heCwgYWxpZ25lZCBieSBzdGVwXG5cdF92YWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbCA9IHRoaXMub3B0aW9ucy52YWx1ZTtcblx0XHR2YWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsICk7XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9LFxuXG5cdC8vaW50ZXJuYWwgdmFsdWVzIGdldHRlclxuXHQvLyBfdmFsdWVzKCkgcmV0dXJucyBhcnJheSBvZiB2YWx1ZXMgdHJpbW1lZCBieSBtaW4gYW5kIG1heCwgYWxpZ25lZCBieSBzdGVwXG5cdC8vIF92YWx1ZXMoIGluZGV4ICkgcmV0dXJucyBzaW5nbGUgdmFsdWUgdHJpbW1lZCBieSBtaW4gYW5kIG1heCwgYWxpZ25lZCBieSBzdGVwXG5cdF92YWx1ZXM6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgdmFsLFxuXHRcdFx0dmFscyxcblx0XHRcdGk7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHR2YWwgPSB0aGlzLm9wdGlvbnMudmFsdWVzWyBpbmRleCBdO1xuXHRcdFx0dmFsID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIHZhbCApO1xuXG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH0gZWxzZSBpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7XG5cdFx0XHQvLyAuc2xpY2UoKSBjcmVhdGVzIGEgY29weSBvZiB0aGUgYXJyYXlcblx0XHRcdC8vIHRoaXMgY29weSBnZXRzIHRyaW1tZWQgYnkgbWluIGFuZCBtYXggYW5kIHRoZW4gcmV0dXJuZWRcblx0XHRcdHZhbHMgPSB0aGlzLm9wdGlvbnMudmFsdWVzLnNsaWNlKCk7XG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpKz0gMSkge1xuXHRcdFx0XHR2YWxzWyBpIF0gPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsc1sgaSBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWxzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHR9LFxuXG5cdC8vIHJldHVybnMgdGhlIHN0ZXAtYWxpZ25lZCB2YWx1ZSB0aGF0IHZhbCBpcyBjbG9zZXN0IHRvLCBiZXR3ZWVuIChpbmNsdXNpdmUpIG1pbiBhbmQgbWF4XG5cdF90cmltQWxpZ25WYWx1ZTogZnVuY3Rpb24oIHZhbCApIHtcblx0XHRpZiAoIHZhbCA8PSB0aGlzLl92YWx1ZU1pbigpICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3ZhbHVlTWluKCk7XG5cdFx0fVxuXHRcdGlmICggdmFsID49IHRoaXMuX3ZhbHVlTWF4KCkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdmFsdWVNYXgoKTtcblx0XHR9XG5cdFx0dmFyIHN0ZXAgPSAoIHRoaXMub3B0aW9ucy5zdGVwID4gMCApID8gdGhpcy5vcHRpb25zLnN0ZXAgOiAxLFxuXHRcdFx0dmFsTW9kU3RlcCA9ICh2YWwgLSB0aGlzLl92YWx1ZU1pbigpKSAlIHN0ZXAsXG5cdFx0XHRhbGlnblZhbHVlID0gdmFsIC0gdmFsTW9kU3RlcDtcblxuXHRcdGlmICggTWF0aC5hYnModmFsTW9kU3RlcCkgKiAyID49IHN0ZXAgKSB7XG5cdFx0XHRhbGlnblZhbHVlICs9ICggdmFsTW9kU3RlcCA+IDAgKSA/IHN0ZXAgOiAoIC1zdGVwICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2luY2UgSmF2YVNjcmlwdCBoYXMgcHJvYmxlbXMgd2l0aCBsYXJnZSBmbG9hdHMsIHJvdW5kXG5cdFx0Ly8gdGhlIGZpbmFsIHZhbHVlIHRvIDUgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50IChzZWUgIzQxMjQpXG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQoIGFsaWduVmFsdWUudG9GaXhlZCg1KSApO1xuXHR9LFxuXG5cdF92YWx1ZU1pbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5taW47XG5cdH0sXG5cblx0X3ZhbHVlTWF4OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLm1heDtcblx0fSxcblxuXHRfcmVmcmVzaFZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGFzdFZhbFBlcmNlbnQsIHZhbFBlcmNlbnQsIHZhbHVlLCB2YWx1ZU1pbiwgdmFsdWVNYXgsXG5cdFx0XHRvUmFuZ2UgPSB0aGlzLm9wdGlvbnMucmFuZ2UsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0dGhhdCA9IHRoaXMsXG5cdFx0XHRhbmltYXRlID0gKCAhdGhpcy5fYW5pbWF0ZU9mZiApID8gby5hbmltYXRlIDogZmFsc2UsXG5cdFx0XHRfc2V0ID0ge307XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmhhbmRsZXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0dmFsUGVyY2VudCA9ICggdGhhdC52YWx1ZXMoaSkgLSB0aGF0Ll92YWx1ZU1pbigpICkgLyAoIHRoYXQuX3ZhbHVlTWF4KCkgLSB0aGF0Ll92YWx1ZU1pbigpICkgKiAxMDA7XG5cdFx0XHRcdF9zZXRbIHRoYXQub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gXCJsZWZ0XCIgOiBcImJvdHRvbVwiIF0gPSB2YWxQZXJjZW50ICsgXCIlXCI7XG5cdFx0XHRcdCQoIHRoaXMgKS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSggX3NldCwgby5hbmltYXRlICk7XG5cdFx0XHRcdGlmICggdGhhdC5vcHRpb25zLnJhbmdlID09PSB0cnVlICkge1xuXHRcdFx0XHRcdGlmICggdGhhdC5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHsgbGVmdDogdmFsUGVyY2VudCArIFwiJVwiIH0sIG8uYW5pbWF0ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBpID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHR0aGF0LnJhbmdlWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHsgd2lkdGg6ICggdmFsUGVyY2VudCAtIGxhc3RWYWxQZXJjZW50ICkgKyBcIiVcIiB9LCB7IHF1ZXVlOiBmYWxzZSwgZHVyYXRpb246IG8uYW5pbWF0ZSB9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0dGhhdC5yYW5nZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSggeyBib3R0b206ICggdmFsUGVyY2VudCApICsgXCIlXCIgfSwgby5hbmltYXRlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIGkgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQucmFuZ2VbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSggeyBoZWlnaHQ6ICggdmFsUGVyY2VudCAtIGxhc3RWYWxQZXJjZW50ICkgKyBcIiVcIiB9LCB7IHF1ZXVlOiBmYWxzZSwgZHVyYXRpb246IG8uYW5pbWF0ZSB9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGxhc3RWYWxQZXJjZW50ID0gdmFsUGVyY2VudDtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZSA9IHRoaXMudmFsdWUoKTtcblx0XHRcdHZhbHVlTWluID0gdGhpcy5fdmFsdWVNaW4oKTtcblx0XHRcdHZhbHVlTWF4ID0gdGhpcy5fdmFsdWVNYXgoKTtcblx0XHRcdHZhbFBlcmNlbnQgPSAoIHZhbHVlTWF4ICE9PSB2YWx1ZU1pbiApID9cblx0XHRcdFx0XHQoIHZhbHVlIC0gdmFsdWVNaW4gKSAvICggdmFsdWVNYXggLSB2YWx1ZU1pbiApICogMTAwIDpcblx0XHRcdFx0XHQwO1xuXHRcdFx0X3NldFsgdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBcImxlZnRcIiA6IFwiYm90dG9tXCIgXSA9IHZhbFBlcmNlbnQgKyBcIiVcIjtcblx0XHRcdHRoaXMuaGFuZGxlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCBfc2V0LCBvLmFuaW1hdGUgKTtcblxuXHRcdFx0aWYgKCBvUmFuZ2UgPT09IFwibWluXCIgJiYgdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgKSB7XG5cdFx0XHRcdHRoaXMucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHsgd2lkdGg6IHZhbFBlcmNlbnQgKyBcIiVcIiB9LCBvLmFuaW1hdGUgKTtcblx0XHRcdH1cblx0XHRcdGlmICggb1JhbmdlID09PSBcIm1heFwiICYmIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICkge1xuXHRcdFx0XHR0aGlzLnJhbmdlWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHsgd2lkdGg6ICggMTAwIC0gdmFsUGVyY2VudCApICsgXCIlXCIgfSwgeyBxdWV1ZTogZmFsc2UsIGR1cmF0aW9uOiBvLmFuaW1hdGUgfSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvUmFuZ2UgPT09IFwibWluXCIgJiYgdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiICkge1xuXHRcdFx0XHR0aGlzLnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCB7IGhlaWdodDogdmFsUGVyY2VudCArIFwiJVwiIH0sIG8uYW5pbWF0ZSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvUmFuZ2UgPT09IFwibWF4XCIgJiYgdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiICkge1xuXHRcdFx0XHR0aGlzLnJhbmdlWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHsgaGVpZ2h0OiAoIDEwMCAtIHZhbFBlcmNlbnQgKSArIFwiJVwiIH0sIHsgcXVldWU6IGZhbHNlLCBkdXJhdGlvbjogby5hbmltYXRlIH0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X2hhbmRsZUV2ZW50czoge1xuXHRcdGtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdC8qanNoaW50IG1heGNvbXBsZXhpdHk6MjUqL1xuXHRcdFx0dmFyIGFsbG93ZWQsIGN1clZhbCwgbmV3VmFsLCBzdGVwLFxuXHRcdFx0XHRpbmRleCA9ICQoIGV2ZW50LnRhcmdldCApLmRhdGEoIFwidWktc2xpZGVyLWhhbmRsZS1pbmRleFwiICk7XG5cblx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkVORDpcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9VUDpcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5VUDpcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkRPV046XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRpZiAoICF0aGlzLl9rZXlTbGlkaW5nICkge1xuXHRcdFx0XHRcdFx0dGhpcy5fa2V5U2xpZGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHQkKCBldmVudC50YXJnZXQgKS5hZGRDbGFzcyggXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0XHRcdFx0YWxsb3dlZCA9IHRoaXMuX3N0YXJ0KCBldmVudCwgaW5kZXggKTtcblx0XHRcdFx0XHRcdGlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHN0ZXAgPSB0aGlzLm9wdGlvbnMuc3RlcDtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHtcblx0XHRcdFx0Y3VyVmFsID0gbmV3VmFsID0gdGhpcy52YWx1ZXMoIGluZGV4ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJWYWwgPSBuZXdWYWwgPSB0aGlzLnZhbHVlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHRcdFx0bmV3VmFsID0gdGhpcy5fdmFsdWVNaW4oKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5EOlxuXHRcdFx0XHRcdG5ld1ZhbCA9IHRoaXMuX3ZhbHVlTWF4KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHRcdFx0bmV3VmFsID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIGN1clZhbCArICggKHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpKSAvIG51bVBhZ2VzICkgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHRcdG5ld1ZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBjdXJWYWwgLSAoICh0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKSkgLyBudW1QYWdlcyApICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlVQOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5SSUdIVDpcblx0XHRcdFx0XHRpZiAoIGN1clZhbCA9PT0gdGhpcy5fdmFsdWVNYXgoKSApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3VmFsID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIGN1clZhbCArIHN0ZXAgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuRE9XTjpcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuTEVGVDpcblx0XHRcdFx0XHRpZiAoIGN1clZhbCA9PT0gdGhpcy5fdmFsdWVNaW4oKSApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3VmFsID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIGN1clZhbCAtIHN0ZXAgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc2xpZGUoIGV2ZW50LCBpbmRleCwgbmV3VmFsICk7XG5cdFx0fSxcblx0XHRjbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9LFxuXHRcdGtleXVwOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgaW5kZXggPSAkKCBldmVudC50YXJnZXQgKS5kYXRhKCBcInVpLXNsaWRlci1oYW5kbGUtaW5kZXhcIiApO1xuXG5cdFx0XHRpZiAoIHRoaXMuX2tleVNsaWRpbmcgKSB7XG5cdFx0XHRcdHRoaXMuX2tleVNsaWRpbmcgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fc3RvcCggZXZlbnQsIGluZGV4ICk7XG5cdFx0XHRcdHRoaXMuX2NoYW5nZSggZXZlbnQsIGluZGV4ICk7XG5cdFx0XHRcdCQoIGV2ZW50LnRhcmdldCApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cbn0pO1xuXG59KGpRdWVyeSkpO1xuKGZ1bmN0aW9uKCAkICkge1xuXG5mdW5jdGlvbiBtb2RpZmllciggZm4gKSB7XG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcHJldmlvdXMgPSB0aGlzLmVsZW1lbnQudmFsKCk7XG5cdFx0Zm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdHRoaXMuX3JlZnJlc2goKTtcblx0XHRpZiAoIHByZXZpb3VzICE9PSB0aGlzLmVsZW1lbnQudmFsKCkgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiICk7XG5cdFx0fVxuXHR9O1xufVxuXG4kLndpZGdldCggXCJ1aS5zcGlubmVyXCIsIHtcblx0dmVyc2lvbjogXCIxLjEwLjFcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGlucHV0PlwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJzcGluXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRjdWx0dXJlOiBudWxsLFxuXHRcdGljb25zOiB7XG5cdFx0XHRkb3duOiBcInVpLWljb24tdHJpYW5nbGUtMS1zXCIsXG5cdFx0XHR1cDogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtblwiXG5cdFx0fSxcblx0XHRpbmNyZW1lbnRhbDogdHJ1ZSxcblx0XHRtYXg6IG51bGwsXG5cdFx0bWluOiBudWxsLFxuXHRcdG51bWJlckZvcm1hdDogbnVsbCxcblx0XHRwYWdlOiAxMCxcblx0XHRzdGVwOiAxLFxuXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdHNwaW46IG51bGwsXG5cdFx0c3RhcnQ6IG51bGwsXG5cdFx0c3RvcDogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdC8vIGhhbmRsZSBzdHJpbmcgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBwYXJzZWRcblx0XHR0aGlzLl9zZXRPcHRpb24oIFwibWF4XCIsIHRoaXMub3B0aW9ucy5tYXggKTtcblx0XHR0aGlzLl9zZXRPcHRpb24oIFwibWluXCIsIHRoaXMub3B0aW9ucy5taW4gKTtcblx0XHR0aGlzLl9zZXRPcHRpb24oIFwic3RlcFwiLCB0aGlzLm9wdGlvbnMuc3RlcCApO1xuXG5cdFx0Ly8gZm9ybWF0IHRoZSB2YWx1ZSwgYnV0IGRvbid0IGNvbnN0cmFpblxuXHRcdHRoaXMuX3ZhbHVlKCB0aGlzLmVsZW1lbnQudmFsKCksIHRydWUgKTtcblxuXHRcdHRoaXMuX2RyYXcoKTtcblx0XHR0aGlzLl9vbiggdGhpcy5fZXZlbnRzICk7XG5cdFx0dGhpcy5fcmVmcmVzaCgpO1xuXG5cdFx0Ly8gdHVybmluZyBvZmYgYXV0b2NvbXBsZXRlIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gcmVtZW1iZXJpbmcgdGhlXG5cdFx0Ly8gdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRocm91Z2ggaGlzdG9yeSwgc28gd2UgcmUtZW5hYmxlIGF1dG9jb21wbGV0ZVxuXHRcdC8vIGlmIHRoZSBwYWdlIGlzIHVubG9hZGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRlc3Ryb3llZC4gIzc3OTBcblx0XHR0aGlzLl9vbiggdGhpcy53aW5kb3csIHtcblx0XHRcdGJlZm9yZXVubG9hZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZVwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0X2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0ge30sXG5cdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0JC5lYWNoKCBbIFwibWluXCIsIFwibWF4XCIsIFwic3RlcFwiIF0sIGZ1bmN0aW9uKCBpLCBvcHRpb24gKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBlbGVtZW50LmF0dHIoIG9wdGlvbiApO1xuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmxlbmd0aCApIHtcblx0XHRcdFx0b3B0aW9uc1sgb3B0aW9uIF0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9LFxuXG5cdF9ldmVudHM6IHtcblx0XHRrZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoIHRoaXMuX3N0YXJ0KCBldmVudCApICYmIHRoaXMuX2tleWRvd24oIGV2ZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRrZXl1cDogXCJfc3RvcFwiLFxuXHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucHJldmlvdXMgPSB0aGlzLmVsZW1lbnQudmFsKCk7XG5cdFx0fSxcblx0XHRibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoIHRoaXMuY2FuY2VsQmx1ciApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdFx0XHRpZiAoIHRoaXMucHJldmlvdXMgIT09IHRoaXMuZWxlbWVudC52YWwoKSApIHtcblx0XHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG1vdXNld2hlZWw6IGZ1bmN0aW9uKCBldmVudCwgZGVsdGEgKSB7XG5cdFx0XHRpZiAoICFkZWx0YSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhdGhpcy5zcGlubmluZyAmJiAhdGhpcy5fc3RhcnQoIGV2ZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc3BpbiggKGRlbHRhID4gMCA/IDEgOiAtMSkgKiB0aGlzLm9wdGlvbnMuc3RlcCwgZXZlbnQgKTtcblx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5tb3VzZXdoZWVsVGltZXIgKTtcblx0XHRcdHRoaXMubW91c2V3aGVlbFRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy5zcGlubmluZyApIHtcblx0XHRcdFx0XHR0aGlzLl9zdG9wKCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxMDAgKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fSxcblx0XHRcIm1vdXNlZG93biAudWktc3Bpbm5lci1idXR0b25cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHByZXZpb3VzO1xuXG5cdFx0XHQvLyBXZSBuZXZlciB3YW50IHRoZSBidXR0b25zIHRvIGhhdmUgZm9jdXM7IHdoZW5ldmVyIHRoZSB1c2VyIGlzXG5cdFx0XHQvLyBpbnRlcmFjdGluZyB3aXRoIHRoZSBzcGlubmVyLCB0aGUgZm9jdXMgc2hvdWxkIGJlIG9uIHRoZSBpbnB1dC5cblx0XHRcdC8vIElmIHRoZSBpbnB1dCBpcyBmb2N1c2VkIHRoZW4gdGhpcy5wcmV2aW91cyBpcyBwcm9wZXJseSBzZXQgZnJvbVxuXHRcdFx0Ly8gd2hlbiB0aGUgaW5wdXQgZmlyc3QgcmVjZWl2ZWQgZm9jdXMuIElmIHRoZSBpbnB1dCBpcyBub3QgZm9jdXNlZFxuXHRcdFx0Ly8gdGhlbiB3ZSBuZWVkIHRvIHNldCB0aGlzLnByZXZpb3VzIGJhc2VkIG9uIHRoZSB2YWx1ZSBiZWZvcmUgc3Bpbm5pbmcuXG5cdFx0XHRwcmV2aW91cyA9IHRoaXMuZWxlbWVudFswXSA9PT0gdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ID9cblx0XHRcdFx0dGhpcy5wcmV2aW91cyA6IHRoaXMuZWxlbWVudC52YWwoKTtcblx0XHRcdGZ1bmN0aW9uIGNoZWNrRm9jdXMoKSB7XG5cdFx0XHRcdHZhciBpc0FjdGl2ZSA9IHRoaXMuZWxlbWVudFswXSA9PT0gdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50O1xuXHRcdFx0XHRpZiAoICFpc0FjdGl2ZSApIHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG5cdFx0XHRcdFx0Ly8gc3VwcG9ydDogSUVcblx0XHRcdFx0XHQvLyBJRSBzZXRzIGZvY3VzIGFzeW5jaHJvbm91c2x5LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGZvY3VzXG5cdFx0XHRcdFx0Ly8gbW92ZWQgb2ZmIG9mIHRoZSBpbnB1dCBiZWNhdXNlIHRoZSB1c2VyIGNsaWNrZWQgb24gdGhlIGJ1dHRvbi5cblx0XHRcdFx0XHR0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucHJldmlvdXMgPSBwcmV2aW91cztcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBlbnN1cmUgZm9jdXMgaXMgb24gKG9yIHN0YXlzIG9uKSB0aGUgdGV4dCBmaWVsZFxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGNoZWNrRm9jdXMuY2FsbCggdGhpcyApO1xuXG5cdFx0XHQvLyBzdXBwb3J0OiBJRVxuXHRcdFx0Ly8gSUUgZG9lc24ndCBwcmV2ZW50IG1vdmluZyBmb2N1cyBldmVuIHdpdGggZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdFx0Ly8gc28gd2Ugc2V0IGEgZmxhZyB0byBrbm93IHdoZW4gd2Ugc2hvdWxkIGlnbm9yZSB0aGUgYmx1ciBldmVudFxuXHRcdFx0Ly8gYW5kIGNoZWNrIChhZ2FpbikgaWYgZm9jdXMgbW92ZWQgb2ZmIG9mIHRoZSBpbnB1dC5cblx0XHRcdHRoaXMuY2FuY2VsQmx1ciA9IHRydWU7XG5cdFx0XHR0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblx0XHRcdFx0Y2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCB0aGlzLl9zdGFydCggZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoIFwidWktc3Bpbm5lci11cFwiICkgPyAxIDogLTEsIGV2ZW50ICk7XG5cdFx0fSxcblx0XHRcIm1vdXNldXAgLnVpLXNwaW5uZXItYnV0dG9uXCI6IFwiX3N0b3BcIixcblx0XHRcIm1vdXNlZW50ZXIgLnVpLXNwaW5uZXItYnV0dG9uXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdC8vIGJ1dHRvbiB3aWxsIGFkZCB1aS1zdGF0ZS1hY3RpdmUgaWYgbW91c2Ugd2FzIGRvd24gd2hpbGUgbW91c2VsZWF2ZSBhbmQga2VwdCBkb3duXG5cdFx0XHRpZiAoICEkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuX3N0YXJ0KCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoIFwidWktc3Bpbm5lci11cFwiICkgPyAxIDogLTEsIGV2ZW50ICk7XG5cdFx0fSxcblx0XHQvLyBUT0RPOiBkbyB3ZSByZWFsbHkgd2FudCB0byBjb25zaWRlciB0aGlzIGEgc3RvcD9cblx0XHQvLyBzaG91bGRuJ3Qgd2UganVzdCBzdG9wIHRoZSByZXBlYXRlciBhbmQgd2FpdCB1bnRpbCBtb3VzZXVwIGJlZm9yZVxuXHRcdC8vIHdlIHRyaWdnZXIgdGhlIHN0b3AgZXZlbnQ/XG5cdFx0XCJtb3VzZWxlYXZlIC51aS1zcGlubmVyLWJ1dHRvblwiOiBcIl9zdG9wXCJcblx0fSxcblxuXHRfZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHVpU3Bpbm5lciA9IHRoaXMudWlTcGlubmVyID0gdGhpcy5lbGVtZW50XG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktc3Bpbm5lci1pbnB1dFwiIClcblx0XHRcdC5hdHRyKCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiIClcblx0XHRcdC53cmFwKCB0aGlzLl91aVNwaW5uZXJIdG1sKCkgKVxuXHRcdFx0LnBhcmVudCgpXG5cdFx0XHRcdC8vIGFkZCBidXR0b25zXG5cdFx0XHRcdC5hcHBlbmQoIHRoaXMuX2J1dHRvbkh0bWwoKSApO1xuXG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwicm9sZVwiLCBcInNwaW5idXR0b25cIiApO1xuXG5cdFx0Ly8gYnV0dG9uIGJpbmRpbmdzXG5cdFx0dGhpcy5idXR0b25zID0gdWlTcGlubmVyLmZpbmQoIFwiLnVpLXNwaW5uZXItYnV0dG9uXCIgKVxuXHRcdFx0LmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKVxuXHRcdFx0LmJ1dHRvbigpXG5cdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktY29ybmVyLWFsbFwiICk7XG5cblx0XHQvLyBJRSA2IGRvZXNuJ3QgdW5kZXJzdGFuZCBoZWlnaHQ6IDUwJSBmb3IgdGhlIGJ1dHRvbnNcblx0XHQvLyB1bmxlc3MgdGhlIHdyYXBwZXIgaGFzIGFuIGV4cGxpY2l0IGhlaWdodFxuXHRcdGlmICggdGhpcy5idXR0b25zLmhlaWdodCgpID4gTWF0aC5jZWlsKCB1aVNwaW5uZXIuaGVpZ2h0KCkgKiAwLjUgKSAmJlxuXHRcdFx0XHR1aVNwaW5uZXIuaGVpZ2h0KCkgPiAwICkge1xuXHRcdFx0dWlTcGlubmVyLmhlaWdodCggdWlTcGlubmVyLmhlaWdodCgpICk7XG5cdFx0fVxuXG5cdFx0Ly8gZGlzYWJsZSBzcGlubmVyIGlmIGVsZW1lbnQgd2FzIGFscmVhZHkgZGlzYWJsZWRcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdHRoaXMuZGlzYWJsZSgpO1xuXHRcdH1cblx0fSxcblxuXHRfa2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0a2V5Q29kZSA9ICQudWkua2V5Q29kZTtcblxuXHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0Y2FzZSBrZXlDb2RlLlVQOlxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAxLCBldmVudCApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSBrZXlDb2RlLkRPV046XG5cdFx0XHR0aGlzLl9yZXBlYXQoIG51bGwsIC0xLCBldmVudCApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSBrZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHR0aGlzLl9yZXBlYXQoIG51bGwsIG9wdGlvbnMucGFnZSwgZXZlbnQgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2Uga2V5Q29kZS5QQUdFX0RPV046XG5cdFx0XHR0aGlzLl9yZXBlYXQoIG51bGwsIC1vcHRpb25zLnBhZ2UsIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X3VpU3Bpbm5lckh0bWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBcIjxzcGFuIGNsYXNzPSd1aS1zcGlubmVyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsJz48L3NwYW4+XCI7XG5cdH0sXG5cblx0X2J1dHRvbkh0bWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBcIlwiICtcblx0XHRcdFwiPGEgY2xhc3M9J3VpLXNwaW5uZXItYnV0dG9uIHVpLXNwaW5uZXItdXAgdWktY29ybmVyLXRyJz5cIiArXG5cdFx0XHRcdFwiPHNwYW4gY2xhc3M9J3VpLWljb24gXCIgKyB0aGlzLm9wdGlvbnMuaWNvbnMudXAgKyBcIic+JiM5NjUwOzwvc3Bhbj5cIiArXG5cdFx0XHRcIjwvYT5cIiArXG5cdFx0XHRcIjxhIGNsYXNzPSd1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLWRvd24gdWktY29ybmVyLWJyJz5cIiArXG5cdFx0XHRcdFwiPHNwYW4gY2xhc3M9J3VpLWljb24gXCIgKyB0aGlzLm9wdGlvbnMuaWNvbnMuZG93biArIFwiJz4mIzk2NjA7PC9zcGFuPlwiICtcblx0XHRcdFwiPC9hPlwiO1xuXHR9LFxuXG5cdF9zdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggIXRoaXMuc3Bpbm5pbmcgJiYgdGhpcy5fdHJpZ2dlciggXCJzdGFydFwiLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoICF0aGlzLmNvdW50ZXIgKSB7XG5cdFx0XHR0aGlzLmNvdW50ZXIgPSAxO1xuXHRcdH1cblx0XHR0aGlzLnNwaW5uaW5nID0gdHJ1ZTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfcmVwZWF0OiBmdW5jdGlvbiggaSwgc3RlcHMsIGV2ZW50ICkge1xuXHRcdGkgPSBpIHx8IDUwMDtcblxuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdHRoaXMudGltZXIgPSB0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3JlcGVhdCggNDAsIHN0ZXBzLCBldmVudCApO1xuXHRcdH0sIGkgKTtcblxuXHRcdHRoaXMuX3NwaW4oIHN0ZXBzICogdGhpcy5vcHRpb25zLnN0ZXAsIGV2ZW50ICk7XG5cdH0sXG5cblx0X3NwaW46IGZ1bmN0aW9uKCBzdGVwLCBldmVudCApIHtcblx0XHR2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCkgfHwgMDtcblxuXHRcdGlmICggIXRoaXMuY291bnRlciApIHtcblx0XHRcdHRoaXMuY291bnRlciA9IDE7XG5cdFx0fVxuXG5cdFx0dmFsdWUgPSB0aGlzLl9hZGp1c3RWYWx1ZSggdmFsdWUgKyBzdGVwICogdGhpcy5faW5jcmVtZW50KCB0aGlzLmNvdW50ZXIgKSApO1xuXG5cdFx0aWYgKCAhdGhpcy5zcGlubmluZyB8fCB0aGlzLl90cmlnZ2VyKCBcInNwaW5cIiwgZXZlbnQsIHsgdmFsdWU6IHZhbHVlIH0gKSAhPT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuX3ZhbHVlKCB2YWx1ZSApO1xuXHRcdFx0dGhpcy5jb3VudGVyKys7XG5cdFx0fVxuXHR9LFxuXG5cdF9pbmNyZW1lbnQ6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBpbmNyZW1lbnRhbCA9IHRoaXMub3B0aW9ucy5pbmNyZW1lbnRhbDtcblxuXHRcdGlmICggaW5jcmVtZW50YWwgKSB7XG5cdFx0XHRyZXR1cm4gJC5pc0Z1bmN0aW9uKCBpbmNyZW1lbnRhbCApID9cblx0XHRcdFx0aW5jcmVtZW50YWwoIGkgKSA6XG5cdFx0XHRcdE1hdGguZmxvb3IoIGkqaSppLzUwMDAwIC0gaSppLzUwMCArIDE3KmkvMjAwICsgMSApO1xuXHRcdH1cblxuXHRcdHJldHVybiAxO1xuXHR9LFxuXG5cdF9wcmVjaXNpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcmVjaXNpb24gPSB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLnN0ZXAgKTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5taW4gIT09IG51bGwgKSB7XG5cdFx0XHRwcmVjaXNpb24gPSBNYXRoLm1heCggcHJlY2lzaW9uLCB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLm1pbiApICk7XG5cdFx0fVxuXHRcdHJldHVybiBwcmVjaXNpb247XG5cdH0sXG5cblx0X3ByZWNpc2lvbk9mOiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHZhciBzdHIgPSBudW0udG9TdHJpbmcoKSxcblx0XHRcdGRlY2ltYWwgPSBzdHIuaW5kZXhPZiggXCIuXCIgKTtcblx0XHRyZXR1cm4gZGVjaW1hbCA9PT0gLTEgPyAwIDogc3RyLmxlbmd0aCAtIGRlY2ltYWwgLSAxO1xuXHR9LFxuXG5cdF9hZGp1c3RWYWx1ZTogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBiYXNlLCBhYm92ZU1pbixcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHQvLyBtYWtlIHN1cmUgd2UncmUgYXQgYSB2YWxpZCBzdGVwXG5cdFx0Ly8gLSBmaW5kIG91dCB3aGVyZSB3ZSBhcmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgKG1pbiBvciAwKVxuXHRcdGJhc2UgPSBvcHRpb25zLm1pbiAhPT0gbnVsbCA/IG9wdGlvbnMubWluIDogMDtcblx0XHRhYm92ZU1pbiA9IHZhbHVlIC0gYmFzZTtcblx0XHQvLyAtIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHN0ZXBcblx0XHRhYm92ZU1pbiA9IE1hdGgucm91bmQoYWJvdmVNaW4gLyBvcHRpb25zLnN0ZXApICogb3B0aW9ucy5zdGVwO1xuXHRcdC8vIC0gcm91bmRpbmcgaXMgYmFzZWQgb24gMCwgc28gYWRqdXN0IGJhY2sgdG8gb3VyIGJhc2Vcblx0XHR2YWx1ZSA9IGJhc2UgKyBhYm92ZU1pbjtcblxuXHRcdC8vIGZpeCBwcmVjaXNpb24gZnJvbSBiYWQgSlMgZmxvYXRpbmcgcG9pbnQgbWF0aFxuXHRcdHZhbHVlID0gcGFyc2VGbG9hdCggdmFsdWUudG9GaXhlZCggdGhpcy5fcHJlY2lzaW9uKCkgKSApO1xuXG5cdFx0Ly8gY2xhbXAgdGhlIHZhbHVlXG5cdFx0aWYgKCBvcHRpb25zLm1heCAhPT0gbnVsbCAmJiB2YWx1ZSA+IG9wdGlvbnMubWF4KSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucy5tYXg7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5taW4gIT09IG51bGwgJiYgdmFsdWUgPCBvcHRpb25zLm1pbiApIHtcblx0XHRcdHJldHVybiBvcHRpb25zLm1pbjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cblx0X3N0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLnNwaW5uaW5nICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy5tb3VzZXdoZWVsVGltZXIgKTtcblx0XHR0aGlzLmNvdW50ZXIgPSAwO1xuXHRcdHRoaXMuc3Bpbm5pbmcgPSBmYWxzZTtcblx0XHR0aGlzLl90cmlnZ2VyKCBcInN0b3BcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRpZiAoIGtleSA9PT0gXCJjdWx0dXJlXCIgfHwga2V5ID09PSBcIm51bWJlckZvcm1hdFwiICkge1xuXHRcdFx0dmFyIHByZXZWYWx1ZSA9IHRoaXMuX3BhcnNlKCB0aGlzLmVsZW1lbnQudmFsKCkgKTtcblx0XHRcdHRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblx0XHRcdHRoaXMuZWxlbWVudC52YWwoIHRoaXMuX2Zvcm1hdCggcHJldlZhbHVlICkgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJtYXhcIiB8fCBrZXkgPT09IFwibWluXCIgfHwga2V5ID09PSBcInN0ZXBcIiApIHtcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX3BhcnNlKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGtleSA9PT0gXCJpY29uc1wiICkge1xuXHRcdFx0dGhpcy5idXR0b25zLmZpcnN0KCkuZmluZCggXCIudWktaWNvblwiIClcblx0XHRcdFx0LnJlbW92ZUNsYXNzKCB0aGlzLm9wdGlvbnMuaWNvbnMudXAgKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIHZhbHVlLnVwICk7XG5cdFx0XHR0aGlzLmJ1dHRvbnMubGFzdCgpLmZpbmQoIFwiLnVpLWljb25cIiApXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmljb25zLmRvd24gKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIHZhbHVlLmRvd24gKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wcm9wKCBcImRpc2FibGVkXCIsIHRydWUgKTtcblx0XHRcdFx0dGhpcy5idXR0b25zLmJ1dHRvbiggXCJkaXNhYmxlXCIgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wcm9wKCBcImRpc2FibGVkXCIsIGZhbHNlICk7XG5cdFx0XHRcdHRoaXMuYnV0dG9ucy5idXR0b24oIFwiZW5hYmxlXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbnM6IG1vZGlmaWVyKGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHRoaXMuX3N1cGVyKCBvcHRpb25zICk7XG5cdFx0dGhpcy5fdmFsdWUoIHRoaXMuZWxlbWVudC52YWwoKSApO1xuXHR9KSxcblxuXHRfcGFyc2U6IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICYmIHZhbCAhPT0gXCJcIiApIHtcblx0XHRcdHZhbCA9IHdpbmRvdy5HbG9iYWxpemUgJiYgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCA/XG5cdFx0XHRcdEdsb2JhbGl6ZS5wYXJzZUZsb2F0KCB2YWwsIDEwLCB0aGlzLm9wdGlvbnMuY3VsdHVyZSApIDogK3ZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbCA9PT0gXCJcIiB8fCBpc05hTiggdmFsICkgPyBudWxsIDogdmFsO1xuXHR9LFxuXG5cdF9mb3JtYXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdHJldHVybiB3aW5kb3cuR2xvYmFsaXplICYmIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQgP1xuXHRcdFx0R2xvYmFsaXplLmZvcm1hdCggdmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQsIHRoaXMub3B0aW9ucy5jdWx0dXJlICkgOlxuXHRcdFx0dmFsdWU7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5hdHRyKHtcblx0XHRcdFwiYXJpYS12YWx1ZW1pblwiOiB0aGlzLm9wdGlvbnMubWluLFxuXHRcdFx0XCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMub3B0aW9ucy5tYXgsXG5cdFx0XHQvLyBUT0RPOiB3aGF0IHNob3VsZCB3ZSBkbyB3aXRoIHZhbHVlcyB0aGF0IGNhbid0IGJlIHBhcnNlZD9cblx0XHRcdFwiYXJpYS12YWx1ZW5vd1wiOiB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpIClcblx0XHR9KTtcblx0fSxcblxuXHQvLyB1cGRhdGUgdGhlIHZhbHVlIHdpdGhvdXQgdHJpZ2dlcmluZyBjaGFuZ2Vcblx0X3ZhbHVlOiBmdW5jdGlvbiggdmFsdWUsIGFsbG93QW55ICkge1xuXHRcdHZhciBwYXJzZWQ7XG5cdFx0aWYgKCB2YWx1ZSAhPT0gXCJcIiApIHtcblx0XHRcdHBhcnNlZCA9IHRoaXMuX3BhcnNlKCB2YWx1ZSApO1xuXHRcdFx0aWYgKCBwYXJzZWQgIT09IG51bGwgKSB7XG5cdFx0XHRcdGlmICggIWFsbG93QW55ICkge1xuXHRcdFx0XHRcdHBhcnNlZCA9IHRoaXMuX2FkanVzdFZhbHVlKCBwYXJzZWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX2Zvcm1hdCggcGFyc2VkICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuZWxlbWVudC52YWwoIHZhbHVlICk7XG5cdFx0dGhpcy5fcmVmcmVzaCgpO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1zcGlubmVyLWlucHV0XCIgKVxuXHRcdFx0LnByb3AoIFwiZGlzYWJsZWRcIiwgZmFsc2UgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXV0b2NvbXBsZXRlXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtdmFsdWVtaW5cIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLXZhbHVlbWF4XCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS12YWx1ZW5vd1wiICk7XG5cdFx0dGhpcy51aVNwaW5uZXIucmVwbGFjZVdpdGgoIHRoaXMuZWxlbWVudCApO1xuXHR9LFxuXG5cdHN0ZXBVcDogbW9kaWZpZXIoZnVuY3Rpb24oIHN0ZXBzICkge1xuXHRcdHRoaXMuX3N0ZXBVcCggc3RlcHMgKTtcblx0fSksXG5cdF9zdGVwVXA6IGZ1bmN0aW9uKCBzdGVwcyApIHtcblx0XHRpZiAoIHRoaXMuX3N0YXJ0KCkgKSB7XG5cdFx0XHR0aGlzLl9zcGluKCAoc3RlcHMgfHwgMSkgKiB0aGlzLm9wdGlvbnMuc3RlcCApO1xuXHRcdFx0dGhpcy5fc3RvcCgpO1xuXHRcdH1cblx0fSxcblxuXHRzdGVwRG93bjogbW9kaWZpZXIoZnVuY3Rpb24oIHN0ZXBzICkge1xuXHRcdHRoaXMuX3N0ZXBEb3duKCBzdGVwcyApO1xuXHR9KSxcblx0X3N0ZXBEb3duOiBmdW5jdGlvbiggc3RlcHMgKSB7XG5cdFx0aWYgKCB0aGlzLl9zdGFydCgpICkge1xuXHRcdFx0dGhpcy5fc3BpbiggKHN0ZXBzIHx8IDEpICogLXRoaXMub3B0aW9ucy5zdGVwICk7XG5cdFx0XHR0aGlzLl9zdG9wKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHBhZ2VVcDogbW9kaWZpZXIoZnVuY3Rpb24oIHBhZ2VzICkge1xuXHRcdHRoaXMuX3N0ZXBVcCggKHBhZ2VzIHx8IDEpICogdGhpcy5vcHRpb25zLnBhZ2UgKTtcblx0fSksXG5cblx0cGFnZURvd246IG1vZGlmaWVyKGZ1bmN0aW9uKCBwYWdlcyApIHtcblx0XHR0aGlzLl9zdGVwRG93biggKHBhZ2VzIHx8IDEpICogdGhpcy5vcHRpb25zLnBhZ2UgKTtcblx0fSksXG5cblx0dmFsdWU6IGZ1bmN0aW9uKCBuZXdWYWwgKSB7XG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpICk7XG5cdFx0fVxuXHRcdG1vZGlmaWVyKCB0aGlzLl92YWx1ZSApLmNhbGwoIHRoaXMsIG5ld1ZhbCApO1xuXHR9LFxuXG5cdHdpZGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMudWlTcGlubmVyO1xuXHR9XG59KTtcblxufSggalF1ZXJ5ICkgKTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG52YXIgdGFiSWQgPSAwLFxuXHRyaGFzaCA9IC8jLiokLztcblxuZnVuY3Rpb24gZ2V0TmV4dFRhYklkKCkge1xuXHRyZXR1cm4gKyt0YWJJZDtcbn1cblxuZnVuY3Rpb24gaXNMb2NhbCggYW5jaG9yICkge1xuXHRyZXR1cm4gYW5jaG9yLmhhc2gubGVuZ3RoID4gMSAmJlxuXHRcdGRlY29kZVVSSUNvbXBvbmVudCggYW5jaG9yLmhyZWYucmVwbGFjZSggcmhhc2gsIFwiXCIgKSApID09PVxuXHRcdFx0ZGVjb2RlVVJJQ29tcG9uZW50KCBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoIHJoYXNoLCBcIlwiICkgKTtcbn1cblxuJC53aWRnZXQoIFwidWkudGFic1wiLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cdGRlbGF5OiAzMDAsXG5cdG9wdGlvbnM6IHtcblx0XHRhY3RpdmU6IG51bGwsXG5cdFx0Y29sbGFwc2libGU6IGZhbHNlLFxuXHRcdGV2ZW50OiBcImNsaWNrXCIsXG5cdFx0aGVpZ2h0U3R5bGU6IFwiY29udGVudFwiLFxuXHRcdGhpZGU6IG51bGwsXG5cdFx0c2hvdzogbnVsbCxcblxuXHRcdC8vIGNhbGxiYWNrc1xuXHRcdGFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZUFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZUxvYWQ6IG51bGwsXG5cdFx0bG9hZDogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LmFkZENsYXNzKCBcInVpLXRhYnMgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGxcIiApXG5cdFx0XHQudG9nZ2xlQ2xhc3MoIFwidWktdGFicy1jb2xsYXBzaWJsZVwiLCBvcHRpb25zLmNvbGxhcHNpYmxlIClcblx0XHRcdC8vIFByZXZlbnQgdXNlcnMgZnJvbSBmb2N1c2luZyBkaXNhYmxlZCB0YWJzIHZpYSBjbGlja1xuXHRcdFx0LmRlbGVnYXRlKCBcIi51aS10YWJzLW5hdiA+IGxpXCIsIFwibW91c2Vkb3duXCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggJCggdGhpcyApLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC8vIHN1cHBvcnQ6IElFIDw5XG5cdFx0XHQvLyBQcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvbiBpbiBtb3VzZWRvd24gZG9lc24ndCBwcmV2ZW50IElFXG5cdFx0XHQvLyBmcm9tIGZvY3VzaW5nIHRoZSBlbGVtZW50LCBzbyBpZiB0aGUgYW5jaG9yIGdldHMgZm9jdXNlZCwgYmx1ci5cblx0XHRcdC8vIFdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgZm9jdXNpbmcgdGhlIHByZXZpb3VzbHkgZm9jdXNlZFxuXHRcdFx0Ly8gZWxlbWVudCBzaW5jZSBjbGlja2luZyBvbiBhIG5vbi1mb2N1c2FibGUgZWxlbWVudCBzaG91bGQgZm9jdXNcblx0XHRcdC8vIHRoZSBib2R5IGFueXdheS5cblx0XHRcdC5kZWxlZ2F0ZSggXCIudWktdGFicy1hbmNob3JcIiwgXCJmb2N1c1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggJCggdGhpcyApLmNsb3Nlc3QoIFwibGlcIiApLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0dGhpcy5fcHJvY2Vzc1RhYnMoKTtcblx0XHRvcHRpb25zLmFjdGl2ZSA9IHRoaXMuX2luaXRpYWxBY3RpdmUoKTtcblxuXHRcdC8vIFRha2UgZGlzYWJsaW5nIHRhYnMgdmlhIGNsYXNzIGF0dHJpYnV0ZSBmcm9tIEhUTUxcblx0XHQvLyBpbnRvIGFjY291bnQgYW5kIHVwZGF0ZSBvcHRpb24gcHJvcGVybHkuXG5cdFx0aWYgKCAkLmlzQXJyYXkoIG9wdGlvbnMuZGlzYWJsZWQgKSApIHtcblx0XHRcdG9wdGlvbnMuZGlzYWJsZWQgPSAkLnVuaXF1ZSggb3B0aW9ucy5kaXNhYmxlZC5jb25jYXQoXG5cdFx0XHRcdCQubWFwKCB0aGlzLnRhYnMuZmlsdGVyKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICksIGZ1bmN0aW9uKCBsaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhhdC50YWJzLmluZGV4KCBsaSApO1xuXHRcdFx0XHR9KVxuXHRcdFx0KSApLnNvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBjaGVjayBmb3IgbGVuZ3RoIGF2b2lkcyBlcnJvciB3aGVuIGluaXRpYWxpemluZyBlbXB0eSBsaXN0XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlICE9PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5hY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKCBvcHRpb25zLmFjdGl2ZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9ICQoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cblx0XHRpZiAoIHRoaXMuYWN0aXZlLmxlbmd0aCApIHtcblx0XHRcdHRoaXMubG9hZCggb3B0aW9ucy5hY3RpdmUgKTtcblx0XHR9XG5cdH0sXG5cblx0X2luaXRpYWxBY3RpdmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhY3RpdmUgPSB0aGlzLm9wdGlvbnMuYWN0aXZlLFxuXHRcdFx0Y29sbGFwc2libGUgPSB0aGlzLm9wdGlvbnMuY29sbGFwc2libGUsXG5cdFx0XHRsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApO1xuXG5cdFx0aWYgKCBhY3RpdmUgPT09IG51bGwgKSB7XG5cdFx0XHQvLyBjaGVjayB0aGUgZnJhZ21lbnQgaWRlbnRpZmllciBpbiB0aGUgVVJMXG5cdFx0XHRpZiAoIGxvY2F0aW9uSGFzaCApIHtcblx0XHRcdFx0dGhpcy50YWJzLmVhY2goZnVuY3Rpb24oIGksIHRhYiApIHtcblx0XHRcdFx0XHRpZiAoICQoIHRhYiApLmF0dHIoIFwiYXJpYS1jb250cm9sc1wiICkgPT09IGxvY2F0aW9uSGFzaCApIHtcblx0XHRcdFx0XHRcdGFjdGl2ZSA9IGk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2hlY2sgZm9yIGEgdGFiIG1hcmtlZCBhY3RpdmUgdmlhIGEgY2xhc3Ncblx0XHRcdGlmICggYWN0aXZlID09PSBudWxsICkge1xuXHRcdFx0XHRhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5maWx0ZXIoIFwiLnVpLXRhYnMtYWN0aXZlXCIgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBubyBhY3RpdmUgdGFiLCBzZXQgdG8gZmFsc2Vcblx0XHRcdGlmICggYWN0aXZlID09PSBudWxsIHx8IGFjdGl2ZSA9PT0gLTEgKSB7XG5cdFx0XHRcdGFjdGl2ZSA9IHRoaXMudGFicy5sZW5ndGggPyAwIDogZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaGFuZGxlIG51bWJlcnM6IG5lZ2F0aXZlLCBvdXQgb2YgcmFuZ2Vcblx0XHRpZiAoIGFjdGl2ZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHRhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5lcSggYWN0aXZlICkgKTtcblx0XHRcdGlmICggYWN0aXZlID09PSAtMSApIHtcblx0XHRcdFx0YWN0aXZlID0gY29sbGFwc2libGUgPyBmYWxzZSA6IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gZG9uJ3QgYWxsb3cgY29sbGFwc2libGU6IGZhbHNlIGFuZCBhY3RpdmU6IGZhbHNlXG5cdFx0aWYgKCAhY29sbGFwc2libGUgJiYgYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0YWN0aXZlID0gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWN0aXZlO1xuXHR9LFxuXG5cdF9nZXRDcmVhdGVFdmVudERhdGE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR0YWI6IHRoaXMuYWN0aXZlLFxuXHRcdFx0cGFuZWw6ICF0aGlzLmFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKVxuXHRcdH07XG5cdH0sXG5cblx0X3RhYktleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjE1Ki9cblx0XHR2YXIgZm9jdXNlZFRhYiA9ICQoIHRoaXMuZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCApLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0c2VsZWN0ZWRJbmRleCA9IHRoaXMudGFicy5pbmRleCggZm9jdXNlZFRhYiApLFxuXHRcdFx0Z29pbmdGb3J3YXJkID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5ET1dOOlxuXHRcdFx0XHRzZWxlY3RlZEluZGV4Kys7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuVVA6XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5MRUZUOlxuXHRcdFx0XHRnb2luZ0ZvcndhcmQgPSBmYWxzZTtcblx0XHRcdFx0c2VsZWN0ZWRJbmRleC0tO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkVORDpcblx0XHRcdFx0c2VsZWN0ZWRJbmRleCA9IHRoaXMuYW5jaG9ycy5sZW5ndGggLSAxO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHRcdHNlbGVjdGVkSW5kZXggPSAwO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlNQQUNFOlxuXHRcdFx0XHQvLyBBY3RpdmF0ZSBvbmx5LCBubyBjb2xsYXBzaW5nXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7XG5cdFx0XHRcdHRoaXMuX2FjdGl2YXRlKCBzZWxlY3RlZEluZGV4ICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkVOVEVSOlxuXHRcdFx0XHQvLyBUb2dnbGUgKGNhbmNlbCBkZWxheWVkIGFjdGl2YXRpb24sIGFsbG93IGNvbGxhcHNpbmcpXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7XG5cdFx0XHRcdC8vIERldGVybWluZSBpZiB3ZSBzaG91bGQgY29sbGFwc2Ugb3IgYWN0aXZhdGVcblx0XHRcdFx0dGhpcy5fYWN0aXZhdGUoIHNlbGVjdGVkSW5kZXggPT09IHRoaXMub3B0aW9ucy5hY3RpdmUgPyBmYWxzZSA6IHNlbGVjdGVkSW5kZXggKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZvY3VzIHRoZSBhcHByb3ByaWF0ZSB0YWIsIGJhc2VkIG9uIHdoaWNoIGtleSB3YXMgcHJlc3NlZFxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTtcblx0XHRzZWxlY3RlZEluZGV4ID0gdGhpcy5fZm9jdXNOZXh0VGFiKCBzZWxlY3RlZEluZGV4LCBnb2luZ0ZvcndhcmQgKTtcblxuXHRcdC8vIE5hdmlnYXRpbmcgd2l0aCBjb250cm9sIGtleSB3aWxsIHByZXZlbnQgYXV0b21hdGljIGFjdGl2YXRpb25cblx0XHRpZiAoICFldmVudC5jdHJsS2V5ICkge1xuXHRcdFx0Ly8gVXBkYXRlIGFyaWEtc2VsZWN0ZWQgaW1tZWRpYXRlbHkgc28gdGhhdCBBVCB0aGluayB0aGUgdGFiIGlzIGFscmVhZHkgc2VsZWN0ZWQuXG5cdFx0XHQvLyBPdGhlcndpc2UgQVQgbWF5IGNvbmZ1c2UgdGhlIHVzZXIgYnkgc3RhdGluZyB0aGF0IHRoZXkgbmVlZCB0byBhY3RpdmF0ZSB0aGUgdGFiLFxuXHRcdFx0Ly8gYnV0IHRoZSB0YWIgd2lsbCBhbHJlYWR5IGJlIGFjdGl2YXRlZCBieSB0aGUgdGltZSB0aGUgYW5ub3VuY2VtZW50IGZpbmlzaGVzLlxuXHRcdFx0Zm9jdXNlZFRhYi5hdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJmYWxzZVwiICk7XG5cdFx0XHR0aGlzLnRhYnMuZXEoIHNlbGVjdGVkSW5kZXggKS5hdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJ0cnVlXCIgKTtcblxuXHRcdFx0dGhpcy5hY3RpdmF0aW5nID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9uKCBcImFjdGl2ZVwiLCBzZWxlY3RlZEluZGV4ICk7XG5cdFx0XHR9LCB0aGlzLmRlbGF5ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9wYW5lbEtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIHRoaXMuX2hhbmRsZVBhZ2VOYXYoIGV2ZW50ICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ3RybCt1cCBtb3ZlcyBmb2N1cyB0byB0aGUgY3VycmVudCB0YWJcblx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlVQICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHRoaXMuYWN0aXZlLmZvY3VzKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEFsdCtwYWdlIHVwL2Rvd24gbW92ZXMgZm9jdXMgdG8gdGhlIHByZXZpb3VzL25leHQgdGFiIChhbmQgYWN0aXZhdGVzKVxuXHRfaGFuZGxlUGFnZU5hdjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnQuYWx0S2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5QQUdFX1VQICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZvY3VzTmV4dFRhYiggdGhpcy5vcHRpb25zLmFjdGl2ZSAtIDEsIGZhbHNlICkgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoIGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZvY3VzTmV4dFRhYiggdGhpcy5vcHRpb25zLmFjdGl2ZSArIDEsIHRydWUgKSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9LFxuXG5cdF9maW5kTmV4dFRhYjogZnVuY3Rpb24oIGluZGV4LCBnb2luZ0ZvcndhcmQgKSB7XG5cdFx0dmFyIGxhc3RUYWJJbmRleCA9IHRoaXMudGFicy5sZW5ndGggLSAxO1xuXG5cdFx0ZnVuY3Rpb24gY29uc3RyYWluKCkge1xuXHRcdFx0aWYgKCBpbmRleCA+IGxhc3RUYWJJbmRleCApIHtcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdGluZGV4ID0gbGFzdFRhYkluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGluZGV4O1xuXHRcdH1cblxuXHRcdHdoaWxlICggJC5pbkFycmF5KCBjb25zdHJhaW4oKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkICkgIT09IC0xICkge1xuXHRcdFx0aW5kZXggPSBnb2luZ0ZvcndhcmQgPyBpbmRleCArIDEgOiBpbmRleCAtIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9LFxuXG5cdF9mb2N1c05leHRUYWI6IGZ1bmN0aW9uKCBpbmRleCwgZ29pbmdGb3J3YXJkICkge1xuXHRcdGluZGV4ID0gdGhpcy5fZmluZE5leHRUYWIoIGluZGV4LCBnb2luZ0ZvcndhcmQgKTtcblx0XHR0aGlzLnRhYnMuZXEoIGluZGV4ICkuZm9jdXMoKTtcblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiYWN0aXZlXCIgKSB7XG5cdFx0XHQvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9uc1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHZhbHVlICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdC8vIGRvbid0IHVzZSB0aGUgd2lkZ2V0IGZhY3RvcnkncyBkaXNhYmxlZCBoYW5kbGluZ1xuXHRcdFx0dGhpcy5fc2V0dXBEaXNhYmxlZCggdmFsdWUgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSk7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJjb2xsYXBzaWJsZVwiICkge1xuXHRcdFx0dGhpcy5lbGVtZW50LnRvZ2dsZUNsYXNzKCBcInVpLXRhYnMtY29sbGFwc2libGVcIiwgdmFsdWUgKTtcblx0XHRcdC8vIFNldHRpbmcgY29sbGFwc2libGU6IGZhbHNlIHdoaWxlIGNvbGxhcHNlZDsgb3BlbiBmaXJzdCBwYW5lbFxuXHRcdFx0aWYgKCAhdmFsdWUgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2YXRlKCAwICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiZXZlbnRcIiApIHtcblx0XHRcdHRoaXMuX3NldHVwRXZlbnRzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImhlaWdodFN0eWxlXCIgKSB7XG5cdFx0XHR0aGlzLl9zZXR1cEhlaWdodFN0eWxlKCB2YWx1ZSApO1xuXHRcdH1cblx0fSxcblxuXHRfdGFiSWQ6IGZ1bmN0aW9uKCB0YWIgKSB7XG5cdFx0cmV0dXJuIHRhYi5hdHRyKCBcImFyaWEtY29udHJvbHNcIiApIHx8IFwidWktdGFicy1cIiArIGdldE5leHRUYWJJZCgpO1xuXHR9LFxuXG5cdF9zYW5pdGl6ZVNlbGVjdG9yOiBmdW5jdGlvbiggaGFzaCApIHtcblx0XHRyZXR1cm4gaGFzaCA/IGhhc2gucmVwbGFjZSggL1shXCIkJSYnKCkqKywuXFwvOjs8PT4/QFxcW1xcXVxcXmB7fH1+XS9nLCBcIlxcXFwkJlwiICkgOiBcIlwiO1xuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0bGlzID0gdGhpcy50YWJsaXN0LmNoaWxkcmVuKCBcIjpoYXMoYVtocmVmXSlcIiApO1xuXG5cdFx0Ly8gZ2V0IGRpc2FibGVkIHRhYnMgZnJvbSBjbGFzcyBhdHRyaWJ1dGUgZnJvbSBIVE1MXG5cdFx0Ly8gdGhpcyB3aWxsIGdldCBjb252ZXJ0ZWQgdG8gYSBib29sZWFuIGlmIG5lZWRlZCBpbiBfcmVmcmVzaCgpXG5cdFx0b3B0aW9ucy5kaXNhYmxlZCA9ICQubWFwKCBsaXMuZmlsdGVyKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICksIGZ1bmN0aW9uKCB0YWIgKSB7XG5cdFx0XHRyZXR1cm4gbGlzLmluZGV4KCB0YWIgKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuX3Byb2Nlc3NUYWJzKCk7XG5cblx0XHQvLyB3YXMgY29sbGFwc2VkIG9yIG5vIHRhYnNcblx0XHRpZiAoIG9wdGlvbnMuYWN0aXZlID09PSBmYWxzZSB8fCAhdGhpcy5hbmNob3JzLmxlbmd0aCApIHtcblx0XHRcdG9wdGlvbnMuYWN0aXZlID0gZmFsc2U7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9ICQoKTtcblx0XHQvLyB3YXMgYWN0aXZlLCBidXQgYWN0aXZlIHRhYiBpcyBnb25lXG5cdFx0fSBlbHNlIGlmICggdGhpcy5hY3RpdmUubGVuZ3RoICYmICEkLmNvbnRhaW5zKCB0aGlzLnRhYmxpc3RbIDAgXSwgdGhpcy5hY3RpdmVbIDAgXSApICkge1xuXHRcdFx0Ly8gYWxsIHJlbWFpbmluZyB0YWJzIGFyZSBkaXNhYmxlZFxuXHRcdFx0aWYgKCB0aGlzLnRhYnMubGVuZ3RoID09PSBvcHRpb25zLmRpc2FibGVkLmxlbmd0aCApIHtcblx0XHRcdFx0b3B0aW9ucy5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5hY3RpdmUgPSAkKCk7XG5cdFx0XHQvLyBhY3RpdmF0ZSBwcmV2aW91cyB0YWJcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2YXRlKCB0aGlzLl9maW5kTmV4dFRhYiggTWF0aC5tYXgoIDAsIG9wdGlvbnMuYWN0aXZlIC0gMSApLCBmYWxzZSApICk7XG5cdFx0XHR9XG5cdFx0Ly8gd2FzIGFjdGl2ZSwgYWN0aXZlIHRhYiBzdGlsbCBleGlzdHNcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbWFrZSBzdXJlIGFjdGl2ZSBpbmRleCBpcyBjb3JyZWN0XG5cdFx0XHRvcHRpb25zLmFjdGl2ZSA9IHRoaXMudGFicy5pbmRleCggdGhpcy5hY3RpdmUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3NldHVwRGlzYWJsZWQoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdHRoaXMuX3NldHVwRXZlbnRzKCB0aGlzLm9wdGlvbnMuZXZlbnQgKTtcblx0XHR0aGlzLl9zZXR1cEhlaWdodFN0eWxlKCB0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgKTtcblxuXHRcdHRoaXMudGFicy5ub3QoIHRoaXMuYWN0aXZlICkuYXR0cih7XG5cdFx0XHRcImFyaWEtc2VsZWN0ZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0dGFiSW5kZXg6IC0xXG5cdFx0fSk7XG5cdFx0dGhpcy5wYW5lbHMubm90KCB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKSApXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuYXR0cih7XG5cdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcblx0XHRcdH0pO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIG9uZSB0YWIgaXMgaW4gdGhlIHRhYiBvcmRlclxuXHRcdGlmICggIXRoaXMuYWN0aXZlLmxlbmd0aCApIHtcblx0XHRcdHRoaXMudGFicy5lcSggMCApLmF0dHIoIFwidGFiSW5kZXhcIiwgMCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFjdGl2ZVxuXHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktdGFicy1hY3RpdmUgdWktc3RhdGUtYWN0aXZlXCIgKVxuXHRcdFx0XHQuYXR0cih7XG5cdFx0XHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdHRhYkluZGV4OiAwXG5cdFx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlIClcblx0XHRcdFx0LnNob3coKVxuXHRcdFx0XHQuYXR0cih7XG5cdFx0XHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJmYWxzZVwiXG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRfcHJvY2Vzc1RhYnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMudGFibGlzdCA9IHRoaXMuX2dldExpc3QoKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLXRhYnMtbmF2IHVpLWhlbHBlci1yZXNldCB1aS1oZWxwZXItY2xlYXJmaXggdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItYWxsXCIgKVxuXHRcdFx0LmF0dHIoIFwicm9sZVwiLCBcInRhYmxpc3RcIiApO1xuXG5cdFx0dGhpcy50YWJzID0gdGhpcy50YWJsaXN0LmZpbmQoIFwiPiBsaTpoYXMoYVtocmVmXSlcIiApXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wXCIgKVxuXHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRyb2xlOiBcInRhYlwiLFxuXHRcdFx0XHR0YWJJbmRleDogLTFcblx0XHRcdH0pO1xuXG5cdFx0dGhpcy5hbmNob3JzID0gdGhpcy50YWJzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICQoIFwiYVwiLCB0aGlzIClbIDAgXTtcblx0XHRcdH0pXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktdGFicy1hbmNob3JcIiApXG5cdFx0XHQuYXR0cih7XG5cdFx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0XHRcdHRhYkluZGV4OiAtMVxuXHRcdFx0fSk7XG5cblx0XHR0aGlzLnBhbmVscyA9ICQoKTtcblxuXHRcdHRoaXMuYW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCBpLCBhbmNob3IgKSB7XG5cdFx0XHR2YXIgc2VsZWN0b3IsIHBhbmVsLCBwYW5lbElkLFxuXHRcdFx0XHRhbmNob3JJZCA9ICQoIGFuY2hvciApLnVuaXF1ZUlkKCkuYXR0ciggXCJpZFwiICksXG5cdFx0XHRcdHRhYiA9ICQoIGFuY2hvciApLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0XHRvcmlnaW5hbEFyaWFDb250cm9scyA9IHRhYi5hdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXG5cdFx0XHQvLyBpbmxpbmUgdGFiXG5cdFx0XHRpZiAoIGlzTG9jYWwoIGFuY2hvciApICkge1xuXHRcdFx0XHRzZWxlY3RvciA9IGFuY2hvci5oYXNoO1xuXHRcdFx0XHRwYW5lbCA9IHRoYXQuZWxlbWVudC5maW5kKCB0aGF0Ll9zYW5pdGl6ZVNlbGVjdG9yKCBzZWxlY3RvciApICk7XG5cdFx0XHQvLyByZW1vdGUgdGFiXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwYW5lbElkID0gdGhhdC5fdGFiSWQoIHRhYiApO1xuXHRcdFx0XHRzZWxlY3RvciA9IFwiI1wiICsgcGFuZWxJZDtcblx0XHRcdFx0cGFuZWwgPSB0aGF0LmVsZW1lbnQuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdFx0aWYgKCAhcGFuZWwubGVuZ3RoICkge1xuXHRcdFx0XHRcdHBhbmVsID0gdGhhdC5fY3JlYXRlUGFuZWwoIHBhbmVsSWQgKTtcblx0XHRcdFx0XHRwYW5lbC5pbnNlcnRBZnRlciggdGhhdC5wYW5lbHNbIGkgLSAxIF0gfHwgdGhhdC50YWJsaXN0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cGFuZWwuYXR0ciggXCJhcmlhLWxpdmVcIiwgXCJwb2xpdGVcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHBhbmVsLmxlbmd0aCkge1xuXHRcdFx0XHR0aGF0LnBhbmVscyA9IHRoYXQucGFuZWxzLmFkZCggcGFuZWwgKTtcblx0XHRcdH1cblx0XHRcdGlmICggb3JpZ2luYWxBcmlhQ29udHJvbHMgKSB7XG5cdFx0XHRcdHRhYi5kYXRhKCBcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiLCBvcmlnaW5hbEFyaWFDb250cm9scyApO1xuXHRcdFx0fVxuXHRcdFx0dGFiLmF0dHIoe1xuXHRcdFx0XHRcImFyaWEtY29udHJvbHNcIjogc2VsZWN0b3Iuc3Vic3RyaW5nKCAxICksXG5cdFx0XHRcdFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFuY2hvcklkXG5cdFx0XHR9KTtcblx0XHRcdHBhbmVsLmF0dHIoIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGFuY2hvcklkICk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnBhbmVsc1xuXHRcdFx0LmFkZENsYXNzKCBcInVpLXRhYnMtcGFuZWwgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbVwiIClcblx0XHRcdC5hdHRyKCBcInJvbGVcIiwgXCJ0YWJwYW5lbFwiICk7XG5cdH0sXG5cblx0Ly8gYWxsb3cgb3ZlcnJpZGluZyBob3cgdG8gZmluZCB0aGUgbGlzdCBmb3IgcmFyZSB1c2FnZSBzY2VuYXJpb3MgKCM3NzE1KVxuXHRfZ2V0TGlzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudC5maW5kKCBcIm9sLHVsXCIgKS5lcSggMCApO1xuXHR9LFxuXG5cdF9jcmVhdGVQYW5lbDogZnVuY3Rpb24oIGlkICkge1xuXHRcdHJldHVybiAkKCBcIjxkaXY+XCIgKVxuXHRcdFx0LmF0dHIoIFwiaWRcIiwgaWQgKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLXRhYnMtcGFuZWwgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbVwiIClcblx0XHRcdC5kYXRhKCBcInVpLXRhYnMtZGVzdHJveVwiLCB0cnVlICk7XG5cdH0sXG5cblx0X3NldHVwRGlzYWJsZWQ6IGZ1bmN0aW9uKCBkaXNhYmxlZCApIHtcblx0XHRpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHtcblx0XHRcdGlmICggIWRpc2FibGVkLmxlbmd0aCApIHtcblx0XHRcdFx0ZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIGRpc2FibGVkLmxlbmd0aCA9PT0gdGhpcy5hbmNob3JzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGRpc2FibGUgdGFic1xuXHRcdGZvciAoIHZhciBpID0gMCwgbGk7ICggbGkgPSB0aGlzLnRhYnNbIGkgXSApOyBpKysgKSB7XG5cdFx0XHRpZiAoIGRpc2FibGVkID09PSB0cnVlIHx8ICQuaW5BcnJheSggaSwgZGlzYWJsZWQgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdCQoIGxpIClcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktc3RhdGUtZGlzYWJsZWRcIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiLCBcInRydWVcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggbGkgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWRpc2FibGVkXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcblx0fSxcblxuXHRfc2V0dXBFdmVudHM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgZXZlbnRzID0ge1xuXHRcdFx0Y2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmICggZXZlbnQgKSB7XG5cdFx0XHQkLmVhY2goIGV2ZW50LnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGluZGV4LCBldmVudE5hbWUgKSB7XG5cdFx0XHRcdGV2ZW50c1sgZXZlbnROYW1lIF0gPSBcIl9ldmVudEhhbmRsZXJcIjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMuX29mZiggdGhpcy5hbmNob3JzLmFkZCggdGhpcy50YWJzICkuYWRkKCB0aGlzLnBhbmVscyApICk7XG5cdFx0dGhpcy5fb24oIHRoaXMuYW5jaG9ycywgZXZlbnRzICk7XG5cdFx0dGhpcy5fb24oIHRoaXMudGFicywgeyBrZXlkb3duOiBcIl90YWJLZXlkb3duXCIgfSApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnBhbmVscywgeyBrZXlkb3duOiBcIl9wYW5lbEtleWRvd25cIiB9ICk7XG5cblx0XHR0aGlzLl9mb2N1c2FibGUoIHRoaXMudGFicyApO1xuXHRcdHRoaXMuX2hvdmVyYWJsZSggdGhpcy50YWJzICk7XG5cdH0sXG5cblx0X3NldHVwSGVpZ2h0U3R5bGU6IGZ1bmN0aW9uKCBoZWlnaHRTdHlsZSApIHtcblx0XHR2YXIgbWF4SGVpZ2h0LFxuXHRcdFx0cGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpO1xuXG5cdFx0aWYgKCBoZWlnaHRTdHlsZSA9PT0gXCJmaWxsXCIgKSB7XG5cdFx0XHRtYXhIZWlnaHQgPSBwYXJlbnQuaGVpZ2h0KCk7XG5cdFx0XHRtYXhIZWlnaHQgLT0gdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkgLSB0aGlzLmVsZW1lbnQuaGVpZ2h0KCk7XG5cblx0XHRcdHRoaXMuZWxlbWVudC5zaWJsaW5ncyggXCI6dmlzaWJsZVwiICkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBlbGVtLmNzcyggXCJwb3NpdGlvblwiICk7XG5cblx0XHRcdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1heEhlaWdodCAtPSBlbGVtLm91dGVySGVpZ2h0KCB0cnVlICk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LmNoaWxkcmVuKCkubm90KCB0aGlzLnBhbmVscyApLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1heEhlaWdodCAtPSAkKCB0aGlzICkub3V0ZXJIZWlnaHQoIHRydWUgKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnBhbmVscy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuaGVpZ2h0KCBNYXRoLm1heCggMCwgbWF4SGVpZ2h0IC1cblx0XHRcdFx0XHQkKCB0aGlzICkuaW5uZXJIZWlnaHQoKSArICQoIHRoaXMgKS5oZWlnaHQoKSApICk7XG5cdFx0XHR9KVxuXHRcdFx0LmNzcyggXCJvdmVyZmxvd1wiLCBcImF1dG9cIiApO1xuXHRcdH0gZWxzZSBpZiAoIGhlaWdodFN0eWxlID09PSBcImF1dG9cIiApIHtcblx0XHRcdG1heEhlaWdodCA9IDA7XG5cdFx0XHR0aGlzLnBhbmVscy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtYXhIZWlnaHQgPSBNYXRoLm1heCggbWF4SGVpZ2h0LCAkKCB0aGlzICkuaGVpZ2h0KCBcIlwiICkuaGVpZ2h0KCkgKTtcblx0XHRcdH0pLmhlaWdodCggbWF4SGVpZ2h0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGFjdGl2ZSA9IHRoaXMuYWN0aXZlLFxuXHRcdFx0YW5jaG9yID0gJCggZXZlbnQuY3VycmVudFRhcmdldCApLFxuXHRcdFx0dGFiID0gYW5jaG9yLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0Y2xpY2tlZElzQWN0aXZlID0gdGFiWyAwIF0gPT09IGFjdGl2ZVsgMCBdLFxuXHRcdFx0Y29sbGFwc2luZyA9IGNsaWNrZWRJc0FjdGl2ZSAmJiBvcHRpb25zLmNvbGxhcHNpYmxlLFxuXHRcdFx0dG9TaG93ID0gY29sbGFwc2luZyA/ICQoKSA6IHRoaXMuX2dldFBhbmVsRm9yVGFiKCB0YWIgKSxcblx0XHRcdHRvSGlkZSA9ICFhY3RpdmUubGVuZ3RoID8gJCgpIDogdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIGFjdGl2ZSApLFxuXHRcdFx0ZXZlbnREYXRhID0ge1xuXHRcdFx0XHRvbGRUYWI6IGFjdGl2ZSxcblx0XHRcdFx0b2xkUGFuZWw6IHRvSGlkZSxcblx0XHRcdFx0bmV3VGFiOiBjb2xsYXBzaW5nID8gJCgpIDogdGFiLFxuXHRcdFx0XHRuZXdQYW5lbDogdG9TaG93XG5cdFx0XHR9O1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmICggdGFiLmhhc0NsYXNzKCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKSB8fFxuXHRcdFx0XHQvLyB0YWIgaXMgYWxyZWFkeSBsb2FkaW5nXG5cdFx0XHRcdHRhYi5oYXNDbGFzcyggXCJ1aS10YWJzLWxvYWRpbmdcIiApIHx8XG5cdFx0XHRcdC8vIGNhbid0IHN3aXRjaCBkdXJuaW5nIGFuIGFuaW1hdGlvblxuXHRcdFx0XHR0aGlzLnJ1bm5pbmcgfHxcblx0XHRcdFx0Ly8gY2xpY2sgb24gYWN0aXZlIGhlYWRlciwgYnV0IG5vdCBjb2xsYXBzaWJsZVxuXHRcdFx0XHQoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8XG5cdFx0XHRcdC8vIGFsbG93IGNhbmNlbGluZyBhY3RpdmF0aW9uXG5cdFx0XHRcdCggdGhpcy5fdHJpZ2dlciggXCJiZWZvcmVBY3RpdmF0ZVwiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5hY3RpdmUgPSBjb2xsYXBzaW5nID8gZmFsc2UgOiB0aGlzLnRhYnMuaW5kZXgoIHRhYiApO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiB0YWI7XG5cdFx0aWYgKCB0aGlzLnhociApIHtcblx0XHRcdHRoaXMueGhyLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhdG9IaWRlLmxlbmd0aCAmJiAhdG9TaG93Lmxlbmd0aCApIHtcblx0XHRcdCQuZXJyb3IoIFwialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmxvYWQoIHRoaXMudGFicy5pbmRleCggdGFiICksIGV2ZW50ICk7XG5cdFx0fVxuXHRcdHRoaXMuX3RvZ2dsZSggZXZlbnQsIGV2ZW50RGF0YSApO1xuXHR9LFxuXG5cdC8vIGhhbmRsZXMgc2hvdy9oaWRlIGZvciBzZWxlY3RpbmcgdGFic1xuXHRfdG9nZ2xlOiBmdW5jdGlvbiggZXZlbnQsIGV2ZW50RGF0YSApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHR0b1Nob3cgPSBldmVudERhdGEubmV3UGFuZWwsXG5cdFx0XHR0b0hpZGUgPSBldmVudERhdGEub2xkUGFuZWw7XG5cblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdFx0ZnVuY3Rpb24gY29tcGxldGUoKSB7XG5cdFx0XHR0aGF0LnJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiYWN0aXZhdGVcIiwgZXZlbnQsIGV2ZW50RGF0YSApO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNob3coKSB7XG5cdFx0XHRldmVudERhdGEubmV3VGFiLmNsb3Nlc3QoIFwibGlcIiApLmFkZENsYXNzKCBcInVpLXRhYnMtYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cblx0XHRcdGlmICggdG9TaG93Lmxlbmd0aCAmJiB0aGF0Lm9wdGlvbnMuc2hvdyApIHtcblx0XHRcdFx0dGhhdC5fc2hvdyggdG9TaG93LCB0aGF0Lm9wdGlvbnMuc2hvdywgY29tcGxldGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRvU2hvdy5zaG93KCk7XG5cdFx0XHRcdGNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gc3RhcnQgb3V0IGJ5IGhpZGluZywgdGhlbiBzaG93aW5nLCB0aGVuIGNvbXBsZXRpbmdcblx0XHRpZiAoIHRvSGlkZS5sZW5ndGggJiYgdGhpcy5vcHRpb25zLmhpZGUgKSB7XG5cdFx0XHR0aGlzLl9oaWRlKCB0b0hpZGUsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZXZlbnREYXRhLm9sZFRhYi5jbG9zZXN0KCBcImxpXCIgKS5yZW1vdmVDbGFzcyggXCJ1aS10YWJzLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0XHRzaG93KCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXZlbnREYXRhLm9sZFRhYi5jbG9zZXN0KCBcImxpXCIgKS5yZW1vdmVDbGFzcyggXCJ1aS10YWJzLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0dG9IaWRlLmhpZGUoKTtcblx0XHRcdHNob3coKTtcblx0XHR9XG5cblx0XHR0b0hpZGUuYXR0cih7XG5cdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuXHRcdH0pO1xuXHRcdGV2ZW50RGF0YS5vbGRUYWIuYXR0ciggXCJhcmlhLXNlbGVjdGVkXCIsIFwiZmFsc2VcIiApO1xuXHRcdC8vIElmIHdlJ3JlIHN3aXRjaGluZyB0YWJzLCByZW1vdmUgdGhlIG9sZCB0YWIgZnJvbSB0aGUgdGFiIG9yZGVyLlxuXHRcdC8vIElmIHdlJ3JlIG9wZW5pbmcgZnJvbSBjb2xsYXBzZWQgc3RhdGUsIHJlbW92ZSB0aGUgcHJldmlvdXMgdGFiIGZyb20gdGhlIHRhYiBvcmRlci5cblx0XHQvLyBJZiB3ZSdyZSBjb2xsYXBzaW5nLCB0aGVuIGtlZXAgdGhlIGNvbGxhcHNpbmcgdGFiIGluIHRoZSB0YWIgb3JkZXIuXG5cdFx0aWYgKCB0b1Nob3cubGVuZ3RoICYmIHRvSGlkZS5sZW5ndGggKSB7XG5cdFx0XHRldmVudERhdGEub2xkVGFiLmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKTtcblx0XHR9IGVsc2UgaWYgKCB0b1Nob3cubGVuZ3RoICkge1xuXHRcdFx0dGhpcy50YWJzLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICQoIHRoaXMgKS5hdHRyKCBcInRhYkluZGV4XCIgKSA9PT0gMDtcblx0XHRcdH0pXG5cdFx0XHQuYXR0ciggXCJ0YWJJbmRleFwiLCAtMSApO1xuXHRcdH1cblxuXHRcdHRvU2hvdy5hdHRyKHtcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcInRydWVcIixcblx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJmYWxzZVwiXG5cdFx0fSk7XG5cdFx0ZXZlbnREYXRhLm5ld1RhYi5hdHRyKHtcblx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIixcblx0XHRcdHRhYkluZGV4OiAwXG5cdFx0fSk7XG5cdH0sXG5cblx0X2FjdGl2YXRlOiBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0dmFyIGFuY2hvcixcblx0XHRcdGFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIGluZGV4ICk7XG5cblx0XHQvLyB0cnlpbmcgdG8gYWN0aXZhdGUgdGhlIGFscmVhZHkgYWN0aXZlIHBhbmVsXG5cdFx0aWYgKCBhY3RpdmVbIDAgXSA9PT0gdGhpcy5hY3RpdmVbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyB0cnlpbmcgdG8gY29sbGFwc2UsIHNpbXVsYXRlIGEgY2xpY2sgb24gdGhlIGN1cnJlbnQgYWN0aXZlIGhlYWRlclxuXHRcdGlmICggIWFjdGl2ZS5sZW5ndGggKSB7XG5cdFx0XHRhY3RpdmUgPSB0aGlzLmFjdGl2ZTtcblx0XHR9XG5cblx0XHRhbmNob3IgPSBhY3RpdmUuZmluZCggXCIudWktdGFicy1hbmNob3JcIiApWyAwIF07XG5cdFx0dGhpcy5fZXZlbnRIYW5kbGVyKHtcblx0XHRcdHRhcmdldDogYW5jaG9yLFxuXHRcdFx0Y3VycmVudFRhcmdldDogYW5jaG9yLFxuXHRcdFx0cHJldmVudERlZmF1bHQ6ICQubm9vcFxuXHRcdH0pO1xuXHR9LFxuXG5cdF9maW5kQWN0aXZlOiBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0cmV0dXJuIGluZGV4ID09PSBmYWxzZSA/ICQoKSA6IHRoaXMudGFicy5lcSggaW5kZXggKTtcblx0fSxcblxuXHRfZ2V0SW5kZXg6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHQvLyBtZXRhLWZ1bmN0aW9uIHRvIGdpdmUgdXNlcnMgb3B0aW9uIHRvIHByb3ZpZGUgYSBocmVmIHN0cmluZyBpbnN0ZWFkIG9mIGEgbnVtZXJpY2FsIGluZGV4LlxuXHRcdGlmICggdHlwZW9mIGluZGV4ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aW5kZXggPSB0aGlzLmFuY2hvcnMuaW5kZXgoIHRoaXMuYW5jaG9ycy5maWx0ZXIoIFwiW2hyZWYkPSdcIiArIGluZGV4ICsgXCInXVwiICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggdGhpcy54aHIgKSB7XG5cdFx0XHR0aGlzLnhoci5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggXCJ1aS10YWJzIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLXRhYnMtY29sbGFwc2libGVcIiApO1xuXG5cdFx0dGhpcy50YWJsaXN0XG5cdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktdGFicy1uYXYgdWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGxcIiApXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKTtcblxuXHRcdHRoaXMuYW5jaG9yc1xuXHRcdFx0LnJlbW92ZUNsYXNzKCBcInVpLXRhYnMtYW5jaG9yXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcInRhYkluZGV4XCIgKVxuXHRcdFx0LnJlbW92ZVVuaXF1ZUlkKCk7XG5cblx0XHR0aGlzLnRhYnMuYWRkKCB0aGlzLnBhbmVscyApLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQuZGF0YSggdGhpcywgXCJ1aS10YWJzLWRlc3Ryb3lcIiApICkge1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCB0aGlzIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidWktc3RhdGUtZGVmYXVsdCB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGlzYWJsZWQgXCIgK1xuXHRcdFx0XHRcdFx0XCJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20gdWktd2lkZ2V0LWNvbnRlbnQgdWktdGFicy1hY3RpdmUgdWktdGFicy1wYW5lbFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQXR0ciggXCJ0YWJJbmRleFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWxpdmVcIiApXG5cdFx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1idXN5XCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiApXG5cdFx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1sYWJlbGxlZGJ5XCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtaGlkZGVuXCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtZXhwYW5kZWRcIiApXG5cdFx0XHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRhYnMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsaSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0cHJldiA9IGxpLmRhdGEoIFwidWktdGFicy1hcmlhLWNvbnRyb2xzXCIgKTtcblx0XHRcdGlmICggcHJldiApIHtcblx0XHRcdFx0bGlcblx0XHRcdFx0XHQuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIsIHByZXYgKVxuXHRcdFx0XHRcdC5yZW1vdmVEYXRhKCBcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaS5yZW1vdmVBdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5wYW5lbHMuc2hvdygpO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgIT09IFwiY29udGVudFwiICkge1xuXHRcdFx0dGhpcy5wYW5lbHMuY3NzKCBcImhlaWdodFwiLCBcIlwiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdHZhciBkaXNhYmxlZCA9IHRoaXMub3B0aW9ucy5kaXNhYmxlZDtcblx0XHRpZiAoIGRpc2FibGVkID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRkaXNhYmxlZCA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbmRleCA9IHRoaXMuX2dldEluZGV4KCBpbmRleCApO1xuXHRcdFx0aWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7XG5cdFx0XHRcdGRpc2FibGVkID0gJC5tYXAoIGRpc2FibGVkLCBmdW5jdGlvbiggbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBudW0gIT09IGluZGV4ID8gbnVtIDogbnVsbDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaXNhYmxlZCA9ICQubWFwKCB0aGlzLnRhYnMsIGZ1bmN0aW9uKCBsaSwgbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBudW0gIT09IGluZGV4ID8gbnVtIDogbnVsbDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX3NldHVwRGlzYWJsZWQoIGRpc2FibGVkICk7XG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdHZhciBkaXNhYmxlZCA9IHRoaXMub3B0aW9ucy5kaXNhYmxlZDtcblx0XHRpZiAoIGRpc2FibGVkID09PSB0cnVlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGRpc2FibGVkID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTtcblx0XHRcdGlmICggJC5pbkFycmF5KCBpbmRleCwgZGlzYWJsZWQgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggJC5pc0FycmF5KCBkaXNhYmxlZCApICkge1xuXHRcdFx0XHRkaXNhYmxlZCA9ICQubWVyZ2UoIFsgaW5kZXggXSwgZGlzYWJsZWQgKS5zb3J0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaXNhYmxlZCA9IFsgaW5kZXggXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fc2V0dXBEaXNhYmxlZCggZGlzYWJsZWQgKTtcblx0fSxcblxuXHRsb2FkOiBmdW5jdGlvbiggaW5kZXgsIGV2ZW50ICkge1xuXHRcdGluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0dGFiID0gdGhpcy50YWJzLmVxKCBpbmRleCApLFxuXHRcdFx0YW5jaG9yID0gdGFiLmZpbmQoIFwiLnVpLXRhYnMtYW5jaG9yXCIgKSxcblx0XHRcdHBhbmVsID0gdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRhYiApLFxuXHRcdFx0ZXZlbnREYXRhID0ge1xuXHRcdFx0XHR0YWI6IHRhYixcblx0XHRcdFx0cGFuZWw6IHBhbmVsXG5cdFx0XHR9O1xuXG5cdFx0Ly8gbm90IHJlbW90ZVxuXHRcdGlmICggaXNMb2NhbCggYW5jaG9yWyAwIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLnhociA9ICQuYWpheCggdGhpcy5fYWpheFNldHRpbmdzKCBhbmNob3IsIGV2ZW50LCBldmVudERhdGEgKSApO1xuXG5cdFx0Ly8gc3VwcG9ydDogalF1ZXJ5IDwxLjhcblx0XHQvLyBqUXVlcnkgPDEuOCByZXR1cm5zIGZhbHNlIGlmIHRoZSByZXF1ZXN0IGlzIGNhbmNlbGVkIGluIGJlZm9yZVNlbmQsXG5cdFx0Ly8gYnV0IGFzIG9mIDEuOCwgJC5hamF4KCkgYWx3YXlzIHJldHVybnMgYSBqcVhIUiBvYmplY3QuXG5cdFx0aWYgKCB0aGlzLnhociAmJiB0aGlzLnhoci5zdGF0dXNUZXh0ICE9PSBcImNhbmNlbGVkXCIgKSB7XG5cdFx0XHR0YWIuYWRkQ2xhc3MoIFwidWktdGFicy1sb2FkaW5nXCIgKTtcblx0XHRcdHBhbmVsLmF0dHIoIFwiYXJpYS1idXN5XCIsIFwidHJ1ZVwiICk7XG5cblx0XHRcdHRoaXMueGhyXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0XHQvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdFx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExNzc4XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHBhbmVsLmh0bWwoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImxvYWRcIiwgZXZlbnQsIGV2ZW50RGF0YSApO1xuXHRcdFx0XHRcdH0sIDEgKTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNvbXBsZXRlKGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0XHRcdC8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44XG5cdFx0XHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTE3Nzhcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0dGhhdC5wYW5lbHMuc3RvcCggZmFsc2UsIHRydWUgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dGFiLnJlbW92ZUNsYXNzKCBcInVpLXRhYnMtbG9hZGluZ1wiICk7XG5cdFx0XHRcdFx0XHRwYW5lbC5yZW1vdmVBdHRyKCBcImFyaWEtYnVzeVwiICk7XG5cblx0XHRcdFx0XHRcdGlmICgganFYSFIgPT09IHRoYXQueGhyICkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgdGhhdC54aHI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgMSApO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0X2FqYXhTZXR0aW5nczogZnVuY3Rpb24oIGFuY2hvciwgZXZlbnQsIGV2ZW50RGF0YSApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHVybDogYW5jaG9yLmF0dHIoIFwiaHJlZlwiICksXG5cdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbigganFYSFIsIHNldHRpbmdzICkge1xuXHRcdFx0XHRyZXR1cm4gdGhhdC5fdHJpZ2dlciggXCJiZWZvcmVMb2FkXCIsIGV2ZW50LFxuXHRcdFx0XHRcdCQuZXh0ZW5kKCB7IGpxWEhSIDoganFYSFIsIGFqYXhTZXR0aW5nczogc2V0dGluZ3MgfSwgZXZlbnREYXRhICkgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9LFxuXG5cdF9nZXRQYW5lbEZvclRhYjogZnVuY3Rpb24oIHRhYiApIHtcblx0XHR2YXIgaWQgPSAkKCB0YWIgKS5hdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5fc2FuaXRpemVTZWxlY3RvciggXCIjXCIgKyBpZCApICk7XG5cdH1cbn0pO1xuXG59KSggalF1ZXJ5ICk7XG4oZnVuY3Rpb24oICQgKSB7XG5cbnZhciBpbmNyZW1lbnRzID0gMDtcblxuZnVuY3Rpb24gYWRkRGVzY3JpYmVkQnkoIGVsZW0sIGlkICkge1xuXHR2YXIgZGVzY3JpYmVkYnkgPSAoZWxlbS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApIHx8IFwiXCIpLnNwbGl0KCAvXFxzKy8gKTtcblx0ZGVzY3JpYmVkYnkucHVzaCggaWQgKTtcblx0ZWxlbVxuXHRcdC5kYXRhKCBcInVpLXRvb2x0aXAtaWRcIiwgaWQgKVxuXHRcdC5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiwgJC50cmltKCBkZXNjcmliZWRieS5qb2luKCBcIiBcIiApICkgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGVzY3JpYmVkQnkoIGVsZW0gKSB7XG5cdHZhciBpZCA9IGVsZW0uZGF0YSggXCJ1aS10b29sdGlwLWlkXCIgKSxcblx0XHRkZXNjcmliZWRieSA9IChlbGVtLmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiICkgfHwgXCJcIikuc3BsaXQoIC9cXHMrLyApLFxuXHRcdGluZGV4ID0gJC5pbkFycmF5KCBpZCwgZGVzY3JpYmVkYnkgKTtcblx0aWYgKCBpbmRleCAhPT0gLTEgKSB7XG5cdFx0ZGVzY3JpYmVkYnkuc3BsaWNlKCBpbmRleCwgMSApO1xuXHR9XG5cblx0ZWxlbS5yZW1vdmVEYXRhKCBcInVpLXRvb2x0aXAtaWRcIiApO1xuXHRkZXNjcmliZWRieSA9ICQudHJpbSggZGVzY3JpYmVkYnkuam9pbiggXCIgXCIgKSApO1xuXHRpZiAoIGRlc2NyaWJlZGJ5ICkge1xuXHRcdGVsZW0uYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZGJ5ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXHR9XG59XG5cbiQud2lkZ2V0KCBcInVpLnRvb2x0aXBcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTAuMVwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y29udGVudDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBzdXBwb3J0OiBJRTw5LCBPcGVyYSBpbiBqUXVlcnkgPDEuN1xuXHRcdFx0Ly8gLnRleHQoKSBjYW4ndCBhY2NlcHQgdW5kZWZpbmVkLCBzbyBjb2VyY2UgdG8gYSBzdHJpbmdcblx0XHRcdHZhciB0aXRsZSA9ICQoIHRoaXMgKS5hdHRyKCBcInRpdGxlXCIgKSB8fCBcIlwiO1xuXHRcdFx0Ly8gRXNjYXBlIHRpdGxlLCBzaW5jZSB3ZSdyZSBnb2luZyBmcm9tIGFuIGF0dHJpYnV0ZSB0byByYXcgSFRNTFxuXHRcdFx0cmV0dXJuICQoIFwiPGE+XCIgKS50ZXh0KCB0aXRsZSApLmh0bWwoKTtcblx0XHR9LFxuXHRcdGhpZGU6IHRydWUsXG5cdFx0Ly8gRGlzYWJsZWQgZWxlbWVudHMgaGF2ZSBpbmNvbnNpc3RlbnQgYmVoYXZpb3IgYWNyb3NzIGJyb3dzZXJzICgjODY2MSlcblx0XHRpdGVtczogXCJbdGl0bGVdOm5vdChbZGlzYWJsZWRdKVwiLFxuXHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRteTogXCJsZWZ0IHRvcCsxNVwiLFxuXHRcdFx0YXQ6IFwibGVmdCBib3R0b21cIixcblx0XHRcdGNvbGxpc2lvbjogXCJmbGlwZml0IGZsaXBcIlxuXHRcdH0sXG5cdFx0c2hvdzogdHJ1ZSxcblx0XHR0b29sdGlwQ2xhc3M6IG51bGwsXG5cdFx0dHJhY2s6IGZhbHNlLFxuXG5cdFx0Ly8gY2FsbGJhY2tzXG5cdFx0Y2xvc2U6IG51bGwsXG5cdFx0b3BlbjogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX29uKHtcblx0XHRcdG1vdXNlb3ZlcjogXCJvcGVuXCIsXG5cdFx0XHRmb2N1c2luOiBcIm9wZW5cIlxuXHRcdH0pO1xuXG5cdFx0Ly8gSURzIG9mIGdlbmVyYXRlZCB0b29sdGlwcywgbmVlZGVkIGZvciBkZXN0cm95XG5cdFx0dGhpcy50b29sdGlwcyA9IHt9O1xuXHRcdC8vIElEcyBvZiBwYXJlbnQgdG9vbHRpcHMgd2hlcmUgd2UgcmVtb3ZlZCB0aGUgdGl0bGUgYXR0cmlidXRlXG5cdFx0dGhpcy5wYXJlbnRzID0ge307XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdHRoaXMuX2Rpc2FibGUoKTtcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdHRoaXNbIHZhbHVlID8gXCJfZGlzYWJsZVwiIDogXCJfZW5hYmxlXCIgXSgpO1xuXHRcdFx0dGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlO1xuXHRcdFx0Ly8gZGlzYWJsZSBlbGVtZW50IHN0eWxlIGNoYW5nZXNcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0JC5lYWNoKCB0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiggaWQsIGVsZW1lbnQgKSB7XG5cdFx0XHRcdHRoYXQuX3VwZGF0ZUNvbnRlbnQoIGVsZW1lbnQgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRfZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0Ly8gY2xvc2Ugb3BlbiB0b29sdGlwc1xuXHRcdCQuZWFjaCggdGhpcy50b29sdGlwcywgZnVuY3Rpb24oIGlkLCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIGV2ZW50ID0gJC5FdmVudCggXCJibHVyXCIgKTtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBlbGVtZW50WzBdO1xuXHRcdFx0dGhhdC5jbG9zZSggZXZlbnQsIHRydWUgKTtcblx0XHR9KTtcblxuXHRcdC8vIHJlbW92ZSB0aXRsZSBhdHRyaWJ1dGVzIHRvIHByZXZlbnQgbmF0aXZlIHRvb2x0aXBzXG5cdFx0dGhpcy5lbGVtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIGVsZW1lbnQuaXMoIFwiW3RpdGxlXVwiICkgKSB7XG5cdFx0XHRcdGVsZW1lbnRcblx0XHRcdFx0XHQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIsIGVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiICkgKVxuXHRcdFx0XHRcdC5hdHRyKCBcInRpdGxlXCIsIFwiXCIgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfZW5hYmxlOiBmdW5jdGlvbigpIHtcblx0XHQvLyByZXN0b3JlIHRpdGxlIGF0dHJpYnV0ZXNcblx0XHR0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkuYWRkQmFjaygpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9ICQoIHRoaXMgKTtcblx0XHRcdGlmICggZWxlbWVudC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICkge1xuXHRcdFx0XHRlbGVtZW50LmF0dHIoIFwidGl0bGVcIiwgZWxlbWVudC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0b3BlbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdHRhcmdldCA9ICQoIGV2ZW50ID8gZXZlbnQudGFyZ2V0IDogdGhpcy5lbGVtZW50IClcblx0XHRcdFx0Ly8gd2UgbmVlZCBjbG9zZXN0IGhlcmUgZHVlIHRvIG1vdXNlb3ZlciBidWJibGluZyxcblx0XHRcdFx0Ly8gYnV0IGFsd2F5cyBwb2ludGluZyBhdCB0aGUgc2FtZSBldmVudCB0YXJnZXRcblx0XHRcdFx0LmNsb3Nlc3QoIHRoaXMub3B0aW9ucy5pdGVtcyApO1xuXG5cdFx0Ly8gTm8gZWxlbWVudCB0byBzaG93IGEgdG9vbHRpcCBmb3Igb3IgdGhlIHRvb2x0aXAgaXMgYWxyZWFkeSBvcGVuXG5cdFx0aWYgKCAhdGFyZ2V0Lmxlbmd0aCB8fCB0YXJnZXQuZGF0YSggXCJ1aS10b29sdGlwLWlkXCIgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHRhcmdldC5hdHRyKCBcInRpdGxlXCIgKSApIHtcblx0XHRcdHRhcmdldC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiwgdGFyZ2V0LmF0dHIoIFwidGl0bGVcIiApICk7XG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmRhdGEoIFwidWktdG9vbHRpcC1vcGVuXCIsIHRydWUgKTtcblxuXHRcdC8vIGtpbGwgcGFyZW50IHRvb2x0aXBzLCBjdXN0b20gb3IgbmF0aXZlLCBmb3IgaG92ZXJcblx0XHRpZiAoIGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09IFwibW91c2VvdmVyXCIgKSB7XG5cdFx0XHR0YXJnZXQucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBwYXJlbnQgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0Ymx1ckV2ZW50O1xuXHRcdFx0XHRpZiAoIHBhcmVudC5kYXRhKCBcInVpLXRvb2x0aXAtb3BlblwiICkgKSB7XG5cdFx0XHRcdFx0Ymx1ckV2ZW50ID0gJC5FdmVudCggXCJibHVyXCIgKTtcblx0XHRcdFx0XHRibHVyRXZlbnQudGFyZ2V0ID0gYmx1ckV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0aGlzO1xuXHRcdFx0XHRcdHRoYXQuY2xvc2UoIGJsdXJFdmVudCwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggcGFyZW50LmF0dHIoIFwidGl0bGVcIiApICkge1xuXHRcdFx0XHRcdHBhcmVudC51bmlxdWVJZCgpO1xuXHRcdFx0XHRcdHRoYXQucGFyZW50c1sgdGhpcy5pZCBdID0ge1xuXHRcdFx0XHRcdFx0ZWxlbWVudDogdGhpcyxcblx0XHRcdFx0XHRcdHRpdGxlOiBwYXJlbnQuYXR0ciggXCJ0aXRsZVwiIClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHBhcmVudC5hdHRyKCBcInRpdGxlXCIsIFwiXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdXBkYXRlQ29udGVudCggdGFyZ2V0LCBldmVudCApO1xuXHR9LFxuXG5cdF91cGRhdGVDb250ZW50OiBmdW5jdGlvbiggdGFyZ2V0LCBldmVudCApIHtcblx0XHR2YXIgY29udGVudCxcblx0XHRcdGNvbnRlbnRPcHRpb24gPSB0aGlzLm9wdGlvbnMuY29udGVudCxcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0ZXZlbnRUeXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRlbnRPcHRpb24gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fb3BlbiggZXZlbnQsIHRhcmdldCwgY29udGVudE9wdGlvbiApO1xuXHRcdH1cblxuXHRcdGNvbnRlbnQgPSBjb250ZW50T3B0aW9uLmNhbGwoIHRhcmdldFswXSwgZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0Ly8gaWdub3JlIGFzeW5jIHJlc3BvbnNlIGlmIHRvb2x0aXAgd2FzIGNsb3NlZCBhbHJlYWR5XG5cdFx0XHRpZiAoICF0YXJnZXQuZGF0YSggXCJ1aS10b29sdGlwLW9wZW5cIiApICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvLyBJRSBtYXkgaW5zdGFudGx5IHNlcnZlIGEgY2FjaGVkIHJlc3BvbnNlIGZvciBhamF4IHJlcXVlc3RzXG5cdFx0XHQvLyBkZWxheSB0aGlzIGNhbGwgdG8gX29wZW4gc28gdGhlIG90aGVyIGNhbGwgdG8gX29wZW4gcnVucyBmaXJzdFxuXHRcdFx0dGhhdC5fZGVsYXkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIGpRdWVyeSBjcmVhdGVzIGEgc3BlY2lhbCBldmVudCBmb3IgZm9jdXNpbiB3aGVuIGl0IGRvZXNuJ3Rcblx0XHRcdFx0Ly8gZXhpc3QgbmF0aXZlbHkuIFRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0Ly8gb2JqZWN0IGlzIHJldXNlZCBhbmQgdGhlIHR5cGUgaXMgY2hhbmdlZC4gVGhlcmVmb3JlLCB3ZSBjYW4ndFxuXHRcdFx0XHQvLyByZWx5IG9uIHRoZSB0eXBlIGJlaW5nIGNvcnJlY3QgYWZ0ZXIgdGhlIGV2ZW50IGZpbmlzaGVkXG5cdFx0XHRcdC8vIGJ1YmJsaW5nLCBzbyB3ZSBzZXQgaXQgYmFjayB0byB0aGUgcHJldmlvdXMgdmFsdWUuICgjODc0MClcblx0XHRcdFx0aWYgKCBldmVudCApIHtcblx0XHRcdFx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX29wZW4oIGV2ZW50LCB0YXJnZXQsIHJlc3BvbnNlICk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRpZiAoIGNvbnRlbnQgKSB7XG5cdFx0XHR0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCBjb250ZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9vcGVuOiBmdW5jdGlvbiggZXZlbnQsIHRhcmdldCwgY29udGVudCApIHtcblx0XHR2YXIgdG9vbHRpcCwgZXZlbnRzLCBkZWxheWVkU2hvdyxcblx0XHRcdHBvc2l0aW9uT3B0aW9uID0gJC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKTtcblxuXHRcdGlmICggIWNvbnRlbnQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ29udGVudCBjYW4gYmUgdXBkYXRlZCBtdWx0aXBsZSB0aW1lcy4gSWYgdGhlIHRvb2x0aXAgYWxyZWFkeVxuXHRcdC8vIGV4aXN0cywgdGhlbiBqdXN0IHVwZGF0ZSB0aGUgY29udGVudCBhbmQgYmFpbC5cblx0XHR0b29sdGlwID0gdGhpcy5fZmluZCggdGFyZ2V0ICk7XG5cdFx0aWYgKCB0b29sdGlwLmxlbmd0aCApIHtcblx0XHRcdHRvb2x0aXAuZmluZCggXCIudWktdG9vbHRpcC1jb250ZW50XCIgKS5odG1sKCBjb250ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UgaGF2ZSBhIHRpdGxlLCBjbGVhciBpdCB0byBwcmV2ZW50IHRoZSBuYXRpdmUgdG9vbHRpcFxuXHRcdC8vIHdlIGhhdmUgdG8gY2hlY2sgZmlyc3QgdG8gYXZvaWQgZGVmaW5pbmcgYSB0aXRsZSBpZiBub25lIGV4aXN0c1xuXHRcdC8vICh3ZSBkb24ndCB3YW50IHRvIGNhdXNlIGFuIGVsZW1lbnQgdG8gc3RhcnQgbWF0Y2hpbmcgW3RpdGxlXSlcblx0XHQvL1xuXHRcdC8vIFdlIHVzZSByZW1vdmVBdHRyIG9ubHkgZm9yIGtleSBldmVudHMsIHRvIGFsbG93IElFIHRvIGV4cG9ydCB0aGUgY29ycmVjdFxuXHRcdC8vIGFjY2Vzc2libGUgYXR0cmlidXRlcy4gRm9yIG1vdXNlIGV2ZW50cywgc2V0IHRvIGVtcHR5IHN0cmluZyB0byBhdm9pZFxuXHRcdC8vIG5hdGl2ZSB0b29sdGlwIHNob3dpbmcgdXAgKGhhcHBlbnMgb25seSB3aGVuIHJlbW92aW5nIGluc2lkZSBtb3VzZW92ZXIpLlxuXHRcdGlmICggdGFyZ2V0LmlzKCBcIlt0aXRsZV1cIiApICkge1xuXHRcdFx0aWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSBcIm1vdXNlb3ZlclwiICkge1xuXHRcdFx0XHR0YXJnZXQuYXR0ciggXCJ0aXRsZVwiLCBcIlwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YXJnZXQucmVtb3ZlQXR0ciggXCJ0aXRsZVwiICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dG9vbHRpcCA9IHRoaXMuX3Rvb2x0aXAoIHRhcmdldCApO1xuXHRcdGFkZERlc2NyaWJlZEJ5KCB0YXJnZXQsIHRvb2x0aXAuYXR0ciggXCJpZFwiICkgKTtcblx0XHR0b29sdGlwLmZpbmQoIFwiLnVpLXRvb2x0aXAtY29udGVudFwiICkuaHRtbCggY29udGVudCApO1xuXG5cdFx0ZnVuY3Rpb24gcG9zaXRpb24oIGV2ZW50ICkge1xuXHRcdFx0cG9zaXRpb25PcHRpb24ub2YgPSBldmVudDtcblx0XHRcdGlmICggdG9vbHRpcC5pcyggXCI6aGlkZGVuXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dG9vbHRpcC5wb3NpdGlvbiggcG9zaXRpb25PcHRpb24gKTtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMudHJhY2sgJiYgZXZlbnQgJiYgL15tb3VzZS8udGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0dGhpcy5fb24oIHRoaXMuZG9jdW1lbnQsIHtcblx0XHRcdFx0bW91c2Vtb3ZlOiBwb3NpdGlvblxuXHRcdFx0fSk7XG5cdFx0XHQvLyB0cmlnZ2VyIG9uY2UgdG8gb3ZlcnJpZGUgZWxlbWVudC1yZWxhdGl2ZSBwb3NpdGlvbmluZ1xuXHRcdFx0cG9zaXRpb24oIGV2ZW50ICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRvb2x0aXAucG9zaXRpb24oICQuZXh0ZW5kKHtcblx0XHRcdFx0b2Y6IHRhcmdldFxuXHRcdFx0fSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uICkgKTtcblx0XHR9XG5cblx0XHR0b29sdGlwLmhpZGUoKTtcblxuXHRcdHRoaXMuX3Nob3coIHRvb2x0aXAsIHRoaXMub3B0aW9ucy5zaG93ICk7XG5cdFx0Ly8gSGFuZGxlIHRyYWNraW5nIHRvb2x0aXBzIHRoYXQgYXJlIHNob3duIHdpdGggYSBkZWxheSAoIzg2NDQpLiBBcyBzb29uXG5cdFx0Ly8gYXMgdGhlIHRvb2x0aXAgaXMgdmlzaWJsZSwgcG9zaXRpb24gdGhlIHRvb2x0aXAgdXNpbmcgdGhlIG1vc3QgcmVjZW50XG5cdFx0Ly8gZXZlbnQuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc2hvdyAmJiB0aGlzLm9wdGlvbnMuc2hvdy5kZWxheSApIHtcblx0XHRcdGRlbGF5ZWRTaG93ID0gdGhpcy5kZWxheWVkU2hvdyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRvb2x0aXAuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uKCBwb3NpdGlvbk9wdGlvbi5vZiApO1xuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoIGRlbGF5ZWRTaG93ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sICQuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcIm9wZW5cIiwgZXZlbnQsIHsgdG9vbHRpcDogdG9vbHRpcCB9ICk7XG5cblx0XHRldmVudHMgPSB7XG5cdFx0XHRrZXl1cDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5FU0NBUEUgKSB7XG5cdFx0XHRcdFx0dmFyIGZha2VFdmVudCA9ICQuRXZlbnQoZXZlbnQpO1xuXHRcdFx0XHRcdGZha2VFdmVudC5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0WzBdO1xuXHRcdFx0XHRcdHRoaXMuY2xvc2UoIGZha2VFdmVudCwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlVG9vbHRpcCggdG9vbHRpcCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0aWYgKCAhZXZlbnQgfHwgZXZlbnQudHlwZSA9PT0gXCJtb3VzZW92ZXJcIiApIHtcblx0XHRcdGV2ZW50cy5tb3VzZWxlYXZlID0gXCJjbG9zZVwiO1xuXHRcdH1cblx0XHRpZiAoICFldmVudCB8fCBldmVudC50eXBlID09PSBcImZvY3VzaW5cIiApIHtcblx0XHRcdGV2ZW50cy5mb2N1c291dCA9IFwiY2xvc2VcIjtcblx0XHR9XG5cdFx0dGhpcy5fb24oIHRydWUsIHRhcmdldCwgZXZlbnRzICk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHR0YXJnZXQgPSAkKCBldmVudCA/IGV2ZW50LmN1cnJlbnRUYXJnZXQgOiB0aGlzLmVsZW1lbnQgKSxcblx0XHRcdHRvb2x0aXAgPSB0aGlzLl9maW5kKCB0YXJnZXQgKTtcblxuXHRcdC8vIGRpc2FibGluZyBjbG9zZXMgdGhlIHRvb2x0aXAsIHNvIHdlIG5lZWQgdG8gdHJhY2sgd2hlbiB3ZSdyZSBjbG9zaW5nXG5cdFx0Ly8gdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCBpbiBjYXNlIHRoZSB0b29sdGlwIGJlY29tZXMgZGlzYWJsZWQgb24gY2xvc2Vcblx0XHRpZiAoIHRoaXMuY2xvc2luZyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDbGVhciB0aGUgaW50ZXJ2YWwgZm9yIGRlbGF5ZWQgdHJhY2tpbmcgdG9vbHRpcHNcblx0XHRjbGVhckludGVydmFsKCB0aGlzLmRlbGF5ZWRTaG93ICk7XG5cblx0XHQvLyBvbmx5IHNldCB0aXRsZSBpZiB3ZSBoYWQgb25lIGJlZm9yZSAoc2VlIGNvbW1lbnQgaW4gX29wZW4oKSlcblx0XHRpZiAoIHRhcmdldC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICkge1xuXHRcdFx0dGFyZ2V0LmF0dHIoIFwidGl0bGVcIiwgdGFyZ2V0LmRhdGEoIFwidWktdG9vbHRpcC10aXRsZVwiICkgKTtcblx0XHR9XG5cblx0XHRyZW1vdmVEZXNjcmliZWRCeSggdGFyZ2V0ICk7XG5cblx0XHR0b29sdGlwLnN0b3AoIHRydWUgKTtcblx0XHR0aGlzLl9oaWRlKCB0b29sdGlwLCB0aGlzLm9wdGlvbnMuaGlkZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGF0Ll9yZW1vdmVUb29sdGlwKCAkKCB0aGlzICkgKTtcblx0XHR9KTtcblxuXHRcdHRhcmdldC5yZW1vdmVEYXRhKCBcInVpLXRvb2x0aXAtb3BlblwiICk7XG5cdFx0dGhpcy5fb2ZmKCB0YXJnZXQsIFwibW91c2VsZWF2ZSBmb2N1c291dCBrZXl1cFwiICk7XG5cdFx0Ly8gUmVtb3ZlICdyZW1vdmUnIGJpbmRpbmcgb25seSBvbiBkZWxlZ2F0ZWQgdGFyZ2V0c1xuXHRcdGlmICggdGFyZ2V0WzBdICE9PSB0aGlzLmVsZW1lbnRbMF0gKSB7XG5cdFx0XHR0aGlzLl9vZmYoIHRhcmdldCwgXCJyZW1vdmVcIiApO1xuXHRcdH1cblx0XHR0aGlzLl9vZmYoIHRoaXMuZG9jdW1lbnQsIFwibW91c2Vtb3ZlXCIgKTtcblxuXHRcdGlmICggZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJtb3VzZWxlYXZlXCIgKSB7XG5cdFx0XHQkLmVhY2goIHRoaXMucGFyZW50cywgZnVuY3Rpb24oIGlkLCBwYXJlbnQgKSB7XG5cdFx0XHRcdCQoIHBhcmVudC5lbGVtZW50ICkuYXR0ciggXCJ0aXRsZVwiLCBwYXJlbnQudGl0bGUgKTtcblx0XHRcdFx0ZGVsZXRlIHRoYXQucGFyZW50c1sgaWQgXTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMuY2xvc2luZyA9IHRydWU7XG5cdFx0dGhpcy5fdHJpZ2dlciggXCJjbG9zZVwiLCBldmVudCwgeyB0b29sdGlwOiB0b29sdGlwIH0gKTtcblx0XHR0aGlzLmNsb3NpbmcgPSBmYWxzZTtcblx0fSxcblxuXHRfdG9vbHRpcDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIGlkID0gXCJ1aS10b29sdGlwLVwiICsgaW5jcmVtZW50cysrLFxuXHRcdFx0dG9vbHRpcCA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHRcdC5hdHRyKHtcblx0XHRcdFx0XHRpZDogaWQsXG5cdFx0XHRcdFx0cm9sZTogXCJ0b29sdGlwXCJcblx0XHRcdFx0fSlcblx0XHRcdFx0LmFkZENsYXNzKCBcInVpLXRvb2x0aXAgdWktd2lkZ2V0IHVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LWNvbnRlbnQgXCIgK1xuXHRcdFx0XHRcdCggdGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyB8fCBcIlwiICkgKTtcblx0XHQkKCBcIjxkaXY+XCIgKVxuXHRcdFx0LmFkZENsYXNzKCBcInVpLXRvb2x0aXAtY29udGVudFwiIClcblx0XHRcdC5hcHBlbmRUbyggdG9vbHRpcCApO1xuXHRcdHRvb2x0aXAuYXBwZW5kVG8oIHRoaXMuZG9jdW1lbnRbMF0uYm9keSApO1xuXHRcdHRoaXMudG9vbHRpcHNbIGlkIF0gPSBlbGVtZW50O1xuXHRcdHJldHVybiB0b29sdGlwO1xuXHR9LFxuXG5cdF9maW5kOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciBpZCA9IHRhcmdldC5kYXRhKCBcInVpLXRvb2x0aXAtaWRcIiApO1xuXHRcdHJldHVybiBpZCA/ICQoIFwiI1wiICsgaWQgKSA6ICQoKTtcblx0fSxcblxuXHRfcmVtb3ZlVG9vbHRpcDogZnVuY3Rpb24oIHRvb2x0aXAgKSB7XG5cdFx0dG9vbHRpcC5yZW1vdmUoKTtcblx0XHRkZWxldGUgdGhpcy50b29sdGlwc1sgdG9vbHRpcC5hdHRyKCBcImlkXCIgKSBdO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHQvLyBjbG9zZSBvcGVuIHRvb2x0aXBzXG5cdFx0JC5lYWNoKCB0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiggaWQsIGVsZW1lbnQgKSB7XG5cdFx0XHQvLyBEZWxlZ2F0ZSB0byBjbG9zZSBtZXRob2QgdG8gaGFuZGxlIGNvbW1vbiBjbGVhbnVwXG5cdFx0XHR2YXIgZXZlbnQgPSAkLkV2ZW50KCBcImJsdXJcIiApO1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCA9IGVsZW1lbnRbMF07XG5cdFx0XHR0aGF0LmNsb3NlKCBldmVudCwgdHJ1ZSApO1xuXG5cdFx0XHQvLyBSZW1vdmUgaW1tZWRpYXRlbHk7IGRlc3Ryb3lpbmcgYW4gb3BlbiB0b29sdGlwIGRvZXNuJ3QgdXNlIHRoZVxuXHRcdFx0Ly8gaGlkZSBhbmltYXRpb25cblx0XHRcdCQoIFwiI1wiICsgaWQgKS5yZW1vdmUoKTtcblxuXHRcdFx0Ly8gUmVzdG9yZSB0aGUgdGl0bGVcblx0XHRcdGlmICggZWxlbWVudC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICkge1xuXHRcdFx0XHRlbGVtZW50LmF0dHIoIFwidGl0bGVcIiwgZWxlbWVudC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICk7XG5cdFx0XHRcdGVsZW1lbnQucmVtb3ZlRGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cbn0oIGpRdWVyeSApICk7XG47KGpRdWVyeS5lZmZlY3RzIHx8IChmdW5jdGlvbigkLCB1bmRlZmluZWQpIHtcblxudmFyIGRhdGFTcGFjZSA9IFwidWktZWZmZWN0cy1cIjtcblxuJC5lZmZlY3RzID0ge1xuXHRlZmZlY3Q6IHt9XG59O1xuXG4vKiFcbiAqIGpRdWVyeSBDb2xvciBBbmltYXRpb25zIHYyLjEuMlxuICogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktY29sb3JcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogV2VkIEphbiAxNiAwODo0NzowOSAyMDEzIC0wNjAwXG4gKi9cbihmdW5jdGlvbiggalF1ZXJ5LCB1bmRlZmluZWQgKSB7XG5cblx0dmFyIHN0ZXBIb29rcyA9IFwiYmFja2dyb3VuZENvbG9yIGJvcmRlckJvdHRvbUNvbG9yIGJvcmRlckxlZnRDb2xvciBib3JkZXJSaWdodENvbG9yIGJvcmRlclRvcENvbG9yIGNvbG9yIGNvbHVtblJ1bGVDb2xvciBvdXRsaW5lQ29sb3IgdGV4dERlY29yYXRpb25Db2xvciB0ZXh0RW1waGFzaXNDb2xvclwiLFxuXG5cdC8vIHBsdXNlcXVhbHMgdGVzdCBmb3IgKz0gMTAwIC09IDEwMFxuXHRycGx1c2VxdWFscyA9IC9eKFtcXC0rXSk9XFxzKihcXGQrXFwuP1xcZCopLyxcblx0Ly8gYSBzZXQgb2YgUkUncyB0aGF0IGNhbiBtYXRjaCBzdHJpbmdzIGFuZCBnZW5lcmF0ZSBjb2xvciB0dXBsZXMuXG5cdHN0cmluZ1BhcnNlcnMgPSBbe1xuXHRcdFx0cmU6IC9yZ2JhP1xcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqKD86LFxccyooXFxkPyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLFxuXHRcdFx0cGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkge1xuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDEgXSxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAyIF0sXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMyBdLFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDQgXVxuXHRcdFx0XHRdO1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdHJlOiAvcmdiYT9cXChcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxcblx0XHRcdHBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAxIF0gKiAyLjU1LFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDIgXSAqIDIuNTUsXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMyBdICogMi41NSxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyA0IF1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHQvLyB0aGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmdcblx0XHRcdHJlOiAvIyhbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KS8sXG5cdFx0XHRwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7XG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDEgXSwgMTYgKSxcblx0XHRcdFx0XHRwYXJzZUludCggZXhlY1Jlc3VsdFsgMiBdLCAxNiApLFxuXHRcdFx0XHRcdHBhcnNlSW50KCBleGVjUmVzdWx0WyAzIF0sIDE2IClcblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHQvLyB0aGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmdcblx0XHRcdHJlOiAvIyhbYS1mMC05XSkoW2EtZjAtOV0pKFthLWYwLTldKS8sXG5cdFx0XHRwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7XG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDEgXSArIGV4ZWNSZXN1bHRbIDEgXSwgMTYgKSxcblx0XHRcdFx0XHRwYXJzZUludCggZXhlY1Jlc3VsdFsgMiBdICsgZXhlY1Jlc3VsdFsgMiBdLCAxNiApLFxuXHRcdFx0XHRcdHBhcnNlSW50KCBleGVjUmVzdWx0WyAzIF0gKyBleGVjUmVzdWx0WyAzIF0sIDE2IClcblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHRyZTogL2hzbGE/XFwoXFxzKihcXGQrKD86XFwuXFxkKyk/KVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyooPzosXFxzKihcXGQ/KD86XFwuXFxkKyk/KVxccyopP1xcKS8sXG5cdFx0XHRzcGFjZTogXCJoc2xhXCIsXG5cdFx0XHRwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7XG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMSBdLFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDIgXSAvIDEwMCxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAzIF0gLyAxMDAsXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgNCBdXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0fV0sXG5cblx0Ly8galF1ZXJ5LkNvbG9yKCApXG5cdGNvbG9yID0galF1ZXJ5LkNvbG9yID0gZnVuY3Rpb24oIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuQ29sb3IuZm4ucGFyc2UoIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKTtcblx0fSxcblx0c3BhY2VzID0ge1xuXHRcdHJnYmE6IHtcblx0XHRcdHByb3BzOiB7XG5cdFx0XHRcdHJlZDoge1xuXHRcdFx0XHRcdGlkeDogMCxcblx0XHRcdFx0XHR0eXBlOiBcImJ5dGVcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRncmVlbjoge1xuXHRcdFx0XHRcdGlkeDogMSxcblx0XHRcdFx0XHR0eXBlOiBcImJ5dGVcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRibHVlOiB7XG5cdFx0XHRcdFx0aWR4OiAyLFxuXHRcdFx0XHRcdHR5cGU6IFwiYnl0ZVwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0aHNsYToge1xuXHRcdFx0cHJvcHM6IHtcblx0XHRcdFx0aHVlOiB7XG5cdFx0XHRcdFx0aWR4OiAwLFxuXHRcdFx0XHRcdHR5cGU6IFwiZGVncmVlc1wiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNhdHVyYXRpb246IHtcblx0XHRcdFx0XHRpZHg6IDEsXG5cdFx0XHRcdFx0dHlwZTogXCJwZXJjZW50XCJcblx0XHRcdFx0fSxcblx0XHRcdFx0bGlnaHRuZXNzOiB7XG5cdFx0XHRcdFx0aWR4OiAyLFxuXHRcdFx0XHRcdHR5cGU6IFwicGVyY2VudFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdHByb3BUeXBlcyA9IHtcblx0XHRcImJ5dGVcIjoge1xuXHRcdFx0Zmxvb3I6IHRydWUsXG5cdFx0XHRtYXg6IDI1NVxuXHRcdH0sXG5cdFx0XCJwZXJjZW50XCI6IHtcblx0XHRcdG1heDogMVxuXHRcdH0sXG5cdFx0XCJkZWdyZWVzXCI6IHtcblx0XHRcdG1vZDogMzYwLFxuXHRcdFx0Zmxvb3I6IHRydWVcblx0XHR9XG5cdH0sXG5cdHN1cHBvcnQgPSBjb2xvci5zdXBwb3J0ID0ge30sXG5cblx0Ly8gZWxlbWVudCBmb3Igc3VwcG9ydCB0ZXN0c1xuXHRzdXBwb3J0RWxlbSA9IGpRdWVyeSggXCI8cD5cIiApWyAwIF0sXG5cblx0Ly8gY29sb3JzID0galF1ZXJ5LkNvbG9yLm5hbWVzXG5cdGNvbG9ycyxcblxuXHQvLyBsb2NhbCBhbGlhc2VzIG9mIGZ1bmN0aW9ucyBjYWxsZWQgb2Z0ZW5cblx0ZWFjaCA9IGpRdWVyeS5lYWNoO1xuXG4vLyBkZXRlcm1pbmUgcmdiYSBzdXBwb3J0IGltbWVkaWF0ZWx5XG5zdXBwb3J0RWxlbS5zdHlsZS5jc3NUZXh0ID0gXCJiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMSwxLDEsLjUpXCI7XG5zdXBwb3J0LnJnYmEgPSBzdXBwb3J0RWxlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IuaW5kZXhPZiggXCJyZ2JhXCIgKSA+IC0xO1xuXG4vLyBkZWZpbmUgY2FjaGUgbmFtZSBhbmQgYWxwaGEgcHJvcGVydGllc1xuLy8gZm9yIHJnYmEgYW5kIGhzbGEgc3BhY2VzXG5lYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHRzcGFjZS5jYWNoZSA9IFwiX1wiICsgc3BhY2VOYW1lO1xuXHRzcGFjZS5wcm9wcy5hbHBoYSA9IHtcblx0XHRpZHg6IDMsXG5cdFx0dHlwZTogXCJwZXJjZW50XCIsXG5cdFx0ZGVmOiAxXG5cdH07XG59KTtcblxuZnVuY3Rpb24gY2xhbXAoIHZhbHVlLCBwcm9wLCBhbGxvd0VtcHR5ICkge1xuXHR2YXIgdHlwZSA9IHByb3BUeXBlc1sgcHJvcC50eXBlIF0gfHwge307XG5cblx0aWYgKCB2YWx1ZSA9PSBudWxsICkge1xuXHRcdHJldHVybiAoYWxsb3dFbXB0eSB8fCAhcHJvcC5kZWYpID8gbnVsbCA6IHByb3AuZGVmO1xuXHR9XG5cblx0Ly8gfn4gaXMgYW4gc2hvcnQgd2F5IG9mIGRvaW5nIGZsb29yIGZvciBwb3NpdGl2ZSBudW1iZXJzXG5cdHZhbHVlID0gdHlwZS5mbG9vciA/IH5+dmFsdWUgOiBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG5cdC8vIElFIHdpbGwgcGFzcyBpbiBlbXB0eSBzdHJpbmdzIGFzIHZhbHVlIGZvciBhbHBoYSxcblx0Ly8gd2hpY2ggd2lsbCBoaXQgdGhpcyBjYXNlXG5cdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHByb3AuZGVmO1xuXHR9XG5cblx0aWYgKCB0eXBlLm1vZCApIHtcblx0XHQvLyB3ZSBhZGQgbW9kIGJlZm9yZSBtb2RkaW5nIHRvIG1ha2Ugc3VyZSB0aGF0IG5lZ2F0aXZlcyB2YWx1ZXNcblx0XHQvLyBnZXQgY29udmVydGVkIHByb3Blcmx5OiAtMTAgLT4gMzUwXG5cdFx0cmV0dXJuICh2YWx1ZSArIHR5cGUubW9kKSAlIHR5cGUubW9kO1xuXHR9XG5cblx0Ly8gZm9yIG5vdyBhbGwgcHJvcGVydHkgdHlwZXMgd2l0aG91dCBtb2QgaGF2ZSBtaW4gYW5kIG1heFxuXHRyZXR1cm4gMCA+IHZhbHVlID8gMCA6IHR5cGUubWF4IDwgdmFsdWUgPyB0eXBlLm1heCA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdQYXJzZSggc3RyaW5nICkge1xuXHR2YXIgaW5zdCA9IGNvbG9yKCksXG5cdFx0cmdiYSA9IGluc3QuX3JnYmEgPSBbXTtcblxuXHRzdHJpbmcgPSBzdHJpbmcudG9Mb3dlckNhc2UoKTtcblxuXHRlYWNoKCBzdHJpbmdQYXJzZXJzLCBmdW5jdGlvbiggaSwgcGFyc2VyICkge1xuXHRcdHZhciBwYXJzZWQsXG5cdFx0XHRtYXRjaCA9IHBhcnNlci5yZS5leGVjKCBzdHJpbmcgKSxcblx0XHRcdHZhbHVlcyA9IG1hdGNoICYmIHBhcnNlci5wYXJzZSggbWF0Y2ggKSxcblx0XHRcdHNwYWNlTmFtZSA9IHBhcnNlci5zcGFjZSB8fCBcInJnYmFcIjtcblxuXHRcdGlmICggdmFsdWVzICkge1xuXHRcdFx0cGFyc2VkID0gaW5zdFsgc3BhY2VOYW1lIF0oIHZhbHVlcyApO1xuXG5cdFx0XHQvLyBpZiB0aGlzIHdhcyBhbiByZ2JhIHBhcnNlIHRoZSBhc3NpZ25tZW50IG1pZ2h0IGhhcHBlbiB0d2ljZVxuXHRcdFx0Ly8gb2ggd2VsbC4uLi5cblx0XHRcdGluc3RbIHNwYWNlc1sgc3BhY2VOYW1lIF0uY2FjaGUgXSA9IHBhcnNlZFsgc3BhY2VzWyBzcGFjZU5hbWUgXS5jYWNoZSBdO1xuXHRcdFx0cmdiYSA9IGluc3QuX3JnYmEgPSBwYXJzZWQuX3JnYmE7XG5cblx0XHRcdC8vIGV4aXQgZWFjaCggc3RyaW5nUGFyc2VycyApIGhlcmUgYmVjYXVzZSB3ZSBtYXRjaGVkXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBGb3VuZCBhIHN0cmluZ1BhcnNlciB0aGF0IGhhbmRsZWQgaXRcblx0aWYgKCByZ2JhLmxlbmd0aCApIHtcblxuXHRcdC8vIGlmIHRoaXMgY2FtZSBmcm9tIGEgcGFyc2VkIHN0cmluZywgZm9yY2UgXCJ0cmFuc3BhcmVudFwiIHdoZW4gYWxwaGEgaXMgMFxuXHRcdC8vIGNocm9tZSwgKGFuZCBtYXliZSBvdGhlcnMpIHJldHVybiBcInRyYW5zcGFyZW50XCIgYXMgcmdiYSgwLDAsMCwwKVxuXHRcdGlmICggcmdiYS5qb2luKCkgPT09IFwiMCwwLDAsMFwiICkge1xuXHRcdFx0alF1ZXJ5LmV4dGVuZCggcmdiYSwgY29sb3JzLnRyYW5zcGFyZW50ICk7XG5cdFx0fVxuXHRcdHJldHVybiBpbnN0O1xuXHR9XG5cblx0Ly8gbmFtZWQgY29sb3JzXG5cdHJldHVybiBjb2xvcnNbIHN0cmluZyBdO1xufVxuXG5jb2xvci5mbiA9IGpRdWVyeS5leHRlbmQoIGNvbG9yLnByb3RvdHlwZSwge1xuXHRwYXJzZTogZnVuY3Rpb24oIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhICkge1xuXHRcdGlmICggcmVkID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLl9yZ2JhID0gWyBudWxsLCBudWxsLCBudWxsLCBudWxsIF07XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCByZWQuanF1ZXJ5IHx8IHJlZC5ub2RlVHlwZSApIHtcblx0XHRcdHJlZCA9IGpRdWVyeSggcmVkICkuY3NzKCBncmVlbiApO1xuXHRcdFx0Z3JlZW4gPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0dmFyIGluc3QgPSB0aGlzLFxuXHRcdFx0dHlwZSA9IGpRdWVyeS50eXBlKCByZWQgKSxcblx0XHRcdHJnYmEgPSB0aGlzLl9yZ2JhID0gW107XG5cblx0XHQvLyBtb3JlIHRoYW4gMSBhcmd1bWVudCBzcGVjaWZpZWQgLSBhc3N1bWUgKCByZWQsIGdyZWVuLCBibHVlLCBhbHBoYSApXG5cdFx0aWYgKCBncmVlbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmVkID0gWyByZWQsIGdyZWVuLCBibHVlLCBhbHBoYSBdO1xuXHRcdFx0dHlwZSA9IFwiYXJyYXlcIjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZSggc3RyaW5nUGFyc2UoIHJlZCApIHx8IGNvbG9ycy5fZGVmYXVsdCApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gXCJhcnJheVwiICkge1xuXHRcdFx0ZWFjaCggc3BhY2VzLnJnYmEucHJvcHMsIGZ1bmN0aW9uKCBrZXksIHByb3AgKSB7XG5cdFx0XHRcdHJnYmFbIHByb3AuaWR4IF0gPSBjbGFtcCggcmVkWyBwcm9wLmlkeCBdLCBwcm9wICk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdGlmICggcmVkIGluc3RhbmNlb2YgY29sb3IgKSB7XG5cdFx0XHRcdGVhY2goIHNwYWNlcywgZnVuY3Rpb24oIHNwYWNlTmFtZSwgc3BhY2UgKSB7XG5cdFx0XHRcdFx0aWYgKCByZWRbIHNwYWNlLmNhY2hlIF0gKSB7XG5cdFx0XHRcdFx0XHRpbnN0WyBzcGFjZS5jYWNoZSBdID0gcmVkWyBzcGFjZS5jYWNoZSBdLnNsaWNlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVhY2goIHNwYWNlcywgZnVuY3Rpb24oIHNwYWNlTmFtZSwgc3BhY2UgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlID0gc3BhY2UuY2FjaGU7XG5cdFx0XHRcdFx0ZWFjaCggc3BhY2UucHJvcHMsIGZ1bmN0aW9uKCBrZXksIHByb3AgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGlmIHRoZSBjYWNoZSBkb2Vzbid0IGV4aXN0LCBhbmQgd2Uga25vdyBob3cgdG8gY29udmVydFxuXHRcdFx0XHRcdFx0aWYgKCAhaW5zdFsgY2FjaGUgXSAmJiBzcGFjZS50byApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpZiB0aGUgdmFsdWUgd2FzIG51bGwsIHdlIGRvbid0IG5lZWQgdG8gY29weSBpdFxuXHRcdFx0XHRcdFx0XHQvLyBpZiB0aGUga2V5IHdhcyBhbHBoYSwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0IGVpdGhlclxuXHRcdFx0XHRcdFx0XHRpZiAoIGtleSA9PT0gXCJhbHBoYVwiIHx8IHJlZFsga2V5IF0gPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aW5zdFsgY2FjaGUgXSA9IHNwYWNlLnRvKCBpbnN0Ll9yZ2JhICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHRoaXMgaXMgdGhlIG9ubHkgY2FzZSB3aGVyZSB3ZSBhbGxvdyBudWxscyBmb3IgQUxMIHByb3BlcnRpZXMuXG5cdFx0XHRcdFx0XHQvLyBjYWxsIGNsYW1wIHdpdGggYWx3YXlzQWxsb3dFbXB0eVxuXHRcdFx0XHRcdFx0aW5zdFsgY2FjaGUgXVsgcHJvcC5pZHggXSA9IGNsYW1wKCByZWRbIGtleSBdLCBwcm9wLCB0cnVlICk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBldmVyeXRoaW5nIGRlZmluZWQgYnV0IGFscGhhP1xuXHRcdFx0XHRcdGlmICggaW5zdFsgY2FjaGUgXSAmJiBqUXVlcnkuaW5BcnJheSggbnVsbCwgaW5zdFsgY2FjaGUgXS5zbGljZSggMCwgMyApICkgPCAwICkge1xuXHRcdFx0XHRcdFx0Ly8gdXNlIHRoZSBkZWZhdWx0IG9mIDFcblx0XHRcdFx0XHRcdGluc3RbIGNhY2hlIF1bIDMgXSA9IDE7XG5cdFx0XHRcdFx0XHRpZiAoIHNwYWNlLmZyb20gKSB7XG5cdFx0XHRcdFx0XHRcdGluc3QuX3JnYmEgPSBzcGFjZS5mcm9tKCBpbnN0WyBjYWNoZSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBjb21wYXJlICkge1xuXHRcdHZhciBpcyA9IGNvbG9yKCBjb21wYXJlICksXG5cdFx0XHRzYW1lID0gdHJ1ZSxcblx0XHRcdGluc3QgPSB0aGlzO1xuXG5cdFx0ZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggXywgc3BhY2UgKSB7XG5cdFx0XHR2YXIgbG9jYWxDYWNoZSxcblx0XHRcdFx0aXNDYWNoZSA9IGlzWyBzcGFjZS5jYWNoZSBdO1xuXHRcdFx0aWYgKGlzQ2FjaGUpIHtcblx0XHRcdFx0bG9jYWxDYWNoZSA9IGluc3RbIHNwYWNlLmNhY2hlIF0gfHwgc3BhY2UudG8gJiYgc3BhY2UudG8oIGluc3QuX3JnYmEgKSB8fCBbXTtcblx0XHRcdFx0ZWFjaCggc3BhY2UucHJvcHMsIGZ1bmN0aW9uKCBfLCBwcm9wICkge1xuXHRcdFx0XHRcdGlmICggaXNDYWNoZVsgcHJvcC5pZHggXSAhPSBudWxsICkge1xuXHRcdFx0XHRcdFx0c2FtZSA9ICggaXNDYWNoZVsgcHJvcC5pZHggXSA9PT0gbG9jYWxDYWNoZVsgcHJvcC5pZHggXSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHNhbWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzYW1lO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzYW1lO1xuXHR9LFxuXHRfc3BhY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB1c2VkID0gW10sXG5cdFx0XHRpbnN0ID0gdGhpcztcblx0XHRlYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHRcdFx0aWYgKCBpbnN0WyBzcGFjZS5jYWNoZSBdICkge1xuXHRcdFx0XHR1c2VkLnB1c2goIHNwYWNlTmFtZSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiB1c2VkLnBvcCgpO1xuXHR9LFxuXHR0cmFuc2l0aW9uOiBmdW5jdGlvbiggb3RoZXIsIGRpc3RhbmNlICkge1xuXHRcdHZhciBlbmQgPSBjb2xvciggb3RoZXIgKSxcblx0XHRcdHNwYWNlTmFtZSA9IGVuZC5fc3BhY2UoKSxcblx0XHRcdHNwYWNlID0gc3BhY2VzWyBzcGFjZU5hbWUgXSxcblx0XHRcdHN0YXJ0Q29sb3IgPSB0aGlzLmFscGhhKCkgPT09IDAgPyBjb2xvciggXCJ0cmFuc3BhcmVudFwiICkgOiB0aGlzLFxuXHRcdFx0c3RhcnQgPSBzdGFydENvbG9yWyBzcGFjZS5jYWNoZSBdIHx8IHNwYWNlLnRvKCBzdGFydENvbG9yLl9yZ2JhICksXG5cdFx0XHRyZXN1bHQgPSBzdGFydC5zbGljZSgpO1xuXG5cdFx0ZW5kID0gZW5kWyBzcGFjZS5jYWNoZSBdO1xuXHRcdGVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkge1xuXHRcdFx0dmFyIGluZGV4ID0gcHJvcC5pZHgsXG5cdFx0XHRcdHN0YXJ0VmFsdWUgPSBzdGFydFsgaW5kZXggXSxcblx0XHRcdFx0ZW5kVmFsdWUgPSBlbmRbIGluZGV4IF0sXG5cdFx0XHRcdHR5cGUgPSBwcm9wVHlwZXNbIHByb3AudHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBpZiBudWxsLCBkb24ndCBvdmVycmlkZSBzdGFydCB2YWx1ZVxuXHRcdFx0aWYgKCBlbmRWYWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gaWYgbnVsbCAtIHVzZSBlbmRcblx0XHRcdGlmICggc3RhcnRWYWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0cmVzdWx0WyBpbmRleCBdID0gZW5kVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIHR5cGUubW9kICkge1xuXHRcdFx0XHRcdGlmICggZW5kVmFsdWUgLSBzdGFydFZhbHVlID4gdHlwZS5tb2QgLyAyICkge1xuXHRcdFx0XHRcdFx0c3RhcnRWYWx1ZSArPSB0eXBlLm1vZDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzdGFydFZhbHVlIC0gZW5kVmFsdWUgPiB0eXBlLm1vZCAvIDIgKSB7XG5cdFx0XHRcdFx0XHRzdGFydFZhbHVlIC09IHR5cGUubW9kO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXN1bHRbIGluZGV4IF0gPSBjbGFtcCggKCBlbmRWYWx1ZSAtIHN0YXJ0VmFsdWUgKSAqIGRpc3RhbmNlICsgc3RhcnRWYWx1ZSwgcHJvcCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzWyBzcGFjZU5hbWUgXSggcmVzdWx0ICk7XG5cdH0sXG5cdGJsZW5kOiBmdW5jdGlvbiggb3BhcXVlICkge1xuXHRcdC8vIGlmIHdlIGFyZSBhbHJlYWR5IG9wYXF1ZSAtIHJldHVybiBvdXJzZWxmXG5cdFx0aWYgKCB0aGlzLl9yZ2JhWyAzIF0gPT09IDEgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHR2YXIgcmdiID0gdGhpcy5fcmdiYS5zbGljZSgpLFxuXHRcdFx0YSA9IHJnYi5wb3AoKSxcblx0XHRcdGJsZW5kID0gY29sb3IoIG9wYXF1ZSApLl9yZ2JhO1xuXG5cdFx0cmV0dXJuIGNvbG9yKCBqUXVlcnkubWFwKCByZ2IsIGZ1bmN0aW9uKCB2LCBpICkge1xuXHRcdFx0cmV0dXJuICggMSAtIGEgKSAqIGJsZW5kWyBpIF0gKyBhICogdjtcblx0XHR9KSk7XG5cdH0sXG5cdHRvUmdiYVN0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByZWZpeCA9IFwicmdiYShcIixcblx0XHRcdHJnYmEgPSBqUXVlcnkubWFwKCB0aGlzLl9yZ2JhLCBmdW5jdGlvbiggdiwgaSApIHtcblx0XHRcdFx0cmV0dXJuIHYgPT0gbnVsbCA/ICggaSA+IDIgPyAxIDogMCApIDogdjtcblx0XHRcdH0pO1xuXG5cdFx0aWYgKCByZ2JhWyAzIF0gPT09IDEgKSB7XG5cdFx0XHRyZ2JhLnBvcCgpO1xuXHRcdFx0cHJlZml4ID0gXCJyZ2IoXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByZWZpeCArIHJnYmEuam9pbigpICsgXCIpXCI7XG5cdH0sXG5cdHRvSHNsYVN0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByZWZpeCA9IFwiaHNsYShcIixcblx0XHRcdGhzbGEgPSBqUXVlcnkubWFwKCB0aGlzLmhzbGEoKSwgZnVuY3Rpb24oIHYsIGkgKSB7XG5cdFx0XHRcdGlmICggdiA9PSBudWxsICkge1xuXHRcdFx0XHRcdHYgPSBpID4gMiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY2F0Y2ggMSBhbmQgMlxuXHRcdFx0XHRpZiAoIGkgJiYgaSA8IDMgKSB7XG5cdFx0XHRcdFx0diA9IE1hdGgucm91bmQoIHYgKiAxMDAgKSArIFwiJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2O1xuXHRcdFx0fSk7XG5cblx0XHRpZiAoIGhzbGFbIDMgXSA9PT0gMSApIHtcblx0XHRcdGhzbGEucG9wKCk7XG5cdFx0XHRwcmVmaXggPSBcImhzbChcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHByZWZpeCArIGhzbGEuam9pbigpICsgXCIpXCI7XG5cdH0sXG5cdHRvSGV4U3RyaW5nOiBmdW5jdGlvbiggaW5jbHVkZUFscGhhICkge1xuXHRcdHZhciByZ2JhID0gdGhpcy5fcmdiYS5zbGljZSgpLFxuXHRcdFx0YWxwaGEgPSByZ2JhLnBvcCgpO1xuXG5cdFx0aWYgKCBpbmNsdWRlQWxwaGEgKSB7XG5cdFx0XHRyZ2JhLnB1c2goIH5+KCBhbHBoYSAqIDI1NSApICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFwiI1wiICsgalF1ZXJ5Lm1hcCggcmdiYSwgZnVuY3Rpb24oIHYgKSB7XG5cblx0XHRcdC8vIGRlZmF1bHQgdG8gMCB3aGVuIG51bGxzIGV4aXN0XG5cdFx0XHR2ID0gKCB2IHx8IDAgKS50b1N0cmluZyggMTYgKTtcblx0XHRcdHJldHVybiB2Lmxlbmd0aCA9PT0gMSA/IFwiMFwiICsgdiA6IHY7XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fSxcblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9yZ2JhWyAzIF0gPT09IDAgPyBcInRyYW5zcGFyZW50XCIgOiB0aGlzLnRvUmdiYVN0cmluZygpO1xuXHR9XG59KTtcbmNvbG9yLmZuLnBhcnNlLnByb3RvdHlwZSA9IGNvbG9yLmZuO1xuXG4vLyBoc2xhIGNvbnZlcnNpb25zIGFkYXB0ZWQgZnJvbTpcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvbWFhc2hhYWNrL3NvdXJjZS9icm93c2UvcGFja2FnZXMvZ3JhcGhpY3MvdHJ1bmsvc3JjL2dyYXBoaWNzL2NvbG9ycy9IVUUyUkdCLmFzP3I9NTAyMVxuXG5mdW5jdGlvbiBodWUycmdiKCBwLCBxLCBoICkge1xuXHRoID0gKCBoICsgMSApICUgMTtcblx0aWYgKCBoICogNiA8IDEgKSB7XG5cdFx0cmV0dXJuIHAgKyAocSAtIHApICogaCAqIDY7XG5cdH1cblx0aWYgKCBoICogMiA8IDEpIHtcblx0XHRyZXR1cm4gcTtcblx0fVxuXHRpZiAoIGggKiAzIDwgMiApIHtcblx0XHRyZXR1cm4gcCArIChxIC0gcCkgKiAoKDIvMykgLSBoKSAqIDY7XG5cdH1cblx0cmV0dXJuIHA7XG59XG5cbnNwYWNlcy5oc2xhLnRvID0gZnVuY3Rpb24gKCByZ2JhICkge1xuXHRpZiAoIHJnYmFbIDAgXSA9PSBudWxsIHx8IHJnYmFbIDEgXSA9PSBudWxsIHx8IHJnYmFbIDIgXSA9PSBudWxsICkge1xuXHRcdHJldHVybiBbIG51bGwsIG51bGwsIG51bGwsIHJnYmFbIDMgXSBdO1xuXHR9XG5cdHZhciByID0gcmdiYVsgMCBdIC8gMjU1LFxuXHRcdGcgPSByZ2JhWyAxIF0gLyAyNTUsXG5cdFx0YiA9IHJnYmFbIDIgXSAvIDI1NSxcblx0XHRhID0gcmdiYVsgMyBdLFxuXHRcdG1heCA9IE1hdGgubWF4KCByLCBnLCBiICksXG5cdFx0bWluID0gTWF0aC5taW4oIHIsIGcsIGIgKSxcblx0XHRkaWZmID0gbWF4IC0gbWluLFxuXHRcdGFkZCA9IG1heCArIG1pbixcblx0XHRsID0gYWRkICogMC41LFxuXHRcdGgsIHM7XG5cblx0aWYgKCBtaW4gPT09IG1heCApIHtcblx0XHRoID0gMDtcblx0fSBlbHNlIGlmICggciA9PT0gbWF4ICkge1xuXHRcdGggPSAoIDYwICogKCBnIC0gYiApIC8gZGlmZiApICsgMzYwO1xuXHR9IGVsc2UgaWYgKCBnID09PSBtYXggKSB7XG5cdFx0aCA9ICggNjAgKiAoIGIgLSByICkgLyBkaWZmICkgKyAxMjA7XG5cdH0gZWxzZSB7XG5cdFx0aCA9ICggNjAgKiAoIHIgLSBnICkgLyBkaWZmICkgKyAyNDA7XG5cdH1cblxuXHQvLyBjaHJvbWEgKGRpZmYpID09IDAgbWVhbnMgZ3JleXNjYWxlIHdoaWNoLCBieSBkZWZpbml0aW9uLCBzYXR1cmF0aW9uID0gMCVcblx0Ly8gb3RoZXJ3aXNlLCBzYXR1cmF0aW9uIGlzIGJhc2VkIG9uIHRoZSByYXRpbyBvZiBjaHJvbWEgKGRpZmYpIHRvIGxpZ2h0bmVzcyAoYWRkKVxuXHRpZiAoIGRpZmYgPT09IDAgKSB7XG5cdFx0cyA9IDA7XG5cdH0gZWxzZSBpZiAoIGwgPD0gMC41ICkge1xuXHRcdHMgPSBkaWZmIC8gYWRkO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkaWZmIC8gKCAyIC0gYWRkICk7XG5cdH1cblx0cmV0dXJuIFsgTWF0aC5yb3VuZChoKSAlIDM2MCwgcywgbCwgYSA9PSBudWxsID8gMSA6IGEgXTtcbn07XG5cbnNwYWNlcy5oc2xhLmZyb20gPSBmdW5jdGlvbiAoIGhzbGEgKSB7XG5cdGlmICggaHNsYVsgMCBdID09IG51bGwgfHwgaHNsYVsgMSBdID09IG51bGwgfHwgaHNsYVsgMiBdID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgaHNsYVsgMyBdIF07XG5cdH1cblx0dmFyIGggPSBoc2xhWyAwIF0gLyAzNjAsXG5cdFx0cyA9IGhzbGFbIDEgXSxcblx0XHRsID0gaHNsYVsgMiBdLFxuXHRcdGEgPSBoc2xhWyAzIF0sXG5cdFx0cSA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gbCAqIHMsXG5cdFx0cCA9IDIgKiBsIC0gcTtcblxuXHRyZXR1cm4gW1xuXHRcdE1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggKyAoIDEgLyAzICkgKSAqIDI1NSApLFxuXHRcdE1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggKSAqIDI1NSApLFxuXHRcdE1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggLSAoIDEgLyAzICkgKSAqIDI1NSApLFxuXHRcdGFcblx0XTtcbn07XG5cblxuZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHtcblx0dmFyIHByb3BzID0gc3BhY2UucHJvcHMsXG5cdFx0Y2FjaGUgPSBzcGFjZS5jYWNoZSxcblx0XHR0byA9IHNwYWNlLnRvLFxuXHRcdGZyb20gPSBzcGFjZS5mcm9tO1xuXG5cdC8vIG1ha2VzIHJnYmEoKSBhbmQgaHNsYSgpXG5cdGNvbG9yLmZuWyBzcGFjZU5hbWUgXSA9IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblxuXHRcdC8vIGdlbmVyYXRlIGEgY2FjaGUgZm9yIHRoaXMgc3BhY2UgaWYgaXQgZG9lc24ndCBleGlzdFxuXHRcdGlmICggdG8gJiYgIXRoaXNbIGNhY2hlIF0gKSB7XG5cdFx0XHR0aGlzWyBjYWNoZSBdID0gdG8oIHRoaXMuX3JnYmEgKTtcblx0XHR9XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRoaXNbIGNhY2hlIF0uc2xpY2UoKTtcblx0XHR9XG5cblx0XHR2YXIgcmV0LFxuXHRcdFx0dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApLFxuXHRcdFx0YXJyID0gKCB0eXBlID09PSBcImFycmF5XCIgfHwgdHlwZSA9PT0gXCJvYmplY3RcIiApID8gdmFsdWUgOiBhcmd1bWVudHMsXG5cdFx0XHRsb2NhbCA9IHRoaXNbIGNhY2hlIF0uc2xpY2UoKTtcblxuXHRcdGVhY2goIHByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkge1xuXHRcdFx0dmFyIHZhbCA9IGFyclsgdHlwZSA9PT0gXCJvYmplY3RcIiA/IGtleSA6IHByb3AuaWR4IF07XG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBsb2NhbFsgcHJvcC5pZHggXTtcblx0XHRcdH1cblx0XHRcdGxvY2FsWyBwcm9wLmlkeCBdID0gY2xhbXAoIHZhbCwgcHJvcCApO1xuXHRcdH0pO1xuXG5cdFx0aWYgKCBmcm9tICkge1xuXHRcdFx0cmV0ID0gY29sb3IoIGZyb20oIGxvY2FsICkgKTtcblx0XHRcdHJldFsgY2FjaGUgXSA9IGxvY2FsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGNvbG9yKCBsb2NhbCApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBtYWtlcyByZWQoKSBncmVlbigpIGJsdWUoKSBhbHBoYSgpIGh1ZSgpIHNhdHVyYXRpb24oKSBsaWdodG5lc3MoKVxuXHRlYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHtcblx0XHQvLyBhbHBoYSBpcyBpbmNsdWRlZCBpbiBtb3JlIHRoYW4gb25lIHNwYWNlXG5cdFx0aWYgKCBjb2xvci5mblsga2V5IF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbG9yLmZuWyBrZXkgXSA9IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciB2dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApLFxuXHRcdFx0XHRmbiA9ICgga2V5ID09PSBcImFscGhhXCIgPyAoIHRoaXMuX2hzbGEgPyBcImhzbGFcIiA6IFwicmdiYVwiICkgOiBzcGFjZU5hbWUgKSxcblx0XHRcdFx0bG9jYWwgPSB0aGlzWyBmbiBdKCksXG5cdFx0XHRcdGN1ciA9IGxvY2FsWyBwcm9wLmlkeCBdLFxuXHRcdFx0XHRtYXRjaDtcblxuXHRcdFx0aWYgKCB2dHlwZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGN1cjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2dHlwZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLmNhbGwoIHRoaXMsIGN1ciApO1xuXHRcdFx0XHR2dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsICYmIHByb3AuZW1wdHkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2dHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0bWF0Y2ggPSBycGx1c2VxdWFscy5leGVjKCB2YWx1ZSApO1xuXHRcdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY3VyICsgcGFyc2VGbG9hdCggbWF0Y2hbIDIgXSApICogKCBtYXRjaFsgMSBdID09PSBcIitcIiA/IDEgOiAtMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsb2NhbFsgcHJvcC5pZHggXSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXNbIGZuIF0oIGxvY2FsICk7XG5cdFx0fTtcblx0fSk7XG59KTtcblxuLy8gYWRkIGNzc0hvb2sgYW5kIC5meC5zdGVwIGZ1bmN0aW9uIGZvciBlYWNoIG5hbWVkIGhvb2suXG4vLyBhY2NlcHQgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIHByb3BlcnRpZXNcbmNvbG9yLmhvb2sgPSBmdW5jdGlvbiggaG9vayApIHtcblx0dmFyIGhvb2tzID0gaG9vay5zcGxpdCggXCIgXCIgKTtcblx0ZWFjaCggaG9va3MsIGZ1bmN0aW9uKCBpLCBob29rICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgaG9vayBdID0ge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBwYXJzZWQsIGN1ckVsZW0sXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0gXCJcIjtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSBcInRyYW5zcGFyZW50XCIgJiYgKCBqUXVlcnkudHlwZSggdmFsdWUgKSAhPT0gXCJzdHJpbmdcIiB8fCAoIHBhcnNlZCA9IHN0cmluZ1BhcnNlKCB2YWx1ZSApICkgKSApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbG9yKCBwYXJzZWQgfHwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LnJnYmEgJiYgdmFsdWUuX3JnYmFbIDMgXSAhPT0gMSApIHtcblx0XHRcdFx0XHRcdGN1ckVsZW0gPSBob29rID09PSBcImJhY2tncm91bmRDb2xvclwiID8gZWxlbS5wYXJlbnROb2RlIDogZWxlbTtcblx0XHRcdFx0XHRcdHdoaWxlIChcblx0XHRcdFx0XHRcdFx0KGJhY2tncm91bmRDb2xvciA9PT0gXCJcIiB8fCBiYWNrZ3JvdW5kQ29sb3IgPT09IFwidHJhbnNwYXJlbnRcIikgJiZcblx0XHRcdFx0XHRcdFx0Y3VyRWxlbSAmJiBjdXJFbGVtLnN0eWxlXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBqUXVlcnkuY3NzKCBjdXJFbGVtLCBcImJhY2tncm91bmRDb2xvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyRWxlbSA9IGN1ckVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5ibGVuZCggYmFja2dyb3VuZENvbG9yICYmIGJhY2tncm91bmRDb2xvciAhPT0gXCJ0cmFuc3BhcmVudFwiID9cblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yIDpcblx0XHRcdFx0XHRcdFx0XCJfZGVmYXVsdFwiICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS50b1JnYmFTdHJpbmcoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGVbIGhvb2sgXSA9IHZhbHVlO1xuXHRcdFx0XHR9IGNhdGNoKCBlICkge1xuXHRcdFx0XHRcdC8vIHdyYXBwZWQgdG8gcHJldmVudCBJRSBmcm9tIHRocm93aW5nIGVycm9ycyBvbiBcImludmFsaWRcIiB2YWx1ZXMgbGlrZSAnYXV0bycgb3IgJ2luaGVyaXQnXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdGpRdWVyeS5meC5zdGVwWyBob29rIF0gPSBmdW5jdGlvbiggZnggKSB7XG5cdFx0XHRpZiAoICFmeC5jb2xvckluaXQgKSB7XG5cdFx0XHRcdGZ4LnN0YXJ0ID0gY29sb3IoIGZ4LmVsZW0sIGhvb2sgKTtcblx0XHRcdFx0ZnguZW5kID0gY29sb3IoIGZ4LmVuZCApO1xuXHRcdFx0XHRmeC5jb2xvckluaXQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyBob29rIF0uc2V0KCBmeC5lbGVtLCBmeC5zdGFydC50cmFuc2l0aW9uKCBmeC5lbmQsIGZ4LnBvcyApICk7XG5cdFx0fTtcblx0fSk7XG5cbn07XG5cbmNvbG9yLmhvb2soIHN0ZXBIb29rcyApO1xuXG5qUXVlcnkuY3NzSG9va3MuYm9yZGVyQ29sb3IgPSB7XG5cdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBleHBhbmRlZCA9IHt9O1xuXG5cdFx0ZWFjaCggWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwYXJ0ICkge1xuXHRcdFx0ZXhwYW5kZWRbIFwiYm9yZGVyXCIgKyBwYXJ0ICsgXCJDb2xvclwiIF0gPSB2YWx1ZTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdH1cbn07XG5cbi8vIEJhc2ljIGNvbG9yIG5hbWVzIG9ubHkuXG4vLyBVc2FnZSBvZiBhbnkgb2YgdGhlIG90aGVyIGNvbG9yIG5hbWVzIHJlcXVpcmVzIGFkZGluZyB5b3Vyc2VsZiBvciBpbmNsdWRpbmdcbi8vIGpxdWVyeS5jb2xvci5zdmctbmFtZXMuanMuXG5jb2xvcnMgPSBqUXVlcnkuQ29sb3IubmFtZXMgPSB7XG5cdC8vIDQuMS4gQmFzaWMgY29sb3Iga2V5d29yZHNcblx0YXF1YTogXCIjMDBmZmZmXCIsXG5cdGJsYWNrOiBcIiMwMDAwMDBcIixcblx0Ymx1ZTogXCIjMDAwMGZmXCIsXG5cdGZ1Y2hzaWE6IFwiI2ZmMDBmZlwiLFxuXHRncmF5OiBcIiM4MDgwODBcIixcblx0Z3JlZW46IFwiIzAwODAwMFwiLFxuXHRsaW1lOiBcIiMwMGZmMDBcIixcblx0bWFyb29uOiBcIiM4MDAwMDBcIixcblx0bmF2eTogXCIjMDAwMDgwXCIsXG5cdG9saXZlOiBcIiM4MDgwMDBcIixcblx0cHVycGxlOiBcIiM4MDAwODBcIixcblx0cmVkOiBcIiNmZjAwMDBcIixcblx0c2lsdmVyOiBcIiNjMGMwYzBcIixcblx0dGVhbDogXCIjMDA4MDgwXCIsXG5cdHdoaXRlOiBcIiNmZmZmZmZcIixcblx0eWVsbG93OiBcIiNmZmZmMDBcIixcblxuXHQvLyA0LjIuMy4gXCJ0cmFuc3BhcmVudFwiIGNvbG9yIGtleXdvcmRcblx0dHJhbnNwYXJlbnQ6IFsgbnVsbCwgbnVsbCwgbnVsbCwgMCBdLFxuXG5cdF9kZWZhdWx0OiBcIiNmZmZmZmZcIlxufTtcblxufSkoIGpRdWVyeSApO1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIENMQVNTIEFOSU1BVElPTlMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbihmdW5jdGlvbigpIHtcblxudmFyIGNsYXNzQW5pbWF0aW9uQWN0aW9ucyA9IFsgXCJhZGRcIiwgXCJyZW1vdmVcIiwgXCJ0b2dnbGVcIiBdLFxuXHRzaG9ydGhhbmRTdHlsZXMgPSB7XG5cdFx0Ym9yZGVyOiAxLFxuXHRcdGJvcmRlckJvdHRvbTogMSxcblx0XHRib3JkZXJDb2xvcjogMSxcblx0XHRib3JkZXJMZWZ0OiAxLFxuXHRcdGJvcmRlclJpZ2h0OiAxLFxuXHRcdGJvcmRlclRvcDogMSxcblx0XHRib3JkZXJXaWR0aDogMSxcblx0XHRtYXJnaW46IDEsXG5cdFx0cGFkZGluZzogMVxuXHR9O1xuXG4kLmVhY2goWyBcImJvcmRlckxlZnRTdHlsZVwiLCBcImJvcmRlclJpZ2h0U3R5bGVcIiwgXCJib3JkZXJCb3R0b21TdHlsZVwiLCBcImJvcmRlclRvcFN0eWxlXCIgXSwgZnVuY3Rpb24oIF8sIHByb3AgKSB7XG5cdCQuZnguc3RlcFsgcHJvcCBdID0gZnVuY3Rpb24oIGZ4ICkge1xuXHRcdGlmICggZnguZW5kICE9PSBcIm5vbmVcIiAmJiAhZnguc2V0QXR0ciB8fCBmeC5wb3MgPT09IDEgJiYgIWZ4LnNldEF0dHIgKSB7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGZ4LmVsZW0sIHByb3AsIGZ4LmVuZCApO1xuXHRcdFx0Znguc2V0QXR0ciA9IHRydWU7XG5cdFx0fVxuXHR9O1xufSk7XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRTdHlsZXMoIGVsZW0gKSB7XG5cdHZhciBrZXksIGxlbixcblx0XHRzdHlsZSA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA/XG5cdFx0XHRlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApIDpcblx0XHRcdGVsZW0uY3VycmVudFN0eWxlLFxuXHRcdHN0eWxlcyA9IHt9O1xuXG5cdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoICYmIHN0eWxlWyAwIF0gJiYgc3R5bGVbIHN0eWxlWyAwIF0gXSApIHtcblx0XHRsZW4gPSBzdHlsZS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBsZW4tLSApIHtcblx0XHRcdGtleSA9IHN0eWxlWyBsZW4gXTtcblx0XHRcdGlmICggdHlwZW9mIHN0eWxlWyBrZXkgXSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0c3R5bGVzWyAkLmNhbWVsQ2FzZSgga2V5ICkgXSA9IHN0eWxlWyBrZXkgXTtcblx0XHRcdH1cblx0XHR9XG5cdC8vIHN1cHBvcnQ6IE9wZXJhLCBJRSA8OVxuXHR9IGVsc2Uge1xuXHRcdGZvciAoIGtleSBpbiBzdHlsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHN0eWxlWyBrZXkgXSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0c3R5bGVzWyBrZXkgXSA9IHN0eWxlWyBrZXkgXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5cbmZ1bmN0aW9uIHN0eWxlRGlmZmVyZW5jZSggb2xkU3R5bGUsIG5ld1N0eWxlICkge1xuXHR2YXIgZGlmZiA9IHt9LFxuXHRcdG5hbWUsIHZhbHVlO1xuXG5cdGZvciAoIG5hbWUgaW4gbmV3U3R5bGUgKSB7XG5cdFx0dmFsdWUgPSBuZXdTdHlsZVsgbmFtZSBdO1xuXHRcdGlmICggb2xkU3R5bGVbIG5hbWUgXSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRpZiAoICFzaG9ydGhhbmRTdHlsZXNbIG5hbWUgXSApIHtcblx0XHRcdFx0aWYgKCAkLmZ4LnN0ZXBbIG5hbWUgXSB8fCAhaXNOYU4oIHBhcnNlRmxvYXQoIHZhbHVlICkgKSApIHtcblx0XHRcdFx0XHRkaWZmWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkaWZmO1xufVxuXG4vLyBzdXBwb3J0OiBqUXVlcnkgPDEuOFxuaWYgKCAhJC5mbi5hZGRCYWNrICkge1xuXHQkLmZuLmFkZEJhY2sgPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9O1xufVxuXG4kLmVmZmVjdHMuYW5pbWF0ZUNsYXNzID0gZnVuY3Rpb24oIHZhbHVlLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0dmFyIG8gPSAkLnNwZWVkKCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayApO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCBmdW5jdGlvbigpIHtcblx0XHR2YXIgYW5pbWF0ZWQgPSAkKCB0aGlzICksXG5cdFx0XHRiYXNlQ2xhc3MgPSBhbmltYXRlZC5hdHRyKCBcImNsYXNzXCIgKSB8fCBcIlwiLFxuXHRcdFx0YXBwbHlDbGFzc0NoYW5nZSxcblx0XHRcdGFsbEFuaW1hdGlvbnMgPSBvLmNoaWxkcmVuID8gYW5pbWF0ZWQuZmluZCggXCIqXCIgKS5hZGRCYWNrKCkgOiBhbmltYXRlZDtcblxuXHRcdC8vIG1hcCB0aGUgYW5pbWF0ZWQgb2JqZWN0cyB0byBzdG9yZSB0aGUgb3JpZ2luYWwgc3R5bGVzLlxuXHRcdGFsbEFuaW1hdGlvbnMgPSBhbGxBbmltYXRpb25zLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlbCA9ICQoIHRoaXMgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGVsOiBlbCxcblx0XHRcdFx0c3RhcnQ6IGdldEVsZW1lbnRTdHlsZXMoIHRoaXMgKVxuXHRcdFx0fTtcblx0XHR9KTtcblxuXHRcdC8vIGFwcGx5IGNsYXNzIGNoYW5nZVxuXHRcdGFwcGx5Q2xhc3NDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHRcdCQuZWFjaCggY2xhc3NBbmltYXRpb25BY3Rpb25zLCBmdW5jdGlvbihpLCBhY3Rpb24pIHtcblx0XHRcdFx0aWYgKCB2YWx1ZVsgYWN0aW9uIF0gKSB7XG5cdFx0XHRcdFx0YW5pbWF0ZWRbIGFjdGlvbiArIFwiQ2xhc3NcIiBdKCB2YWx1ZVsgYWN0aW9uIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fTtcblx0XHRhcHBseUNsYXNzQ2hhbmdlKCk7XG5cblx0XHQvLyBtYXAgYWxsIGFuaW1hdGVkIG9iamVjdHMgYWdhaW4gLSBjYWxjdWxhdGUgbmV3IHN0eWxlcyBhbmQgZGlmZlxuXHRcdGFsbEFuaW1hdGlvbnMgPSBhbGxBbmltYXRpb25zLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuZW5kID0gZ2V0RWxlbWVudFN0eWxlcyggdGhpcy5lbFsgMCBdICk7XG5cdFx0XHR0aGlzLmRpZmYgPSBzdHlsZURpZmZlcmVuY2UoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9KTtcblxuXHRcdC8vIGFwcGx5IG9yaWdpbmFsIGNsYXNzXG5cdFx0YW5pbWF0ZWQuYXR0ciggXCJjbGFzc1wiLCBiYXNlQ2xhc3MgKTtcblxuXHRcdC8vIG1hcCBhbGwgYW5pbWF0ZWQgb2JqZWN0cyBhZ2FpbiAtIHRoaXMgdGltZSBjb2xsZWN0aW5nIGEgcHJvbWlzZVxuXHRcdGFsbEFuaW1hdGlvbnMgPSBhbGxBbmltYXRpb25zLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzdHlsZUluZm8gPSB0aGlzLFxuXHRcdFx0XHRkZmQgPSAkLkRlZmVycmVkKCksXG5cdFx0XHRcdG9wdHMgPSAkLmV4dGVuZCh7fSwgbywge1xuXHRcdFx0XHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRkZmQucmVzb2x2ZSggc3R5bGVJbmZvICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5lbC5hbmltYXRlKCB0aGlzLmRpZmYsIG9wdHMgKTtcblx0XHRcdHJldHVybiBkZmQucHJvbWlzZSgpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gb25jZSBhbGwgYW5pbWF0aW9ucyBoYXZlIGNvbXBsZXRlZDpcblx0XHQkLndoZW4uYXBwbHkoICQsIGFsbEFuaW1hdGlvbnMuZ2V0KCkgKS5kb25lKGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBzZXQgdGhlIGZpbmFsIGNsYXNzXG5cdFx0XHRhcHBseUNsYXNzQ2hhbmdlKCk7XG5cblx0XHRcdC8vIGZvciBlYWNoIGFuaW1hdGVkIGVsZW1lbnQsXG5cdFx0XHQvLyBjbGVhciBhbGwgY3NzIHByb3BlcnRpZXMgdGhhdCB3ZXJlIGFuaW1hdGVkXG5cdFx0XHQkLmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbCA9IHRoaXMuZWw7XG5cdFx0XHRcdCQuZWFjaCggdGhpcy5kaWZmLCBmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0XHRlbC5jc3MoIGtleSwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyB0aGlzIGlzIGd1YXJudGVlZCB0byBiZSB0aGVyZSBpZiB5b3UgdXNlIGpRdWVyeS5zcGVlZCgpXG5cdFx0XHQvLyBpdCBhbHNvIGhhbmRsZXMgZGVxdWV1aW5nIHRoZSBuZXh0IGFuaW0uLi5cblx0XHRcdG8uY29tcGxldGUuY2FsbCggYW5pbWF0ZWRbIDAgXSApO1xuXHRcdH0pO1xuXHR9KTtcbn07XG5cbiQuZm4uZXh0ZW5kKHtcblx0X2FkZENsYXNzOiAkLmZuLmFkZENsYXNzLFxuXHRhZGRDbGFzczogZnVuY3Rpb24oIGNsYXNzTmFtZXMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA/XG5cdFx0XHQkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsXG5cdFx0XHRcdHsgYWRkOiBjbGFzc05hbWVzIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgOlxuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIGNsYXNzTmFtZXMgKTtcblx0fSxcblxuXHRfcmVtb3ZlQ2xhc3M6ICQuZm4ucmVtb3ZlQ2xhc3MsXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID9cblx0XHRcdCQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcyxcblx0XHRcdFx0eyByZW1vdmU6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH0sXG5cblx0X3RvZ2dsZUNsYXNzOiAkLmZuLnRvZ2dsZUNsYXNzLFxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIGNsYXNzTmFtZXMsIGZvcmNlLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIHR5cGVvZiBmb3JjZSA9PT0gXCJib29sZWFuXCIgfHwgZm9yY2UgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggIXNwZWVkICkge1xuXHRcdFx0XHQvLyB3aXRob3V0IHNwZWVkIHBhcmFtZXRlclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3MoIGNsYXNzTmFtZXMsIGZvcmNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLFxuXHRcdFx0XHRcdChmb3JjZSA/IHsgYWRkOiBjbGFzc05hbWVzIH0gOiB7IHJlbW92ZTogY2xhc3NOYW1lcyB9KSxcblx0XHRcdFx0XHRzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyB3aXRob3V0IGZvcmNlIHBhcmFtZXRlclxuXHRcdFx0cmV0dXJuICQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcyxcblx0XHRcdFx0eyB0b2dnbGU6IGNsYXNzTmFtZXMgfSwgZm9yY2UsIHNwZWVkLCBlYXNpbmcgKTtcblx0XHR9XG5cdH0sXG5cblx0c3dpdGNoQ2xhc3M6IGZ1bmN0aW9uKCByZW1vdmUsIGFkZCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHtcblx0XHRyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLCB7XG5cdFx0XHRhZGQ6IGFkZCxcblx0XHRcdHJlbW92ZTogcmVtb3ZlXG5cdFx0fSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fVxufSk7XG5cbn0pKCk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRUZGRUNUUyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuKGZ1bmN0aW9uKCkge1xuXG4kLmV4dGVuZCggJC5lZmZlY3RzLCB7XG5cdHZlcnNpb246IFwiMS4xMC4xXCIsXG5cblx0Ly8gU2F2ZXMgYSBzZXQgb2YgcHJvcGVydGllcyBpbiBhIGRhdGEgc3RvcmFnZVxuXHRzYXZlOiBmdW5jdGlvbiggZWxlbWVudCwgc2V0ICkge1xuXHRcdGZvciggdmFyIGk9MDsgaSA8IHNldC5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGlmICggc2V0WyBpIF0gIT09IG51bGwgKSB7XG5cdFx0XHRcdGVsZW1lbnQuZGF0YSggZGF0YVNwYWNlICsgc2V0WyBpIF0sIGVsZW1lbnRbIDAgXS5zdHlsZVsgc2V0WyBpIF0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBSZXN0b3JlcyBhIHNldCBvZiBwcmV2aW91c2x5IHNhdmVkIHByb3BlcnRpZXMgZnJvbSBhIGRhdGEgc3RvcmFnZVxuXHRyZXN0b3JlOiBmdW5jdGlvbiggZWxlbWVudCwgc2V0ICkge1xuXHRcdHZhciB2YWwsIGk7XG5cdFx0Zm9yKCBpPTA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRpZiAoIHNldFsgaSBdICE9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBlbGVtZW50LmRhdGEoIGRhdGFTcGFjZSArIHNldFsgaSBdICk7XG5cdFx0XHRcdC8vIHN1cHBvcnQ6IGpRdWVyeSAxLjYuMlxuXHRcdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC85OTE3XG5cdFx0XHRcdC8vIGpRdWVyeSAxLjYuMiBpbmNvcnJlY3RseSByZXR1cm5zIHVuZGVmaW5lZCBmb3IgYW55IGZhbHN5IHZhbHVlLlxuXHRcdFx0XHQvLyBXZSBjYW4ndCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gXCJcIiBhbmQgMCBoZXJlLCBzbyB3ZSBqdXN0IGFzc3VtZVxuXHRcdFx0XHQvLyBlbXB0eSBzdHJpbmcgc2luY2UgaXQncyBsaWtlbHkgdG8gYmUgYSBtb3JlIGNvbW1vbiB2YWx1ZS4uLlxuXHRcdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudC5jc3MoIHNldFsgaSBdLCB2YWwgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c2V0TW9kZTogZnVuY3Rpb24oIGVsLCBtb2RlICkge1xuXHRcdGlmIChtb2RlID09PSBcInRvZ2dsZVwiKSB7XG5cdFx0XHRtb2RlID0gZWwuaXMoIFwiOmhpZGRlblwiICkgPyBcInNob3dcIiA6IFwiaGlkZVwiO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9kZTtcblx0fSxcblxuXHQvLyBUcmFuc2xhdGVzIGEgW3RvcCxsZWZ0XSBhcnJheSBpbnRvIGEgYmFzZWxpbmUgdmFsdWVcblx0Ly8gdGhpcyBzaG91bGQgYmUgYSBsaXR0bGUgbW9yZSBmbGV4aWJsZSBpbiB0aGUgZnV0dXJlIHRvIGhhbmRsZSBhIHN0cmluZyAmIGhhc2hcblx0Z2V0QmFzZWxpbmU6IGZ1bmN0aW9uKCBvcmlnaW4sIG9yaWdpbmFsICkge1xuXHRcdHZhciB5LCB4O1xuXHRcdHN3aXRjaCAoIG9yaWdpblsgMCBdICkge1xuXHRcdFx0Y2FzZSBcInRvcFwiOiB5ID0gMDsgYnJlYWs7XG5cdFx0XHRjYXNlIFwibWlkZGxlXCI6IHkgPSAwLjU7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImJvdHRvbVwiOiB5ID0gMTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB5ID0gb3JpZ2luWyAwIF0gLyBvcmlnaW5hbC5oZWlnaHQ7XG5cdFx0fVxuXHRcdHN3aXRjaCAoIG9yaWdpblsgMSBdICkge1xuXHRcdFx0Y2FzZSBcImxlZnRcIjogeCA9IDA7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNlbnRlclwiOiB4ID0gMC41OyBicmVhaztcblx0XHRcdGNhc2UgXCJyaWdodFwiOiB4ID0gMTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB4ID0gb3JpZ2luWyAxIF0gLyBvcmlnaW5hbC53aWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHgsXG5cdFx0XHR5OiB5XG5cdFx0fTtcblx0fSxcblxuXHQvLyBXcmFwcyB0aGUgZWxlbWVudCBhcm91bmQgYSB3cmFwcGVyIHRoYXQgY29waWVzIHBvc2l0aW9uIHByb3BlcnRpZXNcblx0Y3JlYXRlV3JhcHBlcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHQvLyBpZiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IHdyYXBwZWQsIHJldHVybiBpdFxuXHRcdGlmICggZWxlbWVudC5wYXJlbnQoKS5pcyggXCIudWktZWZmZWN0cy13cmFwcGVyXCIgKSkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQucGFyZW50KCk7XG5cdFx0fVxuXG5cdFx0Ly8gd3JhcCB0aGUgZWxlbWVudFxuXHRcdHZhciBwcm9wcyA9IHtcblx0XHRcdFx0d2lkdGg6IGVsZW1lbnQub3V0ZXJXaWR0aCh0cnVlKSxcblx0XHRcdFx0aGVpZ2h0OiBlbGVtZW50Lm91dGVySGVpZ2h0KHRydWUpLFxuXHRcdFx0XHRcImZsb2F0XCI6IGVsZW1lbnQuY3NzKCBcImZsb2F0XCIgKVxuXHRcdFx0fSxcblx0XHRcdHdyYXBwZXIgPSAkKCBcIjxkaXY+PC9kaXY+XCIgKVxuXHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktZWZmZWN0cy13cmFwcGVyXCIgKVxuXHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRmb250U2l6ZTogXCIxMDAlXCIsXG5cdFx0XHRcdFx0YmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuXHRcdFx0XHRcdGJvcmRlcjogXCJub25lXCIsXG5cdFx0XHRcdFx0bWFyZ2luOiAwLFxuXHRcdFx0XHRcdHBhZGRpbmc6IDBcblx0XHRcdFx0fSksXG5cdFx0XHQvLyBTdG9yZSB0aGUgc2l6ZSBpbiBjYXNlIHdpZHRoL2hlaWdodCBhcmUgZGVmaW5lZCBpbiAlIC0gRml4ZXMgIzUyNDVcblx0XHRcdHNpemUgPSB7XG5cdFx0XHRcdHdpZHRoOiBlbGVtZW50LndpZHRoKCksXG5cdFx0XHRcdGhlaWdodDogZWxlbWVudC5oZWlnaHQoKVxuXHRcdFx0fSxcblx0XHRcdGFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cblx0XHQvLyBzdXBwb3J0OiBGaXJlZm94XG5cdFx0Ly8gRmlyZWZveCBpbmNvcnJlY3RseSBleHBvc2VzIGFub255bW91cyBjb250ZW50XG5cdFx0Ly8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTYxNjY0XG5cdFx0dHJ5IHtcblx0XHRcdGFjdGl2ZS5pZDtcblx0XHR9IGNhdGNoKCBlICkge1xuXHRcdFx0YWN0aXZlID0gZG9jdW1lbnQuYm9keTtcblx0XHR9XG5cblx0XHRlbGVtZW50LndyYXAoIHdyYXBwZXIgKTtcblxuXHRcdC8vIEZpeGVzICM3NTk1IC0gRWxlbWVudHMgbG9zZSBmb2N1cyB3aGVuIHdyYXBwZWQuXG5cdFx0aWYgKCBlbGVtZW50WyAwIF0gPT09IGFjdGl2ZSB8fCAkLmNvbnRhaW5zKCBlbGVtZW50WyAwIF0sIGFjdGl2ZSApICkge1xuXHRcdFx0JCggYWN0aXZlICkuZm9jdXMoKTtcblx0XHR9XG5cblx0XHR3cmFwcGVyID0gZWxlbWVudC5wYXJlbnQoKTsgLy9Ib3RmaXggZm9yIGpRdWVyeSAxLjQgc2luY2Ugc29tZSBjaGFuZ2UgaW4gd3JhcCgpIHNlZW1zIHRvIGFjdHVhbGx5IGxvc2UgdGhlIHJlZmVyZW5jZSB0byB0aGUgd3JhcHBlZCBlbGVtZW50XG5cblx0XHQvLyB0cmFuc2ZlciBwb3NpdGlvbmluZyBwcm9wZXJ0aWVzIHRvIHRoZSB3cmFwcGVyXG5cdFx0aWYgKCBlbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHR3cmFwcGVyLmNzcyh7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIgfSk7XG5cdFx0XHRlbGVtZW50LmNzcyh7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIgfSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXh0ZW5kKCBwcm9wcywge1xuXHRcdFx0XHRwb3NpdGlvbjogZWxlbWVudC5jc3MoIFwicG9zaXRpb25cIiApLFxuXHRcdFx0XHR6SW5kZXg6IGVsZW1lbnQuY3NzKCBcInotaW5kZXhcIiApXG5cdFx0XHR9KTtcblx0XHRcdCQuZWFjaChbIFwidG9wXCIsIFwibGVmdFwiLCBcImJvdHRvbVwiLCBcInJpZ2h0XCIgXSwgZnVuY3Rpb24oaSwgcG9zKSB7XG5cdFx0XHRcdHByb3BzWyBwb3MgXSA9IGVsZW1lbnQuY3NzKCBwb3MgKTtcblx0XHRcdFx0aWYgKCBpc05hTiggcGFyc2VJbnQoIHByb3BzWyBwb3MgXSwgMTAgKSApICkge1xuXHRcdFx0XHRcdHByb3BzWyBwb3MgXSA9IFwiYXV0b1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGVsZW1lbnQuY3NzKHtcblx0XHRcdFx0cG9zaXRpb246IFwicmVsYXRpdmVcIixcblx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRyaWdodDogXCJhdXRvXCIsXG5cdFx0XHRcdGJvdHRvbTogXCJhdXRvXCJcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRlbGVtZW50LmNzcyhzaXplKTtcblxuXHRcdHJldHVybiB3cmFwcGVyLmNzcyggcHJvcHMgKS5zaG93KCk7XG5cdH0sXG5cblx0cmVtb3ZlV3JhcHBlcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIGFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cblx0XHRpZiAoIGVsZW1lbnQucGFyZW50KCkuaXMoIFwiLnVpLWVmZmVjdHMtd3JhcHBlclwiICkgKSB7XG5cdFx0XHRlbGVtZW50LnBhcmVudCgpLnJlcGxhY2VXaXRoKCBlbGVtZW50ICk7XG5cblx0XHRcdC8vIEZpeGVzICM3NTk1IC0gRWxlbWVudHMgbG9zZSBmb2N1cyB3aGVuIHdyYXBwZWQuXG5cdFx0XHRpZiAoIGVsZW1lbnRbIDAgXSA9PT0gYWN0aXZlIHx8ICQuY29udGFpbnMoIGVsZW1lbnRbIDAgXSwgYWN0aXZlICkgKSB7XG5cdFx0XHRcdCQoIGFjdGl2ZSApLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0XHRyZXR1cm4gZWxlbWVudDtcblx0fSxcblxuXHRzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiggZWxlbWVudCwgbGlzdCwgZmFjdG9yLCB2YWx1ZSApIHtcblx0XHR2YWx1ZSA9IHZhbHVlIHx8IHt9O1xuXHRcdCQuZWFjaCggbGlzdCwgZnVuY3Rpb24oIGksIHggKSB7XG5cdFx0XHR2YXIgdW5pdCA9IGVsZW1lbnQuY3NzVW5pdCggeCApO1xuXHRcdFx0aWYgKCB1bml0WyAwIF0gPiAwICkge1xuXHRcdFx0XHR2YWx1ZVsgeCBdID0gdW5pdFsgMCBdICogZmFjdG9yICsgdW5pdFsgMSBdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxufSk7XG5cbi8vIHJldHVybiBhbiBlZmZlY3Qgb3B0aW9ucyBvYmplY3QgZm9yIHRoZSBnaXZlbiBwYXJhbWV0ZXJzOlxuZnVuY3Rpb24gX25vcm1hbGl6ZUFyZ3VtZW50cyggZWZmZWN0LCBvcHRpb25zLCBzcGVlZCwgY2FsbGJhY2sgKSB7XG5cblx0Ly8gYWxsb3cgcGFzc2luZyBhbGwgb3B0aW9ucyBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyXG5cdGlmICggJC5pc1BsYWluT2JqZWN0KCBlZmZlY3QgKSApIHtcblx0XHRvcHRpb25zID0gZWZmZWN0O1xuXHRcdGVmZmVjdCA9IGVmZmVjdC5lZmZlY3Q7XG5cdH1cblxuXHQvLyBjb252ZXJ0IHRvIGFuIG9iamVjdFxuXHRlZmZlY3QgPSB7IGVmZmVjdDogZWZmZWN0IH07XG5cblx0Ly8gY2F0Y2ggKGVmZmVjdCwgbnVsbCwgLi4uKVxuXHRpZiAoIG9wdGlvbnMgPT0gbnVsbCApIHtcblx0XHRvcHRpb25zID0ge307XG5cdH1cblxuXHQvLyBjYXRjaCAoZWZmZWN0LCBjYWxsYmFjaylcblx0aWYgKCAkLmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG5cdFx0c3BlZWQgPSBudWxsO1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0fVxuXG5cdC8vIGNhdGNoIChlZmZlY3QsIHNwZWVkLCA/KVxuXHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiIHx8ICQuZnguc3BlZWRzWyBvcHRpb25zIF0gKSB7XG5cdFx0Y2FsbGJhY2sgPSBzcGVlZDtcblx0XHRzcGVlZCA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucyA9IHt9O1xuXHR9XG5cblx0Ly8gY2F0Y2ggKGVmZmVjdCwgb3B0aW9ucywgY2FsbGJhY2spXG5cdGlmICggJC5pc0Z1bmN0aW9uKCBzcGVlZCApICkge1xuXHRcdGNhbGxiYWNrID0gc3BlZWQ7XG5cdFx0c3BlZWQgPSBudWxsO1xuXHR9XG5cblx0Ly8gYWRkIG9wdGlvbnMgdG8gZWZmZWN0XG5cdGlmICggb3B0aW9ucyApIHtcblx0XHQkLmV4dGVuZCggZWZmZWN0LCBvcHRpb25zICk7XG5cdH1cblxuXHRzcGVlZCA9IHNwZWVkIHx8IG9wdGlvbnMuZHVyYXRpb247XG5cdGVmZmVjdC5kdXJhdGlvbiA9ICQuZngub2ZmID8gMCA6XG5cdFx0dHlwZW9mIHNwZWVkID09PSBcIm51bWJlclwiID8gc3BlZWQgOlxuXHRcdHNwZWVkIGluICQuZnguc3BlZWRzID8gJC5meC5zcGVlZHNbIHNwZWVkIF0gOlxuXHRcdCQuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdGVmZmVjdC5jb21wbGV0ZSA9IGNhbGxiYWNrIHx8IG9wdGlvbnMuY29tcGxldGU7XG5cblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuZnVuY3Rpb24gc3RhbmRhcmRTcGVlZCggc3BlZWQgKSB7XG5cdC8vIHZhbGlkIHN0YW5kYXJkIHNwZWVkc1xuXHRpZiAoICFzcGVlZCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwibnVtYmVyXCIgfHwgJC5meC5zcGVlZHNbIHNwZWVkIF0gKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBpbnZhbGlkIHN0cmluZ3MgLSB0cmVhdCBhcyBcIm5vcm1hbFwiIHNwZWVkXG5cdHJldHVybiB0eXBlb2Ygc3BlZWQgPT09IFwic3RyaW5nXCIgJiYgISQuZWZmZWN0cy5lZmZlY3RbIHNwZWVkIF07XG59XG5cbiQuZm4uZXh0ZW5kKHtcblx0ZWZmZWN0OiBmdW5jdGlvbiggLyogZWZmZWN0LCBvcHRpb25zLCBzcGVlZCwgY2FsbGJhY2sgKi8gKSB7XG5cdFx0dmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSxcblx0XHRcdG1vZGUgPSBhcmdzLm1vZGUsXG5cdFx0XHRxdWV1ZSA9IGFyZ3MucXVldWUsXG5cdFx0XHRlZmZlY3RNZXRob2QgPSAkLmVmZmVjdHMuZWZmZWN0WyBhcmdzLmVmZmVjdCBdO1xuXG5cdFx0aWYgKCAkLmZ4Lm9mZiB8fCAhZWZmZWN0TWV0aG9kICkge1xuXHRcdFx0Ly8gZGVsZWdhdGUgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZCAoZS5nLiwgLnNob3coKSkgaWYgcG9zc2libGVcblx0XHRcdGlmICggbW9kZSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXNbIG1vZGUgXSggYXJncy5kdXJhdGlvbiwgYXJncy5jb21wbGV0ZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBhcmdzLmNvbXBsZXRlICkge1xuXHRcdFx0XHRcdFx0YXJncy5jb21wbGV0ZS5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBydW4oIG5leHQgKSB7XG5cdFx0XHR2YXIgZWxlbSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0Y29tcGxldGUgPSBhcmdzLmNvbXBsZXRlLFxuXHRcdFx0XHRtb2RlID0gYXJncy5tb2RlO1xuXG5cdFx0XHRmdW5jdGlvbiBkb25lKCkge1xuXHRcdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggY29tcGxldGUgKSApIHtcblx0XHRcdFx0XHRjb21wbGV0ZS5jYWxsKCBlbGVtWzBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAkLmlzRnVuY3Rpb24oIG5leHQgKSApIHtcblx0XHRcdFx0XHRuZXh0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgdGhlIGVsZW1lbnQgaXMgaGlkZGRlbiBhbmQgbW9kZSBpcyBoaWRlLFxuXHRcdFx0Ly8gb3IgZWxlbWVudCBpcyB2aXNpYmxlIGFuZCBtb2RlIGlzIHNob3dcblx0XHRcdGlmICggZWxlbS5pcyggXCI6aGlkZGVuXCIgKSA/IG1vZGUgPT09IFwiaGlkZVwiIDogbW9kZSA9PT0gXCJzaG93XCIgKSB7XG5cdFx0XHRcdGRvbmUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVmZmVjdE1ldGhvZC5jYWxsKCBlbGVtWzBdLCBhcmdzLCBkb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHF1ZXVlID09PSBmYWxzZSA/IHRoaXMuZWFjaCggcnVuICkgOiB0aGlzLnF1ZXVlKCBxdWV1ZSB8fCBcImZ4XCIsIHJ1biApO1xuXHR9LFxuXG5cdF9zaG93OiAkLmZuLnNob3csXG5cdHNob3c6IGZ1bmN0aW9uKCBzcGVlZCApIHtcblx0XHRpZiAoIHN0YW5kYXJkU3BlZWQoIHNwZWVkICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fc2hvdy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRhcmdzLm1vZGUgPSBcInNob3dcIjtcblx0XHRcdHJldHVybiB0aGlzLmVmZmVjdC5jYWxsKCB0aGlzLCBhcmdzICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9oaWRlOiAkLmZuLmhpZGUsXG5cdGhpZGU6IGZ1bmN0aW9uKCBzcGVlZCApIHtcblx0XHRpZiAoIHN0YW5kYXJkU3BlZWQoIHNwZWVkICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5faGlkZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRhcmdzLm1vZGUgPSBcImhpZGVcIjtcblx0XHRcdHJldHVybiB0aGlzLmVmZmVjdC5jYWxsKCB0aGlzLCBhcmdzICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGpRdWVyeSBjb3JlIG92ZXJsb2FkcyB0b2dnbGUgYW5kIGNyZWF0ZXMgX3RvZ2dsZVxuXHRfX3RvZ2dsZTogJC5mbi50b2dnbGUsXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHNwZWVkICkge1xuXHRcdGlmICggc3RhbmRhcmRTcGVlZCggc3BlZWQgKSB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiIHx8ICQuaXNGdW5jdGlvbiggc3BlZWQgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLl9fdG9nZ2xlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdGFyZ3MubW9kZSA9IFwidG9nZ2xlXCI7XG5cdFx0XHRyZXR1cm4gdGhpcy5lZmZlY3QuY2FsbCggdGhpcywgYXJncyApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cdGNzc1VuaXQ6IGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBzdHlsZSA9IHRoaXMuY3NzKCBrZXkgKSxcblx0XHRcdHZhbCA9IFtdO1xuXG5cdFx0JC5lYWNoKCBbIFwiZW1cIiwgXCJweFwiLCBcIiVcIiwgXCJwdFwiIF0sIGZ1bmN0aW9uKCBpLCB1bml0ICkge1xuXHRcdFx0aWYgKCBzdHlsZS5pbmRleE9mKCB1bml0ICkgPiAwICkge1xuXHRcdFx0XHR2YWwgPSBbIHBhcnNlRmxvYXQoIHN0eWxlICksIHVuaXQgXTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59KTtcblxufSkoKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFQVNJTkcgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4oZnVuY3Rpb24oKSB7XG5cbi8vIGJhc2VkIG9uIGVhc2luZyBlcXVhdGlvbnMgZnJvbSBSb2JlcnQgUGVubmVyIChodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nKVxuXG52YXIgYmFzZUVhc2luZ3MgPSB7fTtcblxuJC5lYWNoKCBbIFwiUXVhZFwiLCBcIkN1YmljXCIsIFwiUXVhcnRcIiwgXCJRdWludFwiLCBcIkV4cG9cIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0YmFzZUVhc2luZ3NbIG5hbWUgXSA9IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBNYXRoLnBvdyggcCwgaSArIDIgKTtcblx0fTtcbn0pO1xuXG4kLmV4dGVuZCggYmFzZUVhc2luZ3MsIHtcblx0U2luZTogZnVuY3Rpb24gKCBwICkge1xuXHRcdHJldHVybiAxIC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJIC8gMiApO1xuXHR9LFxuXHRDaXJjOiBmdW5jdGlvbiAoIHAgKSB7XG5cdFx0cmV0dXJuIDEgLSBNYXRoLnNxcnQoIDEgLSBwICogcCApO1xuXHR9LFxuXHRFbGFzdGljOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcCA9PT0gMCB8fCBwID09PSAxID8gcCA6XG5cdFx0XHQtTWF0aC5wb3coIDIsIDggKiAocCAtIDEpICkgKiBNYXRoLnNpbiggKCAocCAtIDEpICogODAgLSA3LjUgKSAqIE1hdGguUEkgLyAxNSApO1xuXHR9LFxuXHRCYWNrOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcCAqIHAgKiAoIDMgKiBwIC0gMiApO1xuXHR9LFxuXHRCb3VuY2U6IGZ1bmN0aW9uICggcCApIHtcblx0XHR2YXIgcG93Mixcblx0XHRcdGJvdW5jZSA9IDQ7XG5cblx0XHR3aGlsZSAoIHAgPCAoICggcG93MiA9IE1hdGgucG93KCAyLCAtLWJvdW5jZSApICkgLSAxICkgLyAxMSApIHt9XG5cdFx0cmV0dXJuIDEgLyBNYXRoLnBvdyggNCwgMyAtIGJvdW5jZSApIC0gNy41NjI1ICogTWF0aC5wb3coICggcG93MiAqIDMgLSAyICkgLyAyMiAtIHAsIDIgKTtcblx0fVxufSk7XG5cbiQuZWFjaCggYmFzZUVhc2luZ3MsIGZ1bmN0aW9uKCBuYW1lLCBlYXNlSW4gKSB7XG5cdCQuZWFzaW5nWyBcImVhc2VJblwiICsgbmFtZSBdID0gZWFzZUluO1xuXHQkLmVhc2luZ1sgXCJlYXNlT3V0XCIgKyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMSAtIGVhc2VJbiggMSAtIHAgKTtcblx0fTtcblx0JC5lYXNpbmdbIFwiZWFzZUluT3V0XCIgKyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcCA8IDAuNSA/XG5cdFx0XHRlYXNlSW4oIHAgKiAyICkgLyAyIDpcblx0XHRcdDEgLSBlYXNlSW4oIHAgKiAtMiArIDIgKSAvIDI7XG5cdH07XG59KTtcblxufSkoKTtcblxufSkoalF1ZXJ5KSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxudmFyIHJ2ZXJ0aWNhbCA9IC91cHxkb3dufHZlcnRpY2FsLyxcblx0cnBvc2l0aXZlbW90aW9uID0gL3VwfGxlZnR8dmVydGljYWx8aG9yaXpvbnRhbC87XG5cbiQuZWZmZWN0cy5lZmZlY3QuYmxpbmQgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblx0Ly8gQ3JlYXRlIGVsZW1lbnRcblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdHByb3BzID0gWyBcInBvc2l0aW9uXCIsIFwidG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcImhpZGVcIiApLFxuXHRcdGRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8IFwidXBcIixcblx0XHR2ZXJ0aWNhbCA9IHJ2ZXJ0aWNhbC50ZXN0KCBkaXJlY3Rpb24gKSxcblx0XHRyZWYgPSB2ZXJ0aWNhbCA/IFwiaGVpZ2h0XCIgOiBcIndpZHRoXCIsXG5cdFx0cmVmMiA9IHZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuXHRcdG1vdGlvbiA9IHJwb3NpdGl2ZW1vdGlvbi50ZXN0KCBkaXJlY3Rpb24gKSxcblx0XHRhbmltYXRpb24gPSB7fSxcblx0XHRzaG93ID0gbW9kZSA9PT0gXCJzaG93XCIsXG5cdFx0d3JhcHBlciwgZGlzdGFuY2UsIG1hcmdpbjtcblxuXHQvLyBpZiBhbHJlYWR5IHdyYXBwZWQsIHRoZSB3cmFwcGVyJ3MgcHJvcGVydGllcyBhcmUgbXkgcHJvcGVydHkuICM2MjQ1XG5cdGlmICggZWwucGFyZW50KCkuaXMoIFwiLnVpLWVmZmVjdHMtd3JhcHBlclwiICkgKSB7XG5cdFx0JC5lZmZlY3RzLnNhdmUoIGVsLnBhcmVudCgpLCBwcm9wcyApO1xuXHR9IGVsc2Uge1xuXHRcdCQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTtcblx0fVxuXHRlbC5zaG93KCk7XG5cdHdyYXBwZXIgPSAkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3Moe1xuXHRcdG92ZXJmbG93OiBcImhpZGRlblwiXG5cdH0pO1xuXG5cdGRpc3RhbmNlID0gd3JhcHBlclsgcmVmIF0oKTtcblx0bWFyZ2luID0gcGFyc2VGbG9hdCggd3JhcHBlci5jc3MoIHJlZjIgKSApIHx8IDA7XG5cblx0YW5pbWF0aW9uWyByZWYgXSA9IHNob3cgPyBkaXN0YW5jZSA6IDA7XG5cdGlmICggIW1vdGlvbiApIHtcblx0XHRlbFxuXHRcdFx0LmNzcyggdmVydGljYWwgPyBcImJvdHRvbVwiIDogXCJyaWdodFwiLCAwIClcblx0XHRcdC5jc3MoIHZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiLCBcImF1dG9cIiApXG5cdFx0XHQuY3NzKHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiB9KTtcblxuXHRcdGFuaW1hdGlvblsgcmVmMiBdID0gc2hvdyA/IG1hcmdpbiA6IGRpc3RhbmNlICsgbWFyZ2luO1xuXHR9XG5cblx0Ly8gc3RhcnQgYXQgMCBpZiB3ZSBhcmUgc2hvd2luZ1xuXHRpZiAoIHNob3cgKSB7XG5cdFx0d3JhcHBlci5jc3MoIHJlZiwgMCApO1xuXHRcdGlmICggISBtb3Rpb24gKSB7XG5cdFx0XHR3cmFwcGVyLmNzcyggcmVmMiwgbWFyZ2luICsgZGlzdGFuY2UgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBBbmltYXRlXG5cdHdyYXBwZXIuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0ZHVyYXRpb246IG8uZHVyYXRpb24sXG5cdFx0ZWFzaW5nOiBvLmVhc2luZyxcblx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBtb2RlID09PSBcImhpZGVcIiApIHtcblx0XHRcdFx0ZWwuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fVxuXHR9KTtcblxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLmVmZmVjdHMuZWZmZWN0LmJvdW5jZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkge1xuXHR2YXIgZWwgPSAkKCB0aGlzICksXG5cdFx0cHJvcHMgPSBbIFwicG9zaXRpb25cIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sXG5cblx0XHQvLyBkZWZhdWx0czpcblx0XHRtb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgXCJlZmZlY3RcIiApLFxuXHRcdGhpZGUgPSBtb2RlID09PSBcImhpZGVcIixcblx0XHRzaG93ID0gbW9kZSA9PT0gXCJzaG93XCIsXG5cdFx0ZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgXCJ1cFwiLFxuXHRcdGRpc3RhbmNlID0gby5kaXN0YW5jZSxcblx0XHR0aW1lcyA9IG8udGltZXMgfHwgNSxcblxuXHRcdC8vIG51bWJlciBvZiBpbnRlcm5hbCBhbmltYXRpb25zXG5cdFx0YW5pbXMgPSB0aW1lcyAqIDIgKyAoIHNob3cgfHwgaGlkZSA/IDEgOiAwICksXG5cdFx0c3BlZWQgPSBvLmR1cmF0aW9uIC8gYW5pbXMsXG5cdFx0ZWFzaW5nID0gby5lYXNpbmcsXG5cblx0XHQvLyB1dGlsaXR5OlxuXHRcdHJlZiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImRvd25cIiApID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuXHRcdG1vdGlvbiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImxlZnRcIiApLFxuXHRcdGksXG5cdFx0dXBBbmltLFxuXHRcdGRvd25BbmltLFxuXG5cdFx0Ly8gd2Ugd2lsbCBuZWVkIHRvIHJlLWFzc2VtYmxlIHRoZSBxdWV1ZSB0byBzdGFjayBvdXIgYW5pbWF0aW9ucyBpbiBwbGFjZVxuXHRcdHF1ZXVlID0gZWwucXVldWUoKSxcblx0XHRxdWV1ZWxlbiA9IHF1ZXVlLmxlbmd0aDtcblxuXHQvLyBBdm9pZCB0b3VjaGluZyBvcGFjaXR5IHRvIHByZXZlbnQgY2xlYXJUeXBlIGFuZCBQTkcgaXNzdWVzIGluIElFXG5cdGlmICggc2hvdyB8fCBoaWRlICkge1xuXHRcdHByb3BzLnB1c2goIFwib3BhY2l0eVwiICk7XG5cdH1cblxuXHQkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7XG5cdGVsLnNob3coKTtcblx0JC5lZmZlY3RzLmNyZWF0ZVdyYXBwZXIoIGVsICk7IC8vIENyZWF0ZSBXcmFwcGVyXG5cblx0Ly8gZGVmYXVsdCBkaXN0YW5jZSBmb3IgdGhlIEJJR0dFU1QgYm91bmNlIGlzIHRoZSBvdXRlciBEaXN0YW5jZSAvIDNcblx0aWYgKCAhZGlzdGFuY2UgKSB7XG5cdFx0ZGlzdGFuY2UgPSBlbFsgcmVmID09PSBcInRvcFwiID8gXCJvdXRlckhlaWdodFwiIDogXCJvdXRlcldpZHRoXCIgXSgpIC8gMztcblx0fVxuXG5cdGlmICggc2hvdyApIHtcblx0XHRkb3duQW5pbSA9IHsgb3BhY2l0eTogMSB9O1xuXHRcdGRvd25BbmltWyByZWYgXSA9IDA7XG5cblx0XHQvLyBpZiB3ZSBhcmUgc2hvd2luZywgZm9yY2Ugb3BhY2l0eSAwIGFuZCBzZXQgdGhlIGluaXRpYWwgcG9zaXRpb25cblx0XHQvLyB0aGVuIGRvIHRoZSBcImZpcnN0XCIgYW5pbWF0aW9uXG5cdFx0ZWwuY3NzKCBcIm9wYWNpdHlcIiwgMCApXG5cdFx0XHQuY3NzKCByZWYsIG1vdGlvbiA/IC1kaXN0YW5jZSAqIDIgOiBkaXN0YW5jZSAqIDIgKVxuXHRcdFx0LmFuaW1hdGUoIGRvd25BbmltLCBzcGVlZCwgZWFzaW5nICk7XG5cdH1cblxuXHQvLyBzdGFydCBhdCB0aGUgc21hbGxlc3QgZGlzdGFuY2UgaWYgd2UgYXJlIGhpZGluZ1xuXHRpZiAoIGhpZGUgKSB7XG5cdFx0ZGlzdGFuY2UgPSBkaXN0YW5jZSAvIE1hdGgucG93KCAyLCB0aW1lcyAtIDEgKTtcblx0fVxuXG5cdGRvd25BbmltID0ge307XG5cdGRvd25BbmltWyByZWYgXSA9IDA7XG5cdC8vIEJvdW5jZXMgdXAvZG93bi9sZWZ0L3JpZ2h0IHRoZW4gYmFjayB0byAwIC0tIHRpbWVzICogMiBhbmltYXRpb25zIGhhcHBlbiBoZXJlXG5cdGZvciAoIGkgPSAwOyBpIDwgdGltZXM7IGkrKyApIHtcblx0XHR1cEFuaW0gPSB7fTtcblx0XHR1cEFuaW1bIHJlZiBdID0gKCBtb3Rpb24gPyBcIi09XCIgOiBcIis9XCIgKSArIGRpc3RhbmNlO1xuXG5cdFx0ZWwuYW5pbWF0ZSggdXBBbmltLCBzcGVlZCwgZWFzaW5nIClcblx0XHRcdC5hbmltYXRlKCBkb3duQW5pbSwgc3BlZWQsIGVhc2luZyApO1xuXG5cdFx0ZGlzdGFuY2UgPSBoaWRlID8gZGlzdGFuY2UgKiAyIDogZGlzdGFuY2UgLyAyO1xuXHR9XG5cblx0Ly8gTGFzdCBCb3VuY2Ugd2hlbiBIaWRpbmdcblx0aWYgKCBoaWRlICkge1xuXHRcdHVwQW5pbSA9IHsgb3BhY2l0eTogMCB9O1xuXHRcdHVwQW5pbVsgcmVmIF0gPSAoIG1vdGlvbiA/IFwiLT1cIiA6IFwiKz1cIiApICsgZGlzdGFuY2U7XG5cblx0XHRlbC5hbmltYXRlKCB1cEFuaW0sIHNwZWVkLCBlYXNpbmcgKTtcblx0fVxuXG5cdGVsLnF1ZXVlKGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaGlkZSApIHtcblx0XHRcdGVsLmhpZGUoKTtcblx0XHR9XG5cdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdCQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApO1xuXHRcdGRvbmUoKTtcblx0fSk7XG5cblx0Ly8gaW5qZWN0IGFsbCB0aGUgYW5pbWF0aW9ucyB3ZSBqdXN0IHF1ZXVlZCB0byBiZSBmaXJzdCBpbiBsaW5lIChhZnRlciBcImlucHJvZ3Jlc3NcIilcblx0aWYgKCBxdWV1ZWxlbiA+IDEpIHtcblx0XHRxdWV1ZS5zcGxpY2UuYXBwbHkoIHF1ZXVlLFxuXHRcdFx0WyAxLCAwIF0uY29uY2F0KCBxdWV1ZS5zcGxpY2UoIHF1ZXVlbGVuLCBhbmltcyArIDEgKSApICk7XG5cdH1cblx0ZWwuZGVxdWV1ZSgpO1xuXG59O1xuXG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7XG5cbiQuZWZmZWN0cy5lZmZlY3QuY2xpcCA9IGZ1bmN0aW9uKCBvLCBkb25lICkge1xuXHQvLyBDcmVhdGUgZWxlbWVudFxuXHR2YXIgZWwgPSAkKCB0aGlzICksXG5cdFx0cHJvcHMgPSBbIFwicG9zaXRpb25cIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sXG5cdFx0bW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8IFwiaGlkZVwiICksXG5cdFx0c2hvdyA9IG1vZGUgPT09IFwic2hvd1wiLFxuXHRcdGRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8IFwidmVydGljYWxcIixcblx0XHR2ZXJ0ID0gZGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCIsXG5cdFx0c2l6ZSA9IHZlcnQgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiLFxuXHRcdHBvc2l0aW9uID0gdmVydCA/IFwidG9wXCIgOiBcImxlZnRcIixcblx0XHRhbmltYXRpb24gPSB7fSxcblx0XHR3cmFwcGVyLCBhbmltYXRlLCBkaXN0YW5jZTtcblxuXHQvLyBTYXZlICYgU2hvd1xuXHQkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7XG5cdGVsLnNob3coKTtcblxuXHQvLyBDcmVhdGUgV3JhcHBlclxuXHR3cmFwcGVyID0gJC5lZmZlY3RzLmNyZWF0ZVdyYXBwZXIoIGVsICkuY3NzKHtcblx0XHRvdmVyZmxvdzogXCJoaWRkZW5cIlxuXHR9KTtcblx0YW5pbWF0ZSA9ICggZWxbMF0udGFnTmFtZSA9PT0gXCJJTUdcIiApID8gd3JhcHBlciA6IGVsO1xuXHRkaXN0YW5jZSA9IGFuaW1hdGVbIHNpemUgXSgpO1xuXG5cdC8vIFNoaWZ0XG5cdGlmICggc2hvdyApIHtcblx0XHRhbmltYXRlLmNzcyggc2l6ZSwgMCApO1xuXHRcdGFuaW1hdGUuY3NzKCBwb3NpdGlvbiwgZGlzdGFuY2UgLyAyICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgQW5pbWF0aW9uIE9iamVjdDpcblx0YW5pbWF0aW9uWyBzaXplIF0gPSBzaG93ID8gZGlzdGFuY2UgOiAwO1xuXHRhbmltYXRpb25bIHBvc2l0aW9uIF0gPSBzaG93ID8gMCA6IGRpc3RhbmNlIC8gMjtcblxuXHQvLyBBbmltYXRlXG5cdGFuaW1hdGUuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0cXVldWU6IGZhbHNlLFxuXHRcdGR1cmF0aW9uOiBvLmR1cmF0aW9uLFxuXHRcdGVhc2luZzogby5lYXNpbmcsXG5cdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhc2hvdyApIHtcblx0XHRcdFx0ZWwuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fVxuXHR9KTtcblxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLmVmZmVjdHMuZWZmZWN0LmRyb3AgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblxuXHR2YXIgZWwgPSAkKCB0aGlzICksXG5cdFx0cHJvcHMgPSBbIFwicG9zaXRpb25cIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJvcGFjaXR5XCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcImhpZGVcIiApLFxuXHRcdHNob3cgPSBtb2RlID09PSBcInNob3dcIixcblx0XHRkaXJlY3Rpb24gPSBvLmRpcmVjdGlvbiB8fCBcImxlZnRcIixcblx0XHRyZWYgPSAoIGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJkb3duXCIgKSA/IFwidG9wXCIgOiBcImxlZnRcIixcblx0XHRtb3Rpb24gPSAoIGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgKSA/IFwicG9zXCIgOiBcIm5lZ1wiLFxuXHRcdGFuaW1hdGlvbiA9IHtcblx0XHRcdG9wYWNpdHk6IHNob3cgPyAxIDogMFxuXHRcdH0sXG5cdFx0ZGlzdGFuY2U7XG5cblx0Ly8gQWRqdXN0XG5cdCQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTtcblx0ZWwuc2hvdygpO1xuXHQkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKTtcblxuXHRkaXN0YW5jZSA9IG8uZGlzdGFuY2UgfHwgZWxbIHJlZiA9PT0gXCJ0b3BcIiA/IFwib3V0ZXJIZWlnaHRcIjogXCJvdXRlcldpZHRoXCIgXSggdHJ1ZSApIC8gMjtcblxuXHRpZiAoIHNob3cgKSB7XG5cdFx0ZWxcblx0XHRcdC5jc3MoIFwib3BhY2l0eVwiLCAwIClcblx0XHRcdC5jc3MoIHJlZiwgbW90aW9uID09PSBcInBvc1wiID8gLWRpc3RhbmNlIDogZGlzdGFuY2UgKTtcblx0fVxuXG5cdC8vIEFuaW1hdGlvblxuXHRhbmltYXRpb25bIHJlZiBdID0gKCBzaG93ID9cblx0XHQoIG1vdGlvbiA9PT0gXCJwb3NcIiA/IFwiKz1cIiA6IFwiLT1cIiApIDpcblx0XHQoIG1vdGlvbiA9PT0gXCJwb3NcIiA/IFwiLT1cIiA6IFwiKz1cIiApICkgK1xuXHRcdGRpc3RhbmNlO1xuXG5cdC8vIEFuaW1hdGVcblx0ZWwuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0cXVldWU6IGZhbHNlLFxuXHRcdGR1cmF0aW9uOiBvLmR1cmF0aW9uLFxuXHRcdGVhc2luZzogby5lYXNpbmcsXG5cdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBtb2RlID09PSBcImhpZGVcIiApIHtcblx0XHRcdFx0ZWwuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC5leHBsb2RlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cblx0dmFyIHJvd3MgPSBvLnBpZWNlcyA/IE1hdGgucm91bmQoIE1hdGguc3FydCggby5waWVjZXMgKSApIDogMyxcblx0XHRjZWxscyA9IHJvd3MsXG5cdFx0ZWwgPSAkKCB0aGlzICksXG5cdFx0bW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8IFwiaGlkZVwiICksXG5cdFx0c2hvdyA9IG1vZGUgPT09IFwic2hvd1wiLFxuXG5cdFx0Ly8gc2hvdyBhbmQgdGhlbiB2aXNpYmlsaXR5OmhpZGRlbiB0aGUgZWxlbWVudCBiZWZvcmUgY2FsY3VsYXRpbmcgb2Zmc2V0XG5cdFx0b2Zmc2V0ID0gZWwuc2hvdygpLmNzcyggXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIgKS5vZmZzZXQoKSxcblxuXHRcdC8vIHdpZHRoIGFuZCBoZWlnaHQgb2YgYSBwaWVjZVxuXHRcdHdpZHRoID0gTWF0aC5jZWlsKCBlbC5vdXRlcldpZHRoKCkgLyBjZWxscyApLFxuXHRcdGhlaWdodCA9IE1hdGguY2VpbCggZWwub3V0ZXJIZWlnaHQoKSAvIHJvd3MgKSxcblx0XHRwaWVjZXMgPSBbXSxcblxuXHRcdC8vIGxvb3Bcblx0XHRpLCBqLCBsZWZ0LCB0b3AsIG14LCBteTtcblxuXHQvLyBjaGlsZHJlbiBhbmltYXRlIGNvbXBsZXRlOlxuXHRmdW5jdGlvbiBjaGlsZENvbXBsZXRlKCkge1xuXHRcdHBpZWNlcy5wdXNoKCB0aGlzICk7XG5cdFx0aWYgKCBwaWVjZXMubGVuZ3RoID09PSByb3dzICogY2VsbHMgKSB7XG5cdFx0XHRhbmltQ29tcGxldGUoKTtcblx0XHR9XG5cdH1cblxuXHQvLyBjbG9uZSB0aGUgZWxlbWVudCBmb3IgZWFjaCByb3cgYW5kIGNlbGwuXG5cdGZvciggaSA9IDA7IGkgPCByb3dzIDsgaSsrICkgeyAvLyA9PT0+XG5cdFx0dG9wID0gb2Zmc2V0LnRvcCArIGkgKiBoZWlnaHQ7XG5cdFx0bXkgPSBpIC0gKCByb3dzIC0gMSApIC8gMiA7XG5cblx0XHRmb3IoIGogPSAwOyBqIDwgY2VsbHMgOyBqKysgKSB7IC8vIHx8fFxuXHRcdFx0bGVmdCA9IG9mZnNldC5sZWZ0ICsgaiAqIHdpZHRoO1xuXHRcdFx0bXggPSBqIC0gKCBjZWxscyAtIDEgKSAvIDIgO1xuXG5cdFx0XHQvLyBDcmVhdGUgYSBjbG9uZSBvZiB0aGUgbm93IGhpZGRlbiBtYWluIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFic29sdXRlIHBvc2l0aW9uZWRcblx0XHRcdC8vIHdpdGhpbiBhIHdyYXBwZXIgZGl2IG9mZiB0aGUgLWxlZnQgYW5kIC10b3AgZXF1YWwgdG8gc2l6ZSBvZiBvdXIgcGllY2VzXG5cdFx0XHRlbFxuXHRcdFx0XHQuY2xvbmUoKVxuXHRcdFx0XHQuYXBwZW5kVG8oIFwiYm9keVwiIClcblx0XHRcdFx0LndyYXAoIFwiPGRpdj48L2Rpdj5cIiApXG5cdFx0XHRcdC5jc3Moe1xuXHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0dmlzaWJpbGl0eTogXCJ2aXNpYmxlXCIsXG5cdFx0XHRcdFx0bGVmdDogLWogKiB3aWR0aCxcblx0XHRcdFx0XHR0b3A6IC1pICogaGVpZ2h0XG5cdFx0XHRcdH0pXG5cblx0XHRcdC8vIHNlbGVjdCB0aGUgd3JhcHBlciAtIG1ha2UgaXQgb3ZlcmZsb3c6IGhpZGRlbiBhbmQgYWJzb2x1dGUgcG9zaXRpb25lZCBiYXNlZCBvblxuXHRcdFx0Ly8gd2hlcmUgdGhlIG9yaWdpbmFsIHdhcyBsb2NhdGVkICtsZWZ0IGFuZCArdG9wIGVxdWFsIHRvIHRoZSBzaXplIG9mIHBpZWNlc1xuXHRcdFx0XHQucGFyZW50KClcblx0XHRcdFx0LmFkZENsYXNzKCBcInVpLWVmZmVjdHMtZXhwbG9kZVwiIClcblx0XHRcdFx0LmNzcyh7XG5cdFx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0XHRvdmVyZmxvdzogXCJoaWRkZW5cIixcblx0XHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRcdFx0bGVmdDogbGVmdCArICggc2hvdyA/IG14ICogd2lkdGggOiAwICksXG5cdFx0XHRcdFx0dG9wOiB0b3AgKyAoIHNob3cgPyBteSAqIGhlaWdodCA6IDAgKSxcblx0XHRcdFx0XHRvcGFjaXR5OiBzaG93ID8gMCA6IDFcblx0XHRcdFx0fSkuYW5pbWF0ZSh7XG5cdFx0XHRcdFx0bGVmdDogbGVmdCArICggc2hvdyA/IDAgOiBteCAqIHdpZHRoICksXG5cdFx0XHRcdFx0dG9wOiB0b3AgKyAoIHNob3cgPyAwIDogbXkgKiBoZWlnaHQgKSxcblx0XHRcdFx0XHRvcGFjaXR5OiBzaG93ID8gMSA6IDBcblx0XHRcdFx0fSwgby5kdXJhdGlvbiB8fCA1MDAsIG8uZWFzaW5nLCBjaGlsZENvbXBsZXRlICk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYW5pbUNvbXBsZXRlKCkge1xuXHRcdGVsLmNzcyh7XG5cdFx0XHR2aXNpYmlsaXR5OiBcInZpc2libGVcIlxuXHRcdH0pO1xuXHRcdCQoIHBpZWNlcyApLnJlbW92ZSgpO1xuXHRcdGlmICggIXNob3cgKSB7XG5cdFx0XHRlbC5oaWRlKCk7XG5cdFx0fVxuXHRcdGRvbmUoKTtcblx0fVxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLmVmZmVjdHMuZWZmZWN0LmZhZGUgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcInRvZ2dsZVwiICk7XG5cblx0ZWwuYW5pbWF0ZSh7XG5cdFx0b3BhY2l0eTogbW9kZVxuXHR9LCB7XG5cdFx0cXVldWU6IGZhbHNlLFxuXHRcdGR1cmF0aW9uOiBvLmR1cmF0aW9uLFxuXHRcdGVhc2luZzogby5lYXNpbmcsXG5cdFx0Y29tcGxldGU6IGRvbmVcblx0fSk7XG59O1xuXG59KSggalF1ZXJ5ICk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC5mb2xkID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cblx0Ly8gQ3JlYXRlIGVsZW1lbnRcblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdHByb3BzID0gWyBcInBvc2l0aW9uXCIsIFwidG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcImhpZGVcIiApLFxuXHRcdHNob3cgPSBtb2RlID09PSBcInNob3dcIixcblx0XHRoaWRlID0gbW9kZSA9PT0gXCJoaWRlXCIsXG5cdFx0c2l6ZSA9IG8uc2l6ZSB8fCAxNSxcblx0XHRwZXJjZW50ID0gLyhbMC05XSspJS8uZXhlYyggc2l6ZSApLFxuXHRcdGhvcml6Rmlyc3QgPSAhIW8uaG9yaXpGaXJzdCxcblx0XHR3aWR0aEZpcnN0ID0gc2hvdyAhPT0gaG9yaXpGaXJzdCxcblx0XHRyZWYgPSB3aWR0aEZpcnN0ID8gWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSA6IFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sXG5cdFx0ZHVyYXRpb24gPSBvLmR1cmF0aW9uIC8gMixcblx0XHR3cmFwcGVyLCBkaXN0YW5jZSxcblx0XHRhbmltYXRpb24xID0ge30sXG5cdFx0YW5pbWF0aW9uMiA9IHt9O1xuXG5cdCQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTtcblx0ZWwuc2hvdygpO1xuXG5cdC8vIENyZWF0ZSBXcmFwcGVyXG5cdHdyYXBwZXIgPSAkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3Moe1xuXHRcdG92ZXJmbG93OiBcImhpZGRlblwiXG5cdH0pO1xuXHRkaXN0YW5jZSA9IHdpZHRoRmlyc3QgP1xuXHRcdFsgd3JhcHBlci53aWR0aCgpLCB3cmFwcGVyLmhlaWdodCgpIF0gOlxuXHRcdFsgd3JhcHBlci5oZWlnaHQoKSwgd3JhcHBlci53aWR0aCgpIF07XG5cblx0aWYgKCBwZXJjZW50ICkge1xuXHRcdHNpemUgPSBwYXJzZUludCggcGVyY2VudFsgMSBdLCAxMCApIC8gMTAwICogZGlzdGFuY2VbIGhpZGUgPyAwIDogMSBdO1xuXHR9XG5cdGlmICggc2hvdyApIHtcblx0XHR3cmFwcGVyLmNzcyggaG9yaXpGaXJzdCA/IHtcblx0XHRcdGhlaWdodDogMCxcblx0XHRcdHdpZHRoOiBzaXplXG5cdFx0fSA6IHtcblx0XHRcdGhlaWdodDogc2l6ZSxcblx0XHRcdHdpZHRoOiAwXG5cdFx0fSk7XG5cdH1cblxuXHQvLyBBbmltYXRpb25cblx0YW5pbWF0aW9uMVsgcmVmWyAwIF0gXSA9IHNob3cgPyBkaXN0YW5jZVsgMCBdIDogc2l6ZTtcblx0YW5pbWF0aW9uMlsgcmVmWyAxIF0gXSA9IHNob3cgPyBkaXN0YW5jZVsgMSBdIDogMDtcblxuXHQvLyBBbmltYXRlXG5cdHdyYXBwZXJcblx0XHQuYW5pbWF0ZSggYW5pbWF0aW9uMSwgZHVyYXRpb24sIG8uZWFzaW5nIClcblx0XHQuYW5pbWF0ZSggYW5pbWF0aW9uMiwgZHVyYXRpb24sIG8uZWFzaW5nLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaGlkZSApIHtcblx0XHRcdFx0ZWwuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fSk7XG5cbn07XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC5oaWdobGlnaHQgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblx0dmFyIGVsZW0gPSAkKCB0aGlzICksXG5cdFx0cHJvcHMgPSBbIFwiYmFja2dyb3VuZEltYWdlXCIsIFwiYmFja2dyb3VuZENvbG9yXCIsIFwib3BhY2l0eVwiIF0sXG5cdFx0bW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbGVtLCBvLm1vZGUgfHwgXCJzaG93XCIgKSxcblx0XHRhbmltYXRpb24gPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGVsZW0uY3NzKCBcImJhY2tncm91bmRDb2xvclwiIClcblx0XHR9O1xuXG5cdGlmIChtb2RlID09PSBcImhpZGVcIikge1xuXHRcdGFuaW1hdGlvbi5vcGFjaXR5ID0gMDtcblx0fVxuXG5cdCQuZWZmZWN0cy5zYXZlKCBlbGVtLCBwcm9wcyApO1xuXG5cdGVsZW1cblx0XHQuc2hvdygpXG5cdFx0LmNzcyh7XG5cdFx0XHRiYWNrZ3JvdW5kSW1hZ2U6IFwibm9uZVwiLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvLmNvbG9yIHx8IFwiI2ZmZmY5OVwiXG5cdFx0fSlcblx0XHQuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0XHRkdXJhdGlvbjogby5kdXJhdGlvbixcblx0XHRcdGVhc2luZzogby5lYXNpbmcsXG5cdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbW9kZSA9PT0gXCJoaWRlXCIgKSB7XG5cdFx0XHRcdFx0ZWxlbS5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsZW0sIHByb3BzICk7XG5cdFx0XHRcdGRvbmUoKTtcblx0XHRcdH1cblx0XHR9KTtcbn07XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC5wdWxzYXRlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cdHZhciBlbGVtID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWxlbSwgby5tb2RlIHx8IFwic2hvd1wiICksXG5cdFx0c2hvdyA9IG1vZGUgPT09IFwic2hvd1wiLFxuXHRcdGhpZGUgPSBtb2RlID09PSBcImhpZGVcIixcblx0XHRzaG93aGlkZSA9ICggc2hvdyB8fCBtb2RlID09PSBcImhpZGVcIiApLFxuXG5cdFx0Ly8gc2hvd2luZyBvciBoaWRpbmcgbGVhdmVzIG9mIHRoZSBcImxhc3RcIiBhbmltYXRpb25cblx0XHRhbmltcyA9ICggKCBvLnRpbWVzIHx8IDUgKSAqIDIgKSArICggc2hvd2hpZGUgPyAxIDogMCApLFxuXHRcdGR1cmF0aW9uID0gby5kdXJhdGlvbiAvIGFuaW1zLFxuXHRcdGFuaW1hdGVUbyA9IDAsXG5cdFx0cXVldWUgPSBlbGVtLnF1ZXVlKCksXG5cdFx0cXVldWVsZW4gPSBxdWV1ZS5sZW5ndGgsXG5cdFx0aTtcblxuXHRpZiAoIHNob3cgfHwgIWVsZW0uaXMoXCI6dmlzaWJsZVwiKSkge1xuXHRcdGVsZW0uY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKTtcblx0XHRhbmltYXRlVG8gPSAxO1xuXHR9XG5cblx0Ly8gYW5pbXMgLSAxIG9wYWNpdHkgXCJ0b2dnbGVzXCJcblx0Zm9yICggaSA9IDE7IGkgPCBhbmltczsgaSsrICkge1xuXHRcdGVsZW0uYW5pbWF0ZSh7XG5cdFx0XHRvcGFjaXR5OiBhbmltYXRlVG9cblx0XHR9LCBkdXJhdGlvbiwgby5lYXNpbmcgKTtcblx0XHRhbmltYXRlVG8gPSAxIC0gYW5pbWF0ZVRvO1xuXHR9XG5cblx0ZWxlbS5hbmltYXRlKHtcblx0XHRvcGFjaXR5OiBhbmltYXRlVG9cblx0fSwgZHVyYXRpb24sIG8uZWFzaW5nKTtcblxuXHRlbGVtLnF1ZXVlKGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaGlkZSApIHtcblx0XHRcdGVsZW0uaGlkZSgpO1xuXHRcdH1cblx0XHRkb25lKCk7XG5cdH0pO1xuXG5cdC8vIFdlIGp1c3QgcXVldWVkIHVwIFwiYW5pbXNcIiBhbmltYXRpb25zLCB3ZSBuZWVkIHRvIHB1dCB0aGVtIG5leHQgaW4gdGhlIHF1ZXVlXG5cdGlmICggcXVldWVsZW4gPiAxICkge1xuXHRcdHF1ZXVlLnNwbGljZS5hcHBseSggcXVldWUsXG5cdFx0XHRbIDEsIDAgXS5jb25jYXQoIHF1ZXVlLnNwbGljZSggcXVldWVsZW4sIGFuaW1zICsgMSApICkgKTtcblx0fVxuXHRlbGVtLmRlcXVldWUoKTtcbn07XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC5wdWZmID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cdHZhciBlbGVtID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWxlbSwgby5tb2RlIHx8IFwiaGlkZVwiICksXG5cdFx0aGlkZSA9IG1vZGUgPT09IFwiaGlkZVwiLFxuXHRcdHBlcmNlbnQgPSBwYXJzZUludCggby5wZXJjZW50LCAxMCApIHx8IDE1MCxcblx0XHRmYWN0b3IgPSBwZXJjZW50IC8gMTAwLFxuXHRcdG9yaWdpbmFsID0ge1xuXHRcdFx0aGVpZ2h0OiBlbGVtLmhlaWdodCgpLFxuXHRcdFx0d2lkdGg6IGVsZW0ud2lkdGgoKSxcblx0XHRcdG91dGVySGVpZ2h0OiBlbGVtLm91dGVySGVpZ2h0KCksXG5cdFx0XHRvdXRlcldpZHRoOiBlbGVtLm91dGVyV2lkdGgoKVxuXHRcdH07XG5cblx0JC5leHRlbmQoIG8sIHtcblx0XHRlZmZlY3Q6IFwic2NhbGVcIixcblx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0ZmFkZTogdHJ1ZSxcblx0XHRtb2RlOiBtb2RlLFxuXHRcdGNvbXBsZXRlOiBkb25lLFxuXHRcdHBlcmNlbnQ6IGhpZGUgPyBwZXJjZW50IDogMTAwLFxuXHRcdGZyb206IGhpZGUgP1xuXHRcdFx0b3JpZ2luYWwgOlxuXHRcdFx0e1xuXHRcdFx0XHRoZWlnaHQ6IG9yaWdpbmFsLmhlaWdodCAqIGZhY3Rvcixcblx0XHRcdFx0d2lkdGg6IG9yaWdpbmFsLndpZHRoICogZmFjdG9yLFxuXHRcdFx0XHRvdXRlckhlaWdodDogb3JpZ2luYWwub3V0ZXJIZWlnaHQgKiBmYWN0b3IsXG5cdFx0XHRcdG91dGVyV2lkdGg6IG9yaWdpbmFsLm91dGVyV2lkdGggKiBmYWN0b3Jcblx0XHRcdH1cblx0fSk7XG5cblx0ZWxlbS5lZmZlY3QoIG8gKTtcbn07XG5cbiQuZWZmZWN0cy5lZmZlY3Quc2NhbGUgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblxuXHQvLyBDcmVhdGUgZWxlbWVudFxuXHR2YXIgZWwgPSAkKCB0aGlzICksXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgbyApLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcImVmZmVjdFwiICksXG5cdFx0cGVyY2VudCA9IHBhcnNlSW50KCBvLnBlcmNlbnQsIDEwICkgfHxcblx0XHRcdCggcGFyc2VJbnQoIG8ucGVyY2VudCwgMTAgKSA9PT0gMCA/IDAgOiAoIG1vZGUgPT09IFwiaGlkZVwiID8gMCA6IDEwMCApICksXG5cdFx0ZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgXCJib3RoXCIsXG5cdFx0b3JpZ2luID0gby5vcmlnaW4sXG5cdFx0b3JpZ2luYWwgPSB7XG5cdFx0XHRoZWlnaHQ6IGVsLmhlaWdodCgpLFxuXHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRvdXRlckhlaWdodDogZWwub3V0ZXJIZWlnaHQoKSxcblx0XHRcdG91dGVyV2lkdGg6IGVsLm91dGVyV2lkdGgoKVxuXHRcdH0sXG5cdFx0ZmFjdG9yID0ge1xuXHRcdFx0eTogZGlyZWN0aW9uICE9PSBcImhvcml6b250YWxcIiA/IChwZXJjZW50IC8gMTAwKSA6IDEsXG5cdFx0XHR4OiBkaXJlY3Rpb24gIT09IFwidmVydGljYWxcIiA/IChwZXJjZW50IC8gMTAwKSA6IDFcblx0XHR9O1xuXG5cdC8vIFdlIGFyZSBnb2luZyB0byBwYXNzIHRoaXMgZWZmZWN0IHRvIHRoZSBzaXplIGVmZmVjdDpcblx0b3B0aW9ucy5lZmZlY3QgPSBcInNpemVcIjtcblx0b3B0aW9ucy5xdWV1ZSA9IGZhbHNlO1xuXHRvcHRpb25zLmNvbXBsZXRlID0gZG9uZTtcblxuXHQvLyBTZXQgZGVmYXVsdCBvcmlnaW4gYW5kIHJlc3RvcmUgZm9yIHNob3cvaGlkZVxuXHRpZiAoIG1vZGUgIT09IFwiZWZmZWN0XCIgKSB7XG5cdFx0b3B0aW9ucy5vcmlnaW4gPSBvcmlnaW4gfHwgW1wibWlkZGxlXCIsXCJjZW50ZXJcIl07XG5cdFx0b3B0aW9ucy5yZXN0b3JlID0gdHJ1ZTtcblx0fVxuXG5cdG9wdGlvbnMuZnJvbSA9IG8uZnJvbSB8fCAoIG1vZGUgPT09IFwic2hvd1wiID8ge1xuXHRcdGhlaWdodDogMCxcblx0XHR3aWR0aDogMCxcblx0XHRvdXRlckhlaWdodDogMCxcblx0XHRvdXRlcldpZHRoOiAwXG5cdH0gOiBvcmlnaW5hbCApO1xuXHRvcHRpb25zLnRvID0ge1xuXHRcdGhlaWdodDogb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLnksXG5cdFx0d2lkdGg6IG9yaWdpbmFsLndpZHRoICogZmFjdG9yLngsXG5cdFx0b3V0ZXJIZWlnaHQ6IG9yaWdpbmFsLm91dGVySGVpZ2h0ICogZmFjdG9yLnksXG5cdFx0b3V0ZXJXaWR0aDogb3JpZ2luYWwub3V0ZXJXaWR0aCAqIGZhY3Rvci54XG5cdH07XG5cblx0Ly8gRmFkZSBvcHRpb24gdG8gc3VwcG9ydCBwdWZmXG5cdGlmICggb3B0aW9ucy5mYWRlICkge1xuXHRcdGlmICggbW9kZSA9PT0gXCJzaG93XCIgKSB7XG5cdFx0XHRvcHRpb25zLmZyb20ub3BhY2l0eSA9IDA7XG5cdFx0XHRvcHRpb25zLnRvLm9wYWNpdHkgPSAxO1xuXHRcdH1cblx0XHRpZiAoIG1vZGUgPT09IFwiaGlkZVwiICkge1xuXHRcdFx0b3B0aW9ucy5mcm9tLm9wYWNpdHkgPSAxO1xuXHRcdFx0b3B0aW9ucy50by5vcGFjaXR5ID0gMDtcblx0XHR9XG5cdH1cblxuXHQvLyBBbmltYXRlXG5cdGVsLmVmZmVjdCggb3B0aW9ucyApO1xuXG59O1xuXG4kLmVmZmVjdHMuZWZmZWN0LnNpemUgPSBmdW5jdGlvbiggbywgZG9uZSApIHtcblxuXHQvLyBDcmVhdGUgZWxlbWVudFxuXHR2YXIgb3JpZ2luYWwsIGJhc2VsaW5lLCBmYWN0b3IsXG5cdFx0ZWwgPSAkKCB0aGlzICksXG5cdFx0cHJvcHMwID0gWyBcInBvc2l0aW9uXCIsIFwidG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJvdmVyZmxvd1wiLCBcIm9wYWNpdHlcIiBdLFxuXG5cdFx0Ly8gQWx3YXlzIHJlc3RvcmVcblx0XHRwcm9wczEgPSBbIFwicG9zaXRpb25cIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJvdmVyZmxvd1wiLCBcIm9wYWNpdHlcIiBdLFxuXG5cdFx0Ly8gQ29weSBmb3IgY2hpbGRyZW5cblx0XHRwcm9wczIgPSBbIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJvdmVyZmxvd1wiIF0sXG5cdFx0Y1Byb3BzID0gWyBcImZvbnRTaXplXCIgXSxcblx0XHR2UHJvcHMgPSBbIFwiYm9yZGVyVG9wV2lkdGhcIiwgXCJib3JkZXJCb3R0b21XaWR0aFwiLCBcInBhZGRpbmdUb3BcIiwgXCJwYWRkaW5nQm90dG9tXCIgXSxcblx0XHRoUHJvcHMgPSBbIFwiYm9yZGVyTGVmdFdpZHRoXCIsIFwiYm9yZGVyUmlnaHRXaWR0aFwiLCBcInBhZGRpbmdMZWZ0XCIsIFwicGFkZGluZ1JpZ2h0XCIgXSxcblxuXHRcdC8vIFNldCBvcHRpb25zXG5cdFx0bW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8IFwiZWZmZWN0XCIgKSxcblx0XHRyZXN0b3JlID0gby5yZXN0b3JlIHx8IG1vZGUgIT09IFwiZWZmZWN0XCIsXG5cdFx0c2NhbGUgPSBvLnNjYWxlIHx8IFwiYm90aFwiLFxuXHRcdG9yaWdpbiA9IG8ub3JpZ2luIHx8IFsgXCJtaWRkbGVcIiwgXCJjZW50ZXJcIiBdLFxuXHRcdHBvc2l0aW9uID0gZWwuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRwcm9wcyA9IHJlc3RvcmUgPyBwcm9wczAgOiBwcm9wczEsXG5cdFx0emVybyA9IHtcblx0XHRcdGhlaWdodDogMCxcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0b3V0ZXJIZWlnaHQ6IDAsXG5cdFx0XHRvdXRlcldpZHRoOiAwXG5cdFx0fTtcblxuXHRpZiAoIG1vZGUgPT09IFwic2hvd1wiICkge1xuXHRcdGVsLnNob3coKTtcblx0fVxuXHRvcmlnaW5hbCA9IHtcblx0XHRoZWlnaHQ6IGVsLmhlaWdodCgpLFxuXHRcdHdpZHRoOiBlbC53aWR0aCgpLFxuXHRcdG91dGVySGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpLFxuXHRcdG91dGVyV2lkdGg6IGVsLm91dGVyV2lkdGgoKVxuXHR9O1xuXG5cdGlmICggby5tb2RlID09PSBcInRvZ2dsZVwiICYmIG1vZGUgPT09IFwic2hvd1wiICkge1xuXHRcdGVsLmZyb20gPSBvLnRvIHx8IHplcm87XG5cdFx0ZWwudG8gPSBvLmZyb20gfHwgb3JpZ2luYWw7XG5cdH0gZWxzZSB7XG5cdFx0ZWwuZnJvbSA9IG8uZnJvbSB8fCAoIG1vZGUgPT09IFwic2hvd1wiID8gemVybyA6IG9yaWdpbmFsICk7XG5cdFx0ZWwudG8gPSBvLnRvIHx8ICggbW9kZSA9PT0gXCJoaWRlXCIgPyB6ZXJvIDogb3JpZ2luYWwgKTtcblx0fVxuXG5cdC8vIFNldCBzY2FsaW5nIGZhY3RvclxuXHRmYWN0b3IgPSB7XG5cdFx0ZnJvbToge1xuXHRcdFx0eTogZWwuZnJvbS5oZWlnaHQgLyBvcmlnaW5hbC5oZWlnaHQsXG5cdFx0XHR4OiBlbC5mcm9tLndpZHRoIC8gb3JpZ2luYWwud2lkdGhcblx0XHR9LFxuXHRcdHRvOiB7XG5cdFx0XHR5OiBlbC50by5oZWlnaHQgLyBvcmlnaW5hbC5oZWlnaHQsXG5cdFx0XHR4OiBlbC50by53aWR0aCAvIG9yaWdpbmFsLndpZHRoXG5cdFx0fVxuXHR9O1xuXG5cdC8vIFNjYWxlIHRoZSBjc3MgYm94XG5cdGlmICggc2NhbGUgPT09IFwiYm94XCIgfHwgc2NhbGUgPT09IFwiYm90aFwiICkge1xuXG5cdFx0Ly8gVmVydGljYWwgcHJvcHMgc2NhbGluZ1xuXHRcdGlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLmNvbmNhdCggdlByb3BzICk7XG5cdFx0XHRlbC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCB2UHJvcHMsIGZhY3Rvci5mcm9tLnksIGVsLmZyb20gKTtcblx0XHRcdGVsLnRvID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCB2UHJvcHMsIGZhY3Rvci50by55LCBlbC50byApO1xuXHRcdH1cblxuXHRcdC8vIEhvcml6b250YWwgcHJvcHMgc2NhbGluZ1xuXHRcdGlmICggZmFjdG9yLmZyb20ueCAhPT0gZmFjdG9yLnRvLnggKSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLmNvbmNhdCggaFByb3BzICk7XG5cdFx0XHRlbC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBoUHJvcHMsIGZhY3Rvci5mcm9tLngsIGVsLmZyb20gKTtcblx0XHRcdGVsLnRvID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBoUHJvcHMsIGZhY3Rvci50by54LCBlbC50byApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFNjYWxlIHRoZSBjb250ZW50XG5cdGlmICggc2NhbGUgPT09IFwiY29udGVudFwiIHx8IHNjYWxlID09PSBcImJvdGhcIiApIHtcblxuXHRcdC8vIFZlcnRpY2FsIHByb3BzIHNjYWxpbmdcblx0XHRpZiAoIGZhY3Rvci5mcm9tLnkgIT09IGZhY3Rvci50by55ICkge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5jb25jYXQoIGNQcm9wcyApLmNvbmNhdCggcHJvcHMyICk7XG5cdFx0XHRlbC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBjUHJvcHMsIGZhY3Rvci5mcm9tLnksIGVsLmZyb20gKTtcblx0XHRcdGVsLnRvID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBjUHJvcHMsIGZhY3Rvci50by55LCBlbC50byApO1xuXHRcdH1cblx0fVxuXG5cdCQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTtcblx0ZWwuc2hvdygpO1xuXHQkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKTtcblx0ZWwuY3NzKCBcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIgKS5jc3MoIGVsLmZyb20gKTtcblxuXHQvLyBBZGp1c3Rcblx0aWYgKG9yaWdpbikgeyAvLyBDYWxjdWxhdGUgYmFzZWxpbmUgc2hpZnRzXG5cdFx0YmFzZWxpbmUgPSAkLmVmZmVjdHMuZ2V0QmFzZWxpbmUoIG9yaWdpbiwgb3JpZ2luYWwgKTtcblx0XHRlbC5mcm9tLnRvcCA9ICggb3JpZ2luYWwub3V0ZXJIZWlnaHQgLSBlbC5vdXRlckhlaWdodCgpICkgKiBiYXNlbGluZS55O1xuXHRcdGVsLmZyb20ubGVmdCA9ICggb3JpZ2luYWwub3V0ZXJXaWR0aCAtIGVsLm91dGVyV2lkdGgoKSApICogYmFzZWxpbmUueDtcblx0XHRlbC50by50b3AgPSAoIG9yaWdpbmFsLm91dGVySGVpZ2h0IC0gZWwudG8ub3V0ZXJIZWlnaHQgKSAqIGJhc2VsaW5lLnk7XG5cdFx0ZWwudG8ubGVmdCA9ICggb3JpZ2luYWwub3V0ZXJXaWR0aCAtIGVsLnRvLm91dGVyV2lkdGggKSAqIGJhc2VsaW5lLng7XG5cdH1cblx0ZWwuY3NzKCBlbC5mcm9tICk7IC8vIHNldCB0b3AgJiBsZWZ0XG5cblx0Ly8gQW5pbWF0ZVxuXHRpZiAoIHNjYWxlID09PSBcImNvbnRlbnRcIiB8fCBzY2FsZSA9PT0gXCJib3RoXCIgKSB7IC8vIFNjYWxlIHRoZSBjaGlsZHJlblxuXG5cdFx0Ly8gQWRkIG1hcmdpbnMvZm9udC1zaXplXG5cdFx0dlByb3BzID0gdlByb3BzLmNvbmNhdChbIFwibWFyZ2luVG9wXCIsIFwibWFyZ2luQm90dG9tXCIgXSkuY29uY2F0KGNQcm9wcyk7XG5cdFx0aFByb3BzID0gaFByb3BzLmNvbmNhdChbIFwibWFyZ2luTGVmdFwiLCBcIm1hcmdpblJpZ2h0XCIgXSk7XG5cdFx0cHJvcHMyID0gcHJvcHMwLmNvbmNhdCh2UHJvcHMpLmNvbmNhdChoUHJvcHMpO1xuXG5cdFx0ZWwuZmluZCggXCIqW3dpZHRoXVwiICkuZWFjaCggZnVuY3Rpb24oKXtcblx0XHRcdHZhciBjaGlsZCA9ICQoIHRoaXMgKSxcblx0XHRcdFx0Y19vcmlnaW5hbCA9IHtcblx0XHRcdFx0XHRoZWlnaHQ6IGNoaWxkLmhlaWdodCgpLFxuXHRcdFx0XHRcdHdpZHRoOiBjaGlsZC53aWR0aCgpLFxuXHRcdFx0XHRcdG91dGVySGVpZ2h0OiBjaGlsZC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdG91dGVyV2lkdGg6IGNoaWxkLm91dGVyV2lkdGgoKVxuXHRcdFx0XHR9O1xuXHRcdFx0aWYgKHJlc3RvcmUpIHtcblx0XHRcdFx0JC5lZmZlY3RzLnNhdmUoY2hpbGQsIHByb3BzMik7XG5cdFx0XHR9XG5cblx0XHRcdGNoaWxkLmZyb20gPSB7XG5cdFx0XHRcdGhlaWdodDogY19vcmlnaW5hbC5oZWlnaHQgKiBmYWN0b3IuZnJvbS55LFxuXHRcdFx0XHR3aWR0aDogY19vcmlnaW5hbC53aWR0aCAqIGZhY3Rvci5mcm9tLngsXG5cdFx0XHRcdG91dGVySGVpZ2h0OiBjX29yaWdpbmFsLm91dGVySGVpZ2h0ICogZmFjdG9yLmZyb20ueSxcblx0XHRcdFx0b3V0ZXJXaWR0aDogY19vcmlnaW5hbC5vdXRlcldpZHRoICogZmFjdG9yLmZyb20ueFxuXHRcdFx0fTtcblx0XHRcdGNoaWxkLnRvID0ge1xuXHRcdFx0XHRoZWlnaHQ6IGNfb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLnRvLnksXG5cdFx0XHRcdHdpZHRoOiBjX29yaWdpbmFsLndpZHRoICogZmFjdG9yLnRvLngsXG5cdFx0XHRcdG91dGVySGVpZ2h0OiBjX29yaWdpbmFsLmhlaWdodCAqIGZhY3Rvci50by55LFxuXHRcdFx0XHRvdXRlcldpZHRoOiBjX29yaWdpbmFsLndpZHRoICogZmFjdG9yLnRvLnhcblx0XHRcdH07XG5cblx0XHRcdC8vIFZlcnRpY2FsIHByb3BzIHNjYWxpbmdcblx0XHRcdGlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7XG5cdFx0XHRcdGNoaWxkLmZyb20gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIHZQcm9wcywgZmFjdG9yLmZyb20ueSwgY2hpbGQuZnJvbSApO1xuXHRcdFx0XHRjaGlsZC50byA9ICQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKCBjaGlsZCwgdlByb3BzLCBmYWN0b3IudG8ueSwgY2hpbGQudG8gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9yaXpvbnRhbCBwcm9wcyBzY2FsaW5nXG5cdFx0XHRpZiAoIGZhY3Rvci5mcm9tLnggIT09IGZhY3Rvci50by54ICkge1xuXHRcdFx0XHRjaGlsZC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGNoaWxkLCBoUHJvcHMsIGZhY3Rvci5mcm9tLngsIGNoaWxkLmZyb20gKTtcblx0XHRcdFx0Y2hpbGQudG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIGhQcm9wcywgZmFjdG9yLnRvLngsIGNoaWxkLnRvICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFuaW1hdGUgY2hpbGRyZW5cblx0XHRcdGNoaWxkLmNzcyggY2hpbGQuZnJvbSApO1xuXHRcdFx0Y2hpbGQuYW5pbWF0ZSggY2hpbGQudG8sIG8uZHVyYXRpb24sIG8uZWFzaW5nLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIGNoaWxkcmVuXG5cdFx0XHRcdGlmICggcmVzdG9yZSApIHtcblx0XHRcdFx0XHQkLmVmZmVjdHMucmVzdG9yZSggY2hpbGQsIHByb3BzMiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEFuaW1hdGVcblx0ZWwuYW5pbWF0ZSggZWwudG8sIHtcblx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0ZHVyYXRpb246IG8uZHVyYXRpb24sXG5cdFx0ZWFzaW5nOiBvLmVhc2luZyxcblx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGVsLnRvLm9wYWNpdHkgPT09IDAgKSB7XG5cdFx0XHRcdGVsLmNzcyggXCJvcGFjaXR5XCIsIGVsLmZyb20ub3BhY2l0eSApO1xuXHRcdFx0fVxuXHRcdFx0aWYoIG1vZGUgPT09IFwiaGlkZVwiICkge1xuXHRcdFx0XHRlbC5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0XHQkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7XG5cdFx0XHRpZiAoICFyZXN0b3JlICkge1xuXG5cdFx0XHRcdC8vIHdlIG5lZWQgdG8gY2FsY3VsYXRlIG91ciBuZXcgcG9zaXRpb25pbmcgYmFzZWQgb24gdGhlIHNjYWxpbmdcblx0XHRcdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0XHRlbC5jc3Moe1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IFwicmVsYXRpdmVcIixcblx0XHRcdFx0XHRcdHRvcDogZWwudG8udG9wLFxuXHRcdFx0XHRcdFx0bGVmdDogZWwudG8ubGVmdFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQuZWFjaChbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpZHgsIHBvcyApIHtcblx0XHRcdFx0XHRcdGVsLmNzcyggcG9zLCBmdW5jdGlvbiggXywgc3RyICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsID0gcGFyc2VJbnQoIHN0ciwgMTAgKSxcblx0XHRcdFx0XHRcdFx0XHR0b1JlZiA9IGlkeCA/IGVsLnRvLmxlZnQgOiBlbC50by50b3A7XG5cblx0XHRcdFx0XHRcdFx0Ly8gaWYgb3JpZ2luYWwgd2FzIFwiYXV0b1wiLCByZWNhbGN1bGF0ZSB0aGUgbmV3IHZhbHVlIGZyb20gd3JhcHBlclxuXHRcdFx0XHRcdFx0XHRpZiAoIHN0ciA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRvUmVmICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbCArIHRvUmVmICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fVxuXHR9KTtcblxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLmVmZmVjdHMuZWZmZWN0LnNoYWtlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdHByb3BzID0gWyBcInBvc2l0aW9uXCIsIFwidG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcImVmZmVjdFwiICksXG5cdFx0ZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgXCJsZWZ0XCIsXG5cdFx0ZGlzdGFuY2UgPSBvLmRpc3RhbmNlIHx8IDIwLFxuXHRcdHRpbWVzID0gby50aW1lcyB8fCAzLFxuXHRcdGFuaW1zID0gdGltZXMgKiAyICsgMSxcblx0XHRzcGVlZCA9IE1hdGgucm91bmQoby5kdXJhdGlvbi9hbmltcyksXG5cdFx0cmVmID0gKGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJkb3duXCIpID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuXHRcdHBvc2l0aXZlTW90aW9uID0gKGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIpLFxuXHRcdGFuaW1hdGlvbiA9IHt9LFxuXHRcdGFuaW1hdGlvbjEgPSB7fSxcblx0XHRhbmltYXRpb24yID0ge30sXG5cdFx0aSxcblxuXHRcdC8vIHdlIHdpbGwgbmVlZCB0byByZS1hc3NlbWJsZSB0aGUgcXVldWUgdG8gc3RhY2sgb3VyIGFuaW1hdGlvbnMgaW4gcGxhY2Vcblx0XHRxdWV1ZSA9IGVsLnF1ZXVlKCksXG5cdFx0cXVldWVsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cblx0JC5lZmZlY3RzLnNhdmUoIGVsLCBwcm9wcyApO1xuXHRlbC5zaG93KCk7XG5cdCQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApO1xuXG5cdC8vIEFuaW1hdGlvblxuXHRhbmltYXRpb25bIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA/IFwiLT1cIiA6IFwiKz1cIiApICsgZGlzdGFuY2U7XG5cdGFuaW1hdGlvbjFbIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA/IFwiKz1cIiA6IFwiLT1cIiApICsgZGlzdGFuY2UgKiAyO1xuXHRhbmltYXRpb24yWyByZWYgXSA9ICggcG9zaXRpdmVNb3Rpb24gPyBcIi09XCIgOiBcIis9XCIgKSArIGRpc3RhbmNlICogMjtcblxuXHQvLyBBbmltYXRlXG5cdGVsLmFuaW1hdGUoIGFuaW1hdGlvbiwgc3BlZWQsIG8uZWFzaW5nICk7XG5cblx0Ly8gU2hha2VzXG5cdGZvciAoIGkgPSAxOyBpIDwgdGltZXM7IGkrKyApIHtcblx0XHRlbC5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgby5lYXNpbmcgKS5hbmltYXRlKCBhbmltYXRpb24yLCBzcGVlZCwgby5lYXNpbmcgKTtcblx0fVxuXHRlbFxuXHRcdC5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgby5lYXNpbmcgKVxuXHRcdC5hbmltYXRlKCBhbmltYXRpb24sIHNwZWVkIC8gMiwgby5lYXNpbmcgKVxuXHRcdC5xdWV1ZShmdW5jdGlvbigpIHtcblx0XHRcdGlmICggbW9kZSA9PT0gXCJoaWRlXCIgKSB7XG5cdFx0XHRcdGVsLmhpZGUoKTtcblx0XHRcdH1cblx0XHRcdCQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTtcblx0XHRcdCQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApO1xuXHRcdFx0ZG9uZSgpO1xuXHRcdH0pO1xuXG5cdC8vIGluamVjdCBhbGwgdGhlIGFuaW1hdGlvbnMgd2UganVzdCBxdWV1ZWQgdG8gYmUgZmlyc3QgaW4gbGluZSAoYWZ0ZXIgXCJpbnByb2dyZXNzXCIpXG5cdGlmICggcXVldWVsZW4gPiAxKSB7XG5cdFx0cXVldWUuc3BsaWNlLmFwcGx5KCBxdWV1ZSxcblx0XHRcdFsgMSwgMCBdLmNvbmNhdCggcXVldWUuc3BsaWNlKCBxdWV1ZWxlbiwgYW5pbXMgKyAxICkgKSApO1xuXHR9XG5cdGVsLmRlcXVldWUoKTtcblxufTtcblxufSkoalF1ZXJ5KTtcbihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG4kLmVmZmVjdHMuZWZmZWN0LnNsaWRlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7XG5cblx0Ly8gQ3JlYXRlIGVsZW1lbnRcblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdHByb3BzID0gWyBcInBvc2l0aW9uXCIsIFwidG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiBdLFxuXHRcdG1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCBcInNob3dcIiApLFxuXHRcdHNob3cgPSBtb2RlID09PSBcInNob3dcIixcblx0XHRkaXJlY3Rpb24gPSBvLmRpcmVjdGlvbiB8fCBcImxlZnRcIixcblx0XHRyZWYgPSAoZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImRvd25cIikgPyBcInRvcFwiIDogXCJsZWZ0XCIsXG5cdFx0cG9zaXRpdmVNb3Rpb24gPSAoZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImxlZnRcIiksXG5cdFx0ZGlzdGFuY2UsXG5cdFx0YW5pbWF0aW9uID0ge307XG5cblx0Ly8gQWRqdXN0XG5cdCQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTtcblx0ZWwuc2hvdygpO1xuXHRkaXN0YW5jZSA9IG8uZGlzdGFuY2UgfHwgZWxbIHJlZiA9PT0gXCJ0b3BcIiA/IFwib3V0ZXJIZWlnaHRcIiA6IFwib3V0ZXJXaWR0aFwiIF0oIHRydWUgKTtcblxuXHQkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3Moe1xuXHRcdG92ZXJmbG93OiBcImhpZGRlblwiXG5cdH0pO1xuXG5cdGlmICggc2hvdyApIHtcblx0XHRlbC5jc3MoIHJlZiwgcG9zaXRpdmVNb3Rpb24gPyAoaXNOYU4oZGlzdGFuY2UpID8gXCItXCIgKyBkaXN0YW5jZSA6IC1kaXN0YW5jZSkgOiBkaXN0YW5jZSApO1xuXHR9XG5cblx0Ly8gQW5pbWF0aW9uXG5cdGFuaW1hdGlvblsgcmVmIF0gPSAoIHNob3cgP1xuXHRcdCggcG9zaXRpdmVNb3Rpb24gPyBcIis9XCIgOiBcIi09XCIpIDpcblx0XHQoIHBvc2l0aXZlTW90aW9uID8gXCItPVwiIDogXCIrPVwiKSkgK1xuXHRcdGRpc3RhbmNlO1xuXG5cdC8vIEFuaW1hdGVcblx0ZWwuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0cXVldWU6IGZhbHNlLFxuXHRcdGR1cmF0aW9uOiBvLmR1cmF0aW9uLFxuXHRcdGVhc2luZzogby5lYXNpbmcsXG5cdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBtb2RlID09PSBcImhpZGVcIiApIHtcblx0XHRcdFx0ZWwuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0JC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApO1xuXHRcdFx0JC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblxuJC5lZmZlY3RzLmVmZmVjdC50cmFuc2ZlciA9IGZ1bmN0aW9uKCBvLCBkb25lICkge1xuXHR2YXIgZWxlbSA9ICQoIHRoaXMgKSxcblx0XHR0YXJnZXQgPSAkKCBvLnRvICksXG5cdFx0dGFyZ2V0Rml4ZWQgPSB0YXJnZXQuY3NzKCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiLFxuXHRcdGJvZHkgPSAkKFwiYm9keVwiKSxcblx0XHRmaXhUb3AgPSB0YXJnZXRGaXhlZCA/IGJvZHkuc2Nyb2xsVG9wKCkgOiAwLFxuXHRcdGZpeExlZnQgPSB0YXJnZXRGaXhlZCA/IGJvZHkuc2Nyb2xsTGVmdCgpIDogMCxcblx0XHRlbmRQb3NpdGlvbiA9IHRhcmdldC5vZmZzZXQoKSxcblx0XHRhbmltYXRpb24gPSB7XG5cdFx0XHR0b3A6IGVuZFBvc2l0aW9uLnRvcCAtIGZpeFRvcCAsXG5cdFx0XHRsZWZ0OiBlbmRQb3NpdGlvbi5sZWZ0IC0gZml4TGVmdCAsXG5cdFx0XHRoZWlnaHQ6IHRhcmdldC5pbm5lckhlaWdodCgpLFxuXHRcdFx0d2lkdGg6IHRhcmdldC5pbm5lcldpZHRoKClcblx0XHR9LFxuXHRcdHN0YXJ0UG9zaXRpb24gPSBlbGVtLm9mZnNldCgpLFxuXHRcdHRyYW5zZmVyID0gJCggXCI8ZGl2IGNsYXNzPSd1aS1lZmZlY3RzLXRyYW5zZmVyJz48L2Rpdj5cIiApXG5cdFx0XHQuYXBwZW5kVG8oIGRvY3VtZW50LmJvZHkgKVxuXHRcdFx0LmFkZENsYXNzKCBvLmNsYXNzTmFtZSApXG5cdFx0XHQuY3NzKHtcblx0XHRcdFx0dG9wOiBzdGFydFBvc2l0aW9uLnRvcCAtIGZpeFRvcCAsXG5cdFx0XHRcdGxlZnQ6IHN0YXJ0UG9zaXRpb24ubGVmdCAtIGZpeExlZnQgLFxuXHRcdFx0XHRoZWlnaHQ6IGVsZW0uaW5uZXJIZWlnaHQoKSxcblx0XHRcdFx0d2lkdGg6IGVsZW0uaW5uZXJXaWR0aCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogdGFyZ2V0Rml4ZWQgPyBcImZpeGVkXCIgOiBcImFic29sdXRlXCJcblx0XHRcdH0pXG5cdFx0XHQuYW5pbWF0ZSggYW5pbWF0aW9uLCBvLmR1cmF0aW9uLCBvLmVhc2luZywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZmVyLnJlbW92ZSgpO1xuXHRcdFx0XHRkb25lKCk7XG5cdFx0XHR9KTtcbn07XG5cbn0pKGpRdWVyeSk7XG4iXSwiZmlsZSI6Ii4vaHRtbC9qcy90aGlyZF9wYXJ0eS9qcXVlcnktdWktMS4xMC4xLmN1c3RvbS5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./html/js/third_party/jquery-ui-1.10.1.custom.js\n");

/***/ }),

/***/ "./html/js/third_party/jquery.tabSlideOut.v1.3.js":
/*!********************************************************!*\
  !*** ./html/js/third_party/jquery.tabSlideOut.v1.3.js ***!
  \********************************************************/
/***/ (() => {

eval("/*\n    tabSlideOUt v1.3\n    \n    By William Paoli: http://wpaoli.building58.com\n\n    To use you must have an image ready to go as your tab\n    Make sure to pass in at minimum the path to the image and its dimensions:\n    \n    example:\n    \n        $('.slide-out-div').tabSlideOut({\n                tabHandle: '.handle',                         //class of the element that will be your tab -doesnt have to be an anchor\n                pathToTabImage: 'images/contact_tab.gif',     //relative path to the image for the tab\n                imageHeight: '133px',                         //height of tab image\n                imageWidth: '44px',                           //width of tab image   \n        });\n\n    or you can leave out these options\n    and set the image properties using css\n    \n*/\n(function ($) {\n  $.fn.tabSlideOut = function (callerSettings) {\n    var settings = $.extend({\n      tabHandle: '.handle',\n      speed: 300,\n      action: 'click',\n      tabLocation: 'left',\n      topPos: '200px',\n      leftPos: '20px',\n      fixedPosition: false,\n      positioning: 'absolute',\n      pathToTabImage: null,\n      imageHeight: null,\n      imageWidth: null,\n      onLoadSlideOut: false\n    }, callerSettings || {});\n    settings.tabHandle = $(settings.tabHandle);\n    var obj = this;\n\n    if (settings.fixedPosition === true) {\n      settings.positioning = 'fixed';\n    } else {\n      settings.positioning = 'absolute';\n    } //ie6 doesn't do well with the fixed option\n\n\n    if (document.all && !window.opera && !window.XMLHttpRequest) {\n      settings.positioning = 'absolute';\n    } //set initial tabHandle css\n\n\n    if (settings.pathToTabImage != null) {\n      settings.tabHandle.css({\n        'background': 'url(' + settings.pathToTabImage + ') no-repeat',\n        'width': settings.imageWidth,\n        'height': settings.imageHeight\n      });\n    }\n\n    settings.tabHandle.css({\n      'display': 'block',\n      'textIndent': '-99999px',\n      'outline': 'none',\n      'position': 'absolute'\n    });\n    obj.css({\n      'line-height': '1',\n      'position': settings.positioning,\n      'display': 'block'\n    });\n    var properties = {\n      containerWidth: parseInt(obj.outerWidth(), 10) + 'px',\n      containerHeight: parseInt(obj.outerHeight(), 10) + 'px',\n      tabWidth: parseInt(settings.tabHandle.outerWidth(), 10) + 'px',\n      tabHeight: parseInt(settings.tabHandle.outerHeight(), 10) + 'px'\n    }; //set calculated css\n\n    if (settings.tabLocation === 'top' || settings.tabLocation === 'bottom') {\n      obj.css({\n        'left': settings.leftPos\n      });\n      settings.tabHandle.css({\n        'right': 0\n      });\n    }\n\n    if (settings.tabLocation === 'top') {\n      obj.css({\n        'top': '-' + properties.containerHeight\n      });\n      settings.tabHandle.css({\n        'bottom': '-' + properties.tabHeight\n      });\n    }\n\n    if (settings.tabLocation === 'bottom') {\n      obj.css({\n        'bottom': '-' + properties.containerHeight,\n        'position': 'fixed'\n      });\n      settings.tabHandle.css({\n        'top': '-' + properties.tabHeight\n      });\n    }\n\n    if (settings.tabLocation === 'left' || settings.tabLocation === 'right') {\n      obj.css({\n        'height': properties.containerHeight,\n        'top': settings.topPos\n      });\n      settings.tabHandle.css({\n        'top': 0\n      });\n    }\n\n    if (settings.tabLocation === 'left') {\n      obj.css({\n        'left': '-' + properties.containerWidth\n      });\n      settings.tabHandle.css({\n        'right': '-' + properties.tabWidth\n      });\n    }\n\n    if (settings.tabLocation === 'right') {\n      obj.css({\n        'right': '-' + properties.containerWidth\n      });\n      settings.tabHandle.css({\n        'left': '-' + properties.tabWidth\n      });\n      $('html').css('overflow-x', 'hidden');\n    } //functions for animation events\n\n\n    settings.tabHandle.click(function (event) {\n      event.preventDefault();\n    });\n\n    var slideIn = function slideIn() {\n      if (settings.tabLocation === 'top') {\n        obj.animate({\n          top: '-' + properties.containerHeight\n        }, settings.speed).removeClass('open');\n      } else if (settings.tabLocation === 'left') {\n        obj.animate({\n          left: '-' + properties.containerWidth\n        }, settings.speed).removeClass('open');\n      } else if (settings.tabLocation === 'right') {\n        obj.animate({\n          right: '-' + properties.containerWidth\n        }, settings.speed).removeClass('open');\n      } else if (settings.tabLocation === 'bottom') {\n        obj.animate({\n          bottom: '-' + properties.containerHeight\n        }, settings.speed).removeClass('open');\n      }\n    };\n\n    var slideOut = function slideOut() {\n      if (settings.tabLocation == 'top') {\n        obj.animate({\n          top: '-3px'\n        }, settings.speed).addClass('open');\n      } else if (settings.tabLocation == 'left') {\n        obj.animate({\n          left: '-3px'\n        }, settings.speed).addClass('open');\n      } else if (settings.tabLocation == 'right') {\n        obj.animate({\n          right: '-3px'\n        }, settings.speed).addClass('open');\n      } else if (settings.tabLocation == 'bottom') {\n        obj.animate({\n          bottom: '-3px'\n        }, settings.speed).addClass('open');\n      }\n    };\n\n    var clickScreenToClose = function clickScreenToClose() {\n      obj.click(function (event) {\n        event.stopPropagation();\n      });\n      $(document).click(function () {\n        slideIn();\n      });\n    };\n\n    var clickAction = function clickAction() {\n      settings.tabHandle.click(function (event) {\n        if (obj.hasClass('open')) {\n          slideIn();\n        } else {\n          slideOut();\n        }\n      });\n      clickScreenToClose();\n    };\n\n    var hoverAction = function hoverAction() {\n      obj.hover(function () {\n        slideOut();\n      }, function () {\n        slideIn();\n      });\n      settings.tabHandle.click(function (event) {\n        if (obj.hasClass('open')) {\n          slideIn();\n        }\n      });\n      clickScreenToClose();\n    };\n\n    var slideOutOnLoad = function slideOutOnLoad() {\n      slideIn();\n      setTimeout(slideOut, 500);\n    }; //choose which type of action to bind\n\n\n    if (settings.action === 'click') {\n      clickAction();\n    }\n\n    if (settings.action === 'hover') {\n      hoverAction();\n    }\n\n    if (settings.onLoadSlideOut) {\n      slideOutOnLoad();\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LnRhYlNsaWRlT3V0LnYxLjMuanM/NzcwMCJdLCJuYW1lcyI6WyIkIiwiZm4iLCJ0YWJTbGlkZU91dCIsImNhbGxlclNldHRpbmdzIiwic2V0dGluZ3MiLCJleHRlbmQiLCJ0YWJIYW5kbGUiLCJzcGVlZCIsImFjdGlvbiIsInRhYkxvY2F0aW9uIiwidG9wUG9zIiwibGVmdFBvcyIsImZpeGVkUG9zaXRpb24iLCJwb3NpdGlvbmluZyIsInBhdGhUb1RhYkltYWdlIiwiaW1hZ2VIZWlnaHQiLCJpbWFnZVdpZHRoIiwib25Mb2FkU2xpZGVPdXQiLCJvYmoiLCJkb2N1bWVudCIsImFsbCIsIndpbmRvdyIsIm9wZXJhIiwiWE1MSHR0cFJlcXVlc3QiLCJjc3MiLCJwcm9wZXJ0aWVzIiwiY29udGFpbmVyV2lkdGgiLCJwYXJzZUludCIsIm91dGVyV2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsInRhYldpZHRoIiwidGFiSGVpZ2h0IiwiY2xpY2siLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic2xpZGVJbiIsImFuaW1hdGUiLCJ0b3AiLCJyZW1vdmVDbGFzcyIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInNsaWRlT3V0IiwiYWRkQ2xhc3MiLCJjbGlja1NjcmVlblRvQ2xvc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJjbGlja0FjdGlvbiIsImhhc0NsYXNzIiwiaG92ZXJBY3Rpb24iLCJob3ZlciIsInNsaWRlT3V0T25Mb2FkIiwic2V0VGltZW91dCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsQ0FBQyxVQUFTQSxDQUFULEVBQVc7QUFDUkEsRUFBQUEsQ0FBQyxDQUFDQyxFQUFGLENBQUtDLFdBQUwsR0FBbUIsVUFBU0MsY0FBVCxFQUF5QjtBQUN4QyxRQUFJQyxRQUFRLEdBQUdKLENBQUMsQ0FBQ0ssTUFBRixDQUFTO0FBQ3BCQyxNQUFBQSxTQUFTLEVBQUUsU0FEUztBQUVwQkMsTUFBQUEsS0FBSyxFQUFFLEdBRmE7QUFHcEJDLE1BQUFBLE1BQU0sRUFBRSxPQUhZO0FBSXBCQyxNQUFBQSxXQUFXLEVBQUUsTUFKTztBQUtwQkMsTUFBQUEsTUFBTSxFQUFFLE9BTFk7QUFNcEJDLE1BQUFBLE9BQU8sRUFBRSxNQU5XO0FBT3BCQyxNQUFBQSxhQUFhLEVBQUUsS0FQSztBQVFwQkMsTUFBQUEsV0FBVyxFQUFFLFVBUk87QUFTcEJDLE1BQUFBLGNBQWMsRUFBRSxJQVRJO0FBVXBCQyxNQUFBQSxXQUFXLEVBQUUsSUFWTztBQVdwQkMsTUFBQUEsVUFBVSxFQUFFLElBWFE7QUFZcEJDLE1BQUFBLGNBQWMsRUFBRTtBQVpJLEtBQVQsRUFhWmQsY0FBYyxJQUFFLEVBYkosQ0FBZjtBQWVBQyxJQUFBQSxRQUFRLENBQUNFLFNBQVQsR0FBcUJOLENBQUMsQ0FBQ0ksUUFBUSxDQUFDRSxTQUFWLENBQXRCO0FBQ0EsUUFBSVksR0FBRyxHQUFHLElBQVY7O0FBQ0EsUUFBSWQsUUFBUSxDQUFDUSxhQUFULEtBQTJCLElBQS9CLEVBQXFDO0FBQ2pDUixNQUFBQSxRQUFRLENBQUNTLFdBQVQsR0FBdUIsT0FBdkI7QUFDSCxLQUZELE1BRU87QUFDSFQsTUFBQUEsUUFBUSxDQUFDUyxXQUFULEdBQXVCLFVBQXZCO0FBQ0gsS0F0QnVDLENBd0J4Qzs7O0FBQ0EsUUFBSU0sUUFBUSxDQUFDQyxHQUFULElBQWdCLENBQUNDLE1BQU0sQ0FBQ0MsS0FBeEIsSUFBaUMsQ0FBQ0QsTUFBTSxDQUFDRSxjQUE3QyxFQUE2RDtBQUN6RG5CLE1BQUFBLFFBQVEsQ0FBQ1MsV0FBVCxHQUF1QixVQUF2QjtBQUNILEtBM0J1QyxDQStCeEM7OztBQUVBLFFBQUlULFFBQVEsQ0FBQ1UsY0FBVCxJQUEyQixJQUEvQixFQUFxQztBQUNqQ1YsTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1Ca0IsR0FBbkIsQ0FBdUI7QUFDdkIsc0JBQWUsU0FBT3BCLFFBQVEsQ0FBQ1UsY0FBaEIsR0FBK0IsYUFEdkI7QUFFdkIsaUJBQVVWLFFBQVEsQ0FBQ1ksVUFGSTtBQUd2QixrQkFBVVosUUFBUSxDQUFDVztBQUhJLE9BQXZCO0FBS0g7O0FBRURYLElBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQmtCLEdBQW5CLENBQXVCO0FBQ25CLGlCQUFXLE9BRFE7QUFFbkIsb0JBQWUsVUFGSTtBQUduQixpQkFBWSxNQUhPO0FBSW5CLGtCQUFhO0FBSk0sS0FBdkI7QUFPQU4sSUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVE7QUFDSixxQkFBZ0IsR0FEWjtBQUVKLGtCQUFhcEIsUUFBUSxDQUFDUyxXQUZsQjtBQUdKLGlCQUFZO0FBSFIsS0FBUjtBQU1BLFFBQUlZLFVBQVUsR0FBRztBQUNMQyxNQUFBQSxjQUFjLEVBQUVDLFFBQVEsQ0FBQ1QsR0FBRyxDQUFDVSxVQUFKLEVBQUQsRUFBbUIsRUFBbkIsQ0FBUixHQUFpQyxJQUQ1QztBQUVMQyxNQUFBQSxlQUFlLEVBQUVGLFFBQVEsQ0FBQ1QsR0FBRyxDQUFDWSxXQUFKLEVBQUQsRUFBb0IsRUFBcEIsQ0FBUixHQUFrQyxJQUY5QztBQUdMQyxNQUFBQSxRQUFRLEVBQUVKLFFBQVEsQ0FBQ3ZCLFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQnNCLFVBQW5CLEVBQUQsRUFBa0MsRUFBbEMsQ0FBUixHQUFnRCxJQUhyRDtBQUlMSSxNQUFBQSxTQUFTLEVBQUVMLFFBQVEsQ0FBQ3ZCLFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQndCLFdBQW5CLEVBQUQsRUFBbUMsRUFBbkMsQ0FBUixHQUFpRDtBQUp2RCxLQUFqQixDQXREd0MsQ0E2RHhDOztBQUNBLFFBQUcxQixRQUFRLENBQUNLLFdBQVQsS0FBeUIsS0FBekIsSUFBa0NMLFFBQVEsQ0FBQ0ssV0FBVCxLQUF5QixRQUE5RCxFQUF3RTtBQUNwRVMsTUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVE7QUFBQyxnQkFBU3BCLFFBQVEsQ0FBQ087QUFBbkIsT0FBUjtBQUNBUCxNQUFBQSxRQUFRLENBQUNFLFNBQVQsQ0FBbUJrQixHQUFuQixDQUF1QjtBQUFDLGlCQUFVO0FBQVgsT0FBdkI7QUFDSDs7QUFFRCxRQUFHcEIsUUFBUSxDQUFDSyxXQUFULEtBQXlCLEtBQTVCLEVBQW1DO0FBQy9CUyxNQUFBQSxHQUFHLENBQUNNLEdBQUosQ0FBUTtBQUFDLGVBQVEsTUFBTUMsVUFBVSxDQUFDSTtBQUExQixPQUFSO0FBQ0F6QixNQUFBQSxRQUFRLENBQUNFLFNBQVQsQ0FBbUJrQixHQUFuQixDQUF1QjtBQUFDLGtCQUFXLE1BQU1DLFVBQVUsQ0FBQ087QUFBN0IsT0FBdkI7QUFDSDs7QUFFRCxRQUFHNUIsUUFBUSxDQUFDSyxXQUFULEtBQXlCLFFBQTVCLEVBQXNDO0FBQ2xDUyxNQUFBQSxHQUFHLENBQUNNLEdBQUosQ0FBUTtBQUFDLGtCQUFXLE1BQU1DLFVBQVUsQ0FBQ0ksZUFBN0I7QUFBOEMsb0JBQWE7QUFBM0QsT0FBUjtBQUNBekIsTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1Ca0IsR0FBbkIsQ0FBdUI7QUFBQyxlQUFRLE1BQU1DLFVBQVUsQ0FBQ087QUFBMUIsT0FBdkI7QUFFSDs7QUFFRCxRQUFHNUIsUUFBUSxDQUFDSyxXQUFULEtBQXlCLE1BQXpCLElBQW1DTCxRQUFRLENBQUNLLFdBQVQsS0FBeUIsT0FBL0QsRUFBd0U7QUFDcEVTLE1BQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUFRO0FBQ0osa0JBQVdDLFVBQVUsQ0FBQ0ksZUFEbEI7QUFFSixlQUFRekIsUUFBUSxDQUFDTTtBQUZiLE9BQVI7QUFLQU4sTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1Ca0IsR0FBbkIsQ0FBdUI7QUFBQyxlQUFRO0FBQVQsT0FBdkI7QUFDSDs7QUFFRCxRQUFHcEIsUUFBUSxDQUFDSyxXQUFULEtBQXlCLE1BQTVCLEVBQW9DO0FBQ2hDUyxNQUFBQSxHQUFHLENBQUNNLEdBQUosQ0FBUTtBQUFFLGdCQUFRLE1BQU1DLFVBQVUsQ0FBQ0M7QUFBM0IsT0FBUjtBQUNBdEIsTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1Ca0IsR0FBbkIsQ0FBdUI7QUFBQyxpQkFBVSxNQUFNQyxVQUFVLENBQUNNO0FBQTVCLE9BQXZCO0FBQ0g7O0FBRUQsUUFBRzNCLFFBQVEsQ0FBQ0ssV0FBVCxLQUF5QixPQUE1QixFQUFxQztBQUNqQ1MsTUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVE7QUFBRSxpQkFBUyxNQUFNQyxVQUFVLENBQUNDO0FBQTVCLE9BQVI7QUFDQXRCLE1BQUFBLFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQmtCLEdBQW5CLENBQXVCO0FBQUMsZ0JBQVMsTUFBTUMsVUFBVSxDQUFDTTtBQUEzQixPQUF2QjtBQUVBL0IsTUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVd0IsR0FBVixDQUFjLFlBQWQsRUFBNEIsUUFBNUI7QUFDSCxLQWpHdUMsQ0FtR3hDOzs7QUFFQXBCLElBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQjJCLEtBQW5CLENBQXlCLFVBQVNDLEtBQVQsRUFBZTtBQUNwQ0EsTUFBQUEsS0FBSyxDQUFDQyxjQUFOO0FBQ0gsS0FGRDs7QUFJQSxRQUFJQyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxHQUFXO0FBRXJCLFVBQUloQyxRQUFRLENBQUNLLFdBQVQsS0FBeUIsS0FBN0IsRUFBb0M7QUFDaENTLFFBQUFBLEdBQUcsQ0FBQ21CLE9BQUosQ0FBWTtBQUFDQyxVQUFBQSxHQUFHLEVBQUMsTUFBTWIsVUFBVSxDQUFDSTtBQUF0QixTQUFaLEVBQW9EekIsUUFBUSxDQUFDRyxLQUE3RCxFQUFvRWdDLFdBQXBFLENBQWdGLE1BQWhGO0FBQ0gsT0FGRCxNQUVPLElBQUluQyxRQUFRLENBQUNLLFdBQVQsS0FBeUIsTUFBN0IsRUFBcUM7QUFDeENTLFFBQUFBLEdBQUcsQ0FBQ21CLE9BQUosQ0FBWTtBQUFDRyxVQUFBQSxJQUFJLEVBQUUsTUFBTWYsVUFBVSxDQUFDQztBQUF4QixTQUFaLEVBQXFEdEIsUUFBUSxDQUFDRyxLQUE5RCxFQUFxRWdDLFdBQXJFLENBQWlGLE1BQWpGO0FBQ0gsT0FGTSxNQUVBLElBQUluQyxRQUFRLENBQUNLLFdBQVQsS0FBeUIsT0FBN0IsRUFBc0M7QUFDekNTLFFBQUFBLEdBQUcsQ0FBQ21CLE9BQUosQ0FBWTtBQUFDSSxVQUFBQSxLQUFLLEVBQUUsTUFBTWhCLFVBQVUsQ0FBQ0M7QUFBekIsU0FBWixFQUFzRHRCLFFBQVEsQ0FBQ0csS0FBL0QsRUFBc0VnQyxXQUF0RSxDQUFrRixNQUFsRjtBQUNILE9BRk0sTUFFQSxJQUFJbkMsUUFBUSxDQUFDSyxXQUFULEtBQXlCLFFBQTdCLEVBQXVDO0FBQzFDUyxRQUFBQSxHQUFHLENBQUNtQixPQUFKLENBQVk7QUFBQ0ssVUFBQUEsTUFBTSxFQUFFLE1BQU1qQixVQUFVLENBQUNJO0FBQTFCLFNBQVosRUFBd0R6QixRQUFRLENBQUNHLEtBQWpFLEVBQXdFZ0MsV0FBeEUsQ0FBb0YsTUFBcEY7QUFDSDtBQUVKLEtBWkQ7O0FBY0EsUUFBSUksUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBVztBQUV0QixVQUFJdkMsUUFBUSxDQUFDSyxXQUFULElBQXdCLEtBQTVCLEVBQW1DO0FBQy9CUyxRQUFBQSxHQUFHLENBQUNtQixPQUFKLENBQVk7QUFBQ0MsVUFBQUEsR0FBRyxFQUFDO0FBQUwsU0FBWixFQUEyQmxDLFFBQVEsQ0FBQ0csS0FBcEMsRUFBMkNxQyxRQUEzQyxDQUFvRCxNQUFwRDtBQUNILE9BRkQsTUFFTyxJQUFJeEMsUUFBUSxDQUFDSyxXQUFULElBQXdCLE1BQTVCLEVBQW9DO0FBQ3ZDUyxRQUFBQSxHQUFHLENBQUNtQixPQUFKLENBQVk7QUFBQ0csVUFBQUEsSUFBSSxFQUFDO0FBQU4sU0FBWixFQUE0QnBDLFFBQVEsQ0FBQ0csS0FBckMsRUFBNENxQyxRQUE1QyxDQUFxRCxNQUFyRDtBQUNILE9BRk0sTUFFQSxJQUFJeEMsUUFBUSxDQUFDSyxXQUFULElBQXdCLE9BQTVCLEVBQXFDO0FBQ3hDUyxRQUFBQSxHQUFHLENBQUNtQixPQUFKLENBQVk7QUFBQ0ksVUFBQUEsS0FBSyxFQUFDO0FBQVAsU0FBWixFQUE2QnJDLFFBQVEsQ0FBQ0csS0FBdEMsRUFBNkNxQyxRQUE3QyxDQUFzRCxNQUF0RDtBQUNILE9BRk0sTUFFQSxJQUFJeEMsUUFBUSxDQUFDSyxXQUFULElBQXdCLFFBQTVCLEVBQXNDO0FBQ3pDUyxRQUFBQSxHQUFHLENBQUNtQixPQUFKLENBQVk7QUFBQ0ssVUFBQUEsTUFBTSxFQUFDO0FBQVIsU0FBWixFQUE4QnRDLFFBQVEsQ0FBQ0csS0FBdkMsRUFBOENxQyxRQUE5QyxDQUF1RCxNQUF2RDtBQUNIO0FBQ0osS0FYRDs7QUFhQSxRQUFJQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLEdBQVc7QUFDaEMzQixNQUFBQSxHQUFHLENBQUNlLEtBQUosQ0FBVSxVQUFTQyxLQUFULEVBQWU7QUFDckJBLFFBQUFBLEtBQUssQ0FBQ1ksZUFBTjtBQUNILE9BRkQ7QUFJQTlDLE1BQUFBLENBQUMsQ0FBQ21CLFFBQUQsQ0FBRCxDQUFZYyxLQUFaLENBQWtCLFlBQVU7QUFDeEJHLFFBQUFBLE9BQU87QUFDVixPQUZEO0FBR0gsS0FSRDs7QUFVQSxRQUFJVyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFVO0FBQ3hCM0MsTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1CMkIsS0FBbkIsQ0FBeUIsVUFBU0MsS0FBVCxFQUFlO0FBQ3BDLFlBQUloQixHQUFHLENBQUM4QixRQUFKLENBQWEsTUFBYixDQUFKLEVBQTBCO0FBQ3RCWixVQUFBQSxPQUFPO0FBQ1YsU0FGRCxNQUVPO0FBQ0hPLFVBQUFBLFFBQVE7QUFDWDtBQUNKLE9BTkQ7QUFRQUUsTUFBQUEsa0JBQWtCO0FBQ3JCLEtBVkQ7O0FBWUEsUUFBSUksV0FBVyxHQUFHLFNBQWRBLFdBQWMsR0FBVTtBQUN4Qi9CLE1BQUFBLEdBQUcsQ0FBQ2dDLEtBQUosQ0FDSSxZQUFVO0FBQ05QLFFBQUFBLFFBQVE7QUFDWCxPQUhMLEVBS0ksWUFBVTtBQUNOUCxRQUFBQSxPQUFPO0FBQ1YsT0FQTDtBQVNJaEMsTUFBQUEsUUFBUSxDQUFDRSxTQUFULENBQW1CMkIsS0FBbkIsQ0FBeUIsVUFBU0MsS0FBVCxFQUFlO0FBQ3BDLFlBQUloQixHQUFHLENBQUM4QixRQUFKLENBQWEsTUFBYixDQUFKLEVBQTBCO0FBQ3RCWixVQUFBQSxPQUFPO0FBQ1Y7QUFDSixPQUpEO0FBS0FTLE1BQUFBLGtCQUFrQjtBQUV6QixLQWpCRDs7QUFtQkEsUUFBSU0sY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixHQUFVO0FBQzNCZixNQUFBQSxPQUFPO0FBQ1BnQixNQUFBQSxVQUFVLENBQUNULFFBQUQsRUFBVyxHQUFYLENBQVY7QUFDSCxLQUhELENBN0t3QyxDQWtMeEM7OztBQUNBLFFBQUl2QyxRQUFRLENBQUNJLE1BQVQsS0FBb0IsT0FBeEIsRUFBaUM7QUFDN0J1QyxNQUFBQSxXQUFXO0FBQ2Q7O0FBRUQsUUFBSTNDLFFBQVEsQ0FBQ0ksTUFBVCxLQUFvQixPQUF4QixFQUFpQztBQUM3QnlDLE1BQUFBLFdBQVc7QUFDZDs7QUFFRCxRQUFJN0MsUUFBUSxDQUFDYSxjQUFiLEVBQTZCO0FBQ3pCa0MsTUFBQUEsY0FBYztBQUNqQjtBQUVKLEdBL0xEO0FBZ01ILENBak1ELEVBaU1HRSxNQWpNSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgdGFiU2xpZGVPVXQgdjEuM1xuICAgIFxuICAgIEJ5IFdpbGxpYW0gUGFvbGk6IGh0dHA6Ly93cGFvbGkuYnVpbGRpbmc1OC5jb21cblxuICAgIFRvIHVzZSB5b3UgbXVzdCBoYXZlIGFuIGltYWdlIHJlYWR5IHRvIGdvIGFzIHlvdXIgdGFiXG4gICAgTWFrZSBzdXJlIHRvIHBhc3MgaW4gYXQgbWluaW11bSB0aGUgcGF0aCB0byB0aGUgaW1hZ2UgYW5kIGl0cyBkaW1lbnNpb25zOlxuICAgIFxuICAgIGV4YW1wbGU6XG4gICAgXG4gICAgICAgICQoJy5zbGlkZS1vdXQtZGl2JykudGFiU2xpZGVPdXQoe1xuICAgICAgICAgICAgICAgIHRhYkhhbmRsZTogJy5oYW5kbGUnLCAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsYXNzIG9mIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB5b3VyIHRhYiAtZG9lc250IGhhdmUgdG8gYmUgYW4gYW5jaG9yXG4gICAgICAgICAgICAgICAgcGF0aFRvVGFiSW1hZ2U6ICdpbWFnZXMvY29udGFjdF90YWIuZ2lmJywgICAgIC8vcmVsYXRpdmUgcGF0aCB0byB0aGUgaW1hZ2UgZm9yIHRoZSB0YWJcbiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodDogJzEzM3B4JywgICAgICAgICAgICAgICAgICAgICAgICAgLy9oZWlnaHQgb2YgdGFiIGltYWdlXG4gICAgICAgICAgICAgICAgaW1hZ2VXaWR0aDogJzQ0cHgnLCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2lkdGggb2YgdGFiIGltYWdlICAgXG4gICAgICAgIH0pO1xuXG4gICAgb3IgeW91IGNhbiBsZWF2ZSBvdXQgdGhlc2Ugb3B0aW9uc1xuICAgIGFuZCBzZXQgdGhlIGltYWdlIHByb3BlcnRpZXMgdXNpbmcgY3NzXG4gICAgXG4qL1xuXG5cbihmdW5jdGlvbigkKXtcbiAgICAkLmZuLnRhYlNsaWRlT3V0ID0gZnVuY3Rpb24oY2FsbGVyU2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgdGFiSGFuZGxlOiAnLmhhbmRsZScsXG4gICAgICAgICAgICBzcGVlZDogMzAwLCBcbiAgICAgICAgICAgIGFjdGlvbjogJ2NsaWNrJyxcbiAgICAgICAgICAgIHRhYkxvY2F0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICB0b3BQb3M6ICcyMDBweCcsXG4gICAgICAgICAgICBsZWZ0UG9zOiAnMjBweCcsXG4gICAgICAgICAgICBmaXhlZFBvc2l0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uaW5nOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcGF0aFRvVGFiSW1hZ2U6IG51bGwsXG4gICAgICAgICAgICBpbWFnZUhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIGltYWdlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBvbkxvYWRTbGlkZU91dDogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9LCBjYWxsZXJTZXR0aW5nc3x8e30pO1xuXG4gICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZSA9ICQoc2V0dGluZ3MudGFiSGFuZGxlKTtcbiAgICAgICAgdmFyIG9iaiA9IHRoaXM7XG4gICAgICAgIGlmIChzZXR0aW5ncy5maXhlZFBvc2l0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5wb3NpdGlvbmluZyA9ICdmaXhlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5wb3NpdGlvbmluZyA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vaWU2IGRvZXNuJ3QgZG8gd2VsbCB3aXRoIHRoZSBmaXhlZCBvcHRpb25cbiAgICAgICAgaWYgKGRvY3VtZW50LmFsbCAmJiAhd2luZG93Lm9wZXJhICYmICF3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgIHNldHRpbmdzLnBvc2l0aW9uaW5nID0gJ2Fic29sdXRlJztcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICBcbiAgICAgICAgLy9zZXQgaW5pdGlhbCB0YWJIYW5kbGUgY3NzXG4gICAgICAgIFxuICAgICAgICBpZiAoc2V0dGluZ3MucGF0aFRvVGFiSW1hZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0dGluZ3MudGFiSGFuZGxlLmNzcyh7XG4gICAgICAgICAgICAnYmFja2dyb3VuZCcgOiAndXJsKCcrc2V0dGluZ3MucGF0aFRvVGFiSW1hZ2UrJykgbm8tcmVwZWF0JyxcbiAgICAgICAgICAgICd3aWR0aCcgOiBzZXR0aW5ncy5pbWFnZVdpZHRoLFxuICAgICAgICAgICAgJ2hlaWdodCc6IHNldHRpbmdzLmltYWdlSGVpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0dGluZ3MudGFiSGFuZGxlLmNzcyh7IFxuICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2snLFxuICAgICAgICAgICAgJ3RleHRJbmRlbnQnIDogJy05OTk5OXB4JyxcbiAgICAgICAgICAgICdvdXRsaW5lJyA6ICdub25lJyxcbiAgICAgICAgICAgICdwb3NpdGlvbicgOiAnYWJzb2x1dGUnXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgb2JqLmNzcyh7XG4gICAgICAgICAgICAnbGluZS1oZWlnaHQnIDogJzEnLFxuICAgICAgICAgICAgJ3Bvc2l0aW9uJyA6IHNldHRpbmdzLnBvc2l0aW9uaW5nLFxuICAgICAgICAgICAgJ2Rpc3BsYXknIDogJ2Jsb2NrJ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyV2lkdGg6IHBhcnNlSW50KG9iai5vdXRlcldpZHRoKCksIDEwKSArICdweCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckhlaWdodDogcGFyc2VJbnQob2JqLm91dGVySGVpZ2h0KCksIDEwKSArICdweCcsXG4gICAgICAgICAgICAgICAgICAgIHRhYldpZHRoOiBwYXJzZUludChzZXR0aW5ncy50YWJIYW5kbGUub3V0ZXJXaWR0aCgpLCAxMCkgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICB0YWJIZWlnaHQ6IHBhcnNlSW50KHNldHRpbmdzLnRhYkhhbmRsZS5vdXRlckhlaWdodCgpLCAxMCkgKyAncHgnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3NldCBjYWxjdWxhdGVkIGNzc1xuICAgICAgICBpZihzZXR0aW5ncy50YWJMb2NhdGlvbiA9PT0gJ3RvcCcgfHwgc2V0dGluZ3MudGFiTG9jYXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBvYmouY3NzKHsnbGVmdCcgOiBzZXR0aW5ncy5sZWZ0UG9zfSk7XG4gICAgICAgICAgICBzZXR0aW5ncy50YWJIYW5kbGUuY3NzKHsncmlnaHQnIDogMH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZihzZXR0aW5ncy50YWJMb2NhdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIG9iai5jc3Moeyd0b3AnIDogJy0nICsgcHJvcGVydGllcy5jb250YWluZXJIZWlnaHR9KTtcbiAgICAgICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZS5jc3Moeydib3R0b20nIDogJy0nICsgcHJvcGVydGllcy50YWJIZWlnaHR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHNldHRpbmdzLnRhYkxvY2F0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgb2JqLmNzcyh7J2JvdHRvbScgOiAnLScgKyBwcm9wZXJ0aWVzLmNvbnRhaW5lckhlaWdodCwgJ3Bvc2l0aW9uJyA6ICdmaXhlZCd9KTtcbiAgICAgICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZS5jc3Moeyd0b3AnIDogJy0nICsgcHJvcGVydGllcy50YWJIZWlnaHR9KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZihzZXR0aW5ncy50YWJMb2NhdGlvbiA9PT0gJ2xlZnQnIHx8IHNldHRpbmdzLnRhYkxvY2F0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBvYmouY3NzKHtcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JyA6IHByb3BlcnRpZXMuY29udGFpbmVySGVpZ2h0LFxuICAgICAgICAgICAgICAgICd0b3AnIDogc2V0dGluZ3MudG9wUG9zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2V0dGluZ3MudGFiSGFuZGxlLmNzcyh7J3RvcCcgOiAwfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKHNldHRpbmdzLnRhYkxvY2F0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIG9iai5jc3MoeyAnbGVmdCc6ICctJyArIHByb3BlcnRpZXMuY29udGFpbmVyV2lkdGh9KTtcbiAgICAgICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZS5jc3MoeydyaWdodCcgOiAnLScgKyBwcm9wZXJ0aWVzLnRhYldpZHRofSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihzZXR0aW5ncy50YWJMb2NhdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgb2JqLmNzcyh7ICdyaWdodCc6ICctJyArIHByb3BlcnRpZXMuY29udGFpbmVyV2lkdGh9KTtcbiAgICAgICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZS5jc3MoeydsZWZ0JyA6ICctJyArIHByb3BlcnRpZXMudGFiV2lkdGh9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJCgnaHRtbCcpLmNzcygnb3ZlcmZsb3cteCcsICdoaWRkZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZnVuY3Rpb25zIGZvciBhbmltYXRpb24gZXZlbnRzXG4gICAgICAgIFxuICAgICAgICBzZXR0aW5ncy50YWJIYW5kbGUuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgc2xpZGVJbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmFuaW1hdGUoe3RvcDonLScgKyBwcm9wZXJ0aWVzLmNvbnRhaW5lckhlaWdodH0sIHNldHRpbmdzLnNwZWVkKS5yZW1vdmVDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy50YWJMb2NhdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmFuaW1hdGUoe2xlZnQ6ICctJyArIHByb3BlcnRpZXMuY29udGFpbmVyV2lkdGh9LCBzZXR0aW5ncy5zcGVlZCkucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICBvYmouYW5pbWF0ZSh7cmlnaHQ6ICctJyArIHByb3BlcnRpZXMuY29udGFpbmVyV2lkdGh9LCBzZXR0aW5ncy5zcGVlZCkucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICAgICAgb2JqLmFuaW1hdGUoe2JvdHRvbTogJy0nICsgcHJvcGVydGllcy5jb250YWluZXJIZWlnaHR9LCBzZXR0aW5ncy5zcGVlZCkucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHZhciBzbGlkZU91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICBvYmouYW5pbWF0ZSh7dG9wOictM3B4J30sICBzZXR0aW5ncy5zcGVlZCkuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmFuaW1hdGUoe2xlZnQ6Jy0zcHgnfSwgIHNldHRpbmdzLnNwZWVkKS5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy50YWJMb2NhdGlvbiA9PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmFuaW1hdGUoe3JpZ2h0OictM3B4J30sICBzZXR0aW5ncy5zcGVlZCkuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MudGFiTG9jYXRpb24gPT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICBvYmouYW5pbWF0ZSh7Ym90dG9tOictM3B4J30sICBzZXR0aW5ncy5zcGVlZCkuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2xpY2tTY3JlZW5Ub0Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvYmouY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2xpZGVJbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgY2xpY2tBY3Rpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0dGluZ3MudGFiSGFuZGxlLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlT3V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNsaWNrU2NyZWVuVG9DbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdmFyIGhvdmVyQWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIG9iai5ob3ZlcihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBzbGlkZU91dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNldHRpbmdzLnRhYkhhbmRsZS5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouaGFzQ2xhc3MoJ29wZW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVJbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xpY2tTY3JlZW5Ub0Nsb3NlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgc2xpZGVPdXRPbkxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2xpZGVJbigpO1xuICAgICAgICAgICAgc2V0VGltZW91dChzbGlkZU91dCwgNTAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vY2hvb3NlIHdoaWNoIHR5cGUgb2YgYWN0aW9uIHRvIGJpbmRcbiAgICAgICAgaWYgKHNldHRpbmdzLmFjdGlvbiA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgY2xpY2tBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHNldHRpbmdzLmFjdGlvbiA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgICAgaG92ZXJBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHNldHRpbmdzLm9uTG9hZFNsaWRlT3V0KSB7XG4gICAgICAgICAgICBzbGlkZU91dE9uTG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH07XG59KShqUXVlcnkpO1xuIl0sImZpbGUiOiIuL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LnRhYlNsaWRlT3V0LnYxLjMuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./html/js/third_party/jquery.tabSlideOut.v1.3.js\n");

/***/ }),

/***/ "./html/js/third_party/jquery.tipsy.min.js":
/*!*************************************************!*\
  !*** ./html/js/third_party/jquery.tipsy.min.js ***!
  \*************************************************/
/***/ (() => {

eval("(function (c) {\n  function b(f, e) {\n    return typeof f == \"function\" ? f.call(e) : f;\n  }\n\n  function d(e) {\n    while (e = e.parentNode) {\n      if (e == document) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function a(f, e) {\n    this.$element = c(f);\n    this.options = e;\n    this.enabled = true;\n    this.fixTitle();\n  }\n\n  a.prototype = {\n    show: function show() {\n      var h = this.getTitle();\n\n      if (h && this.enabled) {\n        var g = this.tip();\n        g.find(\".tipsy-inner\")[this.options.html ? \"html\" : \"text\"](h);\n        g[0].className = \"tipsy\";\n        g.remove().css({\n          top: 0,\n          left: 0,\n          visibility: \"hidden\",\n          display: \"block\"\n        }).prependTo(document.body);\n        var k = c.extend({}, this.$element.offset(), {\n          width: this.$element[0].offsetWidth,\n          height: this.$element[0].offsetHeight\n        });\n        var e = g[0].offsetWidth,\n            j = g[0].offsetHeight,\n            i = b(this.options.gravity, this.$element[0]);\n        var f;\n\n        switch (i.charAt(0)) {\n          case \"n\":\n            f = {\n              top: k.top + k.height + this.options.offset,\n              left: k.left + k.width / 2 - e / 2\n            };\n            break;\n\n          case \"s\":\n            f = {\n              top: k.top - j - this.options.offset,\n              left: k.left + k.width / 2 - e / 2\n            };\n            break;\n\n          case \"e\":\n            f = {\n              top: k.top + k.height / 2 - j / 2,\n              left: k.left - e - this.options.offset\n            };\n            break;\n\n          case \"w\":\n            f = {\n              top: k.top + k.height / 2 - j / 2,\n              left: k.left + k.width + this.options.offset\n            };\n            break;\n        }\n\n        if (i.length == 2) {\n          if (i.charAt(1) == \"w\") {\n            f.left = k.left + k.width / 2 - 15;\n          } else {\n            f.left = k.left + k.width / 2 - e + 15;\n          }\n        }\n\n        g.css(f).addClass(\"tipsy-\" + i);\n        g.find(\".tipsy-arrow\")[0].className = \"tipsy-arrow tipsy-arrow-\" + i.charAt(0);\n\n        if (this.options.className) {\n          g.addClass(b(this.options.className, this.$element[0]));\n        }\n\n        if (this.options.fade) {\n          g.stop().css({\n            opacity: 0,\n            display: \"block\",\n            visibility: \"visible\"\n          }).animate({\n            opacity: this.options.opacity\n          });\n        } else {\n          g.css({\n            visibility: \"visible\",\n            opacity: this.options.opacity\n          });\n        }\n      }\n    },\n    hide: function hide() {\n      if (this.options.fade) {\n        this.tip().stop().fadeOut(function () {\n          c(this).remove();\n        });\n      } else {\n        this.tip().remove();\n      }\n    },\n    fixTitle: function fixTitle() {\n      var e = this.$element;\n\n      if (e.attr(\"title\") || typeof e.attr(\"original-title\") != \"string\") {\n        e.attr(\"original-title\", e.attr(\"title\") || \"\").removeAttr(\"title\");\n      }\n    },\n    getTitle: function getTitle() {\n      var g,\n          e = this.$element,\n          f = this.options;\n      this.fixTitle();\n      var g,\n          f = this.options;\n\n      if (typeof f.title == \"string\") {\n        g = e.attr(f.title == \"title\" ? \"original-title\" : f.title);\n      } else {\n        if (typeof f.title == \"function\") {\n          g = f.title.call(e[0]);\n        }\n      }\n\n      g = (\"\" + g).replace(/(^\\s*|\\s*$)/, \"\");\n      return g || f.fallback;\n    },\n    tip: function tip() {\n      if (!this.$tip) {\n        this.$tip = c('<div class=\"tipsy\"></div>').html('<div class=\"tipsy-arrow\"></div><div class=\"tipsy-inner\"></div>');\n        this.$tip.data(\"tipsy-pointee\", this.$element[0]);\n      }\n\n      return this.$tip;\n    },\n    validate: function validate() {\n      if (!this.$element[0].parentNode) {\n        this.hide();\n        this.$element = null;\n        this.options = null;\n      }\n    },\n    enable: function enable() {\n      this.enabled = true;\n    },\n    disable: function disable() {\n      this.enabled = false;\n    },\n    toggleEnabled: function toggleEnabled() {\n      this.enabled = !this.enabled;\n    }\n  };\n\n  c.fn.tipsy = function (i) {\n    if (i === true) {\n      return this.data(\"tipsy\");\n    } else {\n      if (typeof i == \"string\") {\n        var k = this.data(\"tipsy\");\n\n        if (k) {\n          k[i]();\n        }\n\n        return this;\n      }\n    }\n\n    i = c.extend({}, c.fn.tipsy.defaults, i);\n\n    function h(m) {\n      var n = c.data(m, \"tipsy\");\n\n      if (!n) {\n        n = new a(m, c.fn.tipsy.elementOptions(m, i));\n        c.data(m, \"tipsy\", n);\n      }\n\n      return n;\n    }\n\n    function l() {\n      var m = h(this);\n      m.hoverState = \"in\";\n\n      if (i.delayIn == 0) {\n        m.show();\n      } else {\n        m.fixTitle();\n        setTimeout(function () {\n          if (m.hoverState == \"in\") {\n            m.show();\n          }\n        }, i.delayIn);\n      }\n    }\n\n    function g() {\n      var m = h(this);\n      m.hoverState = \"out\";\n\n      if (i.delayOut == 0) {\n        m.hide();\n      } else {\n        setTimeout(function () {\n          if (m.hoverState == \"out\") {\n            m.hide();\n          }\n        }, i.delayOut);\n      }\n    }\n\n    if (!i.live) {\n      this.each(function () {\n        h(this);\n      });\n    }\n\n    if (i.trigger != \"manual\") {\n      var e = i.live ? \"live\" : \"bind\",\n          j = i.trigger == \"hover\" ? \"mouseenter\" : \"focus\",\n          f = i.trigger == \"hover\" ? \"mouseleave\" : \"blur\";\n      this[e](j, l)[e](f, g);\n    }\n\n    return this;\n  };\n\n  c.fn.tipsy.defaults = {\n    className: null,\n    delayIn: 0,\n    delayOut: 0,\n    fade: false,\n    fallback: \"\",\n    gravity: \"n\",\n    html: false,\n    live: false,\n    offset: 0,\n    opacity: 0.8,\n    title: \"title\",\n    trigger: \"hover\"\n  };\n\n  c.fn.tipsy.revalidate = function () {\n    c(\".tipsy\").each(function () {\n      var e = c.data(this, \"tipsy-pointee\");\n\n      if (!e || !d(e)) {\n        c(this).remove();\n      }\n    });\n  };\n\n  c.fn.tipsy.elementOptions = function (f, e) {\n    return c.metadata ? c.extend({}, e, c(f).metadata()) : e;\n  };\n\n  c.fn.tipsy.autoNS = function () {\n    return c(this).offset().top > c(document).scrollTop() + c(window).height() / 2 ? \"s\" : \"n\";\n  };\n\n  c.fn.tipsy.autoWE = function () {\n    return c(this).offset().left > c(document).scrollLeft() + c(window).width() / 2 ? \"e\" : \"w\";\n  };\n\n  c.fn.tipsy.autoBounds = function (f, e) {\n    return function () {\n      var g = {\n        ns: e[0],\n        ew: e.length > 1 ? e[1] : false\n      },\n          j = c(document).scrollTop() + f,\n          h = c(document).scrollLeft() + f,\n          i = c(this);\n\n      if (i.offset().top < j) {\n        g.ns = \"n\";\n      }\n\n      if (i.offset().left < h) {\n        g.ew = \"w\";\n      }\n\n      if (c(window).width() + c(document).scrollLeft() - i.offset().left < f) {\n        g.ew = \"e\";\n      }\n\n      if (c(window).height() + c(document).scrollTop() - i.offset().top < f) {\n        g.ns = \"s\";\n      }\n\n      return g.ns + (g.ew ? g.ew : \"\");\n    };\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./html/js/third_party/jquery.tipsy.min.js\n");

/***/ }),

/***/ "./html/js/third_party/jquery.ui.touch-punch.min.js":
/*!**********************************************************!*\
  !*** ./html/js/third_party/jquery.ui.touch-punch.min.js ***!
  \**********************************************************/
/***/ (() => {

eval("/*!\n * jQuery UI Touch Punch 0.2.3\n *\n * Copyright 2011–2014, Dave Furfero\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Depends:\n *  jquery.ui.widget.js\n *  jquery.ui.mouse.js\n */\n!function (a) {\n  function f(a, b) {\n    if (!(a.originalEvent.touches.length > 1)) {\n      a.preventDefault();\n      var c = a.originalEvent.changedTouches[0],\n          d = document.createEvent(\"MouseEvents\");\n      d.initMouseEvent(b, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), a.target.dispatchEvent(d);\n    }\n  }\n\n  if (a.support.touch = \"ontouchend\" in document, a.support.touch) {\n    var e,\n        b = a.ui.mouse.prototype,\n        c = b._mouseInit,\n        d = b._mouseDestroy;\n    b._touchStart = function (a) {\n      var b = this;\n      !e && b._mouseCapture(a.originalEvent.changedTouches[0]) && (e = !0, b._touchMoved = !1, f(a, \"mouseover\"), f(a, \"mousemove\"), f(a, \"mousedown\"));\n    }, b._touchMove = function (a) {\n      e && (this._touchMoved = !0, f(a, \"mousemove\"));\n    }, b._touchEnd = function (a) {\n      e && (f(a, \"mouseup\"), f(a, \"mouseout\"), this._touchMoved || f(a, \"click\"), e = !1);\n    }, b._mouseInit = function () {\n      var b = this;\n      b.element.bind({\n        touchstart: a.proxy(b, \"_touchStart\"),\n        touchmove: a.proxy(b, \"_touchMove\"),\n        touchend: a.proxy(b, \"_touchEnd\")\n      }), c.call(b);\n    }, b._mouseDestroy = function () {\n      var b = this;\n      b.element.unbind({\n        touchstart: a.proxy(b, \"_touchStart\"),\n        touchmove: a.proxy(b, \"_touchMove\"),\n        touchend: a.proxy(b, \"_touchEnd\")\n      }), d.call(b);\n    };\n  }\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LnVpLnRvdWNoLXB1bmNoLm1pbi5qcz8xZGMwIl0sIm5hbWVzIjpbImEiLCJmIiwiYiIsIm9yaWdpbmFsRXZlbnQiLCJ0b3VjaGVzIiwibGVuZ3RoIiwicHJldmVudERlZmF1bHQiLCJjIiwiY2hhbmdlZFRvdWNoZXMiLCJkIiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwid2luZG93Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInRhcmdldCIsImRpc3BhdGNoRXZlbnQiLCJzdXBwb3J0IiwidG91Y2giLCJlIiwidWkiLCJtb3VzZSIsInByb3RvdHlwZSIsIl9tb3VzZUluaXQiLCJfbW91c2VEZXN0cm95IiwiX3RvdWNoU3RhcnQiLCJfbW91c2VDYXB0dXJlIiwiX3RvdWNoTW92ZWQiLCJfdG91Y2hNb3ZlIiwiX3RvdWNoRW5kIiwiZWxlbWVudCIsImJpbmQiLCJ0b3VjaHN0YXJ0IiwicHJveHkiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsImNhbGwiLCJ1bmJpbmQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxVQUFTQSxDQUFULEVBQVc7QUFBQyxXQUFTQyxDQUFULENBQVdELENBQVgsRUFBYUUsQ0FBYixFQUFlO0FBQUMsUUFBRyxFQUFFRixDQUFDLENBQUNHLGFBQUYsQ0FBZ0JDLE9BQWhCLENBQXdCQyxNQUF4QixHQUErQixDQUFqQyxDQUFILEVBQXVDO0FBQUNMLE1BQUFBLENBQUMsQ0FBQ00sY0FBRjtBQUFtQixVQUFJQyxDQUFDLEdBQUNQLENBQUMsQ0FBQ0csYUFBRixDQUFnQkssY0FBaEIsQ0FBK0IsQ0FBL0IsQ0FBTjtBQUFBLFVBQXdDQyxDQUFDLEdBQUNDLFFBQVEsQ0FBQ0MsV0FBVCxDQUFxQixh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YUFBRixHQUFnQixZQUFVO0FBQUMsVUFBSXpCLENBQUMsR0FBQyxJQUFOO0FBQVdBLE1BQUFBLENBQUMsQ0FBQytCLE9BQUYsQ0FBVU8sTUFBVixDQUFpQjtBQUFDTCxRQUFBQSxVQUFVLEVBQUNuQyxDQUFDLENBQUNvQyxLQUFGLENBQVFsQyxDQUFSLEVBQVUsYUFBVixDQUFaO0FBQXFDbUMsUUFBQUEsU0FBUyxFQUFDckMsQ0FBQyxDQUFDb0MsS0FBRixDQUFRbEMsQ0FBUixFQUFVLFlBQVYsQ0FBL0M7QUFBdUVvQyxRQUFBQSxRQUFRLEVBQUN0QyxDQUFDLENBQUNvQyxLQUFGLENBQVFsQyxDQUFSLEVBQVUsV0FBVjtBQUFoRixPQUFqQixHQUEwSE8sQ0FBQyxDQUFDOEIsSUFBRixDQUFPckMsQ0FBUCxDQUExSDtBQUFvSSxLQUE5cEI7QUFBK3BCO0FBQUMsQ0FBeGpDLENBQXlqQ3VDLE1BQXpqQyxDQUFEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgVUkgVG91Y2ggUHVuY2ggMC4yLjNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMeKAkzIwMTQsIERhdmUgRnVyZmVyb1xuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuXG4gKlxuICogRGVwZW5kczpcbiAqICBqcXVlcnkudWkud2lkZ2V0LmpzXG4gKiAganF1ZXJ5LnVpLm1vdXNlLmpzXG4gKi9cbiFmdW5jdGlvbihhKXtmdW5jdGlvbiBmKGEsYil7aWYoIShhLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg+MSkpe2EucHJldmVudERlZmF1bHQoKTt2YXIgYz1hLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0sZD1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO2QuaW5pdE1vdXNlRXZlbnQoYiwhMCwhMCx3aW5kb3csMSxjLnNjcmVlblgsYy5zY3JlZW5ZLGMuY2xpZW50WCxjLmNsaWVudFksITEsITEsITEsITEsMCxudWxsKSxhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpfX1pZihhLnN1cHBvcnQudG91Y2g9XCJvbnRvdWNoZW5kXCJpbiBkb2N1bWVudCxhLnN1cHBvcnQudG91Y2gpe3ZhciBlLGI9YS51aS5tb3VzZS5wcm90b3R5cGUsYz1iLl9tb3VzZUluaXQsZD1iLl9tb3VzZURlc3Ryb3k7Yi5fdG91Y2hTdGFydD1mdW5jdGlvbihhKXt2YXIgYj10aGlzOyFlJiZiLl9tb3VzZUNhcHR1cmUoYS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdKSYmKGU9ITAsYi5fdG91Y2hNb3ZlZD0hMSxmKGEsXCJtb3VzZW92ZXJcIiksZihhLFwibW91c2Vtb3ZlXCIpLGYoYSxcIm1vdXNlZG93blwiKSl9LGIuX3RvdWNoTW92ZT1mdW5jdGlvbihhKXtlJiYodGhpcy5fdG91Y2hNb3ZlZD0hMCxmKGEsXCJtb3VzZW1vdmVcIikpfSxiLl90b3VjaEVuZD1mdW5jdGlvbihhKXtlJiYoZihhLFwibW91c2V1cFwiKSxmKGEsXCJtb3VzZW91dFwiKSx0aGlzLl90b3VjaE1vdmVkfHxmKGEsXCJjbGlja1wiKSxlPSExKX0sYi5fbW91c2VJbml0PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLmVsZW1lbnQuYmluZCh7dG91Y2hzdGFydDphLnByb3h5KGIsXCJfdG91Y2hTdGFydFwiKSx0b3VjaG1vdmU6YS5wcm94eShiLFwiX3RvdWNoTW92ZVwiKSx0b3VjaGVuZDphLnByb3h5KGIsXCJfdG91Y2hFbmRcIil9KSxjLmNhbGwoYil9LGIuX21vdXNlRGVzdHJveT1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5lbGVtZW50LnVuYmluZCh7dG91Y2hzdGFydDphLnByb3h5KGIsXCJfdG91Y2hTdGFydFwiKSx0b3VjaG1vdmU6YS5wcm94eShiLFwiX3RvdWNoTW92ZVwiKSx0b3VjaGVuZDphLnByb3h5KGIsXCJfdG91Y2hFbmRcIil9KSxkLmNhbGwoYil9fX0oalF1ZXJ5KTsiXSwiZmlsZSI6Ii4vaHRtbC9qcy90aGlyZF9wYXJ0eS9qcXVlcnkudWkudG91Y2gtcHVuY2gubWluLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./html/js/third_party/jquery.ui.touch-punch.min.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/moment.min.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/moment.min.js ***!
  \*************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n//! moment.js\n//! version : 2.11.2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n!function (a, b) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = b() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function a() {\n    return Uc.apply(null, arguments);\n  }\n\n  function b(a) {\n    Uc = a;\n  }\n\n  function c(a) {\n    return \"[object Array]\" === Object.prototype.toString.call(a);\n  }\n\n  function d(a) {\n    return a instanceof Date || \"[object Date]\" === Object.prototype.toString.call(a);\n  }\n\n  function e(a, b) {\n    var c,\n        d = [];\n\n    for (c = 0; c < a.length; ++c) {\n      d.push(b(a[c], c));\n    }\n\n    return d;\n  }\n\n  function f(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }\n\n  function g(a, b) {\n    for (var c in b) {\n      f(b, c) && (a[c] = b[c]);\n    }\n\n    return f(b, \"toString\") && (a.toString = b.toString), f(b, \"valueOf\") && (a.valueOf = b.valueOf), a;\n  }\n\n  function h(a, b, c, d) {\n    return Da(a, b, c, d, !0).utc();\n  }\n\n  function i() {\n    return {\n      empty: !1,\n      unusedTokens: [],\n      unusedInput: [],\n      overflow: -2,\n      charsLeftOver: 0,\n      nullInput: !1,\n      invalidMonth: null,\n      invalidFormat: !1,\n      userInvalidated: !1,\n      iso: !1\n    };\n  }\n\n  function j(a) {\n    return null == a._pf && (a._pf = i()), a._pf;\n  }\n\n  function k(a) {\n    if (null == a._isValid) {\n      var b = j(a);\n      a._isValid = !(isNaN(a._d.getTime()) || !(b.overflow < 0) || b.empty || b.invalidMonth || b.invalidWeekday || b.nullInput || b.invalidFormat || b.userInvalidated), a._strict && (a._isValid = a._isValid && 0 === b.charsLeftOver && 0 === b.unusedTokens.length && void 0 === b.bigHour);\n    }\n\n    return a._isValid;\n  }\n\n  function l(a) {\n    var b = h(NaN);\n    return null != a ? g(j(b), a) : j(b).userInvalidated = !0, b;\n  }\n\n  function m(a) {\n    return void 0 === a;\n  }\n\n  function n(a, b) {\n    var c, d, e;\n    if (m(b._isAMomentObject) || (a._isAMomentObject = b._isAMomentObject), m(b._i) || (a._i = b._i), m(b._f) || (a._f = b._f), m(b._l) || (a._l = b._l), m(b._strict) || (a._strict = b._strict), m(b._tzm) || (a._tzm = b._tzm), m(b._isUTC) || (a._isUTC = b._isUTC), m(b._offset) || (a._offset = b._offset), m(b._pf) || (a._pf = j(b)), m(b._locale) || (a._locale = b._locale), Wc.length > 0) for (c in Wc) {\n      d = Wc[c], e = b[d], m(e) || (a[d] = e);\n    }\n    return a;\n  }\n\n  function o(b) {\n    n(this, b), this._d = new Date(null != b._d ? b._d.getTime() : NaN), Xc === !1 && (Xc = !0, a.updateOffset(this), Xc = !1);\n  }\n\n  function p(a) {\n    return a instanceof o || null != a && null != a._isAMomentObject;\n  }\n\n  function q(a) {\n    return 0 > a ? Math.ceil(a) : Math.floor(a);\n  }\n\n  function r(a) {\n    var b = +a,\n        c = 0;\n    return 0 !== b && isFinite(b) && (c = q(b)), c;\n  }\n\n  function s(a, b, c) {\n    var d,\n        e = Math.min(a.length, b.length),\n        f = Math.abs(a.length - b.length),\n        g = 0;\n\n    for (d = 0; e > d; d++) {\n      (c && a[d] !== b[d] || !c && r(a[d]) !== r(b[d])) && g++;\n    }\n\n    return g + f;\n  }\n\n  function t() {}\n\n  function u(a) {\n    return a ? a.toLowerCase().replace(\"_\", \"-\") : a;\n  }\n\n  function v(a) {\n    for (var b, c, d, e, f = 0; f < a.length;) {\n      for (e = u(a[f]).split(\"-\"), b = e.length, c = u(a[f + 1]), c = c ? c.split(\"-\") : null; b > 0;) {\n        if (d = w(e.slice(0, b).join(\"-\"))) return d;\n        if (c && c.length >= b && s(e, c, !0) >= b - 1) break;\n        b--;\n      }\n\n      f++;\n    }\n\n    return null;\n  }\n\n  function w(a) {\n    var b = null;\n    if (!Yc[a] && \"undefined\" != \"object\" && module && module.exports) try {\n      b = Vc._abbr, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), x(b);\n    } catch (c) {}\n    return Yc[a];\n  }\n\n  function x(a, b) {\n    var c;\n    return a && (c = m(b) ? z(a) : y(a, b), c && (Vc = c)), Vc._abbr;\n  }\n\n  function y(a, b) {\n    return null !== b ? (b.abbr = a, Yc[a] = Yc[a] || new t(), Yc[a].set(b), x(a), Yc[a]) : (delete Yc[a], null);\n  }\n\n  function z(a) {\n    var b;\n    if (a && a._locale && a._locale._abbr && (a = a._locale._abbr), !a) return Vc;\n\n    if (!c(a)) {\n      if (b = w(a)) return b;\n      a = [a];\n    }\n\n    return v(a);\n  }\n\n  function A(a, b) {\n    var c = a.toLowerCase();\n    Zc[c] = Zc[c + \"s\"] = Zc[b] = a;\n  }\n\n  function B(a) {\n    return \"string\" == typeof a ? Zc[a] || Zc[a.toLowerCase()] : void 0;\n  }\n\n  function C(a) {\n    var b,\n        c,\n        d = {};\n\n    for (c in a) {\n      f(a, c) && (b = B(c), b && (d[b] = a[c]));\n    }\n\n    return d;\n  }\n\n  function D(a) {\n    return a instanceof Function || \"[object Function]\" === Object.prototype.toString.call(a);\n  }\n\n  function E(b, c) {\n    return function (d) {\n      return null != d ? (G(this, b, d), a.updateOffset(this, c), this) : F(this, b);\n    };\n  }\n\n  function F(a, b) {\n    return a.isValid() ? a._d[\"get\" + (a._isUTC ? \"UTC\" : \"\") + b]() : NaN;\n  }\n\n  function G(a, b, c) {\n    a.isValid() && a._d[\"set\" + (a._isUTC ? \"UTC\" : \"\") + b](c);\n  }\n\n  function H(a, b) {\n    var c;\n    if (\"object\" == _typeof(a)) for (c in a) {\n      this.set(c, a[c]);\n    } else if (a = B(a), D(this[a])) return this[a](b);\n    return this;\n  }\n\n  function I(a, b, c) {\n    var d = \"\" + Math.abs(a),\n        e = b - d.length,\n        f = a >= 0;\n    return (f ? c ? \"+\" : \"\" : \"-\") + Math.pow(10, Math.max(0, e)).toString().substr(1) + d;\n  }\n\n  function J(a, b, c, d) {\n    var e = d;\n    \"string\" == typeof d && (e = function e() {\n      return this[d]();\n    }), a && (bd[a] = e), b && (bd[b[0]] = function () {\n      return I(e.apply(this, arguments), b[1], b[2]);\n    }), c && (bd[c] = function () {\n      return this.localeData().ordinal(e.apply(this, arguments), a);\n    });\n  }\n\n  function K(a) {\n    return a.match(/\\[[\\s\\S]/) ? a.replace(/^\\[|\\]$/g, \"\") : a.replace(/\\\\/g, \"\");\n  }\n\n  function L(a) {\n    var b,\n        c,\n        d = a.match($c);\n\n    for (b = 0, c = d.length; c > b; b++) {\n      bd[d[b]] ? d[b] = bd[d[b]] : d[b] = K(d[b]);\n    }\n\n    return function (e) {\n      var f = \"\";\n\n      for (b = 0; c > b; b++) {\n        f += d[b] instanceof Function ? d[b].call(e, a) : d[b];\n      }\n\n      return f;\n    };\n  }\n\n  function M(a, b) {\n    return a.isValid() ? (b = N(b, a.localeData()), ad[b] = ad[b] || L(b), ad[b](a)) : a.localeData().invalidDate();\n  }\n\n  function N(a, b) {\n    function c(a) {\n      return b.longDateFormat(a) || a;\n    }\n\n    var d = 5;\n\n    for (_c.lastIndex = 0; d >= 0 && _c.test(a);) {\n      a = a.replace(_c, c), _c.lastIndex = 0, d -= 1;\n    }\n\n    return a;\n  }\n\n  function O(a, b, c) {\n    td[a] = D(b) ? b : function (a, d) {\n      return a && c ? c : b;\n    };\n  }\n\n  function P(a, b) {\n    return f(td, a) ? td[a](b._strict, b._locale) : new RegExp(Q(a));\n  }\n\n  function Q(a) {\n    return R(a.replace(\"\\\\\", \"\").replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (a, b, c, d, e) {\n      return b || c || d || e;\n    }));\n  }\n\n  function R(a) {\n    return a.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  }\n\n  function S(a, b) {\n    var c,\n        d = b;\n\n    for (\"string\" == typeof a && (a = [a]), \"number\" == typeof b && (d = function d(a, c) {\n      c[b] = r(a);\n    }), c = 0; c < a.length; c++) {\n      ud[a[c]] = d;\n    }\n  }\n\n  function T(a, b) {\n    S(a, function (a, c, d, e) {\n      d._w = d._w || {}, b(a, d._w, d, e);\n    });\n  }\n\n  function U(a, b, c) {\n    null != b && f(ud, a) && ud[a](b, c._a, c, a);\n  }\n\n  function V(a, b) {\n    return new Date(Date.UTC(a, b + 1, 0)).getUTCDate();\n  }\n\n  function W(a, b) {\n    return c(this._months) ? this._months[a.month()] : this._months[Ed.test(b) ? \"format\" : \"standalone\"][a.month()];\n  }\n\n  function X(a, b) {\n    return c(this._monthsShort) ? this._monthsShort[a.month()] : this._monthsShort[Ed.test(b) ? \"format\" : \"standalone\"][a.month()];\n  }\n\n  function Y(a, b, c) {\n    var d, e, f;\n\n    for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d = 0; 12 > d; d++) {\n      if (e = h([2e3, d]), c && !this._longMonthsParse[d] && (this._longMonthsParse[d] = new RegExp(\"^\" + this.months(e, \"\").replace(\".\", \"\") + \"$\", \"i\"), this._shortMonthsParse[d] = new RegExp(\"^\" + this.monthsShort(e, \"\").replace(\".\", \"\") + \"$\", \"i\")), c || this._monthsParse[d] || (f = \"^\" + this.months(e, \"\") + \"|^\" + this.monthsShort(e, \"\"), this._monthsParse[d] = new RegExp(f.replace(\".\", \"\"), \"i\")), c && \"MMMM\" === b && this._longMonthsParse[d].test(a)) return d;\n      if (c && \"MMM\" === b && this._shortMonthsParse[d].test(a)) return d;\n      if (!c && this._monthsParse[d].test(a)) return d;\n    }\n  }\n\n  function Z(a, b) {\n    var c;\n    return a.isValid() ? \"string\" == typeof b && (b = a.localeData().monthsParse(b), \"number\" != typeof b) ? a : (c = Math.min(a.date(), V(a.year(), b)), a._d[\"set\" + (a._isUTC ? \"UTC\" : \"\") + \"Month\"](b, c), a) : a;\n  }\n\n  function $(b) {\n    return null != b ? (Z(this, b), a.updateOffset(this, !0), this) : F(this, \"Month\");\n  }\n\n  function _() {\n    return V(this.year(), this.month());\n  }\n\n  function aa(a) {\n    return this._monthsParseExact ? (f(this, \"_monthsRegex\") || ca.call(this), a ? this._monthsShortStrictRegex : this._monthsShortRegex) : this._monthsShortStrictRegex && a ? this._monthsShortStrictRegex : this._monthsShortRegex;\n  }\n\n  function ba(a) {\n    return this._monthsParseExact ? (f(this, \"_monthsRegex\") || ca.call(this), a ? this._monthsStrictRegex : this._monthsRegex) : this._monthsStrictRegex && a ? this._monthsStrictRegex : this._monthsRegex;\n  }\n\n  function ca() {\n    function a(a, b) {\n      return b.length - a.length;\n    }\n\n    var b,\n        c,\n        d = [],\n        e = [],\n        f = [];\n\n    for (b = 0; 12 > b; b++) {\n      c = h([2e3, b]), d.push(this.monthsShort(c, \"\")), e.push(this.months(c, \"\")), f.push(this.months(c, \"\")), f.push(this.monthsShort(c, \"\"));\n    }\n\n    for (d.sort(a), e.sort(a), f.sort(a), b = 0; 12 > b; b++) {\n      d[b] = R(d[b]), e[b] = R(e[b]), f[b] = R(f[b]);\n    }\n\n    this._monthsRegex = new RegExp(\"^(\" + f.join(\"|\") + \")\", \"i\"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp(\"^(\" + e.join(\"|\") + \")$\", \"i\"), this._monthsShortStrictRegex = new RegExp(\"^(\" + d.join(\"|\") + \")$\", \"i\");\n  }\n\n  function da(a) {\n    var b,\n        c = a._a;\n    return c && -2 === j(a).overflow && (b = c[wd] < 0 || c[wd] > 11 ? wd : c[xd] < 1 || c[xd] > V(c[vd], c[wd]) ? xd : c[yd] < 0 || c[yd] > 24 || 24 === c[yd] && (0 !== c[zd] || 0 !== c[Ad] || 0 !== c[Bd]) ? yd : c[zd] < 0 || c[zd] > 59 ? zd : c[Ad] < 0 || c[Ad] > 59 ? Ad : c[Bd] < 0 || c[Bd] > 999 ? Bd : -1, j(a)._overflowDayOfYear && (vd > b || b > xd) && (b = xd), j(a)._overflowWeeks && -1 === b && (b = Cd), j(a)._overflowWeekday && -1 === b && (b = Dd), j(a).overflow = b), a;\n  }\n\n  function ea(b) {\n    a.suppressDeprecationWarnings === !1 && \"undefined\" != typeof console && console.warn && console.warn(\"Deprecation warning: \" + b);\n  }\n\n  function fa(a, b) {\n    var c = !0;\n    return g(function () {\n      return c && (ea(a + \"\\nArguments: \" + Array.prototype.slice.call(arguments).join(\", \") + \"\\n\" + new Error().stack), c = !1), b.apply(this, arguments);\n    }, b);\n  }\n\n  function ga(a, b) {\n    Jd[a] || (ea(b), Jd[a] = !0);\n  }\n\n  function ha(a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = a._i,\n        i = Kd.exec(h) || Ld.exec(h);\n\n    if (i) {\n      for (j(a).iso = !0, b = 0, c = Nd.length; c > b; b++) {\n        if (Nd[b][1].exec(i[1])) {\n          e = Nd[b][0], d = Nd[b][2] !== !1;\n          break;\n        }\n      }\n\n      if (null == e) return void (a._isValid = !1);\n\n      if (i[3]) {\n        for (b = 0, c = Od.length; c > b; b++) {\n          if (Od[b][1].exec(i[3])) {\n            f = (i[2] || \" \") + Od[b][0];\n            break;\n          }\n        }\n\n        if (null == f) return void (a._isValid = !1);\n      }\n\n      if (!d && null != f) return void (a._isValid = !1);\n\n      if (i[4]) {\n        if (!Md.exec(i[4])) return void (a._isValid = !1);\n        g = \"Z\";\n      }\n\n      a._f = e + (f || \"\") + (g || \"\"), wa(a);\n    } else a._isValid = !1;\n  }\n\n  function ia(b) {\n    var c = Pd.exec(b._i);\n    return null !== c ? void (b._d = new Date(+c[1])) : (ha(b), void (b._isValid === !1 && (delete b._isValid, a.createFromInputFallback(b))));\n  }\n\n  function ja(a, b, c, d, e, f, g) {\n    var h = new Date(a, b, c, d, e, f, g);\n    return 100 > a && a >= 0 && isFinite(h.getFullYear()) && h.setFullYear(a), h;\n  }\n\n  function ka(a) {\n    var b = new Date(Date.UTC.apply(null, arguments));\n    return 100 > a && a >= 0 && isFinite(b.getUTCFullYear()) && b.setUTCFullYear(a), b;\n  }\n\n  function la(a) {\n    return ma(a) ? 366 : 365;\n  }\n\n  function ma(a) {\n    return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;\n  }\n\n  function na() {\n    return ma(this.year());\n  }\n\n  function oa(a, b, c) {\n    var d = 7 + b - c,\n        e = (7 + ka(a, 0, d).getUTCDay() - b) % 7;\n    return -e + d - 1;\n  }\n\n  function pa(a, b, c, d, e) {\n    var f,\n        g,\n        h = (7 + c - d) % 7,\n        i = oa(a, d, e),\n        j = 1 + 7 * (b - 1) + h + i;\n    return 0 >= j ? (f = a - 1, g = la(f) + j) : j > la(a) ? (f = a + 1, g = j - la(a)) : (f = a, g = j), {\n      year: f,\n      dayOfYear: g\n    };\n  }\n\n  function qa(a, b, c) {\n    var d,\n        e,\n        f = oa(a.year(), b, c),\n        g = Math.floor((a.dayOfYear() - f - 1) / 7) + 1;\n    return 1 > g ? (e = a.year() - 1, d = g + ra(e, b, c)) : g > ra(a.year(), b, c) ? (d = g - ra(a.year(), b, c), e = a.year() + 1) : (e = a.year(), d = g), {\n      week: d,\n      year: e\n    };\n  }\n\n  function ra(a, b, c) {\n    var d = oa(a, b, c),\n        e = oa(a + 1, b, c);\n    return (la(a) - d + e) / 7;\n  }\n\n  function sa(a, b, c) {\n    return null != a ? a : null != b ? b : c;\n  }\n\n  function ta(b) {\n    var c = new Date(a.now());\n    return b._useUTC ? [c.getUTCFullYear(), c.getUTCMonth(), c.getUTCDate()] : [c.getFullYear(), c.getMonth(), c.getDate()];\n  }\n\n  function ua(a) {\n    var b,\n        c,\n        d,\n        e,\n        f = [];\n\n    if (!a._d) {\n      for (d = ta(a), a._w && null == a._a[xd] && null == a._a[wd] && va(a), a._dayOfYear && (e = sa(a._a[vd], d[vd]), a._dayOfYear > la(e) && (j(a)._overflowDayOfYear = !0), c = ka(e, 0, a._dayOfYear), a._a[wd] = c.getUTCMonth(), a._a[xd] = c.getUTCDate()), b = 0; 3 > b && null == a._a[b]; ++b) {\n        a._a[b] = f[b] = d[b];\n      }\n\n      for (; 7 > b; b++) {\n        a._a[b] = f[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];\n      }\n\n      24 === a._a[yd] && 0 === a._a[zd] && 0 === a._a[Ad] && 0 === a._a[Bd] && (a._nextDay = !0, a._a[yd] = 0), a._d = (a._useUTC ? ka : ja).apply(null, f), null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() - a._tzm), a._nextDay && (a._a[yd] = 24);\n    }\n  }\n\n  function va(a) {\n    var b, c, d, e, f, g, h, i;\n    b = a._w, null != b.GG || null != b.W || null != b.E ? (f = 1, g = 4, c = sa(b.GG, a._a[vd], qa(Ea(), 1, 4).year), d = sa(b.W, 1), e = sa(b.E, 1), (1 > e || e > 7) && (i = !0)) : (f = a._locale._week.dow, g = a._locale._week.doy, c = sa(b.gg, a._a[vd], qa(Ea(), f, g).year), d = sa(b.w, 1), null != b.d ? (e = b.d, (0 > e || e > 6) && (i = !0)) : null != b.e ? (e = b.e + f, (b.e < 0 || b.e > 6) && (i = !0)) : e = f), 1 > d || d > ra(c, f, g) ? j(a)._overflowWeeks = !0 : null != i ? j(a)._overflowWeekday = !0 : (h = pa(c, d, e, f, g), a._a[vd] = h.year, a._dayOfYear = h.dayOfYear);\n  }\n\n  function wa(b) {\n    if (b._f === a.ISO_8601) return void ha(b);\n    b._a = [], j(b).empty = !0;\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h = \"\" + b._i,\n        i = h.length,\n        k = 0;\n\n    for (e = N(b._f, b._locale).match($c) || [], c = 0; c < e.length; c++) {\n      f = e[c], d = (h.match(P(f, b)) || [])[0], d && (g = h.substr(0, h.indexOf(d)), g.length > 0 && j(b).unusedInput.push(g), h = h.slice(h.indexOf(d) + d.length), k += d.length), bd[f] ? (d ? j(b).empty = !1 : j(b).unusedTokens.push(f), U(f, d, b)) : b._strict && !d && j(b).unusedTokens.push(f);\n    }\n\n    j(b).charsLeftOver = i - k, h.length > 0 && j(b).unusedInput.push(h), j(b).bigHour === !0 && b._a[yd] <= 12 && b._a[yd] > 0 && (j(b).bigHour = void 0), b._a[yd] = xa(b._locale, b._a[yd], b._meridiem), ua(b), da(b);\n  }\n\n  function xa(a, b, c) {\n    var d;\n    return null == c ? b : null != a.meridiemHour ? a.meridiemHour(b, c) : null != a.isPM ? (d = a.isPM(c), d && 12 > b && (b += 12), d || 12 !== b || (b = 0), b) : b;\n  }\n\n  function ya(a) {\n    var b, c, d, e, f;\n    if (0 === a._f.length) return j(a).invalidFormat = !0, void (a._d = new Date(NaN));\n\n    for (e = 0; e < a._f.length; e++) {\n      f = 0, b = n({}, a), null != a._useUTC && (b._useUTC = a._useUTC), b._f = a._f[e], wa(b), k(b) && (f += j(b).charsLeftOver, f += 10 * j(b).unusedTokens.length, j(b).score = f, (null == d || d > f) && (d = f, c = b));\n    }\n\n    g(a, c || b);\n  }\n\n  function za(a) {\n    if (!a._d) {\n      var b = C(a._i);\n      a._a = e([b.year, b.month, b.day || b.date, b.hour, b.minute, b.second, b.millisecond], function (a) {\n        return a && parseInt(a, 10);\n      }), ua(a);\n    }\n  }\n\n  function Aa(a) {\n    var b = new o(da(Ba(a)));\n    return b._nextDay && (b.add(1, \"d\"), b._nextDay = void 0), b;\n  }\n\n  function Ba(a) {\n    var b = a._i,\n        e = a._f;\n    return a._locale = a._locale || z(a._l), null === b || void 0 === e && \"\" === b ? l({\n      nullInput: !0\n    }) : (\"string\" == typeof b && (a._i = b = a._locale.preparse(b)), p(b) ? new o(da(b)) : (c(e) ? ya(a) : e ? wa(a) : d(b) ? a._d = b : Ca(a), k(a) || (a._d = null), a));\n  }\n\n  function Ca(b) {\n    var f = b._i;\n    void 0 === f ? b._d = new Date(a.now()) : d(f) ? b._d = new Date(+f) : \"string\" == typeof f ? ia(b) : c(f) ? (b._a = e(f.slice(0), function (a) {\n      return parseInt(a, 10);\n    }), ua(b)) : \"object\" == _typeof(f) ? za(b) : \"number\" == typeof f ? b._d = new Date(f) : a.createFromInputFallback(b);\n  }\n\n  function Da(a, b, c, d, e) {\n    var f = {};\n    return \"boolean\" == typeof c && (d = c, c = void 0), f._isAMomentObject = !0, f._useUTC = f._isUTC = e, f._l = c, f._i = a, f._f = b, f._strict = d, Aa(f);\n  }\n\n  function Ea(a, b, c, d) {\n    return Da(a, b, c, d, !1);\n  }\n\n  function Fa(a, b) {\n    var d, e;\n    if (1 === b.length && c(b[0]) && (b = b[0]), !b.length) return Ea();\n\n    for (d = b[0], e = 1; e < b.length; ++e) {\n      (!b[e].isValid() || b[e][a](d)) && (d = b[e]);\n    }\n\n    return d;\n  }\n\n  function Ga() {\n    var a = [].slice.call(arguments, 0);\n    return Fa(\"isBefore\", a);\n  }\n\n  function Ha() {\n    var a = [].slice.call(arguments, 0);\n    return Fa(\"isAfter\", a);\n  }\n\n  function Ia(a) {\n    var b = C(a),\n        c = b.year || 0,\n        d = b.quarter || 0,\n        e = b.month || 0,\n        f = b.week || 0,\n        g = b.day || 0,\n        h = b.hour || 0,\n        i = b.minute || 0,\n        j = b.second || 0,\n        k = b.millisecond || 0;\n    this._milliseconds = +k + 1e3 * j + 6e4 * i + 36e5 * h, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._locale = z(), this._bubble();\n  }\n\n  function Ja(a) {\n    return a instanceof Ia;\n  }\n\n  function Ka(a, b) {\n    J(a, 0, 0, function () {\n      var a = this.utcOffset(),\n          c = \"+\";\n      return 0 > a && (a = -a, c = \"-\"), c + I(~~(a / 60), 2) + b + I(~~a % 60, 2);\n    });\n  }\n\n  function La(a, b) {\n    var c = (b || \"\").match(a) || [],\n        d = c[c.length - 1] || [],\n        e = (d + \"\").match(Ud) || [\"-\", 0, 0],\n        f = +(60 * e[1]) + r(e[2]);\n    return \"+\" === e[0] ? f : -f;\n  }\n\n  function Ma(b, c) {\n    var e, f;\n    return c._isUTC ? (e = c.clone(), f = (p(b) || d(b) ? +b : +Ea(b)) - +e, e._d.setTime(+e._d + f), a.updateOffset(e, !1), e) : Ea(b).local();\n  }\n\n  function Na(a) {\n    return 15 * -Math.round(a._d.getTimezoneOffset() / 15);\n  }\n\n  function Oa(b, c) {\n    var d,\n        e = this._offset || 0;\n    return this.isValid() ? null != b ? (\"string\" == typeof b ? b = La(qd, b) : Math.abs(b) < 16 && (b = 60 * b), !this._isUTC && c && (d = Na(this)), this._offset = b, this._isUTC = !0, null != d && this.add(d, \"m\"), e !== b && (!c || this._changeInProgress ? cb(this, Za(b - e, \"m\"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this) : this._isUTC ? e : Na(this) : null != b ? this : NaN;\n  }\n\n  function Pa(a, b) {\n    return null != a ? (\"string\" != typeof a && (a = -a), this.utcOffset(a, b), this) : -this.utcOffset();\n  }\n\n  function Qa(a) {\n    return this.utcOffset(0, a);\n  }\n\n  function Ra(a) {\n    return this._isUTC && (this.utcOffset(0, a), this._isUTC = !1, a && this.subtract(Na(this), \"m\")), this;\n  }\n\n  function Sa() {\n    return this._tzm ? this.utcOffset(this._tzm) : \"string\" == typeof this._i && this.utcOffset(La(pd, this._i)), this;\n  }\n\n  function Ta(a) {\n    return this.isValid() ? (a = a ? Ea(a).utcOffset() : 0, (this.utcOffset() - a) % 60 === 0) : !1;\n  }\n\n  function Ua() {\n    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n  }\n\n  function Va() {\n    if (!m(this._isDSTShifted)) return this._isDSTShifted;\n    var a = {};\n\n    if (n(a, this), a = Ba(a), a._a) {\n      var b = a._isUTC ? h(a._a) : Ea(a._a);\n      this._isDSTShifted = this.isValid() && s(a._a, b.toArray()) > 0;\n    } else this._isDSTShifted = !1;\n\n    return this._isDSTShifted;\n  }\n\n  function Wa() {\n    return this.isValid() ? !this._isUTC : !1;\n  }\n\n  function Xa() {\n    return this.isValid() ? this._isUTC : !1;\n  }\n\n  function Ya() {\n    return this.isValid() ? this._isUTC && 0 === this._offset : !1;\n  }\n\n  function Za(a, b) {\n    var c,\n        d,\n        e,\n        g = a,\n        h = null;\n    return Ja(a) ? g = {\n      ms: a._milliseconds,\n      d: a._days,\n      M: a._months\n    } : \"number\" == typeof a ? (g = {}, b ? g[b] = a : g.milliseconds = a) : (h = Vd.exec(a)) ? (c = \"-\" === h[1] ? -1 : 1, g = {\n      y: 0,\n      d: r(h[xd]) * c,\n      h: r(h[yd]) * c,\n      m: r(h[zd]) * c,\n      s: r(h[Ad]) * c,\n      ms: r(h[Bd]) * c\n    }) : (h = Wd.exec(a)) ? (c = \"-\" === h[1] ? -1 : 1, g = {\n      y: $a(h[2], c),\n      M: $a(h[3], c),\n      d: $a(h[4], c),\n      h: $a(h[5], c),\n      m: $a(h[6], c),\n      s: $a(h[7], c),\n      w: $a(h[8], c)\n    }) : null == g ? g = {} : \"object\" == _typeof(g) && (\"from\" in g || \"to\" in g) && (e = ab(Ea(g.from), Ea(g.to)), g = {}, g.ms = e.milliseconds, g.M = e.months), d = new Ia(g), Ja(a) && f(a, \"_locale\") && (d._locale = a._locale), d;\n  }\n\n  function $a(a, b) {\n    var c = a && parseFloat(a.replace(\",\", \".\"));\n    return (isNaN(c) ? 0 : c) * b;\n  }\n\n  function _a(a, b) {\n    var c = {\n      milliseconds: 0,\n      months: 0\n    };\n    return c.months = b.month() - a.month() + 12 * (b.year() - a.year()), a.clone().add(c.months, \"M\").isAfter(b) && --c.months, c.milliseconds = +b - +a.clone().add(c.months, \"M\"), c;\n  }\n\n  function ab(a, b) {\n    var c;\n    return a.isValid() && b.isValid() ? (b = Ma(b, a), a.isBefore(b) ? c = _a(a, b) : (c = _a(b, a), c.milliseconds = -c.milliseconds, c.months = -c.months), c) : {\n      milliseconds: 0,\n      months: 0\n    };\n  }\n\n  function bb(a, b) {\n    return function (c, d) {\n      var e, f;\n      return null === d || isNaN(+d) || (ga(b, \"moment().\" + b + \"(period, number) is deprecated. Please use moment().\" + b + \"(number, period).\"), f = c, c = d, d = f), c = \"string\" == typeof c ? +c : c, e = Za(c, d), cb(this, e, a), this;\n    };\n  }\n\n  function cb(b, c, d, e) {\n    var f = c._milliseconds,\n        g = c._days,\n        h = c._months;\n    b.isValid() && (e = null == e ? !0 : e, f && b._d.setTime(+b._d + f * d), g && G(b, \"Date\", F(b, \"Date\") + g * d), h && Z(b, F(b, \"Month\") + h * d), e && a.updateOffset(b, g || h));\n  }\n\n  function db(a, b) {\n    var c = a || Ea(),\n        d = Ma(c, this).startOf(\"day\"),\n        e = this.diff(d, \"days\", !0),\n        f = -6 > e ? \"sameElse\" : -1 > e ? \"lastWeek\" : 0 > e ? \"lastDay\" : 1 > e ? \"sameDay\" : 2 > e ? \"nextDay\" : 7 > e ? \"nextWeek\" : \"sameElse\",\n        g = b && (D(b[f]) ? b[f]() : b[f]);\n    return this.format(g || this.localeData().calendar(f, this, Ea(c)));\n  }\n\n  function eb() {\n    return new o(this);\n  }\n\n  function fb(a, b) {\n    var c = p(a) ? a : Ea(a);\n    return this.isValid() && c.isValid() ? (b = B(m(b) ? \"millisecond\" : b), \"millisecond\" === b ? +this > +c : +c < +this.clone().startOf(b)) : !1;\n  }\n\n  function gb(a, b) {\n    var c = p(a) ? a : Ea(a);\n    return this.isValid() && c.isValid() ? (b = B(m(b) ? \"millisecond\" : b), \"millisecond\" === b ? +c > +this : +this.clone().endOf(b) < +c) : !1;\n  }\n\n  function hb(a, b, c) {\n    return this.isAfter(a, c) && this.isBefore(b, c);\n  }\n\n  function ib(a, b) {\n    var c,\n        d = p(a) ? a : Ea(a);\n    return this.isValid() && d.isValid() ? (b = B(b || \"millisecond\"), \"millisecond\" === b ? +this === +d : (c = +d, +this.clone().startOf(b) <= c && c <= +this.clone().endOf(b))) : !1;\n  }\n\n  function jb(a, b) {\n    return this.isSame(a, b) || this.isAfter(a, b);\n  }\n\n  function kb(a, b) {\n    return this.isSame(a, b) || this.isBefore(a, b);\n  }\n\n  function lb(a, b, c) {\n    var d, e, f, g;\n    return this.isValid() ? (d = Ma(a, this), d.isValid() ? (e = 6e4 * (d.utcOffset() - this.utcOffset()), b = B(b), \"year\" === b || \"month\" === b || \"quarter\" === b ? (g = mb(this, d), \"quarter\" === b ? g /= 3 : \"year\" === b && (g /= 12)) : (f = this - d, g = \"second\" === b ? f / 1e3 : \"minute\" === b ? f / 6e4 : \"hour\" === b ? f / 36e5 : \"day\" === b ? (f - e) / 864e5 : \"week\" === b ? (f - e) / 6048e5 : f), c ? g : q(g)) : NaN) : NaN;\n  }\n\n  function mb(a, b) {\n    var c,\n        d,\n        e = 12 * (b.year() - a.year()) + (b.month() - a.month()),\n        f = a.clone().add(e, \"months\");\n    return 0 > b - f ? (c = a.clone().add(e - 1, \"months\"), d = (b - f) / (f - c)) : (c = a.clone().add(e + 1, \"months\"), d = (b - f) / (c - f)), -(e + d);\n  }\n\n  function nb() {\n    return this.clone().locale(\"en\").format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n  }\n\n  function ob() {\n    var a = this.clone().utc();\n    return 0 < a.year() && a.year() <= 9999 ? D(Date.prototype.toISOString) ? this.toDate().toISOString() : M(a, \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : M(a, \"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]\");\n  }\n\n  function pb(b) {\n    var c = M(this, b || a.defaultFormat);\n    return this.localeData().postformat(c);\n  }\n\n  function qb(a, b) {\n    return this.isValid() && (p(a) && a.isValid() || Ea(a).isValid()) ? Za({\n      to: this,\n      from: a\n    }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();\n  }\n\n  function rb(a) {\n    return this.from(Ea(), a);\n  }\n\n  function sb(a, b) {\n    return this.isValid() && (p(a) && a.isValid() || Ea(a).isValid()) ? Za({\n      from: this,\n      to: a\n    }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();\n  }\n\n  function tb(a) {\n    return this.to(Ea(), a);\n  }\n\n  function ub(a) {\n    var b;\n    return void 0 === a ? this._locale._abbr : (b = z(a), null != b && (this._locale = b), this);\n  }\n\n  function vb() {\n    return this._locale;\n  }\n\n  function wb(a) {\n    switch (a = B(a)) {\n      case \"year\":\n        this.month(0);\n\n      case \"quarter\":\n      case \"month\":\n        this.date(1);\n\n      case \"week\":\n      case \"isoWeek\":\n      case \"day\":\n        this.hours(0);\n\n      case \"hour\":\n        this.minutes(0);\n\n      case \"minute\":\n        this.seconds(0);\n\n      case \"second\":\n        this.milliseconds(0);\n    }\n\n    return \"week\" === a && this.weekday(0), \"isoWeek\" === a && this.isoWeekday(1), \"quarter\" === a && this.month(3 * Math.floor(this.month() / 3)), this;\n  }\n\n  function xb(a) {\n    return a = B(a), void 0 === a || \"millisecond\" === a ? this : this.startOf(a).add(1, \"isoWeek\" === a ? \"week\" : a).subtract(1, \"ms\");\n  }\n\n  function yb() {\n    return +this._d - 6e4 * (this._offset || 0);\n  }\n\n  function zb() {\n    return Math.floor(+this / 1e3);\n  }\n\n  function Ab() {\n    return this._offset ? new Date(+this) : this._d;\n  }\n\n  function Bb() {\n    var a = this;\n    return [a.year(), a.month(), a.date(), a.hour(), a.minute(), a.second(), a.millisecond()];\n  }\n\n  function Cb() {\n    var a = this;\n    return {\n      years: a.year(),\n      months: a.month(),\n      date: a.date(),\n      hours: a.hours(),\n      minutes: a.minutes(),\n      seconds: a.seconds(),\n      milliseconds: a.milliseconds()\n    };\n  }\n\n  function Db() {\n    return this.isValid() ? this.toISOString() : \"null\";\n  }\n\n  function Eb() {\n    return k(this);\n  }\n\n  function Fb() {\n    return g({}, j(this));\n  }\n\n  function Gb() {\n    return j(this).overflow;\n  }\n\n  function Hb() {\n    return {\n      input: this._i,\n      format: this._f,\n      locale: this._locale,\n      isUTC: this._isUTC,\n      strict: this._strict\n    };\n  }\n\n  function Ib(a, b) {\n    J(0, [a, a.length], 0, b);\n  }\n\n  function Jb(a) {\n    return Nb.call(this, a, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);\n  }\n\n  function Kb(a) {\n    return Nb.call(this, a, this.isoWeek(), this.isoWeekday(), 1, 4);\n  }\n\n  function Lb() {\n    return ra(this.year(), 1, 4);\n  }\n\n  function Mb() {\n    var a = this.localeData()._week;\n\n    return ra(this.year(), a.dow, a.doy);\n  }\n\n  function Nb(a, b, c, d, e) {\n    var f;\n    return null == a ? qa(this, d, e).year : (f = ra(a, d, e), b > f && (b = f), Ob.call(this, a, b, c, d, e));\n  }\n\n  function Ob(a, b, c, d, e) {\n    var f = pa(a, b, c, d, e),\n        g = ka(f.year, 0, f.dayOfYear);\n    return this.year(g.getUTCFullYear()), this.month(g.getUTCMonth()), this.date(g.getUTCDate()), this;\n  }\n\n  function Pb(a) {\n    return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3);\n  }\n\n  function Qb(a) {\n    return qa(a, this._week.dow, this._week.doy).week;\n  }\n\n  function Rb() {\n    return this._week.dow;\n  }\n\n  function Sb() {\n    return this._week.doy;\n  }\n\n  function Tb(a) {\n    var b = this.localeData().week(this);\n    return null == a ? b : this.add(7 * (a - b), \"d\");\n  }\n\n  function Ub(a) {\n    var b = qa(this, 1, 4).week;\n    return null == a ? b : this.add(7 * (a - b), \"d\");\n  }\n\n  function Vb(a, b) {\n    return \"string\" != typeof a ? a : isNaN(a) ? (a = b.weekdaysParse(a), \"number\" == typeof a ? a : null) : parseInt(a, 10);\n  }\n\n  function Wb(a, b) {\n    return c(this._weekdays) ? this._weekdays[a.day()] : this._weekdays[this._weekdays.isFormat.test(b) ? \"format\" : \"standalone\"][a.day()];\n  }\n\n  function Xb(a) {\n    return this._weekdaysShort[a.day()];\n  }\n\n  function Yb(a) {\n    return this._weekdaysMin[a.day()];\n  }\n\n  function Zb(a, b, c) {\n    var d, e, f;\n\n    for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), d = 0; 7 > d; d++) {\n      if (e = Ea([2e3, 1]).day(d), c && !this._fullWeekdaysParse[d] && (this._fullWeekdaysParse[d] = new RegExp(\"^\" + this.weekdays(e, \"\").replace(\".\", \".?\") + \"$\", \"i\"), this._shortWeekdaysParse[d] = new RegExp(\"^\" + this.weekdaysShort(e, \"\").replace(\".\", \".?\") + \"$\", \"i\"), this._minWeekdaysParse[d] = new RegExp(\"^\" + this.weekdaysMin(e, \"\").replace(\".\", \".?\") + \"$\", \"i\")), this._weekdaysParse[d] || (f = \"^\" + this.weekdays(e, \"\") + \"|^\" + this.weekdaysShort(e, \"\") + \"|^\" + this.weekdaysMin(e, \"\"), this._weekdaysParse[d] = new RegExp(f.replace(\".\", \"\"), \"i\")), c && \"dddd\" === b && this._fullWeekdaysParse[d].test(a)) return d;\n      if (c && \"ddd\" === b && this._shortWeekdaysParse[d].test(a)) return d;\n      if (c && \"dd\" === b && this._minWeekdaysParse[d].test(a)) return d;\n      if (!c && this._weekdaysParse[d].test(a)) return d;\n    }\n  }\n\n  function $b(a) {\n    if (!this.isValid()) return null != a ? this : NaN;\n    var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n    return null != a ? (a = Vb(a, this.localeData()), this.add(a - b, \"d\")) : b;\n  }\n\n  function _b(a) {\n    if (!this.isValid()) return null != a ? this : NaN;\n    var b = (this.day() + 7 - this.localeData()._week.dow) % 7;\n    return null == a ? b : this.add(a - b, \"d\");\n  }\n\n  function ac(a) {\n    return this.isValid() ? null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7) : null != a ? this : NaN;\n  }\n\n  function bc(a) {\n    var b = Math.round((this.clone().startOf(\"day\") - this.clone().startOf(\"year\")) / 864e5) + 1;\n    return null == a ? b : this.add(a - b, \"d\");\n  }\n\n  function cc() {\n    return this.hours() % 12 || 12;\n  }\n\n  function dc(a, b) {\n    J(a, 0, 0, function () {\n      return this.localeData().meridiem(this.hours(), this.minutes(), b);\n    });\n  }\n\n  function ec(a, b) {\n    return b._meridiemParse;\n  }\n\n  function fc(a) {\n    return \"p\" === (a + \"\").toLowerCase().charAt(0);\n  }\n\n  function gc(a, b, c) {\n    return a > 11 ? c ? \"pm\" : \"PM\" : c ? \"am\" : \"AM\";\n  }\n\n  function hc(a, b) {\n    b[Bd] = r(1e3 * (\"0.\" + a));\n  }\n\n  function ic() {\n    return this._isUTC ? \"UTC\" : \"\";\n  }\n\n  function jc() {\n    return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n  }\n\n  function kc(a) {\n    return Ea(1e3 * a);\n  }\n\n  function lc() {\n    return Ea.apply(null, arguments).parseZone();\n  }\n\n  function mc(a, b, c) {\n    var d = this._calendar[a];\n    return D(d) ? d.call(b, c) : d;\n  }\n\n  function nc(a) {\n    var b = this._longDateFormat[a],\n        c = this._longDateFormat[a.toUpperCase()];\n\n    return b || !c ? b : (this._longDateFormat[a] = c.replace(/MMMM|MM|DD|dddd/g, function (a) {\n      return a.slice(1);\n    }), this._longDateFormat[a]);\n  }\n\n  function oc() {\n    return this._invalidDate;\n  }\n\n  function pc(a) {\n    return this._ordinal.replace(\"%d\", a);\n  }\n\n  function qc(a) {\n    return a;\n  }\n\n  function rc(a, b, c, d) {\n    var e = this._relativeTime[c];\n    return D(e) ? e(a, b, c, d) : e.replace(/%d/i, a);\n  }\n\n  function sc(a, b) {\n    var c = this._relativeTime[a > 0 ? \"future\" : \"past\"];\n    return D(c) ? c(b) : c.replace(/%s/i, b);\n  }\n\n  function tc(a) {\n    var b, c;\n\n    for (c in a) {\n      b = a[c], D(b) ? this[c] = b : this[\"_\" + c] = b;\n    }\n\n    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + \"|\" + /\\d{1,2}/.source);\n  }\n\n  function uc(a, b, c, d) {\n    var e = z(),\n        f = h().set(d, b);\n    return e[c](f, a);\n  }\n\n  function vc(a, b, c, d, e) {\n    if (\"number\" == typeof a && (b = a, a = void 0), a = a || \"\", null != b) return uc(a, b, c, e);\n    var f,\n        g = [];\n\n    for (f = 0; d > f; f++) {\n      g[f] = uc(a, f, c, e);\n    }\n\n    return g;\n  }\n\n  function wc(a, b) {\n    return vc(a, b, \"months\", 12, \"month\");\n  }\n\n  function xc(a, b) {\n    return vc(a, b, \"monthsShort\", 12, \"month\");\n  }\n\n  function yc(a, b) {\n    return vc(a, b, \"weekdays\", 7, \"day\");\n  }\n\n  function zc(a, b) {\n    return vc(a, b, \"weekdaysShort\", 7, \"day\");\n  }\n\n  function Ac(a, b) {\n    return vc(a, b, \"weekdaysMin\", 7, \"day\");\n  }\n\n  function Bc() {\n    var a = this._data;\n    return this._milliseconds = se(this._milliseconds), this._days = se(this._days), this._months = se(this._months), a.milliseconds = se(a.milliseconds), a.seconds = se(a.seconds), a.minutes = se(a.minutes), a.hours = se(a.hours), a.months = se(a.months), a.years = se(a.years), this;\n  }\n\n  function Cc(a, b, c, d) {\n    var e = Za(b, c);\n    return a._milliseconds += d * e._milliseconds, a._days += d * e._days, a._months += d * e._months, a._bubble();\n  }\n\n  function Dc(a, b) {\n    return Cc(this, a, b, 1);\n  }\n\n  function Ec(a, b) {\n    return Cc(this, a, b, -1);\n  }\n\n  function Fc(a) {\n    return 0 > a ? Math.floor(a) : Math.ceil(a);\n  }\n\n  function Gc() {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f = this._milliseconds,\n        g = this._days,\n        h = this._months,\n        i = this._data;\n    return f >= 0 && g >= 0 && h >= 0 || 0 >= f && 0 >= g && 0 >= h || (f += 864e5 * Fc(Ic(h) + g), g = 0, h = 0), i.milliseconds = f % 1e3, a = q(f / 1e3), i.seconds = a % 60, b = q(a / 60), i.minutes = b % 60, c = q(b / 60), i.hours = c % 24, g += q(c / 24), e = q(Hc(g)), h += e, g -= Fc(Ic(e)), d = q(h / 12), h %= 12, i.days = g, i.months = h, i.years = d, this;\n  }\n\n  function Hc(a) {\n    return 4800 * a / 146097;\n  }\n\n  function Ic(a) {\n    return 146097 * a / 4800;\n  }\n\n  function Jc(a) {\n    var b,\n        c,\n        d = this._milliseconds;\n    if (a = B(a), \"month\" === a || \"year\" === a) return b = this._days + d / 864e5, c = this._months + Hc(b), \"month\" === a ? c : c / 12;\n\n    switch (b = this._days + Math.round(Ic(this._months)), a) {\n      case \"week\":\n        return b / 7 + d / 6048e5;\n\n      case \"day\":\n        return b + d / 864e5;\n\n      case \"hour\":\n        return 24 * b + d / 36e5;\n\n      case \"minute\":\n        return 1440 * b + d / 6e4;\n\n      case \"second\":\n        return 86400 * b + d / 1e3;\n\n      case \"millisecond\":\n        return Math.floor(864e5 * b) + d;\n\n      default:\n        throw new Error(\"Unknown unit \" + a);\n    }\n  }\n\n  function Kc() {\n    return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * r(this._months / 12);\n  }\n\n  function Lc(a) {\n    return function () {\n      return this.as(a);\n    };\n  }\n\n  function Mc(a) {\n    return a = B(a), this[a + \"s\"]();\n  }\n\n  function Nc(a) {\n    return function () {\n      return this._data[a];\n    };\n  }\n\n  function Oc() {\n    return q(this.days() / 7);\n  }\n\n  function Pc(a, b, c, d, e) {\n    return e.relativeTime(b || 1, !!c, a, d);\n  }\n\n  function Qc(a, b, c) {\n    var d = Za(a).abs(),\n        e = Ie(d.as(\"s\")),\n        f = Ie(d.as(\"m\")),\n        g = Ie(d.as(\"h\")),\n        h = Ie(d.as(\"d\")),\n        i = Ie(d.as(\"M\")),\n        j = Ie(d.as(\"y\")),\n        k = e < Je.s && [\"s\", e] || 1 >= f && [\"m\"] || f < Je.m && [\"mm\", f] || 1 >= g && [\"h\"] || g < Je.h && [\"hh\", g] || 1 >= h && [\"d\"] || h < Je.d && [\"dd\", h] || 1 >= i && [\"M\"] || i < Je.M && [\"MM\", i] || 1 >= j && [\"y\"] || [\"yy\", j];\n    return k[2] = b, k[3] = +a > 0, k[4] = c, Pc.apply(null, k);\n  }\n\n  function Rc(a, b) {\n    return void 0 === Je[a] ? !1 : void 0 === b ? Je[a] : (Je[a] = b, !0);\n  }\n\n  function Sc(a) {\n    var b = this.localeData(),\n        c = Qc(this, !a, b);\n    return a && (c = b.pastFuture(+this, c)), b.postformat(c);\n  }\n\n  function Tc() {\n    var a,\n        b,\n        c,\n        d = Ke(this._milliseconds) / 1e3,\n        e = Ke(this._days),\n        f = Ke(this._months);\n    a = q(d / 60), b = q(a / 60), d %= 60, a %= 60, c = q(f / 12), f %= 12;\n    var g = c,\n        h = f,\n        i = e,\n        j = b,\n        k = a,\n        l = d,\n        m = this.asSeconds();\n    return m ? (0 > m ? \"-\" : \"\") + \"P\" + (g ? g + \"Y\" : \"\") + (h ? h + \"M\" : \"\") + (i ? i + \"D\" : \"\") + (j || k || l ? \"T\" : \"\") + (j ? j + \"H\" : \"\") + (k ? k + \"M\" : \"\") + (l ? l + \"S\" : \"\") : \"P0D\";\n  }\n\n  var Uc,\n      Vc,\n      Wc = a.momentProperties = [],\n      Xc = !1,\n      Yc = {},\n      Zc = {},\n      $c = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n      _c = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n      ad = {},\n      bd = {},\n      cd = /\\d/,\n      dd = /\\d\\d/,\n      ed = /\\d{3}/,\n      fd = /\\d{4}/,\n      gd = /[+-]?\\d{6}/,\n      hd = /\\d\\d?/,\n      id = /\\d\\d\\d\\d?/,\n      jd = /\\d\\d\\d\\d\\d\\d?/,\n      kd = /\\d{1,3}/,\n      ld = /\\d{1,4}/,\n      md = /[+-]?\\d{1,6}/,\n      nd = /\\d+/,\n      od = /[+-]?\\d+/,\n      pd = /Z|[+-]\\d\\d:?\\d\\d/gi,\n      qd = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi,\n      rd = /[+-]?\\d+(\\.\\d{1,3})?/,\n      sd = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n      td = {},\n      ud = {},\n      vd = 0,\n      wd = 1,\n      xd = 2,\n      yd = 3,\n      zd = 4,\n      Ad = 5,\n      Bd = 6,\n      Cd = 7,\n      Dd = 8;\n  J(\"M\", [\"MM\", 2], \"Mo\", function () {\n    return this.month() + 1;\n  }), J(\"MMM\", 0, 0, function (a) {\n    return this.localeData().monthsShort(this, a);\n  }), J(\"MMMM\", 0, 0, function (a) {\n    return this.localeData().months(this, a);\n  }), A(\"month\", \"M\"), O(\"M\", hd), O(\"MM\", hd, dd), O(\"MMM\", function (a, b) {\n    return b.monthsShortRegex(a);\n  }), O(\"MMMM\", function (a, b) {\n    return b.monthsRegex(a);\n  }), S([\"M\", \"MM\"], function (a, b) {\n    b[wd] = r(a) - 1;\n  }), S([\"MMM\", \"MMMM\"], function (a, b, c, d) {\n    var e = c._locale.monthsParse(a, d, c._strict);\n\n    null != e ? b[wd] = e : j(c).invalidMonth = a;\n  });\n  var Ed = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/,\n      Fd = \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n      Gd = \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n      Hd = sd,\n      Id = sd,\n      Jd = {};\n  a.suppressDeprecationWarnings = !1;\n  var Kd = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/,\n      Ld = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/,\n      Md = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n      Nd = [[\"YYYYYY-MM-DD\", /[+-]\\d{6}-\\d\\d-\\d\\d/], [\"YYYY-MM-DD\", /\\d{4}-\\d\\d-\\d\\d/], [\"GGGG-[W]WW-E\", /\\d{4}-W\\d\\d-\\d/], [\"GGGG-[W]WW\", /\\d{4}-W\\d\\d/, !1], [\"YYYY-DDD\", /\\d{4}-\\d{3}/], [\"YYYY-MM\", /\\d{4}-\\d\\d/, !1], [\"YYYYYYMMDD\", /[+-]\\d{10}/], [\"YYYYMMDD\", /\\d{8}/], [\"GGGG[W]WWE\", /\\d{4}W\\d{3}/], [\"GGGG[W]WW\", /\\d{4}W\\d{2}/, !1], [\"YYYYDDD\", /\\d{7}/]],\n      Od = [[\"HH:mm:ss.SSSS\", /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], [\"HH:mm:ss,SSSS\", /\\d\\d:\\d\\d:\\d\\d,\\d+/], [\"HH:mm:ss\", /\\d\\d:\\d\\d:\\d\\d/], [\"HH:mm\", /\\d\\d:\\d\\d/], [\"HHmmss.SSSS\", /\\d\\d\\d\\d\\d\\d\\.\\d+/], [\"HHmmss,SSSS\", /\\d\\d\\d\\d\\d\\d,\\d+/], [\"HHmmss\", /\\d\\d\\d\\d\\d\\d/], [\"HHmm\", /\\d\\d\\d\\d/], [\"HH\", /\\d\\d/]],\n      Pd = /^\\/?Date\\((\\-?\\d+)/i;\n  a.createFromInputFallback = fa(\"moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.\", function (a) {\n    a._d = new Date(a._i + (a._useUTC ? \" UTC\" : \"\"));\n  }), J(\"Y\", 0, 0, function () {\n    var a = this.year();\n    return 9999 >= a ? \"\" + a : \"+\" + a;\n  }), J(0, [\"YY\", 2], 0, function () {\n    return this.year() % 100;\n  }), J(0, [\"YYYY\", 4], 0, \"year\"), J(0, [\"YYYYY\", 5], 0, \"year\"), J(0, [\"YYYYYY\", 6, !0], 0, \"year\"), A(\"year\", \"y\"), O(\"Y\", od), O(\"YY\", hd, dd), O(\"YYYY\", ld, fd), O(\"YYYYY\", md, gd), O(\"YYYYYY\", md, gd), S([\"YYYYY\", \"YYYYYY\"], vd), S(\"YYYY\", function (b, c) {\n    c[vd] = 2 === b.length ? a.parseTwoDigitYear(b) : r(b);\n  }), S(\"YY\", function (b, c) {\n    c[vd] = a.parseTwoDigitYear(b);\n  }), S(\"Y\", function (a, b) {\n    b[vd] = parseInt(a, 10);\n  }), a.parseTwoDigitYear = function (a) {\n    return r(a) + (r(a) > 68 ? 1900 : 2e3);\n  };\n  var Qd = E(\"FullYear\", !1);\n\n  a.ISO_8601 = function () {};\n\n  var Rd = fa(\"moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548\", function () {\n    var a = Ea.apply(null, arguments);\n    return this.isValid() && a.isValid() ? this > a ? this : a : l();\n  }),\n      Sd = fa(\"moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548\", function () {\n    var a = Ea.apply(null, arguments);\n    return this.isValid() && a.isValid() ? a > this ? this : a : l();\n  }),\n      Td = function Td() {\n    return Date.now ? Date.now() : +new Date();\n  };\n\n  Ka(\"Z\", \":\"), Ka(\"ZZ\", \"\"), O(\"Z\", qd), O(\"ZZ\", qd), S([\"Z\", \"ZZ\"], function (a, b, c) {\n    c._useUTC = !0, c._tzm = La(qd, a);\n  });\n  var Ud = /([\\+\\-]|\\d\\d)/gi;\n\n  a.updateOffset = function () {};\n\n  var Vd = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/,\n      Wd = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;\n  Za.fn = Ia.prototype;\n  var Xd = bb(1, \"add\"),\n      Yd = bb(-1, \"subtract\");\n  a.defaultFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\n  var Zd = fa(\"moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.\", function (a) {\n    return void 0 === a ? this.localeData() : this.locale(a);\n  });\n  J(0, [\"gg\", 2], 0, function () {\n    return this.weekYear() % 100;\n  }), J(0, [\"GG\", 2], 0, function () {\n    return this.isoWeekYear() % 100;\n  }), Ib(\"gggg\", \"weekYear\"), Ib(\"ggggg\", \"weekYear\"), Ib(\"GGGG\", \"isoWeekYear\"), Ib(\"GGGGG\", \"isoWeekYear\"), A(\"weekYear\", \"gg\"), A(\"isoWeekYear\", \"GG\"), O(\"G\", od), O(\"g\", od), O(\"GG\", hd, dd), O(\"gg\", hd, dd), O(\"GGGG\", ld, fd), O(\"gggg\", ld, fd), O(\"GGGGG\", md, gd), O(\"ggggg\", md, gd), T([\"gggg\", \"ggggg\", \"GGGG\", \"GGGGG\"], function (a, b, c, d) {\n    b[d.substr(0, 2)] = r(a);\n  }), T([\"gg\", \"GG\"], function (b, c, d, e) {\n    c[e] = a.parseTwoDigitYear(b);\n  }), J(\"Q\", 0, \"Qo\", \"quarter\"), A(\"quarter\", \"Q\"), O(\"Q\", cd), S(\"Q\", function (a, b) {\n    b[wd] = 3 * (r(a) - 1);\n  }), J(\"w\", [\"ww\", 2], \"wo\", \"week\"), J(\"W\", [\"WW\", 2], \"Wo\", \"isoWeek\"), A(\"week\", \"w\"), A(\"isoWeek\", \"W\"), O(\"w\", hd), O(\"ww\", hd, dd), O(\"W\", hd), O(\"WW\", hd, dd), T([\"w\", \"ww\", \"W\", \"WW\"], function (a, b, c, d) {\n    b[d.substr(0, 1)] = r(a);\n  });\n  var $d = {\n    dow: 0,\n    doy: 6\n  };\n  J(\"D\", [\"DD\", 2], \"Do\", \"date\"), A(\"date\", \"D\"), O(\"D\", hd), O(\"DD\", hd, dd), O(\"Do\", function (a, b) {\n    return a ? b._ordinalParse : b._ordinalParseLenient;\n  }), S([\"D\", \"DD\"], xd), S(\"Do\", function (a, b) {\n    b[xd] = r(a.match(hd)[0], 10);\n  });\n\n  var _d = E(\"Date\", !0);\n\n  J(\"d\", 0, \"do\", \"day\"), J(\"dd\", 0, 0, function (a) {\n    return this.localeData().weekdaysMin(this, a);\n  }), J(\"ddd\", 0, 0, function (a) {\n    return this.localeData().weekdaysShort(this, a);\n  }), J(\"dddd\", 0, 0, function (a) {\n    return this.localeData().weekdays(this, a);\n  }), J(\"e\", 0, 0, \"weekday\"), J(\"E\", 0, 0, \"isoWeekday\"), A(\"day\", \"d\"), A(\"weekday\", \"e\"), A(\"isoWeekday\", \"E\"), O(\"d\", hd), O(\"e\", hd), O(\"E\", hd), O(\"dd\", sd), O(\"ddd\", sd), O(\"dddd\", sd), T([\"dd\", \"ddd\", \"dddd\"], function (a, b, c, d) {\n    var e = c._locale.weekdaysParse(a, d, c._strict);\n\n    null != e ? b.d = e : j(c).invalidWeekday = a;\n  }), T([\"d\", \"e\", \"E\"], function (a, b, c, d) {\n    b[d] = r(a);\n  });\n  var ae = \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n      be = \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n      ce = \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\");\n  J(\"DDD\", [\"DDDD\", 3], \"DDDo\", \"dayOfYear\"), A(\"dayOfYear\", \"DDD\"), O(\"DDD\", kd), O(\"DDDD\", ed), S([\"DDD\", \"DDDD\"], function (a, b, c) {\n    c._dayOfYear = r(a);\n  }), J(\"H\", [\"HH\", 2], 0, \"hour\"), J(\"h\", [\"hh\", 2], 0, cc), J(\"hmm\", 0, 0, function () {\n    return \"\" + cc.apply(this) + I(this.minutes(), 2);\n  }), J(\"hmmss\", 0, 0, function () {\n    return \"\" + cc.apply(this) + I(this.minutes(), 2) + I(this.seconds(), 2);\n  }), J(\"Hmm\", 0, 0, function () {\n    return \"\" + this.hours() + I(this.minutes(), 2);\n  }), J(\"Hmmss\", 0, 0, function () {\n    return \"\" + this.hours() + I(this.minutes(), 2) + I(this.seconds(), 2);\n  }), dc(\"a\", !0), dc(\"A\", !1), A(\"hour\", \"h\"), O(\"a\", ec), O(\"A\", ec), O(\"H\", hd), O(\"h\", hd), O(\"HH\", hd, dd), O(\"hh\", hd, dd), O(\"hmm\", id), O(\"hmmss\", jd), O(\"Hmm\", id), O(\"Hmmss\", jd), S([\"H\", \"HH\"], yd), S([\"a\", \"A\"], function (a, b, c) {\n    c._isPm = c._locale.isPM(a), c._meridiem = a;\n  }), S([\"h\", \"hh\"], function (a, b, c) {\n    b[yd] = r(a), j(c).bigHour = !0;\n  }), S(\"hmm\", function (a, b, c) {\n    var d = a.length - 2;\n    b[yd] = r(a.substr(0, d)), b[zd] = r(a.substr(d)), j(c).bigHour = !0;\n  }), S(\"hmmss\", function (a, b, c) {\n    var d = a.length - 4,\n        e = a.length - 2;\n    b[yd] = r(a.substr(0, d)), b[zd] = r(a.substr(d, 2)), b[Ad] = r(a.substr(e)), j(c).bigHour = !0;\n  }), S(\"Hmm\", function (a, b, c) {\n    var d = a.length - 2;\n    b[yd] = r(a.substr(0, d)), b[zd] = r(a.substr(d));\n  }), S(\"Hmmss\", function (a, b, c) {\n    var d = a.length - 4,\n        e = a.length - 2;\n    b[yd] = r(a.substr(0, d)), b[zd] = r(a.substr(d, 2)), b[Ad] = r(a.substr(e));\n  });\n  var de = /[ap]\\.?m?\\.?/i,\n      ee = E(\"Hours\", !0);\n  J(\"m\", [\"mm\", 2], 0, \"minute\"), A(\"minute\", \"m\"), O(\"m\", hd), O(\"mm\", hd, dd), S([\"m\", \"mm\"], zd);\n  var fe = E(\"Minutes\", !1);\n  J(\"s\", [\"ss\", 2], 0, \"second\"), A(\"second\", \"s\"), O(\"s\", hd), O(\"ss\", hd, dd), S([\"s\", \"ss\"], Ad);\n  var ge = E(\"Seconds\", !1);\n  J(\"S\", 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n  }), J(0, [\"SS\", 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n  }), J(0, [\"SSS\", 3], 0, \"millisecond\"), J(0, [\"SSSS\", 4], 0, function () {\n    return 10 * this.millisecond();\n  }), J(0, [\"SSSSS\", 5], 0, function () {\n    return 100 * this.millisecond();\n  }), J(0, [\"SSSSSS\", 6], 0, function () {\n    return 1e3 * this.millisecond();\n  }), J(0, [\"SSSSSSS\", 7], 0, function () {\n    return 1e4 * this.millisecond();\n  }), J(0, [\"SSSSSSSS\", 8], 0, function () {\n    return 1e5 * this.millisecond();\n  }), J(0, [\"SSSSSSSSS\", 9], 0, function () {\n    return 1e6 * this.millisecond();\n  }), A(\"millisecond\", \"ms\"), O(\"S\", kd, cd), O(\"SS\", kd, dd), O(\"SSS\", kd, ed);\n  var he;\n\n  for (he = \"SSSS\"; he.length <= 9; he += \"S\") {\n    O(he, nd);\n  }\n\n  for (he = \"S\"; he.length <= 9; he += \"S\") {\n    S(he, hc);\n  }\n\n  var ie = E(\"Milliseconds\", !1);\n  J(\"z\", 0, 0, \"zoneAbbr\"), J(\"zz\", 0, 0, \"zoneName\");\n  var je = o.prototype;\n  je.add = Xd, je.calendar = db, je.clone = eb, je.diff = lb, je.endOf = xb, je.format = pb, je.from = qb, je.fromNow = rb, je.to = sb, je.toNow = tb, je.get = H, je.invalidAt = Gb, je.isAfter = fb, je.isBefore = gb, je.isBetween = hb, je.isSame = ib, je.isSameOrAfter = jb, je.isSameOrBefore = kb, je.isValid = Eb, je.lang = Zd, je.locale = ub, je.localeData = vb, je.max = Sd, je.min = Rd, je.parsingFlags = Fb, je.set = H, je.startOf = wb, je.subtract = Yd, je.toArray = Bb, je.toObject = Cb, je.toDate = Ab, je.toISOString = ob, je.toJSON = Db, je.toString = nb, je.unix = zb, je.valueOf = yb, je.creationData = Hb, je.year = Qd, je.isLeapYear = na, je.weekYear = Jb, je.isoWeekYear = Kb, je.quarter = je.quarters = Pb, je.month = $, je.daysInMonth = _, je.week = je.weeks = Tb, je.isoWeek = je.isoWeeks = Ub, je.weeksInYear = Mb, je.isoWeeksInYear = Lb, je.date = _d, je.day = je.days = $b, je.weekday = _b, je.isoWeekday = ac, je.dayOfYear = bc, je.hour = je.hours = ee, je.minute = je.minutes = fe, je.second = je.seconds = ge, je.millisecond = je.milliseconds = ie, je.utcOffset = Oa, je.utc = Qa, je.local = Ra, je.parseZone = Sa, je.hasAlignedHourOffset = Ta, je.isDST = Ua, je.isDSTShifted = Va, je.isLocal = Wa, je.isUtcOffset = Xa, je.isUtc = Ya, je.isUTC = Ya, je.zoneAbbr = ic, je.zoneName = jc, je.dates = fa(\"dates accessor is deprecated. Use date instead.\", _d), je.months = fa(\"months accessor is deprecated. Use month instead\", $), je.years = fa(\"years accessor is deprecated. Use year instead\", Qd), je.zone = fa(\"moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779\", Pa);\n  var ke = je,\n      le = {\n    sameDay: \"[Today at] LT\",\n    nextDay: \"[Tomorrow at] LT\",\n    nextWeek: \"dddd [at] LT\",\n    lastDay: \"[Yesterday at] LT\",\n    lastWeek: \"[Last] dddd [at] LT\",\n    sameElse: \"L\"\n  },\n      me = {\n    LTS: \"h:mm:ss A\",\n    LT: \"h:mm A\",\n    L: \"MM/DD/YYYY\",\n    LL: \"MMMM D, YYYY\",\n    LLL: \"MMMM D, YYYY h:mm A\",\n    LLLL: \"dddd, MMMM D, YYYY h:mm A\"\n  },\n      ne = \"Invalid date\",\n      oe = \"%d\",\n      pe = /\\d{1,2}/,\n      qe = {\n    future: \"in %s\",\n    past: \"%s ago\",\n    s: \"a few seconds\",\n    m: \"a minute\",\n    mm: \"%d minutes\",\n    h: \"an hour\",\n    hh: \"%d hours\",\n    d: \"a day\",\n    dd: \"%d days\",\n    M: \"a month\",\n    MM: \"%d months\",\n    y: \"a year\",\n    yy: \"%d years\"\n  },\n      re = t.prototype;\n  re._calendar = le, re.calendar = mc, re._longDateFormat = me, re.longDateFormat = nc, re._invalidDate = ne, re.invalidDate = oc, re._ordinal = oe, re.ordinal = pc, re._ordinalParse = pe, re.preparse = qc, re.postformat = qc, re._relativeTime = qe, re.relativeTime = rc, re.pastFuture = sc, re.set = tc, re.months = W, re._months = Fd, re.monthsShort = X, re._monthsShort = Gd, re.monthsParse = Y, re._monthsRegex = Id, re.monthsRegex = ba, re._monthsShortRegex = Hd, re.monthsShortRegex = aa, re.week = Qb, re._week = $d, re.firstDayOfYear = Sb, re.firstDayOfWeek = Rb, re.weekdays = Wb, re._weekdays = ae, re.weekdaysMin = Yb, re._weekdaysMin = ce, re.weekdaysShort = Xb, re._weekdaysShort = be, re.weekdaysParse = Zb, re.isPM = fc, re._meridiemParse = de, re.meridiem = gc, x(\"en\", {\n    ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n    ordinal: function ordinal(a) {\n      var b = a % 10,\n          c = 1 === r(a % 100 / 10) ? \"th\" : 1 === b ? \"st\" : 2 === b ? \"nd\" : 3 === b ? \"rd\" : \"th\";\n      return a + c;\n    }\n  }), a.lang = fa(\"moment.lang is deprecated. Use moment.locale instead.\", x), a.langData = fa(\"moment.langData is deprecated. Use moment.localeData instead.\", z);\n  var se = Math.abs,\n      te = Lc(\"ms\"),\n      ue = Lc(\"s\"),\n      ve = Lc(\"m\"),\n      we = Lc(\"h\"),\n      xe = Lc(\"d\"),\n      ye = Lc(\"w\"),\n      ze = Lc(\"M\"),\n      Ae = Lc(\"y\"),\n      Be = Nc(\"milliseconds\"),\n      Ce = Nc(\"seconds\"),\n      De = Nc(\"minutes\"),\n      Ee = Nc(\"hours\"),\n      Fe = Nc(\"days\"),\n      Ge = Nc(\"months\"),\n      He = Nc(\"years\"),\n      Ie = Math.round,\n      Je = {\n    s: 45,\n    m: 45,\n    h: 22,\n    d: 26,\n    M: 11\n  },\n      Ke = Math.abs,\n      Le = Ia.prototype;\n  Le.abs = Bc, Le.add = Dc, Le.subtract = Ec, Le.as = Jc, Le.asMilliseconds = te, Le.asSeconds = ue, Le.asMinutes = ve, Le.asHours = we, Le.asDays = xe, Le.asWeeks = ye, Le.asMonths = ze, Le.asYears = Ae, Le.valueOf = Kc, Le._bubble = Gc, Le.get = Mc, Le.milliseconds = Be, Le.seconds = Ce, Le.minutes = De, Le.hours = Ee, Le.days = Fe, Le.weeks = Oc, Le.months = Ge, Le.years = He, Le.humanize = Sc, Le.toISOString = Tc, Le.toString = Tc, Le.toJSON = Tc, Le.locale = ub, Le.localeData = vb, Le.toIsoString = fa(\"toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)\", Tc), Le.lang = Zd, J(\"X\", 0, 0, \"unix\"), J(\"x\", 0, 0, \"valueOf\"), O(\"x\", od), O(\"X\", rd), S(\"X\", function (a, b, c) {\n    c._d = new Date(1e3 * parseFloat(a, 10));\n  }), S(\"x\", function (a, b, c) {\n    c._d = new Date(r(a));\n  }), a.version = \"2.11.2\", b(Ea), a.fn = ke, a.min = Ga, a.max = Ha, a.now = Td, a.utc = h, a.unix = kc, a.months = wc, a.isDate = d, a.locale = x, a.invalid = l, a.duration = Za, a.isMoment = p, a.weekdays = yc, a.parseZone = lc, a.localeData = z, a.isDuration = Ja, a.monthsShort = xc, a.weekdaysMin = Ac, a.defineLocale = y, a.weekdaysShort = zc, a.normalizeUnits = B, a.relativeTimeThreshold = Rc, a.prototype = ke;\n  var Me = a;\n  return Me;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/moment.min.js\n");

/***/ }),

/***/ "./js/components/Breadcrumb.js":
/*!*************************************!*\
  !*** ./js/components/Breadcrumb.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Breadcrumb = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(Breadcrumb, _HTMLElement);\n\n  var _super = _createSuper(Breadcrumb);\n\n  function Breadcrumb() {\n    _classCallCheck(this, Breadcrumb);\n\n    return _super.call(this);\n  }\n\n  _createClass(Breadcrumb, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.shadowRoot = this.attachShadow({\n        mode: 'open'\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'breadcrumb-wrapper';\n      this.shadowRoot.appendChild(this._wrapper);\n      var slot = \"<slot></slot>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', slot);\n\n      this._slot = this._wrapper.querySelector('slot');\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {}\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!!this._wrapper) return;\n    }\n  }]);\n\n  return Breadcrumb;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(Breadcrumb, \"observedAttributes\", []);\n\ncustomElements.define('bread-crumb', Breadcrumb);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL2NvbXBvbmVudHMvQnJlYWRjcnVtYi5qcz85ZGZlIl0sIm5hbWVzIjpbIkJyZWFkY3J1bWIiLCJhdHRyTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJkeW5hbWljUmVuZGVyIiwic2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIm1vZGUiLCJzdHlsZVNoZWV0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJfd3JhcHBlciIsImNsYXNzTmFtZSIsInNsb3QiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJfc2xvdCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MRWxlbWVudCIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBTUEsVTs7Ozs7QUFHRix3QkFBYztBQUFBOztBQUFBO0FBRWI7Ozs7V0FFRCxrQ0FBeUJDLFFBQXpCLEVBQW1DQyxRQUFuQyxFQUE2Q0MsUUFBN0MsRUFBdUQ7QUFDbkQsV0FBS0MsYUFBTDtBQUNIOzs7V0FFRCw2QkFBb0I7QUFDaEIsV0FBS0MsVUFBTCxHQUFrQixLQUFLQyxZQUFMLENBQWtCO0FBQUNDLFFBQUFBLElBQUksRUFBRTtBQUFQLE9BQWxCLENBQWxCLENBRGdCLENBR2hCOztBQUNBLFVBQU1DLFVBQVUsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBQW5CO0FBQ0FGLE1BQUFBLFVBQVUsQ0FBQ0csWUFBWCxDQUF3QixLQUF4QixFQUErQixZQUEvQjtBQUNBSCxNQUFBQSxVQUFVLENBQUNHLFlBQVgsQ0FBd0IsTUFBeEIsRUFBZ0MsaUJBQWhDO0FBQ0EsV0FBS04sVUFBTCxDQUFnQk8sV0FBaEIsQ0FBNEJKLFVBQTVCO0FBRUEsV0FBS0ssUUFBTCxHQUFnQkosUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0EsV0FBS0csUUFBTCxDQUFjQyxTQUFkLEdBQTBCLG9CQUExQjtBQUNBLFdBQUtULFVBQUwsQ0FBZ0JPLFdBQWhCLENBQTRCLEtBQUtDLFFBQWpDO0FBRUEsVUFBTUUsSUFBSSxrQkFBVjs7QUFFQSxXQUFLRixRQUFMLENBQWNHLGtCQUFkLENBQWlDLFdBQWpDLEVBQThDRCxJQUE5Qzs7QUFDQSxXQUFLRSxLQUFMLEdBQWEsS0FBS0osUUFBTCxDQUFjSyxhQUFkLENBQTRCLE1BQTVCLENBQWI7QUFFQSxXQUFLZCxhQUFMO0FBQ0g7OztXQUVELHVCQUFjLENBRWI7OztXQUVELHlCQUFnQjtBQUNaLFVBQUksQ0FBQyxDQUFDLEtBQUtTLFFBQVgsRUFBcUI7QUFFeEI7Ozs7aUNBdkNvQk0sVzs7Z0JBQW5CbkIsVSx3QkFDMEIsRTs7QUF3Q2hDb0IsY0FBYyxDQUFDQyxNQUFmLENBQXNCLGFBQXRCLEVBQXFDckIsVUFBckMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBCcmVhZGNydW1iIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBvYnNlcnZlZEF0dHJpYnV0ZXMgPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1JlbmRlcigpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG5cbiAgICAgICAgLy8gQXBwZW5kIHNpdGUgc3R5bGVzaGVldFxuICAgICAgICBjb25zdCBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgICBzdHlsZVNoZWV0LnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgc3R5bGVTaGVldC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnL2Rpc3Qvc3R5bGUuY3NzJyk7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzdHlsZVNoZWV0KTtcblxuICAgICAgICB0aGlzLl93cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NOYW1lID0gJ2JyZWFkY3J1bWItd3JhcHBlcic7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0aGlzLl93cmFwcGVyKTtcblxuICAgICAgICBjb25zdCBzbG90ID0gYDxzbG90Pjwvc2xvdD5gO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzbG90KTtcbiAgICAgICAgdGhpcy5fc2xvdCA9IHRoaXMuX3dyYXBwZXIucXVlcnlTZWxlY3Rvcignc2xvdCcpO1xuXG4gICAgICAgIHRoaXMuZHluYW1pY1JlbmRlcigpO1xuICAgIH1cblxuICAgIHNldHVwRXZlbnRzKCkge1xuXG4gICAgfVxuXG4gICAgZHluYW1pY1JlbmRlcigpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5fd3JhcHBlcikgcmV0dXJuO1xuXG4gICAgfX1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdicmVhZC1jcnVtYicsIEJyZWFkY3J1bWIpO1xuXG4iXSwiZmlsZSI6Ii4vanMvY29tcG9uZW50cy9CcmVhZGNydW1iLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/components/Breadcrumb.js\n");

/***/ }),

/***/ "./js/components/CheckBox.js":
/*!***********************************!*\
  !*** ./js/components/CheckBox.js ***!
  \***********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CheckBox = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(CheckBox, _HTMLElement);\n\n  var _super = _createSuper(CheckBox);\n\n  // Identify the element as a form-associated custom element\n  function CheckBox() {\n    var _this;\n\n    _classCallCheck(this, CheckBox);\n\n    _this = _super.call(this);\n    _this._onCheckedHandler = null;\n    return _this;\n  }\n\n  _createClass(CheckBox, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      });\n      this._shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n\n      this._shadowRoot.appendChild(styleSheet);\n\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'checkbox-wrapper';\n      this._wrapper.tabIndex = 0;\n\n      this._shadowRoot.appendChild(this._wrapper);\n\n      var square = \"<div class=\\\"checkbox-square\" + (!!this.getAttribute('checked') ? ' checked=\"checked\"' : '') + \"\\\"></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', square);\n\n      this._square = this._wrapper.querySelector('.checkbox-square');\n      var text = \"<span class=\\\"checkbox-text\\\">\" + this.getAttribute('text') + \"</span>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', text);\n\n      this._text = this._wrapper.querySelector('.checkbox-text'); // Get access to the internal form control APIs\n\n      this._internals = this.attachInternals();\n      this.setupEvents();\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      this._wrapper.addEventListener('keydown', function (e) {\n        if (e.key === ' ') {\n          e.preventDefault();\n\n          _this2.handleClick();\n        }\n      });\n\n      this._square.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n\n      this._text.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      if (!!this.getAttribute('disabled')) return;\n\n      if (!!this.getAttribute('checked')) {\n        this.removeAttribute('checked');\n\n        this._square.classList.remove('checked');\n      } else {\n        this.setAttribute('checked', 'checked');\n\n        this._square.classList.add('checked');\n      }\n\n      this.updateFormValue(); // Trigger change event\n\n      this._shadowRoot.dispatchEvent(new Event('change', {\n        composed: true,\n        bubbles: true\n      }));\n\n      this._shadowRoot.dispatchEvent(new Event('checked', {\n        composed: true,\n        bubbles: true\n      }));\n\n      if (this._onCheckedHandler) {\n        this._onCheckedHandler();\n      }\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._wrapper || !this._square || !this._text) return;\n      this._text.innerHTML = this.getAttribute('text');\n\n      if (!!this.getAttribute('checked')) {\n        this._square.classList.add('checked');\n      } else {\n        this._square.classList.remove('checked');\n      }\n\n      this.updateFormValue();\n\n      if (!!this.getAttribute('small')) {\n        this._square.classList.add('small');\n\n        this._text.classList.add('small');\n      } else {\n        this._square.classList.remove('small');\n\n        this._text.classList.remove('small');\n      }\n\n      if (!!this.getAttribute('disabled')) {\n        this._square.classList.add('disabled');\n      } else {\n        this._square.classList.remove('disabled');\n      }\n    }\n  }, {\n    key: \"updateFormValue\",\n    value: function updateFormValue() {\n      if (!!this.getAttribute('data-value')) {\n        this._internals.setFormValue(!!this.getAttribute('checked') ? this.getAttribute('data-value') : null);\n      } else {\n        this._internals.setFormValue(!!this.getAttribute('checked') ? 'on' : null);\n      }\n    }\n  }, {\n    key: \"onchecked\",\n    get: function get() {\n      return this._onCheckedHandler;\n    },\n    set: function set(f) {\n      this._onCheckedHandler = f;\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return !!this.getAttribute('checked');\n    },\n    set: function set(c) {\n      if (c) {\n        this.setAttribute('checked', 'checked');\n\n        this._square.classList.add('checked');\n      } else {\n        this.removeAttribute('checked');\n\n        this._square.classList.remove('checked');\n      }\n    } // Form controls usually expose a \"value\" property\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return !!this.getAttribute('checked') ? 'on' : '';\n    },\n    set: function set(v) {\n      this.setAttribute('checked', v === 'on' ? 'checked' : '');\n    } // The following properties and methods aren't strictly required,\n    // but browser-level form controls provide them. Providing them helps\n    // ensure consistency with browser-provided controls.\n\n  }, {\n    key: \"form\",\n    get: function get() {\n      return this._internals.form;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.getAttribute('name');\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.localName;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      return this._internals.validity;\n    }\n  }, {\n    key: \"validationMessage\",\n    get: function get() {\n      return this._internals.validationMessage;\n    }\n  }, {\n    key: \"willValidate\",\n    get: function get() {\n      return this._internals.willValidate;\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity() {\n      return this._internals.checkValidity();\n    }\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this._internals.reportValidity();\n    }\n  }]);\n\n  return CheckBox;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(CheckBox, \"observedAttributes\", ['id', 'name', 'text', 'small', 'checked', 'disabled']);\n\n_defineProperty(CheckBox, \"formAssociated\", true);\n\ncustomElements.define('check-box', CheckBox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/CheckBox.js\n");

/***/ }),

/***/ "./js/components/CommentTextarea.js":
/*!******************************************!*\
  !*** ./js/components/CommentTextarea.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _TaggableTextarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TaggableTextarea */ \"./js/components/TaggableTextarea.js\");\n/* harmony import */ var _parsers_CommentTagParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parsers/CommentTagParser */ \"./js/parsers/CommentTagParser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar CommentTextarea = /*#__PURE__*/function (_TaggableTextarea) {\n  _inherits(CommentTextarea, _TaggableTextarea);\n\n  var _super = _createSuper(CommentTextarea);\n\n  function CommentTextarea() {\n    _classCallCheck(this, CommentTextarea);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CommentTextarea, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      _get(_getPrototypeOf(CommentTextarea.prototype), \"dynamicRender\", this).call(this);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this$getAttribute;\n\n      _get(_getPrototypeOf(CommentTextarea.prototype), \"connectedCallback\", this).call(this);\n\n      this.userList = [];\n      var usersRaw = (_this$getAttribute = this.getAttribute('user-list')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '[]';\n      var users = JSON.parse(usersRaw);\n\n      if (users) {\n        this.userList = users;\n      }\n\n      this.setupEvents();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this = this;\n\n      this.addEventListener('keydown', function (e) {\n        if (_this._wrapper.querySelector('.placeholder')) {\n          _this._placeholder.remove();\n        }\n\n        if (_this.popupShowing) {\n          if (e.key === 'Enter' || e.key === 'Tab' || e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }\n      });\n      this.addEventListener('keyup', function (e) {\n        if (e.key.length !== 1 && e.key !== 'Backspace' && e.key !== 'Enter' && e.key !== 'Escape' && e.key !== 'Tab' && e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;\n\n        if (e.key === '@' && _this.userList.length > 0) {\n          if (_this.popupShowing) {\n            _this.hideUserPopup();\n          }\n\n          var cursorPos = _this.caretCoordinates();\n\n          var hostPos = _this.shadowRoot.host.getBoundingClientRect();\n\n          _this.showUserPopup(cursorPos.left - hostPos.left, cursorPos.top - hostPos.top + 30);\n        } else if (_this.popupShowing) {\n          if (e.key === 'Backspace') {\n            if (_this.popupPartialText === '') {\n              _this.hideUserPopup();\n\n              return;\n            } else {\n              _this.popupPartialText = _this.popupPartialText.substring(0, _this.popupPartialText.length - 1);\n\n              _this.populatePopupWithQuery(_this.popupPartialText);\n            }\n          } else if (e.key === 'Enter' || e.key === 'Tab') {\n            // Select item\n            var items = _this.itemsForQuery(_this.popupPartialText);\n\n            if (items.length > 0 && _this.popupSelectedIndex >= 0 && _this.popupSelectedIndex < items.length) {\n              _this.tagUserAtCurrentPosition(items[_this.popupSelectedIndex]);\n            }\n\n            _this.hideUserPopup();\n          } else if (e.key === 'ArrowUp') {\n            var newIndex = _this.popupSelectedIndex - 1;\n            if (newIndex < 0) newIndex = 0;\n\n            _this.highlightPopupItemAtIndex(newIndex);\n          } else if (e.key === 'ArrowDown') {\n            var users = _this.itemsForQuery(_this.popupPartialText);\n\n            var _newIndex = _this.popupSelectedIndex + 1;\n\n            if (_newIndex >= users.length) _newIndex = users.length - 1;\n\n            _this.highlightPopupItemAtIndex(_newIndex);\n          } else if (e.key === 'Escape') {\n            _this.hideUserPopup();\n          } else {\n            _this.popupPartialText += e.key;\n\n            _this.populatePopupWithQuery(_this.popupPartialText);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"showUserPopup\",\n    value: function showUserPopup(xPos, yPos) {\n      this.popupShowing = true;\n      this.popupPartialText = '';\n      var selection = document.getSelection();\n      var caretInfo = this.getCaretPositionFromSelection(selection);\n      this.popupAbsoluteOffset = caretInfo.absoluteLength;\n      this.popupNodeIndex = caretInfo.nodeIndex;\n      this.popup = document.createElement('div');\n      this.popup.classList.add('comment-textarea-popup');\n      this.populatePopupWithQuery('');\n      this.shadowRoot.appendChild(this.popup);\n      this.popup.style.left = xPos + 'px';\n      this.popup.style.top = yPos + 'px';\n    }\n  }, {\n    key: \"hideUserPopup\",\n    value: function hideUserPopup() {\n      this.popupShowing = false;\n      this.popupPartialText = '';\n      this.popup.remove();\n      this.popup = null; // Clean up errant popups\n\n      this.shadowRoot.querySelectorAll('.comment-textarea-popup').forEach(function (obj) {\n        obj.remove();\n      });\n    }\n  }, {\n    key: \"populatePopupWithQuery\",\n    value: function populatePopupWithQuery(query) {\n      var _this2 = this;\n\n      this.popup.innerHTML = '';\n      var items = this.itemsForQuery(query);\n      this.popupSelectedIndex = items.length > 0 ? 0 : -1;\n\n      for (var i = 0; i < items.length; i++) {\n        this.popup.innerHTML += \"<div class=\\\"popup-item\" + (i === 0 ? ' selected' : '') + \"\\\" data-id=\\\"\".concat(items[i].id, \"\\\">\").concat(items[i].name, \"</div>\");\n      }\n\n      this.popup.querySelectorAll('.popup-item').forEach(function (obj, i) {\n        obj.addEventListener('mouseover', function (e) {\n          _this2.popupSelectedIndex = i;\n\n          _this2.clearPopupSelection();\n\n          obj.classList.add('selected');\n        });\n        obj.addEventListener('click', function (e) {\n          var users = _this2.itemsForQuery(_this2.popupPartialText);\n\n          if (_this2.popupSelectedIndex >= 0 && _this2.popupSelectedIndex < users.length) {\n            _this2.tagUserAtCurrentPosition(users[_this2.popupSelectedIndex]);\n          }\n\n          _this2.hideUserPopup();\n        });\n      });\n    }\n  }, {\n    key: \"highlightPopupItemAtIndex\",\n    value: function highlightPopupItemAtIndex(index) {\n      this.clearPopupSelection();\n      var items = this.popup.querySelectorAll('.popup-item');\n\n      if (index >= 0 && index < items.length) {\n        items[index].classList.add('selected');\n        this.popupSelectedIndex = index;\n      }\n    }\n  }, {\n    key: \"clearPopupSelection\",\n    value: function clearPopupSelection() {\n      this.popup.querySelectorAll('.popup-item').forEach(function (obj) {\n        obj.classList.remove('selected');\n      });\n    }\n  }, {\n    key: \"itemsForQuery\",\n    value: function itemsForQuery(query) {\n      var items = [];\n      this.userList.every(function (obj) {\n        if (obj.name.toLowerCase().startsWith(query.toLowerCase())) {\n          items.push(obj);\n          return items.length < 5; // Limit to 5 items\n        }\n\n        return true;\n      });\n      return items;\n    }\n  }, {\n    key: \"caretCoordinates\",\n    value: function caretCoordinates() {\n      // Backup html\n      var oldHTML = this._wrapper.innerHTML;\n      var selection = document.getSelection();\n      var offset = selection.focusOffset;\n      var caretInfo = this.getCaretPositionFromSelection(selection); // Insert span at caret position\n\n      var newHTML = oldHTML.substring(0, caretInfo.absoluteLength) + '<span class=\"caret-pos\"></span>' + oldHTML.substring(caretInfo.absoluteLength);\n      this._wrapper.innerHTML = newHTML; // Get span position\n\n      var span = this._wrapper.querySelector('.caret-pos');\n\n      var rect = span.getClientRects(); // Restore\n\n      this._wrapper.innerHTML = oldHTML;\n\n      this._wrapper.focus();\n\n      selection.removeAllRanges();\n      var range = document.createRange();\n      range.setStart(this._wrapper.childNodes[caretInfo.nodeIndex], offset);\n      selection.addRange(range);\n      return rect[0];\n    }\n  }, {\n    key: \"tagUserAtCurrentPosition\",\n    value: function tagUserAtCurrentPosition(user) {\n      var html = this._wrapper.innerHTML;\n      html = html.replaceAll('&nbsp;', ' ');\n      var selection = document.getSelection(); // Insert span at caret position\n\n      this._wrapper.innerHTML = html.substring(0, this.popupAbsoluteOffset - 1) + \"<span class=\\\"user-tag\\\" contentEditable=\\\"false\\\" data-user-id=\\\"\".concat(user.id, \"\\\">@\").concat(user.name, \"</span>\") + ' &nbsp;' + html.substring(this.popupAbsoluteOffset + this.popupPartialText.length);\n\n      this._wrapper.focus();\n\n      selection.removeAllRanges();\n      var range = document.createRange(); // Account for situation where the first character is a tag\n\n      if (this.popupNodeIndex + 2 > this._wrapper.childNodes.length - 1) {\n        var textNode = document.createTextNode(' ');\n\n        this._wrapper.appendChild(textNode);\n\n        var node = this._wrapper.childNodes[this.popupNodeIndex + 1];\n        if (node.textContent === '') node.textContent = ' ';\n        range.setStart(node, 1);\n      } else {\n        var _node = this._wrapper.childNodes[this.popupNodeIndex + 2];\n        if (_node.textContent === '') _node.textContent = ' ';\n        range.setStart(_node, 1);\n      }\n\n      selection.addRange(range);\n    }\n  }, {\n    key: \"getCaretPositionFromSelection\",\n    value: function getCaretPositionFromSelection(selection) {\n      var absoluteLength = 0;\n      var nodeIndex = 0; // Determine node offset\n\n      var nodes = this._wrapper.childNodes;\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (selection.focusNode.isSameNode(nodes[i])) {\n          absoluteLength += selection.focusOffset;\n          nodeIndex = i;\n          break;\n        } else {\n          if (nodes[i].outerHTML) {\n            absoluteLength += nodes[i].outerHTML.length;\n          } else {\n            absoluteLength += nodes[i].textContent.length;\n          }\n        }\n      }\n\n      return {\n        absoluteLength: absoluteLength,\n        nodeIndex: nodeIndex\n      };\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      if (this._wrapper.querySelector('.placeholder')) {\n        return '';\n      } else if (this._wrapper.innerHTML.trim() === '<br>') {\n        return '';\n      } else {\n        return _parsers_CommentTagParser__WEBPACK_IMPORTED_MODULE_1__.default.convertElementsToTags(this._wrapper.innerHTML).trim();\n      }\n    },\n    set: function set(text) {\n      this._wrapper.innerHTML = _parsers_CommentTagParser__WEBPACK_IMPORTED_MODULE_1__.default.convertTagsToElements(text).trim();\n    }\n  }, {\n    key: \"isShowingUserPopup\",\n    value: function isShowingUserPopup() {\n      return this.popupShowing;\n    }\n  }]);\n\n  return CommentTextarea;\n}(_TaggableTextarea__WEBPACK_IMPORTED_MODULE_0__.default);\n\n_defineProperty(CommentTextarea, \"observedAttributes\", ['disabled']);\n\ncustomElements.define('comment-textarea', CommentTextarea);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/CommentTextarea.js\n");

/***/ }),

/***/ "./js/components/DialogBox.js":
/*!************************************!*\
  !*** ./js/components/DialogBox.js ***!
  \************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DialogBox = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(DialogBox, _HTMLElement);\n\n  var _super = _createSuper(DialogBox);\n\n  function DialogBox() {\n    var _this;\n\n    _classCallCheck(this, DialogBox);\n\n    _this = _super.call(this);\n    _this._onCloseHandler = null;\n    _this._autoKill = true;\n    return _this;\n  }\n\n  _createClass(DialogBox, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n\n      if (attrName === \"show\" && oldValue !== newValue) {\n        if (!!newValue) {\n          this.show();\n        } else {\n          this.close();\n        }\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.movedByUser = false;\n      this.shadowRoot = this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.host.style.display = 'block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._bg = document.createElement('div');\n      this._bg.className = 'dialog-background';\n      this._bg.style.display = 'none';\n      this.shadowRoot.appendChild(this._bg);\n      var wrapper = \"<div class=\\\"dialog-wrapper\\\" style=\\\"display: none\\\"></div>\";\n\n      this._bg.insertAdjacentHTML('beforeend', wrapper);\n\n      this._wrapper = this._bg.querySelector('.dialog-wrapper');\n      var titlebar = \"<div class=\\\"dialog-title-bar\\\">\";\n      titlebar += \"<div class=\\\"dialog-title-bar-text\\\"></div>\";\n      titlebar += \"<div class=\\\"dialog-title-bar-close-button fa-icon fa-icon-x\\\"></div>\";\n      titlebar += \"</div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', titlebar);\n\n      this._titlebar = this._wrapper.querySelector('.dialog-title-bar');\n      this._titlebarCloseButton = this._titlebar.querySelector('.dialog-title-bar-close-button');\n      var contentWrapper = \"<div class=\\\"dialog-content\\\"></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', contentWrapper);\n\n      this._contentWrapper = this._wrapper.querySelector('.dialog-content');\n      var content = \"<slot id=\\\"dialog-content\\\" name=\\\"content\\\"></slot>\";\n\n      this._contentWrapper.insertAdjacentHTML('beforeend', content);\n\n      this._content = this._contentWrapper.querySelector('#dialog-content');\n      var buttonBar = \"<div class=\\\"dialog-button-bar\\\"></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', buttonBar);\n\n      this._buttonBar = this._wrapper.querySelector('.dialog-button-bar');\n      var buttons = \"<slot id=\\\"dialog-buttons\\\" name=\\\"buttons\\\"></slot>\";\n\n      this._buttonBar.insertAdjacentHTML('beforeend', buttons);\n\n      this._buttons = this._buttonBar.querySelector('#dialog-buttons');\n      this.setupEvents();\n\n      if (!!this.getAttribute('show')) {\n        this.show();\n      }\n\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      // Window dragging\n      this._titlebar.addEventListener('pointerdown', function (e) {\n        if (!_this2._isDragging) {\n          _this2._isDragging = true;\n          _this2._dragOffsetX = e.clientX - _this2._wrapper.offsetLeft;\n          _this2._dragOffsetY = e.clientY - _this2._wrapper.offsetTop;\n        }\n      });\n\n      this._bg.addEventListener('pointerup', function (e) {\n        _this2._isDragging = false;\n      });\n\n      this._bg.addEventListener('pointermove', function (e) {\n        if (!_this2._isDragging) return;\n        e.preventDefault();\n        _this2._wrapper.style.left = e.clientX - _this2._dragOffsetX + 'px';\n        _this2._wrapper.style.top = e.clientY - _this2._dragOffsetY + 'px';\n      }); // Close events\n\n\n      window.addEventListener('keydown', function (e) {\n        if (e.key === 'Escape') {\n          e.preventDefault();\n\n          _this2.close();\n        }\n      });\n\n      this._titlebarCloseButton.addEventListener('click', function (e) {\n        _this2.close();\n      }); // Prevent background from scrolling\n\n\n      this._bg.addEventListener('wheel', function (e) {\n        if (e.target.className === 'dialog-background') e.preventDefault();\n      });\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._titlebar || !this._wrapper) return;\n\n      var titleBarText = this._titlebar.querySelector('.dialog-title-bar-text');\n\n      if (this.getAttribute('dialog-title')) {\n        titleBarText.innerHTML = this.getAttribute('dialog-title');\n      } else {\n        titleBarText.innerHTML = 'Dialog';\n      }\n\n      if (this.getAttribute('width')) {\n        this._wrapper.style.width = this.getAttribute('width') + 'px';\n      }\n\n      if (this.getAttribute('height')) {\n        this._wrapper.style.height = this.getAttribute('height') + 'px';\n      } // Center align\n\n\n      if (!this.movedByUser) {\n        var pageWidth = window.innerWidth;\n        var pageHeight = window.innerHeight;\n        var leftPos = (pageWidth - this._wrapper.clientWidth) / 2;\n        var topPos = (pageHeight - this._wrapper.clientHeight) / 2;\n        this._wrapper.style.left = leftPos + 'px';\n        this._wrapper.style.top = topPos + 'px';\n      } // Disable background if noblur specified\n\n\n      if (this.getAttribute('noblur')) {\n        if (!this._bg.classList.contains('noblur')) {\n          this._bg.classList.add('noblur');\n        }\n      } else {\n        if (this._bg.classList.contains('noblur')) {\n          this._bg.classList.add('noblur');\n        }\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (!this._bg || !this._wrapper) return;\n      this.movedByUser = false;\n      this._bg.style.display = 'block';\n      this._wrapper.style.display = 'flex';\n      this.dynamicRender();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this._bg) return;\n      this._bg.style.display = 'none';\n      this._wrapper.style.display = 'none';\n\n      if (this.onCloseHandler) {\n        this.onCloseHandler();\n      }\n\n      if (this._autoKill) {\n        this.shadowRoot.host.remove();\n      }\n    }\n  }, {\n    key: \"onCloseHandler\",\n    get: function get() {\n      return this._onCloseHandler;\n    },\n    set: function set(f) {\n      this._onCloseHandler = f;\n    }\n  }, {\n    key: \"autoKill\",\n    get: function get() {\n      return this._autoKill;\n    },\n    set: function set(b) {\n      this._autoKill = b;\n    }\n  }]);\n\n  return DialogBox;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(DialogBox, \"observedAttributes\", ['dialog-title', 'width', 'height', 'noblur', 'show']);\n\ncustomElements.define('dialog-box', DialogBox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/DialogBox.js\n");

/***/ }),

/***/ "./js/components/FileBrowser.js":
/*!**************************************!*\
  !*** ./js/components/FileBrowser.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AttributeParser */ \"./js/utils/AttributeParser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar FileBrowser = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileBrowser, _HTMLElement);\n\n  var _super = _createSuper(FileBrowser);\n\n  // Identify the element as a form-associated custom element\n  function FileBrowser() {\n    var _this;\n\n    _classCallCheck(this, FileBrowser);\n\n    _this = _super.call(this);\n    _this.selectedItem = null;\n    return _this;\n  }\n\n  _createClass(FileBrowser, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n\n      if (attrName === 'project-id' && oldValue !== newValue) {\n        if (this._childContainer) {\n          this._childContainer.setAttribute('project-id', newValue);\n\n          this._childContainer.reset();\n\n          this._childContainer.expand();\n        }\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this$getAttribute, _this$getAttribute2, _this$getAttribute3, _this$getAttribute6;\n\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'file-browser-wrapper';\n      this._wrapper.tabIndex = 0;\n\n      this._shadowRoot.appendChild(this._wrapper); // Get access to the internal form control APIs\n\n\n      this._internals = this.attachInternals();\n      var project_id = this.getAttribute('project-id'); // Add project selector\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this$getAttribute = this.getAttribute('show-project-selector')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : false)) {\n        var projectSelector = \"<div class=\\\"project-selector-container\\\">Project: <select id=\\\"project-selector\\\"></select></div>\";\n\n        this._wrapper.insertAdjacentHTML('beforeend', projectSelector);\n\n        this._projectSelector = this._wrapper.querySelector('#project-selector');\n        this.populateProjects(project_id);\n      }\n\n      var browserContainer = \"<div class=\\\"file-browser-container\\\"></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', browserContainer);\n\n      this._container = this._wrapper.querySelector('.file-browser-container');\n      var childContainer = \"<file-browser-folder class=\\\"file-browser-root\\\" file-id=\\\"-1\\\" project-id=\\\"\".concat(project_id, \"\\\" department-id=\\\"-1\\\" path=\\\"/\\\" file-title=\\\"[project root]\\\"></file-browser-folder>\");\n\n      this._container.insertAdjacentHTML('beforeend', childContainer);\n\n      this._childContainer = this._container.querySelector('file-browser-folder');\n      this._rootNode = this._childContainer;\n\n      this._childContainer.setBrowserRoot(this);\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this$getAttribute2 = this.getAttribute('can-select-folders')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : true) && _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this$getAttribute3 = this.getAttribute('can-select-root')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : true)) {\n        var _this$getAttribute4, _this$getAttribute5;\n\n        this._childContainer.setAttribute('selectable', 'true');\n\n        if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this$getAttribute4 = this.getAttribute('auto-select-root')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : false) && ((_this$getAttribute5 = this.getAttribute('value')) !== null && _this$getAttribute5 !== void 0 ? _this$getAttribute5 : '') === '') {\n          this.updateSelection(-1, -1, '/');\n        }\n      }\n\n      this.setupEvents();\n      this.dynamicRender();\n\n      this._childContainer.expand();\n\n      if (((_this$getAttribute6 = this.getAttribute('value')) !== null && _this$getAttribute6 !== void 0 ? _this$getAttribute6 : '') !== '') {\n        var _json$id, _json$department_id, _json$path;\n\n        var json = JSON.parse(this.getAttribute('value'));\n        this.updateSelection((_json$id = json.id) !== null && _json$id !== void 0 ? _json$id : -1, (_json$department_id = json.department_id) !== null && _json$department_id !== void 0 ? _json$department_id : -1, (_json$path = json.path) !== null && _json$path !== void 0 ? _json$path : '/');\n      }\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this$getAttribute7,\n          _this2 = this;\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this$getAttribute7 = this.getAttribute('show-project-selector')) !== null && _this$getAttribute7 !== void 0 ? _this$getAttribute7 : false)) {\n        this._projectSelector.addEventListener('change', function (e) {\n          var new_project_id = _this2._projectSelector.value;\n\n          _this2.setAttribute('project-id', new_project_id);\n        });\n      }\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._wrapper) return;\n    }\n  }, {\n    key: \"updateSelection\",\n    value: function updateSelection(id, dept_id, path) {\n      if (+id === -1 && path !== '/') {\n        var item = this.itemWithPath(path, dept_id);\n        if (item) id = item.id;\n      }\n\n      this.selectedItem = {\n        file_id: id,\n        dept_id: dept_id,\n        path: path\n      };\n\n      this._rootNode.updateSelection(id, dept_id, path);\n\n      this.updateFormValue();\n    }\n  }, {\n    key: \"populateProjects\",\n    value: function () {\n      var _populateProjects = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(selected_project_id) {\n        var _this3 = this;\n\n        var url, response, json;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                url = \"/ajax/file_browse.php?projects\";\n                _context.next = 4;\n                return fetch(url);\n\n              case 4:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Response status: \".concat(response.status));\n\n              case 7:\n                _context.next = 9;\n                return response.json();\n\n              case 9:\n                json = _context.sent;\n\n                if (json.error) {\n                  console.log(error);\n                } else {\n                  json.forEach(function (item) {\n                    var option = \"<option value=\\\"\".concat(item.id, \"\\\"\") + (+item.id === +selected_project_id ? ' selected=\"selected\"' : '') + \">\".concat(item.title, \"</option>\");\n\n                    _this3._projectSelector.insertAdjacentHTML('beforeend', option);\n                  });\n                }\n\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 13]]);\n      }));\n\n      function populateProjects(_x) {\n        return _populateProjects.apply(this, arguments);\n      }\n\n      return populateProjects;\n    }()\n  }, {\n    key: \"getSelectedItem\",\n    value: function getSelectedItem() {\n      if (!this.selectedItem) return null;\n\n      if (this.selectedItem.file_id > 0) {\n        return this.itemWithID(this.selectedItem.file_id);\n      } else {\n        return this.itemWithPath(this.selectedItem.path, this.selectedItem.dept_id);\n      }\n    }\n  }, {\n    key: \"itemWithID\",\n    value: function itemWithID(id) {\n      if (+this._childContainer.getAttribute('file-id') === +id) {\n        return {\n          id: -1,\n          department_id: -1,\n          path: '/',\n          project_id: this.getAttribute('project-id')\n        };\n      }\n\n      return this._childContainer.itemWithID(id);\n    }\n  }, {\n    key: \"itemWithPath\",\n    value: function itemWithPath(path, dept_id) {\n      if (+this._childContainer.getAttribute('department-id') === +dept_id && this._childContainer.getAttribute('path') === path) {\n        return {\n          id: -1,\n          department_id: -1,\n          path: '/',\n          project_id: this.getAttribute('project-id')\n        };\n      }\n\n      return this._childContainer.itemWithPath(path, dept_id);\n    }\n  }, {\n    key: \"updateFormValue\",\n    value: function updateFormValue() {\n      this._internals.setFormValue(JSON.stringify(this.getSelectedItem()));\n    } // Form controls usually expose a \"value\" property\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return JSON.stringify(this.getSelectedItem());\n    },\n    set: function set(v) {\n      var _json$id2, _json$department_id2, _json$path2;\n\n      var json = JSON.parse(v);\n      this.updateSelection((_json$id2 = json.id) !== null && _json$id2 !== void 0 ? _json$id2 : -1, (_json$department_id2 = json.department_id) !== null && _json$department_id2 !== void 0 ? _json$department_id2 : -1, (_json$path2 = json.path) !== null && _json$path2 !== void 0 ? _json$path2 : '/');\n    } // The following properties and methods aren't strictly required,\n    // but browser-level form controls provide them. Providing them helps\n    // ensure consistency with browser-provided controls.\n\n  }, {\n    key: \"form\",\n    get: function get() {\n      return this._internals.form;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.getAttribute('name');\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.localName;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      return this._internals.validity;\n    }\n  }, {\n    key: \"validationMessage\",\n    get: function get() {\n      return this._internals.validationMessage;\n    }\n  }, {\n    key: \"willValidate\",\n    get: function get() {\n      return this._internals.willValidate;\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity() {\n      return this._internals.checkValidity();\n    }\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this._internals.reportValidity();\n    }\n  }]);\n\n  return FileBrowser;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileBrowser, \"observedAttributes\", ['project-id']);\n\n_defineProperty(FileBrowser, \"formAssociated\", true);\n\ncustomElements.define('file-browser', FileBrowser);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/FileBrowser.js\n");

/***/ }),

/***/ "./js/components/FileBrowserChildContainer.js":
/*!****************************************************!*\
  !*** ./js/components/FileBrowserChildContainer.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AttributeParser */ \"./js/utils/AttributeParser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar FileBrowserChildContainer = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileBrowserChildContainer, _HTMLElement);\n\n  var _super = _createSuper(FileBrowserChildContainer);\n\n  //[{id: 1, type: 'folder', path: '/test', title: 'test'},{id: 2, type: 'dept', path: '/', title: 'Dept'},{id: 3, type: 'file', path: '/', title: 'file'}];\n  function FileBrowserChildContainer() {\n    var _this;\n\n    _classCallCheck(this, FileBrowserChildContainer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"childItems\", []);\n\n    _this.childItems = [];\n    _this.browserRoot = null;\n    _this.moreItemsAvailable = false;\n    _this.nextIndex = 0;\n    return _this;\n  }\n\n  _createClass(FileBrowserChildContainer, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n\n      this._shadowRoot.appendChild(styleSheet);\n\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'file-browser-child-container';\n      this._wrapper.tabIndex = 0;\n\n      this._shadowRoot.appendChild(this._wrapper);\n\n      var spinner = \"<div class=\\\"spinner\\\"></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', spinner);\n\n      this.setupEvents();\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {}\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._wrapper) return;\n    }\n  }, {\n    key: \"populateChildren\",\n    value: function () {\n      var _populateChildren = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(project_id, department_id, path) {\n        var start,\n            url,\n            response,\n            json,\n            _item$id,\n            _item$department_id,\n            _item$path,\n            item,\n            _args = arguments;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                start = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;\n                _context.prev = 1;\n                this.moreItemsAvailable = false;\n                url = \"/ajax/file_browse.php?project=\".concat(project_id, \"&dept_id=\").concat(department_id, \"&path=\") + encodeURIComponent(path) + \"&start=\".concat(start);\n                if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute(this.browserRoot.getAttribute('hide-files'))) url += '&hide_files=1';\n                if (this.browserRoot.getAttribute('file-types')) url += '&file_types=' + this.browserRoot.getAttribute('file-types');\n                if (this.browserRoot.getAttribute('file-exts')) url += '&file_exts=' + this.browserRoot.getAttribute('file-exts');\n                _context.next = 9;\n                return fetch(url);\n\n              case 9:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new Error(\"Response status: \".concat(response.status));\n\n              case 12:\n                _context.next = 14;\n                return response.json();\n\n              case 14:\n                json = _context.sent;\n\n                if (json.error) {\n                  console.log(error);\n                } else {\n                  if (json.length >= 21) {\n                    json.pop();\n                    this.moreItemsAvailable = true;\n                    this.nextIndex += 20;\n                  }\n\n                  this.childItems = this.childItems.concat(json);\n                  this.renderChildren();\n                  item = this.browserRoot.getSelectedItem();\n                  this.browserRoot.updateSelection((_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : -1, (_item$department_id = item.department_id) !== null && _item$department_id !== void 0 ? _item$department_id : -1, (_item$path = item.path) !== null && _item$path !== void 0 ? _item$path : '/');\n                }\n\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0.message);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 18]]);\n      }));\n\n      function populateChildren(_x, _x2, _x3) {\n        return _populateChildren.apply(this, arguments);\n      }\n\n      return populateChildren;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.childItems.length > 0) {\n        this.renderChildren();\n      } else {\n        this.populateChildren(this.getAttribute('project-id'), this.getAttribute('department-id'), this.getAttribute('path'), 0);\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this2 = this;\n\n      this._wrapper.innerHTML = '';\n      this.childItems.forEach(function (obj) {\n        if (obj.type === 'folder') {\n          var _this2$browserRoot$ge;\n\n          _this2.renderFolder(obj, _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this2$browserRoot$ge = _this2.browserRoot.getAttribute('can-select-folders')) !== null && _this2$browserRoot$ge !== void 0 ? _this2$browserRoot$ge : true));\n        } else if (obj.type === 'department') {\n          var _this2$browserRoot$ge2;\n\n          _this2.renderDepartment(obj, _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this2$browserRoot$ge2 = _this2.browserRoot.getAttribute('can-select-depts')) !== null && _this2$browserRoot$ge2 !== void 0 ? _this2$browserRoot$ge2 : true));\n        } else if (obj.type === 'file') {\n          var _this2$browserRoot$ge3;\n\n          _this2.renderFile(obj, _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute((_this2$browserRoot$ge3 = _this2.browserRoot.getAttribute('can-select-files')) !== null && _this2$browserRoot$ge3 !== void 0 ? _this2$browserRoot$ge3 : true));\n        }\n      });\n\n      if (this.moreItemsAvailable) {\n        var div = \"<div class=\\\"more-items\\\" title=\\\"Load more items\\\"><div class=\\\"fa-icon-chevron-down\\\"></div></div>\";\n\n        this._wrapper.insertAdjacentHTML('beforeend', div);\n\n        this._moreItems = this._wrapper.querySelector('.more-items');\n\n        this._moreItems.addEventListener('click', function (e) {\n          var _this2$getAttribute, _this2$getAttribute2;\n\n          _this2.populateChildren(_this2.getAttribute('project-id'), (_this2$getAttribute = _this2.getAttribute('department-id')) !== null && _this2$getAttribute !== void 0 ? _this2$getAttribute : -1, (_this2$getAttribute2 = _this2.getAttribute('path')) !== null && _this2$getAttribute2 !== void 0 ? _this2$getAttribute2 : '/', _this2.nextIndex);\n        });\n      }\n    }\n  }, {\n    key: \"renderFolder\",\n    value: function renderFolder(obj, selectable) {\n      var _obj$title, _this$getAttribute, _obj$path, _obj$department_id;\n\n      var folder = document.createElement('file-browser-folder');\n      folder.setAttribute('file-id', obj.id);\n      folder.setAttribute('file-title', (_obj$title = obj.title) !== null && _obj$title !== void 0 ? _obj$title : '');\n      folder.setAttribute('project-id', (_this$getAttribute = this.getAttribute('project-id')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : -1);\n      folder.setAttribute('path', (_obj$path = obj.path) !== null && _obj$path !== void 0 ? _obj$path : '/');\n      folder.setAttribute('department-id', (_obj$department_id = obj.department_id) !== null && _obj$department_id !== void 0 ? _obj$department_id : -1);\n      folder.setBrowserRoot(this.browserRoot);\n      if (selectable) folder.setAttribute('selectable', 'true');\n\n      this._wrapper.appendChild(folder);\n    }\n  }, {\n    key: \"renderDepartment\",\n    value: function renderDepartment(obj, selectable) {\n      var _obj$title2, _this$getAttribute2, _obj$path2, _obj$department_id2;\n\n      var folder = document.createElement('file-browser-folder');\n      folder.setAttribute('is-department', 'true');\n      folder.setAttribute('file-title', (_obj$title2 = obj.title) !== null && _obj$title2 !== void 0 ? _obj$title2 : '');\n      folder.setAttribute('project-id', (_this$getAttribute2 = this.getAttribute('project-id')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : -1);\n      folder.setAttribute('path', (_obj$path2 = obj.path) !== null && _obj$path2 !== void 0 ? _obj$path2 : '/');\n      folder.setAttribute('department-id', (_obj$department_id2 = obj.department_id) !== null && _obj$department_id2 !== void 0 ? _obj$department_id2 : -1);\n      folder.setBrowserRoot(this.browserRoot);\n      if (selectable) folder.setAttribute('selectable', 'true');\n\n      this._wrapper.appendChild(folder);\n    }\n  }, {\n    key: \"renderFile\",\n    value: function renderFile(obj, selectable) {\n      var _obj$title3, _this$getAttribute3, _obj$path3, _obj$department_id3, _obj$thumbnail;\n\n      var file = document.createElement('file-browser-file');\n      file.setAttribute('file-id', obj.id);\n      file.setAttribute('file-title', (_obj$title3 = obj.title) !== null && _obj$title3 !== void 0 ? _obj$title3 : '');\n      file.setAttribute('project-id', (_this$getAttribute3 = this.getAttribute('project-id')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : -1);\n      file.setAttribute('path', (_obj$path3 = obj.path) !== null && _obj$path3 !== void 0 ? _obj$path3 : '/');\n      file.setAttribute('department-id', (_obj$department_id3 = obj.department_id) !== null && _obj$department_id3 !== void 0 ? _obj$department_id3 : -1);\n      file.setAttribute('thumbnail', (_obj$thumbnail = obj.thumbnail) !== null && _obj$thumbnail !== void 0 ? _obj$thumbnail : '');\n      file.setBrowserRoot(this.browserRoot);\n      if (selectable) file.setAttribute('selectable', 'true');\n\n      this._wrapper.appendChild(file);\n    }\n  }, {\n    key: \"updateSelection\",\n    value: function updateSelection(id, dept_id, path) {\n      var items = this._wrapper.querySelectorAll('file-browser-folder,file-browser-file');\n\n      items.forEach(function (obj) {\n        obj.setSelected(false);\n\n        if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_1__.default.parseBooleanAttribute(obj.getAttribute('is-department')) && dept_id > 0 && path === '/' && +obj.getAttribute('department-id') === dept_id) {\n          obj.setSelected(true);\n        } else if (id > 0 && +obj.getAttribute('file-id') === id) {\n          obj.setSelected(true);\n        } else if (id === -1 && dept_id === -1 + obj.getAttribute('department-id') === dept_id && +obj.getAttribute('file-id') === -1 && obj.getAttribute('path') === '/') {\n          obj.setSelected(true);\n        }\n\n        if (obj.tagName.toLowerCase() === 'file-browser-folder') {\n          obj.updateSelection(id, dept_id, path);\n        }\n      });\n    }\n  }, {\n    key: \"setBrowserRoot\",\n    value: function setBrowserRoot(root) {\n      this.browserRoot = root;\n    }\n  }, {\n    key: \"itemWithID\",\n    value: function itemWithID(id) {\n      var children = this._wrapper.querySelectorAll('file-browser-folder,file-browser-file').entries();\n\n      var _iterator = _createForOfIteratorHelper(children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var array = _step.value;\n          var obj = array[1];\n          var item = obj.itemWithID(id);\n\n          if (item) {\n            return item;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"itemWithPath\",\n    value: function itemWithPath(path, dept_id) {\n      var children = this._wrapper.querySelectorAll('file-browser-folder').entries();\n\n      var _iterator2 = _createForOfIteratorHelper(children),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var array = _step2.value;\n          var obj = array[1];\n          var item = obj.itemWithPath(path, dept_id);\n\n          if (item) {\n            return item;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBrowserChildContainer;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileBrowserChildContainer, \"observedAttributes\", ['id', 'department-id', 'project-id', 'path']);\n\ncustomElements.define('file-browser-child-container', FileBrowserChildContainer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/FileBrowserChildContainer.js\n");

/***/ }),

/***/ "./js/components/FileBrowserFile.js":
/*!******************************************!*\
  !*** ./js/components/FileBrowserFile.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/AttributeParser */ \"./js/utils/AttributeParser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar FileBrowserFile = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileBrowserFile, _HTMLElement);\n\n  var _super = _createSuper(FileBrowserFile);\n\n  function FileBrowserFile() {\n    var _this;\n\n    _classCallCheck(this, FileBrowserFile);\n\n    _this = _super.call(this);\n    _this.browserRoot = null;\n    return _this;\n  }\n\n  _createClass(FileBrowserFile, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n\n      this._shadowRoot.appendChild(styleSheet);\n\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'file-browser-item-wrapper';\n      this._wrapper.tabIndex = 0;\n\n      this._shadowRoot.appendChild(this._wrapper);\n\n      var folder = \"<div class=\\\"file-browser-file\\\"><div class=\\\"file-spacer\\\"></div>\\n            <file-thumb size=\\\"micro\\\"></file-thumb></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', folder);\n\n      this._item = this._wrapper.querySelector('.file-browser-file');\n      this._thumb = this._wrapper.querySelector('file-thumb');\n      this.setupEvents();\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      this._item.addEventListener('click', function (e) {\n        var _this2$getAttribute, _this2$getAttribute2;\n\n        if (!_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute((_this2$getAttribute = _this2.getAttribute('selectable')) !== null && _this2$getAttribute !== void 0 ? _this2$getAttribute : false)) return;\n        var id = (_this2$getAttribute2 = +_this2.getAttribute('file-id')) !== null && _this2$getAttribute2 !== void 0 ? _this2$getAttribute2 : -1;\n\n        _this2.browserRoot.updateSelection(id, -1, '');\n      });\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute, _this$getAttribute2, _this$getAttribute3;\n\n      if (!this._wrapper) return;\n\n      this._thumb.setAttribute('file-title', (_this$getAttribute = this.getAttribute('file-title')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '');\n\n      this._thumb.setAttribute('src', (_this$getAttribute2 = this.getAttribute('thumbnail')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '');\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute((_this$getAttribute3 = this.getAttribute('selectable')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : false)) {\n        this._thumb.classList.add('selectable');\n      } else {\n        this._thumb.classList.remove('selectable');\n      }\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(selected) {\n      if (selected) {\n        this._item.classList.add('selected');\n      } else {\n        this._item.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"setBrowserRoot\",\n    value: function setBrowserRoot(root) {\n      this.browserRoot = root;\n    }\n  }, {\n    key: \"itemWithID\",\n    value: function itemWithID(id) {\n      if (+this.getAttribute('file-id') === +id) {\n        return {\n          id: +this.getAttribute('file-id'),\n          department_id: +this.getAttribute('department-id'),\n          path: this.getAttribute('path'),\n          project_id: +this.getAttribute('project-id'),\n          thumbnail: this.getAttribute('thumbnail'),\n          department_name: this.getDepartmentName(),\n          title: this.getAttribute('file-title')\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getDepartmentName\",\n    value: function getDepartmentName() {\n      if (+this.getAttribute('department-id') < 1) return '(No Department)';\n      var dept = this.browserRoot.itemWithPath('/', +this.getAttribute('department-id'));\n\n      if (dept) {\n        return dept.title;\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBrowserFile;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileBrowserFile, \"observedAttributes\", ['id', 'department-id', 'project-id', 'path', 'title']);\n\ncustomElements.define('file-browser-file', FileBrowserFile);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb21wb25lbnRzL0ZpbGVCcm93c2VyRmlsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1aWxkLy4vanMvY29tcG9uZW50cy9GaWxlQnJvd3NlckZpbGUuanM/ZjMwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXR0cmlidXRlUGFyc2VyIGZyb20gXCIuLi91dGlscy9BdHRyaWJ1dGVQYXJzZXJcIjtcblxuY2xhc3MgRmlsZUJyb3dzZXJGaWxlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBvYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ2lkJywgJ2RlcGFydG1lbnQtaWQnLCAncHJvamVjdC1pZCcsICdwYXRoJywgJ3RpdGxlJ107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5icm93c2VyUm9vdCA9IG51bGw7XG4gICAgfVxuXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5keW5hbWljUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX3NoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nLCBkZWxlZ2F0ZXNGb2N1czogdHJ1ZX0pO1xuXG4gICAgICAgIC8vIEFwcGVuZCBzaXRlIHN0eWxlc2hlZXRcbiAgICAgICAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgc3R5bGVTaGVldC5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgICAgIHN0eWxlU2hlZXQuc2V0QXR0cmlidXRlKCdocmVmJywgJy9kaXN0L3N0eWxlLmNzcycpO1xuICAgICAgICB0aGlzLl9zaGFkb3dSb290LmFwcGVuZENoaWxkKHN0eWxlU2hlZXQpO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fd3JhcHBlci5jbGFzc05hbWUgPSAnZmlsZS1icm93c2VyLWl0ZW0td3JhcHBlcic7XG4gICAgICAgIHRoaXMuX3dyYXBwZXIudGFiSW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9zaGFkb3dSb290LmFwcGVuZENoaWxkKHRoaXMuX3dyYXBwZXIpO1xuXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IGA8ZGl2IGNsYXNzPVwiZmlsZS1icm93c2VyLWZpbGVcIj48ZGl2IGNsYXNzPVwiZmlsZS1zcGFjZXJcIj48L2Rpdj5cbiAgICAgICAgICAgIDxmaWxlLXRodW1iIHNpemU9XCJtaWNyb1wiPjwvZmlsZS10aHVtYj48L2Rpdj5gO1xuICAgICAgICB0aGlzLl93cmFwcGVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZm9sZGVyKTtcblxuICAgICAgICB0aGlzLl9pdGVtID0gdGhpcy5fd3JhcHBlci5xdWVyeVNlbGVjdG9yKCcuZmlsZS1icm93c2VyLWZpbGUnKTtcbiAgICAgICAgdGhpcy5fdGh1bWIgPSB0aGlzLl93cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ2ZpbGUtdGh1bWInKTtcblxuICAgICAgICB0aGlzLnNldHVwRXZlbnRzKCk7XG5cbiAgICAgICAgdGhpcy5keW5hbWljUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc2V0dXBFdmVudHMoKSB7XG4gICAgICAgIHRoaXMuX2l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgIGlmICghQXR0cmlidXRlUGFyc2VyLnBhcnNlQm9vbGVhbkF0dHJpYnV0ZSh0aGlzLmdldEF0dHJpYnV0ZSgnc2VsZWN0YWJsZScpID8/IGZhbHNlKSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgaWQgPSArdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbGUtaWQnKSA/PyAtMTtcbiAgICAgICAgICAgIHRoaXMuYnJvd3NlclJvb3QudXBkYXRlU2VsZWN0aW9uKGlkLCAtMSwgJycpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkeW5hbWljUmVuZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dyYXBwZXIpIHJldHVybjtcblxuICAgICAgICB0aGlzLl90aHVtYi5zZXRBdHRyaWJ1dGUoJ2ZpbGUtdGl0bGUnLCB0aGlzLmdldEF0dHJpYnV0ZSgnZmlsZS10aXRsZScpID8/ICcnKTtcbiAgICAgICAgdGhpcy5fdGh1bWIuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLmdldEF0dHJpYnV0ZSgndGh1bWJuYWlsJykgPz8gJycpO1xuXG4gICAgICAgIGlmIChBdHRyaWJ1dGVQYXJzZXIucGFyc2VCb29sZWFuQXR0cmlidXRlKHRoaXMuZ2V0QXR0cmlidXRlKCdzZWxlY3RhYmxlJykgPz8gZmFsc2UpKSB7XG4gICAgICAgICAgICB0aGlzLl90aHVtYi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RhYmxlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90aHVtYi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RhYmxlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZChzZWxlY3RlZCkge1xuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEJyb3dzZXJSb290KHJvb3QpIHtcbiAgICAgICAgdGhpcy5icm93c2VyUm9vdCA9IHJvb3Q7XG4gICAgfVxuXG4gICAgaXRlbVdpdGhJRChpZCkge1xuICAgICAgICBpZiAoK3RoaXMuZ2V0QXR0cmlidXRlKCdmaWxlLWlkJykgPT09ICtpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogK3RoaXMuZ2V0QXR0cmlidXRlKCdmaWxlLWlkJyksXG4gICAgICAgICAgICAgICAgZGVwYXJ0bWVudF9pZDogK3RoaXMuZ2V0QXR0cmlidXRlKCdkZXBhcnRtZW50LWlkJyksXG4gICAgICAgICAgICAgICAgcGF0aDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3BhdGgnKSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiArdGhpcy5nZXRBdHRyaWJ1dGUoJ3Byb2plY3QtaWQnKSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRoaXMuZ2V0QXR0cmlidXRlKCd0aHVtYm5haWwnKSxcbiAgICAgICAgICAgICAgICBkZXBhcnRtZW50X25hbWU6IHRoaXMuZ2V0RGVwYXJ0bWVudE5hbWUoKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbGUtdGl0bGUnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldERlcGFydG1lbnROYW1lKCkge1xuICAgICAgICBpZiAoK3RoaXMuZ2V0QXR0cmlidXRlKCdkZXBhcnRtZW50LWlkJykgPCAxKSByZXR1cm4gJyhObyBEZXBhcnRtZW50KSc7XG5cbiAgICAgICAgY29uc3QgZGVwdCA9IHRoaXMuYnJvd3NlclJvb3QuaXRlbVdpdGhQYXRoKCcvJywgK3RoaXMuZ2V0QXR0cmlidXRlKCdkZXBhcnRtZW50LWlkJykpO1xuXG4gICAgICAgIGlmIChkZXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVwdC50aXRsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmaWxlLWJyb3dzZXItZmlsZScsIEZpbGVCcm93c2VyRmlsZSk7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7Ozs7O0FBR0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFGQTtBQUdBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQWpHQTtBQUNBO0FBREE7QUFDQTtBQW1HQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/components/FileBrowserFile.js\n");

/***/ }),

/***/ "./js/components/FileBrowserFolder.js":
/*!********************************************!*\
  !*** ./js/components/FileBrowserFolder.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/AttributeParser */ \"./js/utils/AttributeParser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar FileBrowserFolder = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileBrowserFolder, _HTMLElement);\n\n  var _super = _createSuper(FileBrowserFolder);\n\n  function FileBrowserFolder() {\n    var _this;\n\n    _classCallCheck(this, FileBrowserFolder);\n\n    _this = _super.call(this);\n    _this.browserRoot = null;\n    return _this;\n  }\n\n  _createClass(FileBrowserFolder, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this$getAttribute, _this$getAttribute2;\n\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n\n      this._shadowRoot.appendChild(styleSheet);\n\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'file-browser-item-wrapper';\n      this._wrapper.tabIndex = 0;\n\n      this._shadowRoot.appendChild(this._wrapper);\n\n      var folder = \"<div class=\\\"file-browser-folder\\\"><div class=\\\"file-browser-folder-collapse fa-icon-chevron-right\\\"></div>\\n            <file-thumb size=\\\"micro\\\"></file-thumb></div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', folder);\n\n      this._item = this._wrapper.querySelector('.file-browser-folder');\n      this._collapse = this._wrapper.querySelector('.file-browser-folder-collapse');\n      this._thumb = this._wrapper.querySelector('file-thumb');\n      var project_id = this.getAttribute('project-id');\n      var dept_id = (_this$getAttribute = this.getAttribute('department-id')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : -1;\n      var path = (_this$getAttribute2 = this.getAttribute('path')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '/';\n      var childContainer = \"<file-browser-child-container project-id=\\\"\".concat(project_id, \"\\\" department-id=\\\"\").concat(dept_id, \"\\\" path=\\\"\").concat(path, \"\\\" class=\\\"file-browser-folder-children\\\"></file-browser-child-container>\");\n\n      this._wrapper.insertAdjacentHTML('beforeend', childContainer);\n\n      this._childContainer = this._wrapper.querySelector('.file-browser-folder-children');\n\n      this._childContainer.setBrowserRoot(this.browserRoot);\n\n      this.setupEvents();\n      this.dynamicRender();\n\n      if (!!this.getAttribute('expanded')) {\n        this.expand();\n      }\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      this._collapse.addEventListener('click', function (e) {\n        if (_this2.isExpanded()) {\n          _this2.collapse();\n        } else {\n          _this2.expand();\n        }\n      });\n\n      this._item.addEventListener('click', function (e) {\n        var _this2$getAttribute, _this2$getAttribute2, _this2$getAttribute3, _this2$getAttribute4;\n\n        if (!_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute((_this2$getAttribute = _this2.getAttribute('selectable')) !== null && _this2$getAttribute !== void 0 ? _this2$getAttribute : false)) return;\n        var id = +((_this2$getAttribute2 = _this2.getAttribute('file-id')) !== null && _this2$getAttribute2 !== void 0 ? _this2$getAttribute2 : -1);\n        var dept_id = +((_this2$getAttribute3 = _this2.getAttribute('department-id')) !== null && _this2$getAttribute3 !== void 0 ? _this2$getAttribute3 : -1);\n        var path = (_this2$getAttribute4 = _this2.getAttribute('path')) !== null && _this2$getAttribute4 !== void 0 ? _this2$getAttribute4 : '/';\n\n        _this2.browserRoot.updateSelection(id, dept_id, path);\n      });\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute3, _this$getAttribute4, _this$getAttribute5;\n\n      if (!this._wrapper) return;\n\n      this._thumb.setAttribute('file-title', (_this$getAttribute3 = this.getAttribute('file-title')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : '');\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute((_this$getAttribute4 = this.getAttribute('is-department')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : false)) {\n        this._thumb.setAttribute('src', '/img/Dept_Folder.svg');\n      } else {\n        this._thumb.setAttribute('src', '/img/Folder.svg');\n      }\n\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute((_this$getAttribute5 = this.getAttribute('selectable')) !== null && _this$getAttribute5 !== void 0 ? _this$getAttribute5 : false)) {\n        this._thumb.classList.add('selectable');\n      } else {\n        this._thumb.classList.remove('selectable');\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.collapse();\n      this._childContainer.childItems = [];\n\n      this._childContainer.setAttribute('project-id', this.getAttribute('project-id'));\n    }\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      if (this.isExpanded()) return;\n      this.setAttribute('expanded', 'expanded');\n\n      this._childContainer.classList.add('expanded');\n\n      this._collapse.classList.add('expanded');\n\n      this._collapse.classList.add('fa-icon-chevron-down');\n\n      this._collapse.classList.remove('fa-icon-chevron-right');\n\n      this._childContainer.setBrowserRoot(this.browserRoot);\n\n      this._childContainer.render();\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      if (!this.isExpanded()) return;\n      this.removeAttribute('expanded');\n\n      this._childContainer.classList.remove('expanded');\n\n      this._collapse.classList.remove('expanded');\n\n      this._collapse.classList.remove('fa-icon-chevron-down');\n\n      this._collapse.classList.add('fa-icon-chevron-right');\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded() {\n      return !!this.getAttribute('expanded') && this._childContainer.classList.contains('expanded');\n    }\n  }, {\n    key: \"updateSelection\",\n    value: function updateSelection(id, dept_id, path) {\n      this.setSelected(false);\n\n      if (!!this.getAttribute('is-department') && dept_id > 0 && path === '/' && +this.getAttribute('department-id') === dept_id) {\n        this.setSelected(true);\n      } else if (id > 0 && +this.getAttribute('file-id') === id) {\n        this.setSelected(true);\n      } else if (id === -1 && dept_id === -1 && +this.getAttribute('department-id') === dept_id && +this.getAttribute('file-id') === -1 && this.getAttribute('path') === '/') {\n        this.setSelected(true);\n      }\n\n      this._childContainer.updateSelection(id, dept_id, path);\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(selected) {\n      if (selected) {\n        this._item.classList.add('selected');\n      } else {\n        this._item.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"setBrowserRoot\",\n    value: function setBrowserRoot(root) {\n      this.browserRoot = root;\n      if (this._childContainer) this._childContainer.setBrowserRoot(root);\n    }\n  }, {\n    key: \"itemWithID\",\n    value: function itemWithID(id) {\n      if (+this.getAttribute('file-id') === +id) {\n        return {\n          id: _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute(this.getAttribute('is-department')) ? -1 : +this.getAttribute('file-id'),\n          department_id: +this.getAttribute('department-id'),\n          path: this.getAttribute('path'),\n          project_id: +this.getAttribute('project-id'),\n          department_name: this.getDepartmentName(),\n          title: this.getAttribute('file-title')\n        };\n      }\n\n      return this._childContainer.itemWithID(id);\n    }\n  }, {\n    key: \"itemWithPath\",\n    value: function itemWithPath(path, dept_id) {\n      if (+this.getAttribute('department-id') === +dept_id && this.getAttribute('path') === path) {\n        return {\n          id: _utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute(this.getAttribute('is-department')) ? -1 : +this.getAttribute('file-id'),\n          department_id: dept_id,\n          path: path,\n          project_id: this.getAttribute('project-id'),\n          department_name: this.getDepartmentName(),\n          title: this.getAttribute('file-title')\n        };\n      }\n\n      return this._childContainer.itemWithPath(path, dept_id);\n    }\n  }, {\n    key: \"getDepartmentName\",\n    value: function getDepartmentName() {\n      if (_utils_AttributeParser__WEBPACK_IMPORTED_MODULE_0__.default.parseBooleanAttribute(this.getAttribute('is-department'))) {\n        return this.getAttribute('file-title');\n      }\n\n      if (+this.getAttribute('department-id') < 1) return '(No Department)';\n      var dept = this.browserRoot.itemWithPath('/', +this.getAttribute('department-id'));\n\n      if (dept) {\n        return dept.title;\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBrowserFolder;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileBrowserFolder, \"observedAttributes\", ['id', 'department-id', 'project-id', 'path', 'title', 'expanded']);\n\ncustomElements.define('file-browser-folder', FileBrowserFolder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/FileBrowserFolder.js\n");

/***/ }),

/***/ "./js/components/FileComment.js":
/*!**************************************!*\
  !*** ./js/components/FileComment.js ***!
  \**************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar FileComment = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileComment, _HTMLElement);\n\n  var _super = _createSuper(FileComment);\n\n  function FileComment() {\n    var _this;\n\n    _classCallCheck(this, FileComment);\n\n    _this = _super.call(this);\n    _this.onErrorHandler = null;\n    return _this;\n  }\n\n  _createClass(FileComment, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      });\n      this.shadowRoot.host.style.display = 'block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '../../../html/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'comment';\n      this.shadowRoot.appendChild(this._wrapper);\n      var header = \"<div class=\\\"comment-header\\\">\\n            <div class=\\\"comment-banner\\\"></div>\\n            <div class=\\\"comment-avatar\\\"></div>\\n            <div class=\\\"comment-dropdown\\\"></div>\\n        </div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', header);\n\n      this._header = this._wrapper.querySelector('.comment-header');\n      this._banner = this._header.querySelector('.comment-banner');\n      this._avatar = this._header.querySelector('.comment-avatar');\n      this._dropdown = this._header.querySelector('.comment-dropdown');\n      var body = \"<div class=\\\"comment-body\\\">\\n            <div class=\\\"comment-timecode\\\"></div>\\n            <div class=\\\"comment-text\\\"></div>\\n        </div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', body);\n\n      this._body = this._wrapper.querySelector('.comment-body');\n      this._timecode = this._body.querySelector('.comment-timecode');\n      this._text = this._body.querySelector('.comment-text');\n      var footer = \"<div class=\\\"comment-footer\\\">\\n            <div class=\\\"comment-date\\\"></div>\\n            <div class=\\\"comment-controls\\\">\\n                <div class=\\\"comment-todo-btn tooltip\\\" title=\\\"Make To-Do comment\\\"></div>\\n                <div class=\\\"comment-favorite commentfav tooltip\\\" title=\\\"Favorite\\\"></div>\\n                <a class=\\\"comment-reply-btn tooltip\\\" href=\\\"#\\\" \\n                   title=\\\"Reply\\\"><img src=\\\"img/Reply.svg\\\"></a>\\n            </div>\\n        </div>\";\n\n      this._wrapper.insertAdjacentHTML('beforeend', footer);\n\n      this._footer = this._wrapper.querySelector('.comment-footer');\n      this._date = this._footer.querySelector('.comment-date');\n      this._controls = this._footer.querySelector('.comment-controls');\n      this.setupEvents();\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      return;\n\n      this._wrapper.addEventListener('keydown', function (e) {\n        if (e.key === ' ') {\n          e.preventDefault();\n\n          _this2.handleClick();\n        }\n      });\n\n      this._square.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n\n      this._text.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      if (!!this.getAttribute('disabled')) return;\n\n      if (!!this.getAttribute('checked')) {\n        this.removeAttribute('checked');\n\n        this._square.classList.remove('checked');\n      } else {\n        this.setAttribute('checked', 'checked');\n\n        this._square.classList.add('checked');\n      }\n\n      this.updateFormValue(); // Trigger change event\n\n      this.shadowRoot.dispatchEvent(new CustomEvent('change', {\n        composed: true,\n        bubbles: true\n      }));\n\n      if (this._onCheckedHandler) {\n        this._onCheckedHandler();\n      }\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute, _this$getAttribute2, _this$getAttribute3, _this$getAttribute4, _this$getAttribute5, _date, _this$getAttribute6;\n\n      if (!this._wrapper || !this._header || !this._body || !this._footer) return; // Header\n\n      var userName = (_this$getAttribute = this.getAttribute('authorName')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : 'Unknown User';\n      var avatarURL = (_this$getAttribute2 = this.getAttribute('avatarURL')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '';\n      this._avatar.innerHTML = \"<user-avatar userName=\\\"\".concat(userName, \"\\\" avatarURL=\\\"\").concat(avatarURL, \"\\\"></user-avatar>\");\n      var colors = ['red', 'yellow', 'orange', 'green', 'blue', 'cyan', 'pink', 'purple', 'white', 'black'];\n\n      if (colors.indexOf((_this$getAttribute3 = this.getAttribute('color')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : '') >= 0) {\n        this._banner.style.display = 'block';\n\n        this._banner.classList.add(colors[colors.indexOf(this.getAttribute('color'))]);\n      } else {\n        this._banner.style.display = 'none';\n      } // Body\n\n\n      this._timecode.innerHTML = (_this$getAttribute4 = this.getAttribute('timecode')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : '';\n      this._text.innerHTML = (_this$getAttribute5 = this.getAttribute('text')) !== null && _this$getAttribute5 !== void 0 ? _this$getAttribute5 : ''; // Footer\n\n      this._date.innerHTML = this.getAttribute((_date = 'date') !== null && _date !== void 0 ? _date : '');\n\n      var favoriteBtn = this._footer.querySelector('.comment-favorite');\n\n      if (!!this.getAttribute('favorite')) {\n        favoriteBtn.classList.add('favorite');\n      } else {\n        favoriteBtn.classList.remove('favorite');\n      }\n\n      if (!!this.getAttribute('hideFavorite')) {\n        favoriteBtn.style.display = 'none';\n      } else {\n        favoriteBtn.style.display = 'inline-block';\n      }\n\n      var todoBtn = this._footer.querySelector('.comment-todo-btn');\n\n      switch ((_this$getAttribute6 = this.getAttribute('status')) !== null && _this$getAttribute6 !== void 0 ? _this$getAttribute6 : '') {\n        case 'todo':\n          todoBtn.classList.remove('done');\n          todoBtn.classList.add('todo');\n          break;\n\n        case 'done':\n          todoBtn.classList.remove('todo');\n          todoBtn.classList.add('done');\n          break;\n\n        default:\n          todoBtn.classList.remove('todo');\n          todoBtn.classList.remove('done');\n          break;\n      }\n\n      if (!!this.getAttribute('hideToDo')) {\n        todoBtn.style.display = 'none';\n      } else {\n        todoBtn.style.display = 'inline-block';\n      }\n\n      var replyBtn = this._footer.querySelector('.comment-reply-btn');\n\n      if (!!this.getAttribute('hideReply')) {\n        replyBtn.style.display = 'none';\n      } else {\n        replyBtn.style.display = 'inline-block';\n      }\n    }\n  }, {\n    key: \"onerror\",\n    get: function get() {\n      return this._onErrorHandler;\n    },\n    set: function set(f) {\n      this._onErrorHandler = f;\n    }\n  }]);\n\n  return FileComment;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileComment, \"observedAttributes\", ['commentID']);\n\ncustomElements.define('file-comment', FileComment);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/FileComment.js\n");

/***/ }),

/***/ "./js/components/FileThumb.js":
/*!************************************!*\
  !*** ./js/components/FileThumb.js ***!
  \************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar FileThumb = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FileThumb, _HTMLElement);\n\n  var _super = _createSuper(FileThumb);\n\n  function FileThumb() {\n    var _this;\n\n    _classCallCheck(this, FileThumb);\n\n    _this = _super.call(this);\n    _this.obj = null;\n    return _this;\n  }\n\n  _createClass(FileThumb, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.attachShadow({\n        mode: 'open'\n      }); // Make sure element obeys parent sizing\n\n      this.shadowRoot.host.style.display = 'inline-block';\n      this.render();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.obj) {\n        this.obj.removeEventListener('mousemove', this.hoverScrub.bind(this));\n        this.obj = null;\n      }\n    }\n  }, {\n    key: \"resizeTextToFit\",\n    value: function resizeTextToFit(element) {\n      if (!element || !element.length || typeof element == 'undefined') return; // We only want to scale down long text, so first we reset\n      // font-size to 100%, in case this function is called multiple times.\n\n      element.style.fontSize = '100%';\n      element.style.letterSpacing = '';\n      var fontSize = 100;\n      var letterSpacing = parseFloat(element.style.letterSpacing);\n\n      while (element[0].scrollWidth > element[0].clientWidth) {\n        fontSize--;\n        element.style.fontSize = fontSize + '%';\n        element.style.letterSpacing = letterSpacing * (fontSize / 100) + 'px';\n        if (fontSize <= 78) break;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Append site stylesheet\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapperElement = document.createElement('div');\n      this._wrapperElement.className = 'file-thumb-wrapper';\n      this._wrapperElement.style.display = 'flex';\n      this._wrapperElement.style.alignItems = 'center';\n      this._wrapperElement.style.justifyContent = 'flex-start';\n      this._thumbElement = document.createElement('thumbnail-image');\n      this._thumbElement.style.flexShrink = '0';\n\n      this._wrapperElement.appendChild(this._thumbElement);\n\n      this._titleElement = document.createElement('div');\n      this._titleElement.className = 'file-thumb-title';\n\n      this._wrapperElement.appendChild(this._titleElement);\n\n      this.shadowRoot.append(this._wrapperElement); // Listen for mouse move\n\n      if (!!this.getAttribute('hover-src')) {\n        var thumbObj = this.shadowRoot.querySelector('.file-thumb');\n        thumbObj.addEventListener('mousemove', this.hoverScrub.bind(this));\n        this.obj = thumbObj;\n      }\n\n      this.dynamicRender();\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute, _this$getAttribute2, _this$getAttribute3;\n\n      if (!this._wrapperElement || !this._thumbElement) return;\n      var src = (_this$getAttribute = this.getAttribute('src')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '';\n      var title = (_this$getAttribute2 = this.getAttribute('file-title')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '';\n\n      if (title && title.length > 50) {\n        title = title.substr(0, 50) + \"...\";\n      }\n\n      this._thumbElement.setAttribute('src', src);\n\n      this._thumbElement.setAttribute('file-type', (_this$getAttribute3 = this.getAttribute('type')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : '');\n\n      this._thumbElement.classList.remove('small');\n\n      this._thumbElement.classList.remove('mini');\n\n      this._thumbElement.classList.remove('micro');\n\n      if (!!this.getAttribute('size')) {\n        this._thumbElement.setAttribute('size', this.getAttribute('size'));\n\n        this._thumbElement.classList.add(this.getAttribute('size'));\n      }\n\n      if (!!this.getAttribute('hover-src')) {\n        var _this$getAttribute4;\n\n        this._thumbElement.setAttribute('hover-src', (_this$getAttribute4 = this.getAttribute('hover-src')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : '');\n      }\n\n      if (title) {\n        this._titleElement.textContent = title;\n\n        this._titleElement.classList.remove('small');\n\n        this._titleElement.classList.remove('mini');\n\n        this._titleElement.classList.remove('micro');\n\n        if (!!this.getAttribute('size')) {\n          this._titleElement.classList.add(this.getAttribute('size'));\n        }\n\n        var textObj = this.shadowRoot.querySelector('.file-thumb-title');\n        this.resizeTextToFit(textObj);\n      }\n    }\n  }]);\n\n  return FileThumb;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FileThumb, \"observedAttributes\", ['src', 'file-title', 'hover-src', 'frame-width', 'size', 'type']);\n\ncustomElements.define('file-thumb', FileThumb);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/FileThumb.js\n");

/***/ }),

/***/ "./js/components/FolderBreadcrumb.js":
/*!*******************************************!*\
  !*** ./js/components/FolderBreadcrumb.js ***!
  \*******************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar FolderBreadcrumb = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(FolderBreadcrumb, _HTMLElement);\n\n  var _super = _createSuper(FolderBreadcrumb);\n\n  function FolderBreadcrumb() {\n    _classCallCheck(this, FolderBreadcrumb);\n\n    return _super.call(this);\n  }\n\n  _createClass(FolderBreadcrumb, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.shadowRoot = this.attachShadow({\n        mode: 'open'\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._breadcrumb = document.createElement('bread-crumb');\n      this.shadowRoot.appendChild(this._breadcrumb);\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {}\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute, _this$getAttribute2, _this$getAttribute4;\n\n      if ('undefined' === typeof this._breadcrumb) return;\n      this._breadcrumb.innerHTML = '';\n      var html = '';\n      var projectID = +this.getAttribute('project-id');\n      var deptID = +((_this$getAttribute = this.getAttribute('dept-id')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : -1);\n      var linkID = (_this$getAttribute2 = this.getAttribute('link-id')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : ''; // Add dept if needed\n\n      if (deptID > 0) {\n        var _this$getAttribute3;\n\n        var deptName = (_this$getAttribute3 = this.getAttribute('dept-name')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : 'Unknown';\n        html += \"<a href=\\\"\".concat(this.generateURL(projectID, deptID, '/', linkID), \"\\\"><div><img src=\\\"/img/Dept_Folder.svg\\\"/>\").concat(deptName, \"</div></a>\");\n      } else {\n        // Add Files entry\n        html += \"<a href=\\\"\".concat(this.generateURL(projectID, -1, '/', linkID), \"\\\"><div><img src=\\\"/img/Folder.svg\\\"/>Files</div></a>\");\n      } // Split path\n\n\n      var components = ((_this$getAttribute4 = this.getAttribute('path')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : '/').split('/');\n      var currentPath = '';\n\n      var _iterator = _createForOfIteratorHelper(components),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var component = _step.value;\n          if (component.trim().length === 0) continue;\n          currentPath += '/' + component;\n          html += \"<a href=\\\"\".concat(this.generateURL(projectID, deptID, currentPath, linkID), \"\\\"><div><img src=\\\"/img/Folder.svg\\\"/>\").concat(component, \"</div></a>\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._breadcrumb.insertAdjacentHTML('beforeend', html);\n    }\n  }, {\n    key: \"generateURL\",\n    value: function generateURL(projectID, deptID, path, linkID) {\n      var url = \"/files?dept=\".concat(deptID, \"&folder=\").concat(encodeURIComponent(path));\n      if (projectID !== 0) url += \"&project=\".concat(projectID);\n      if (linkID) url += \"&link=\".concat(linkID);\n      return url;\n    }\n  }]);\n\n  return FolderBreadcrumb;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(FolderBreadcrumb, \"observedAttributes\", ['project-id', 'dept-id', 'path', 'dept-name', 'link-id']);\n\ncustomElements.define('folder-breadcrumb', FolderBreadcrumb);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL2NvbXBvbmVudHMvRm9sZGVyQnJlYWRjcnVtYi5qcz8zNzQxIl0sIm5hbWVzIjpbIkZvbGRlckJyZWFkY3J1bWIiLCJhdHRyTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJkeW5hbWljUmVuZGVyIiwic2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIm1vZGUiLCJzdHlsZVNoZWV0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJfYnJlYWRjcnVtYiIsImlubmVySFRNTCIsImh0bWwiLCJwcm9qZWN0SUQiLCJnZXRBdHRyaWJ1dGUiLCJkZXB0SUQiLCJsaW5rSUQiLCJkZXB0TmFtZSIsImdlbmVyYXRlVVJMIiwiY29tcG9uZW50cyIsInNwbGl0IiwiY3VycmVudFBhdGgiLCJjb21wb25lbnQiLCJ0cmltIiwibGVuZ3RoIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwicGF0aCIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkhUTUxFbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFNQSxnQjs7Ozs7QUFHRiw4QkFBYztBQUFBOztBQUFBO0FBRWI7Ozs7V0FFRCxrQ0FBeUJDLFFBQXpCLEVBQW1DQyxRQUFuQyxFQUE2Q0MsUUFBN0MsRUFBdUQ7QUFDbkQsV0FBS0MsYUFBTDtBQUNIOzs7V0FFRCw2QkFBb0I7QUFDaEIsV0FBS0MsVUFBTCxHQUFrQixLQUFLQyxZQUFMLENBQWtCO0FBQUNDLFFBQUFBLElBQUksRUFBRTtBQUFQLE9BQWxCLENBQWxCLENBRGdCLENBR2hCOztBQUNBLFVBQU1DLFVBQVUsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBQW5CO0FBQ0FGLE1BQUFBLFVBQVUsQ0FBQ0csWUFBWCxDQUF3QixLQUF4QixFQUErQixZ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QkFBdEIsRUFBMkNsQyxnQkFBM0MiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb2xkZXJCcmVhZGNydW1iIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBvYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ3Byb2plY3QtaWQnLCAnZGVwdC1pZCcsICdwYXRoJywgJ2RlcHQtbmFtZScsICdsaW5rLWlkJ107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ck5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xuXG4gICAgICAgIC8vIEFwcGVuZCBzaXRlIHN0eWxlc2hlZXRcbiAgICAgICAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgc3R5bGVTaGVldC5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgICAgIHN0eWxlU2hlZXQuc2V0QXR0cmlidXRlKCdocmVmJywgJy9kaXN0L3N0eWxlLmNzcycpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7XG5cbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyZWFkLWNydW1iJyk7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0aGlzLl9icmVhZGNydW1iKTtcblxuICAgICAgICB0aGlzLmR5bmFtaWNSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzZXR1cEV2ZW50cygpIHtcblxuICAgIH1cblxuICAgIGR5bmFtaWNSZW5kZXIoKSB7XG4gICAgICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mKHRoaXMuX2JyZWFkY3J1bWIpKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYi5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgbGV0IGh0bWwgPSAnJztcblxuICAgICAgICBjb25zdCBwcm9qZWN0SUQgPSArdGhpcy5nZXRBdHRyaWJ1dGUoJ3Byb2plY3QtaWQnKTtcbiAgICAgICAgY29uc3QgZGVwdElEID0gKyh0aGlzLmdldEF0dHJpYnV0ZSgnZGVwdC1pZCcpID8/IC0xKTtcbiAgICAgICAgY29uc3QgbGlua0lEID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2xpbmstaWQnKSA/PyAnJztcblxuICAgICAgICAvLyBBZGQgZGVwdCBpZiBuZWVkZWRcbiAgICAgICAgaWYgKGRlcHRJRCA+IDApIHtcbiAgICAgICAgICAgIGxldCBkZXB0TmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkZXB0LW5hbWUnKSA/PyAnVW5rbm93bic7XG5cbiAgICAgICAgICAgIGh0bWwgKz0gYDxhIGhyZWY9XCIke3RoaXMuZ2VuZXJhdGVVUkwocHJvamVjdElELCBkZXB0SUQsICcvJywgbGlua0lEKX1cIj48ZGl2PjxpbWcgc3JjPVwiL2ltZy9EZXB0X0ZvbGRlci5zdmdcIi8+JHtkZXB0TmFtZX08L2Rpdj48L2E+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFkZCBGaWxlcyBlbnRyeVxuICAgICAgICAgICAgaHRtbCArPSBgPGEgaHJlZj1cIiR7dGhpcy5nZW5lcmF0ZVVSTChwcm9qZWN0SUQsIC0xLCAnLycsIGxpbmtJRCl9XCI+PGRpdj48aW1nIHNyYz1cIi9pbWcvRm9sZGVyLnN2Z1wiLz5GaWxlczwvZGl2PjwvYT5gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BsaXQgcGF0aFxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gKHRoaXMuZ2V0QXR0cmlidXRlKCdwYXRoJykgPz8gJy8nKS5zcGxpdCgnLycpO1xuICAgICAgICBsZXQgY3VycmVudFBhdGggPSAnJztcblxuICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBjb21wb25lbnRzKSB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LnRyaW0oKS5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgY3VycmVudFBhdGggKz0gJy8nICsgY29tcG9uZW50O1xuXG4gICAgICAgICAgICBodG1sICs9IGA8YSBocmVmPVwiJHt0aGlzLmdlbmVyYXRlVVJMKHByb2plY3RJRCwgZGVwdElELCBjdXJyZW50UGF0aCwgbGlua0lEKX1cIj48ZGl2PjxpbWcgc3JjPVwiL2ltZy9Gb2xkZXIuc3ZnXCIvPiR7Y29tcG9uZW50fTwvZGl2PjwvYT5gO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYi5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xuICAgIH1cblxuICAgIGdlbmVyYXRlVVJMKHByb2plY3RJRCwgZGVwdElELCBwYXRoLCBsaW5rSUQpIHtcbiAgICAgICAgbGV0IHVybCA9IGAvZmlsZXM/ZGVwdD0ke2RlcHRJRH0mZm9sZGVyPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhdGgpfWA7XG4gICAgICAgIGlmIChwcm9qZWN0SUQgIT09IDApIHVybCArPSBgJnByb2plY3Q9JHtwcm9qZWN0SUR9YDtcbiAgICAgICAgaWYgKGxpbmtJRCkgdXJsICs9IGAmbGluaz0ke2xpbmtJRH1gO1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuXG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmb2xkZXItYnJlYWRjcnVtYicsIEZvbGRlckJyZWFkY3J1bWIpO1xuXG4iXSwiZmlsZSI6Ii4vanMvY29tcG9uZW50cy9Gb2xkZXJCcmVhZGNydW1iLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/components/FolderBreadcrumb.js\n");

/***/ }),

/***/ "./js/components/PassStrength.js":
/*!***************************************!*\
  !*** ./js/components/PassStrength.js ***!
  \***************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar PassStrength = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(PassStrength, _HTMLElement);\n\n  var _super = _createSuper(PassStrength);\n\n  function PassStrength() {\n    var _this;\n\n    _classCallCheck(this, PassStrength);\n\n    _this = _super.call(this);\n    _this.obj = null;\n\n    if (_this.hasAttribute(\"linkto\")) {\n      _this.linkTo = _this.getAttribute(\"linkto\");\n    }\n\n    _this.score = -100;\n    return _this;\n  }\n\n  _createClass(PassStrength, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this[attrName] = newValue;\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._wrapper = document.createElement('div');\n      this._wrapper.style.display = 'inline-block';\n      this._wrapper.style.width = '110px';\n      this._wrapper.style.height = '10px';\n      this._wrapper.style.fontSize = '12pt';\n      this._bar = document.createElement('div');\n      this._bar.style.display = 'inline-block';\n      this._bar.style.border = '1px solid var(--input-border-color)';\n      this._bar.style.borderRadius = '2px';\n      this._bar.style.height = '100%';\n      this._bar.style.width = '30px';\n      this._percentage = document.createElement('div');\n      this._percentage.style.height = '100%';\n\n      this._bar.appendChild(this._percentage);\n\n      this._wrapper.appendChild(this._bar);\n\n      this._description = document.createElement('div');\n      this._description.style.display = 'inline-block';\n      this._description.style.marginLeft = '5px';\n\n      this._wrapper.appendChild(this._description);\n\n      this.appendChild(this._wrapper);\n      this.render();\n\n      if (this.hasAttribute('linkto')) {\n        this.setupHandler(this.getAttribute('linkto'));\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.obj) {\n        this.obj.removeEventListener('keyup', this.validatePassword.bind(this));\n        this.obj = null;\n      }\n    }\n  }, {\n    key: \"linkTo\",\n    get: function get() {\n      return this.getAttribute('linkto');\n    },\n    set: function set(input_id) {\n      this.setAttribute(\"linkto\", input_id);\n      this.setupHandler(input_id);\n    }\n  }, {\n    key: \"setupHandler\",\n    value: function setupHandler(input_id) {\n      this.obj = document.getElementById(input_id);\n      this.obj.addEventListener('keyup', this.validatePassword.bind(this));\n    }\n  }, {\n    key: \"validatePassword\",\n    value: function validatePassword(event) {\n      var text = event.target.value;\n\n      if (text.length === 0) {\n        this.score = -100;\n        this.render();\n        return;\n      }\n\n      var score = 0;\n      if (RegExp('[a-z]').test(text)) score++;\n      if (RegExp('[A-Z]').test(text)) score++;\n      if (RegExp('[0-9]').test(text)) score++;\n      if (RegExp('[^a-zA-Z0-9]').test(text)) score++;\n      if (text.length < 8) score -= 2;\n      if (text.length > 10) score++; // Check for disallowed passwords\n\n      if (text.toLowerCase().indexOf('password') > -1) score -= 2;\n      if (text.toLowerCase().indexOf('qwerty') > -1) score -= 2;\n      if (text.toLowerCase().indexOf('1234') > -1) score--;\n      if (text.toLowerCase().indexOf('4321') > -1) score--;\n      if (text.toLowerCase().indexOf('5678') > -1) score--;\n      if (text.toLowerCase().indexOf('8765') > -1) score--; // Check for 3 or more repeated characters\n\n      if (RegExp(\"(.)\\\\1{2,}\").test(text)) score--;\n      this.score = score;\n      this.render();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var color = \"grey\";\n      var description = \"\";\n      var percentage = 10;\n\n      if (this.score >= 5) {\n        color = \"#3dab40\";\n        description = \"Excellent\";\n        percentage = 100;\n      } else if (this.score >= 3) {\n        color = \"#d2ac23\";\n        description = \"Good\";\n        percentage = 75;\n      } else if (this.score > -100) {\n        color = \"#d04444\";\n        description = \"Poor\";\n        percentage = 25;\n      }\n\n      if (this.score > -100) {\n        this._wrapper.style.display = 'inline-block';\n        this._percentage.style.backgroundColor = color;\n        this._percentage.style.width = percentage + '%';\n        this._description.style.color = color;\n        this._description.textContent = description;\n      } else {\n        this._wrapper.style.display = 'none';\n      }\n    }\n  }], [{\n    key: \"boundAttributes\",\n    get: function get() {\n      return ['linkto'];\n    }\n  }]);\n\n  return PassStrength;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define('pass-strength', PassStrength);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/PassStrength.js\n");

/***/ }),

/***/ "./js/components/PopOver.js":
/*!**********************************!*\
  !*** ./js/components/PopOver.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar PopOver = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(PopOver, _HTMLElement);\n\n  var _super = _createSuper(PopOver);\n\n  function PopOver() {\n    var _this;\n\n    _classCallCheck(this, PopOver);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"closed\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseEntered\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"showing\", false);\n\n    return _this;\n  }\n\n  _createClass(PopOver, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n\n      this._shadowRoot.appendChild(styleSheet); // Transparent background to get click events\n\n\n      if (!!!this.getAttribute('no-background')) {\n        this._bg = document.createElement('div');\n        this._bg.className = 'popover-background';\n\n        this._shadowRoot.appendChild(this._bg);\n      }\n\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'popover';\n\n      this._shadowRoot.appendChild(this._wrapper);\n\n      this._contentWrapper = document.createElement('div');\n      this._contentWrapper.className = 'popover-content';\n\n      this._wrapper.appendChild(this._contentWrapper);\n\n      this._slot = document.createElement('slot');\n      this._slot.style.display = 'none';\n\n      this._contentWrapper.appendChild(this._slot);\n\n      this.setupEvents();\n      this.dynamicRender();\n      this.show();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      if (!!!this.getAttribute('no-background')) {\n        this._bg.addEventListener('click', function (e) {\n          _this2.close();\n        });\n\n        if (!!this.getAttribute('close-on-mouseleave')) {\n          this._bg.addEventListener('mousemove', function (e) {\n            if (!_this2.showing) return; // Ignore if we're still in the bounds\n\n            var rect = _this2._wrapper.getBoundingClientRect();\n\n            var mouseX = e.clientX;\n            var mouseY = e.clientY;\n            var leftPosition = Math.floor(rect.left);\n            var rightPosition = Math.floor(leftPosition + rect.width);\n            var topPosition = Math.floor(rect.top);\n            var bottomPosition = Math.floor(topPosition + rect.height); // Add margin\n\n            leftPosition *= 0.9;\n            rightPosition *= 1.1;\n            topPosition *= 0.9;\n            bottomPosition *= 1.1;\n            var withinBounds = mouseX >= leftPosition && mouseX < rightPosition && mouseY >= topPosition && mouseY < bottomPosition;\n\n            if (withinBounds) {\n              return;\n            }\n\n            _this2.close();\n          });\n        }\n      }\n\n      this._wrapper.addEventListener('keyup', function (e) {\n        if (e.key === 'Escape') {\n          _this2.close();\n        }\n      });\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {}\n  }, {\n    key: \"show\",\n    value: function () {\n      var _show = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee() {\n        var _this$getAttribute, _this$getAttribute2, _this$getAttribute3, _this$getAttribute4, _this$getAttribute5;\n\n        var width, height, xPos, yPos, initialXPos, finalXPos, initialYPos, finalYPos, direction;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('show');\n                width = (_this$getAttribute = +this.getAttribute('width')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : 100;\n                height = (_this$getAttribute2 = +this.getAttribute('height')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : 100;\n                xPos = (_this$getAttribute3 = +this.getAttribute('atX')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : 0;\n                yPos = (_this$getAttribute4 = +this.getAttribute('atY')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : 10;\n                initialXPos = xPos;\n                finalXPos = xPos - width / 2;\n                initialYPos = yPos + 30;\n                finalYPos = yPos + 30;\n                direction = (_this$getAttribute5 = this.getAttribute('direction')) !== null && _this$getAttribute5 !== void 0 ? _this$getAttribute5 : 'auto'; // Figure out direction\n\n                if (direction === \"auto\") {\n                  if (yPos + height >= document.body.offsetHeight * 0.95) {\n                    direction = 'above';\n                  } else {\n                    direction = 'below';\n                  }\n                }\n\n                if (direction === \"above\") {\n                  this._wrapper.classList.add('above');\n\n                  initialYPos = yPos - 10;\n                  finalYPos = yPos - 10 - height;\n                }\n\n                if (finalXPos < 0) finalXPos = 0;\n                this._wrapper.style.width = '0';\n                this._wrapper.style.height = '0';\n                this._wrapper.style.left = initialXPos + 'px';\n                this._wrapper.style.top = initialYPos + 'px';\n                this.animation = this._wrapper.animate([{\n                  width: width + 'px',\n                  height: height + 'px',\n                  left: finalXPos + 'px',\n                  top: finalYPos + 'px'\n                }], {\n                  duration: 200,\n                  iterations: 1,\n                  fill: 'forwards'\n                }); // Wait for the animation to finish\n\n                _context.prev = 18;\n                _context.next = 21;\n                return this.animation.finished;\n\n              case 21:\n                _context.next = 25;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](18);\n\n              case 25:\n                // Commit animation state to style attribute\n                if (!this.closed) {\n                  this.animation.commitStyles();\n                } // Cancel the animation\n\n\n                this.animation.cancel();\n                this.animation = null; // Show content\n\n                this._slot.style.display = 'block';\n                this.showing = true;\n                /*\n                        const contentAnimation = this._slot.animate([\n                            { opacity: 1.0 }\n                        ],{ duration: 100, iterations: 1, fill: 'forwards'});\n                \n                        await contentAnimation.finished;\n                \n                        contentAnimation.commitStyles();\n                        contentAnimation.cancel();\n                 */\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[18, 23]]);\n      }));\n\n      function show() {\n        return _show.apply(this, arguments);\n      }\n\n      return show;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee2() {\n        var immediately,\n            animation,\n            _args2 = arguments;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                immediately = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n                console.log('close');\n                this.closed = true;\n                if (this.animation) this.animation.cancel();\n\n                if (immediately) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                animation = this._wrapper.animate([{\n                  opacity: 0\n                }], {\n                  duration: 100,\n                  iterations: 1,\n                  fill: 'forwards'\n                }); // Wait for the animation to finish\n\n                _context2.prev = 6;\n                _context2.next = 9;\n                return animation.finished;\n\n              case 9:\n                // Commit animation state to style attribute\n                animation.commitStyles();\n                _context2.next = 14;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](6);\n\n              case 14:\n                // Cancel the animation\n                animation.cancel();\n\n              case 15:\n                // Kill element\n                this._shadowRoot.host.remove();\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 12]]);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return PopOver;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(PopOver, \"observedAttributes\", []);\n\ncustomElements.define('pop-over', PopOver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb21wb25lbnRzL1BvcE92ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL2NvbXBvbmVudHMvUG9wT3Zlci5qcz9hNWU0Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFBvcE92ZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgc3RhdGljIG9ic2VydmVkQXR0cmlidXRlcyA9IFtdO1xuICAgIGNsb3NlZCA9IGZhbHNlO1xuICAgIG1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICAgIHNob3dpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1JlbmRlcigpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9zaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJywgZGVsZWdhdGVzRm9jdXM6IHRydWV9KTtcblxuICAgICAgICAvLyBBcHBlbmQgc2l0ZSBzdHlsZXNoZWV0XG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgIHN0eWxlU2hlZXQuc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICAgICAgICBzdHlsZVNoZWV0LnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZGlzdC9zdHlsZS5jc3MnKTtcbiAgICAgICAgdGhpcy5fc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzdHlsZVNoZWV0KTtcblxuICAgICAgICAvLyBUcmFuc3BhcmVudCBiYWNrZ3JvdW5kIHRvIGdldCBjbGljayBldmVudHNcbiAgICAgICAgaWYgKCEhIXRoaXMuZ2V0QXR0cmlidXRlKCduby1iYWNrZ3JvdW5kJykpIHtcbiAgICAgICAgICAgIHRoaXMuX2JnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aGlzLl9iZy5jbGFzc05hbWUgPSAncG9wb3Zlci1iYWNrZ3JvdW5kJztcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGhpcy5fYmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl93cmFwcGVyLmNsYXNzTmFtZSA9ICdwb3BvdmVyJztcbiAgICAgICAgdGhpcy5fc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0aGlzLl93cmFwcGVyKTtcblxuICAgICAgICB0aGlzLl9jb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9jb250ZW50V3JhcHBlci5jbGFzc05hbWUgPSAncG9wb3Zlci1jb250ZW50JztcbiAgICAgICAgdGhpcy5fd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLl9jb250ZW50V3JhcHBlcik7XG5cbiAgICAgICAgdGhpcy5fc2xvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Nsb3QnKTtcbiAgICAgICAgdGhpcy5fc2xvdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9jb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLl9zbG90KTtcblxuICAgICAgICB0aGlzLnNldHVwRXZlbnRzKCk7XG5cbiAgICAgICAgdGhpcy5keW5hbWljUmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuXG4gICAgc2V0dXBFdmVudHMoKSB7XG4gICAgICAgIGlmICghISF0aGlzLmdldEF0dHJpYnV0ZSgnbm8tYmFja2dyb3VuZCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9iZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoISF0aGlzLmdldEF0dHJpYnV0ZSgnY2xvc2Utb24tbW91c2VsZWF2ZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG93aW5nKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGlmIHdlJ3JlIHN0aWxsIGluIHRoZSBib3VuZHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuX3dyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW91c2VYID0gZS5jbGllbnRYO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3VzZVkgPSBlLmNsaWVudFk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnRQb3NpdGlvbiA9IE1hdGguZmxvb3IocmVjdC5sZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0UG9zaXRpb24gPSBNYXRoLmZsb29yKGxlZnRQb3NpdGlvbiArIHJlY3Qud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wUG9zaXRpb24gPSBNYXRoLmZsb29yKHJlY3QudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJvdHRvbVBvc2l0aW9uID0gTWF0aC5mbG9vcih0b3BQb3NpdGlvbiArIHJlY3QuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbWFyZ2luXG4gICAgICAgICAgICAgICAgICAgIGxlZnRQb3NpdGlvbiAqPSAwLjk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zaXRpb24gKj0gMS4xO1xuICAgICAgICAgICAgICAgICAgICB0b3BQb3NpdGlvbiAqPSAwLjk7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9uICo9IDEuMTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgd2l0aGluQm91bmRzID0gbW91c2VYID49IGxlZnRQb3NpdGlvbiAmJiBtb3VzZVggPCByaWdodFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBtb3VzZVkgPj0gdG9wUG9zaXRpb24gJiYgbW91c2VZIDwgYm90dG9tUG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhpbkJvdW5kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBkeW5hbWljUmVuZGVyKCkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgc2hvdygpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Nob3cnKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSArdGhpcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgPz8gMTAwO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSArdGhpcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpID8/IDEwMDtcbiAgICAgICAgbGV0IHhQb3MgPSArdGhpcy5nZXRBdHRyaWJ1dGUoJ2F0WCcpID8/IDA7XG4gICAgICAgIGxldCB5UG9zID0gK3RoaXMuZ2V0QXR0cmlidXRlKCdhdFknKSA/PyAxMDtcblxuICAgICAgICBsZXQgaW5pdGlhbFhQb3MgPSB4UG9zO1xuICAgICAgICBsZXQgZmluYWxYUG9zID0geFBvcyAtICh3aWR0aCAvIDIpO1xuICAgICAgICBsZXQgaW5pdGlhbFlQb3MgPSB5UG9zICsgMzA7XG4gICAgICAgIGxldCBmaW5hbFlQb3MgPSB5UG9zICsgMzA7XG5cbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkaXJlY3Rpb24nKSA/PyAnYXV0byc7XG5cbiAgICAgICAgLy8gRmlndXJlIG91dCBkaXJlY3Rpb25cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgIGlmICh5UG9zICsgaGVpZ2h0ID49IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0ICogMC45NSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdhYm92ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdiZWxvdyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcImFib3ZlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnYWJvdmUnKTtcbiAgICAgICAgICAgIGluaXRpYWxZUG9zID0geVBvcyAtIDEwO1xuICAgICAgICAgICAgZmluYWxZUG9zID0geVBvcyAtIDEwIC0gaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbmFsWFBvcyA8IDApIGZpbmFsWFBvcyA9IDA7XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlci5zdHlsZS53aWR0aCA9ICcwJztcbiAgICAgICAgdGhpcy5fd3JhcHBlci5zdHlsZS5oZWlnaHQgPSAnMCc7XG4gICAgICAgIHRoaXMuX3dyYXBwZXIuc3R5bGUubGVmdCA9IGluaXRpYWxYUG9zICsgJ3B4JztcbiAgICAgICAgdGhpcy5fd3JhcHBlci5zdHlsZS50b3AgPSBpbml0aWFsWVBvcyArICdweCc7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB0aGlzLl93cmFwcGVyLmFuaW1hdGUoW1xuICAgICAgICAgICAgeyB3aWR0aDogd2lkdGggKyAncHgnLCBoZWlnaHQ6IGhlaWdodCArICdweCcsIGxlZnQ6IGZpbmFsWFBvcyArICdweCcsIHRvcDogZmluYWxZUG9zICsgJ3B4JyB9XG4gICAgICAgIF0seyBkdXJhdGlvbjogMjAwLCBpdGVyYXRpb25zOiAxLCBmaWxsOiAnZm9yd2FyZHMnfSk7XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFuaW1hdGlvbiB0byBmaW5pc2hcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbWF0aW9uLmZpbmlzaGVkO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbW1pdCBhbmltYXRpb24gc3RhdGUgdG8gc3R5bGUgYXR0cmlidXRlXG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmNvbW1pdFN0eWxlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgICAgdGhpcy5hbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbnVsbDtcblxuICAgICAgICAvLyBTaG93IGNvbnRlbnRcbiAgICAgICAgdGhpcy5fc2xvdC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgICB0aGlzLnNob3dpbmcgPSB0cnVlO1xuLypcbiAgICAgICAgY29uc3QgY29udGVudEFuaW1hdGlvbiA9IHRoaXMuX3Nsb3QuYW5pbWF0ZShbXG4gICAgICAgICAgICB7IG9wYWNpdHk6IDEuMCB9XG4gICAgICAgIF0seyBkdXJhdGlvbjogMTAwLCBpdGVyYXRpb25zOiAxLCBmaWxsOiAnZm9yd2FyZHMnfSk7XG5cbiAgICAgICAgYXdhaXQgY29udGVudEFuaW1hdGlvbi5maW5pc2hlZDtcblxuICAgICAgICBjb250ZW50QW5pbWF0aW9uLmNvbW1pdFN0eWxlcygpO1xuICAgICAgICBjb250ZW50QW5pbWF0aW9uLmNhbmNlbCgpO1xuICovXG4gICAgfVxuXG4gICAgYXN5bmMgY2xvc2UoaW1tZWRpYXRlbHkgPSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnY2xvc2UnKTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHRoaXMuYW5pbWF0aW9uLmNhbmNlbCgpO1xuXG4gICAgICAgIGlmICghaW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuX3dyYXBwZXIuYW5pbWF0ZShbXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDB9XG4gICAgICAgICAgICBdLCB7ZHVyYXRpb246IDEwMCwgaXRlcmF0aW9uczogMSwgZmlsbDogJ2ZvcndhcmRzJ30pO1xuXG4gICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgYW5pbWF0aW9uIHRvIGZpbmlzaFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhbmltYXRpb24uZmluaXNoZWQ7XG5cbiAgICAgICAgICAgICAgICAvLyBDb21taXQgYW5pbWF0aW9uIHN0YXRlIHRvIHN0eWxlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5jb21taXRTdHlsZXMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEtpbGwgZWxlbWVudFxuICAgICAgICB0aGlzLl9zaGFkb3dSb290Lmhvc3QucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3BvcC1vdmVyJywgUG9wT3Zlcik7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0FBTUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFGQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOzs7O0FBSUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQXZDQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQStDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7Ozs7Ozs7O0FBdUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFUQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBY0E7QUFDQTtBQWZBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFvQkE7QUFDQTtBQUNBO0FBdEJBO0FBd0JBO0FBQ0E7QUFDQTtBQTFCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7Ozs7Ozs7O0FBNUtBO0FBQ0E7QUFEQTtBQUNBO0FBdU1BIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/components/PopOver.js\n");

/***/ }),

/***/ "./js/components/ProgressBarCircular.js":
/*!**********************************************!*\
  !*** ./js/components/ProgressBarCircular.js ***!
  \**********************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar ProgressBarCircular = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(ProgressBarCircular, _HTMLElement);\n\n  var _super = _createSuper(ProgressBarCircular);\n\n  function ProgressBarCircular() {\n    _classCallCheck(this, ProgressBarCircular);\n\n    return _super.call(this);\n  }\n\n  _createClass(ProgressBarCircular, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this[attrName] = newValue;\n      this.render();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this$getAttribute, _this$getAttribute2;\n\n      this.attachShadow({\n        mode: \"open\"\n      }); // Make sure element obeys parent sizing\n\n      this.shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      var style = getComputedStyle(document.documentElement);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'progress-bar-circular';\n      this._wrapper.style.position = 'relative';\n      this._wrapper.style.margin = '0';\n      this._wrapper.style.padding = '0';\n      this.shadowRoot.appendChild(this._wrapper);\n      if (this.getAttribute('width')) this._wrapper.style.width = this.getAttribute('width') + 'px';\n      if (this.getAttribute('height')) this._wrapper.style.height = this.getAttribute('height') + 'px';\n      this._img = document.createElement('div');\n      this._img.style.position = 'absolute';\n      this._img.style.left = '0';\n      this._img.style.right = '0';\n      this._img.style.top = '0';\n      this._img.style.bottom = '0';\n      this._img.style.width = '100%';\n      this._img.style.height = '100%';\n\n      this._wrapper.appendChild(this._img);\n\n      this._canvas = document.createElement('canvas');\n      this._canvas.width = ((_this$getAttribute = this.getAttribute('width')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : 0) * window.devicePixelRatio;\n      this._canvas.height = ((_this$getAttribute2 = this.getAttribute('height')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : 0) * window.devicePixelRatio;\n      this._canvas.style.position = 'absolute';\n      this._canvas.style.left = '0';\n      this._canvas.style.right = '0';\n      this._canvas.style.top = '0';\n      this._canvas.style.bottom = '0';\n      this._canvas.style.width = '100%';\n      this._canvas.style.height = '100%';\n\n      this._wrapper.appendChild(this._canvas);\n\n      this.render();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getAttribute3;\n\n      if (!this.shadowRoot) return;\n      var percent = (_this$getAttribute3 = this.getAttribute('progress')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : 0;\n      if (percent < 0) percent = 0;\n      if (percent > 100) percent = 100;\n      var style = getComputedStyle(document.documentElement);\n\n      var ctx = this._canvas.getContext('2d');\n\n      ctx.lineCap = 'round';\n      ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n      var posX = this._canvas.width / 2,\n          posY = this._canvas.height / 2;\n      ctx.beginPath();\n      ctx.arc(posX, posY, this._canvas.width / 2.5, Math.PI / 180 * 270, Math.PI / 180 * (270 + 360));\n      ctx.strokeStyle = style.getPropertyValue('--page-text-color');\n      ctx.lineWidth = 2 * window.devicePixelRatio;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.strokeStyle = style.getPropertyValue('--accent-color');\n      ctx.lineWidth = 3 * window.devicePixelRatio;\n      ctx.arc(posX, posY, this._canvas.width / 2.5, Math.PI / 180 * 270, Math.PI / 180 * (270 + 360 / 100 * percent));\n      ctx.stroke();\n      var imageURL = this.getAttribute('image-url');\n\n      if (imageURL && this.getAttribute('use-color-image')) {\n        this._img.style.background = \"url('\" + this.getAttribute('image-url') + \"') no-repeat center/51%\";\n      } else {\n        if (imageURL) {\n          if (typeof this._img.style.mask !== 'undefined') this._img.style.mask = \"url('\" + this.getAttribute('image-url') + \"') no-repeat center/51%\";\n          if (typeof this._img.style.webkitMask !== 'undefined') this._img.style.webkitMask = \"url('\" + this.getAttribute('image-url') + \"') no-repeat center/51%\";\n          this._img.style.backgroundColor = style.getPropertyValue('--page-text-color');\n        } else {\n          if (typeof this._img.style.mask !== 'undefined') this._img.style.mask = '';\n          if (typeof this._img.style.webkitMask !== 'undefined') this._img.style.webkitMask = '';\n          this._img.style.backgroundColor = 'transparent';\n        }\n      }\n    }\n  }], [{\n    key: \"observedAttributes\",\n    get: function get() {\n      return ['image-url', 'progress', \"use-color-image\"];\n    }\n  }]);\n\n  return ProgressBarCircular;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define('progress-bar-circular', ProgressBarCircular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/ProgressBarCircular.js\n");

/***/ }),

/***/ "./js/components/TaggableTextarea.js":
/*!*******************************************!*\
  !*** ./js/components/TaggableTextarea.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TaggableTextarea = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(TaggableTextarea, _HTMLElement);\n\n  var _super = _createSuper(TaggableTextarea);\n\n  function TaggableTextarea() {\n    _classCallCheck(this, TaggableTextarea);\n\n    return _super.call(this);\n  }\n\n  _createClass(TaggableTextarea, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this$getAttribute,\n          _this = this;\n\n      this.attachShadow({\n        mode: \"open\"\n      }); // Make sure element obeys parent sizing\n\n      this.shadowRoot.host.style.display = 'block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n\n      this._wrapper.classList.add('taggable-textarea-wrapper');\n\n      this._wrapper.classList.add('editable-content');\n\n      this._wrapper.contentEditable = true;\n      this.shadowRoot.appendChild(this._wrapper);\n      this._wrapper.innerHTML = (_this$getAttribute = this.getAttribute('value')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '';\n\n      this._wrapper.addEventListener('keyup', function (e) {\n        var _this$getAttribute2;\n\n        // TODO: Trigger change event\n        //            this.shadowRoot.dispatchEvent(e);\n        var triggerChars = ((_this$getAttribute2 = _this.getAttribute('trigger-characters')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '').split('');\n        triggerChars.forEach(function (c) {\n          if (c === e.key) {\n            // Trigger 'trigger' event\n            _this.shadowRoot.dispatchEvent(new CustomEvent('trigger', {\n              composed: true,\n              bubbles: true,\n              detail: {\n                key: e.key\n              }\n            }));\n          }\n        });\n      }); // Placeholder support\n\n\n      if (this.getAttribute('placeholder') && !this.getAttribute('value')) {\n        // Add dummy text node\n        var textNode = document.createTextNode('');\n\n        this._wrapper.appendChild(textNode);\n\n        this._placeholder = document.createElement('div');\n        this._placeholder.className = 'placeholder';\n        this._placeholder.contentEditable = false;\n        this._placeholder.style.display = 'none';\n\n        this._wrapper.appendChild(this._placeholder);\n\n        this._placeholder.style.display = 'block';\n        this._placeholder.innerText = this.getAttribute('placeholder');\n      }\n\n      this.addEventListener('focus', function (e) {\n        _this._wrapper.querySelector('.placeholder').remove();\n      });\n      this.dynamicRender();\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!!this.getAttribute('disabled')) {\n        this._wrapper.contentEditable = false;\n\n        this._wrapper.classList.add('disabled');\n      } else {\n        this._wrapper.contentEditable = true;\n\n        this._wrapper.classList.remove('disabled');\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      if (this._wrapper.querySelector('.placeholder')) {\n        return '';\n      } else if (this._wrapper.innerHTML.trim() === '<br>') {\n        return '';\n      } else {\n        return this._wrapper.innerHTML;\n      }\n    },\n    set: function set(text) {\n      return this._wrapper.innerHTML = text;\n    }\n  }]);\n\n  return TaggableTextarea;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(TaggableTextarea, \"observedAttributes\", ['disabled']);\n\ncustomElements.define('taggable-textarea', TaggableTextarea);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TaggableTextarea);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb21wb25lbnRzL1RhZ2dhYmxlVGV4dGFyZWEuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL2NvbXBvbmVudHMvVGFnZ2FibGVUZXh0YXJlYS5qcz9kODQ5Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRhZ2dhYmxlVGV4dGFyZWEgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgc3RhdGljIG9ic2VydmVkQXR0cmlidXRlcyA9IFsnZGlzYWJsZWQnXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1JlbmRlcigpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogXCJvcGVuXCJ9KTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgZWxlbWVudCBvYmV5cyBwYXJlbnQgc2l6aW5nXG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5ob3N0LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgIC8vIEFwcGVuZCBzaXRlIHN0eWxlc2hlZXRcbiAgICAgICAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgc3R5bGVTaGVldC5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgICAgIHN0eWxlU2hlZXQuc2V0QXR0cmlidXRlKCdocmVmJywgJy9kaXN0L3N0eWxlLmNzcycpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl93cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3RhZ2dhYmxlLXRleHRhcmVhLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5fd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdlZGl0YWJsZS1jb250ZW50Jyk7XG4gICAgICAgIHRoaXMuX3dyYXBwZXIuY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHRoaXMuX3dyYXBwZXIpO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIuaW5uZXJIVE1MID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykgPz8gJyc7XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGUgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogVHJpZ2dlciBjaGFuZ2UgZXZlbnRcbi8vICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmRpc3BhdGNoRXZlbnQoZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJDaGFycyA9ICh0aGlzLmdldEF0dHJpYnV0ZSgndHJpZ2dlci1jaGFyYWN0ZXJzJykgPz8gJycpLnNwbGl0KCcnKVxuXG4gICAgICAgICAgICB0cmlnZ2VyQ2hhcnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjID09PSBlLmtleSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyICd0cmlnZ2VyJyBldmVudFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3RyaWdnZXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGUua2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUGxhY2Vob2xkZXIgc3VwcG9ydFxuICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykgJiYgIXRoaXMuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAvLyBBZGQgZHVtbXkgdGV4dCBub2RlXG4gICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuYXBwZW5kQ2hpbGQodGV4dE5vZGUpO1xuXG4gICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuY2xhc3NOYW1lID0gJ3BsYWNlaG9sZGVyJztcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLmNvbnRlbnRFZGl0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5fcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLmlubmVyVGV4dCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZWhvbGRlcicpLnJlbW92ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmR5bmFtaWNSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBkeW5hbWljUmVuZGVyKCkge1xuICAgICAgICBpZiAoISF0aGlzLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgdGhpcy5fd3JhcHBlci5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dyYXBwZXIucXVlcnlTZWxlY3RvcignLnBsYWNlaG9sZGVyJykpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl93cmFwcGVyLmlubmVySFRNTC50cmltKCkgPT09ICc8YnI+Jykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZXIuaW5uZXJIVE1MO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZXIuaW5uZXJIVE1MID0gdGV4dDtcbiAgICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgndGFnZ2FibGUtdGV4dGFyZWEnLCBUYWdnYWJsZVRleHRhcmVhKTtcbmV4cG9ydCBkZWZhdWx0IFRhZ2dhYmxlVGV4dGFyZWE7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0FBR0E7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUhBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFoR0E7QUFDQTtBQURBO0FBQ0E7QUFrR0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/components/TaggableTextarea.js\n");

/***/ }),

/***/ "./js/components/TextInputButton.js":
/*!******************************************!*\
  !*** ./js/components/TextInputButton.js ***!
  \******************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TextInputButton = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(TextInputButton, _HTMLElement);\n\n  var _super = _createSuper(TextInputButton);\n\n  function TextInputButton() {\n    var _this;\n\n    _classCallCheck(this, TextInputButton);\n\n    _this = _super.call(this);\n    _this._onbuttonclick = null;\n    return _this;\n  }\n\n  _createClass(TextInputButton, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this2 = this;\n\n      this.shadowRoot = this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.style.display = 'flex';\n      this._wrapper.style.width = '100%';\n      this._wrapper.style.height = '100%';\n      this._input = document.createElement('input');\n      this._input.style.margin = '0';\n      this._input.style.flexGrow = '1';\n      this._input.style.borderRadius = 'var(--input-border-radius) 0 0 var(--input-border-radius)';\n      this._input.style.outline = 'none';\n      this._input.style.padding = 'var(--input-padding)';\n      this._input.style.margin = 'var(--input-margin) 0 var(--input-margin)';\n      this._input.style.width = '100%';\n      this._input.style.minWidth = '30px';\n      this._input.style.borderColor = 'var(--input-border-color)';\n      this._input.style.backgroundColor = 'var(--input-bg-color)';\n      this._input.style.color = 'var(--input-text-color)';\n\n      this._wrapper.appendChild(this._input);\n\n      this._button = document.createElement('button');\n      this._button.style.borderRadius = '0 var(--input-border-radius) var(--input-border-radius) 0';\n      this._button.style.borderLeft = 'none';\n      this._button.style.padding = '0 .5rem';\n      this._button.style.margin = 'var(--input-margin) 0 var(--input-margin)';\n      this._button.style.borderColor = 'var(--input-border-color)';\n      this._button.style.backgroundColor = 'var(--page-bg-color)';\n      this._button.style.color = 'var(--page-text-color)';\n\n      this._button.addEventListener('mouseenter', function (e) {\n        if (!_this2.getAttribute('disabled')) {\n          _this2._button.style.borderColor = 'var(--input-border-color-hover) var(--input-border-color-hover) var(--input-border-color-hover) transparent';\n          _this2._input.style.borderRightColor = 'var(--input-border-color-hover)';\n        }\n      });\n\n      this._button.addEventListener('mouseleave', function (e) {\n        if (!_this2.getAttribute('disabled')) {\n          _this2._button.style.borderColor = 'var(--input-border-color) var(--input-border-color) var(--input-border-color) transparent';\n          _this2._input.style.borderRightColor = 'var(--input-border-color)';\n        }\n      });\n\n      if (!!this.autoselect) {\n        this._input.addEventListener('focus', function (e) {\n          _this2._input.select();\n        });\n      }\n\n      this._wrapper.appendChild(this._button);\n\n      this.shadowRoot.appendChild(this._wrapper);\n\n      this._button.addEventListener('click', function (e) {\n        var handler = _this2.onbuttonclick;\n        if (handler) handler(e);\n      });\n\n      this._input.addEventListener('keyup', function (e) {\n        _this2.setAttribute('value', _this2._input.value);\n      });\n\n      this._input.addEventListener('change', function (e) {\n        _this2.shadowRoot.dispatchEvent(new Event('change', {\n          composed: true,\n          bubbles: true\n        }));\n      });\n\n      this.dynamicRender();\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._input || !this._button) return;\n      this._input.value = this.value;\n      this._button.textContent = this.buttontitle;\n      this._input.readOnly = !!this.getAttribute('readonly');\n\n      if (!!this.getAttribute('disabled')) {\n        this._input.disabled = true;\n        this._button.disabled = true;\n        this._input.style.borderColor = 'var(--input-border-color-disabled)';\n        this._input.style.color = 'var(--input-text-color-disabled)';\n        this._button.style.borderColor = 'var(--input-border-color-disabled) var(--input-border-color-disabled) var(--input-border-color-disabled) transparent';\n        this._button.style.color = 'var(--input-text-color-disabled)';\n      } else {\n        this._input.disabled = false;\n        this._button.disabled = false;\n        this._input.style.borderColor = 'var(--input-border-color)';\n        this._input.style.backgroundColor = 'var(--input-bg-color)';\n        this._input.style.color = 'var(--input-text-color)';\n        this._input.style.borderRightColor = 'var(--input-border-color)';\n        this._button.style.borderColor = 'var(--input-border-color) var(--input-border-color) var(--input-border-color) transparent';\n        this._button.style.backgroundColor = 'var(--page-bg-color)';\n        this._button.style.color = 'var(--page-text-color)';\n      }\n\n      this._input.readOnly = !!this.getAttribute('readonly');\n    }\n  }, {\n    key: \"textarea\",\n    get: function get() {\n      return this._input;\n    }\n  }, {\n    key: \"button\",\n    get: function get() {\n      return this._button;\n    }\n  }, {\n    key: \"buttontitle\",\n    get: function get() {\n      return this.getAttribute('buttontitle');\n    },\n    set: function set(_title) {\n      this.setAttribute(\"buttontitle\", _title);\n      this.dynamicRender();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.getAttribute('value');\n    },\n    set: function set(_val) {\n      this.setAttribute(\"value\", _val);\n      this.dynamicRender();\n    }\n  }, {\n    key: \"autoselect\",\n    get: function get() {\n      return this.getAttribute('autoselect');\n    },\n    set: function set(_autoselect) {\n      this.setAttribute(\"autoselect\", _autoselect);\n    }\n  }, {\n    key: \"onbuttonclick\",\n    get: function get() {\n      return this._onbuttonclick;\n    },\n    set: function set(_handler) {\n      this._onbuttonclick = _handler;\n    }\n  }]);\n\n  return TextInputButton;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(TextInputButton, \"observedAttributes\", ['input', 'button', 'buttontitle', 'onbuttonclick', 'value', 'autoselect', 'disabled']);\n\nvar TextInputCopyButton = /*#__PURE__*/function (_TextInputButton) {\n  _inherits(TextInputCopyButton, _TextInputButton);\n\n  var _super2 = _createSuper(TextInputCopyButton);\n\n  function TextInputCopyButton() {\n    var _this3;\n\n    _classCallCheck(this, TextInputCopyButton);\n\n    _this3 = _super2.call(this);\n\n    _this3._onbuttonclick = function (e) {\n      _this3._input.select();\n\n      document.execCommand(\"copy\");\n      _this3._button.style.width = '3em'; // Show tick icon\n\n      _this3._button.innerHTML = '&#10003;';\n      window.setTimeout(function () {\n        _this3.button.textContent = _this3.buttontitle;\n        _this3._button.style.width = '3em';\n      }, 2000);\n    };\n\n    return _this3;\n  }\n\n  _createClass(TextInputCopyButton, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      _get(_getPrototypeOf(TextInputCopyButton.prototype), \"connectedCallback\", this).call(this);\n\n      this._button.style.width = '3em';\n      this.buttontitle = \"⧉\";\n    }\n  }]);\n\n  return TextInputCopyButton;\n}(TextInputButton);\n\ncustomElements.define('text-input-button', TextInputButton);\ncustomElements.define('text-input-copy-button', TextInputCopyButton);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/TextInputButton.js\n");

/***/ }),

/***/ "./js/components/TextareaButton.js":
/*!*****************************************!*\
  !*** ./js/components/TextareaButton.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TextareaButton = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(TextareaButton, _HTMLElement);\n\n  var _super = _createSuper(TextareaButton);\n\n  function TextareaButton() {\n    var _this;\n\n    _classCallCheck(this, TextareaButton);\n\n    _this = _super.call(this);\n    _this._onbuttonclick = null;\n    return _this;\n  }\n\n  _createClass(TextareaButton, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this2 = this;\n\n      this.shadowRoot = this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.host.style.display = 'block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.style.display = 'flex';\n      this._wrapper.style.width = '100%';\n      this._wrapper.style.height = '100%';\n      this._textarea = document.createElement('textarea');\n      this._textarea.style.margin = '0';\n      this._textarea.style.flexGrow = '1';\n      this._textarea.style.resize = 'none';\n      this._textarea.style.borderRadius = '.3rem 0 0 .3rem';\n      this._textarea.style.width = '100%';\n      this._textarea.style.minWidth = '40px';\n      this._textarea.style.minHeight = '1em';\n\n      this._wrapper.appendChild(this._textarea);\n\n      this._button = document.createElement('button');\n      this._button.style.borderRadius = '0 .3rem .3rem 0';\n      this._button.style.borderLeft = 'none';\n      this._button.style.marginLeft = '0';\n      this._button.style.padding = '0 .5rem'; // Add hover style\n\n      this._button.addEventListener('mouseenter', function (e) {\n        if (!_this2.getAttribute('disabled')) {\n          _this2._button.style.borderColor = 'var(--input-border-color-hover) var(--input-border-color-hover) var(--input-border-color-hover) transparent';\n          _this2._textarea.style.borderRightColor = 'var(--input-border-color-hover)';\n        }\n      });\n\n      this._button.addEventListener('mouseleave', function (e) {\n        if (!_this2.getAttribute('disabled')) {\n          _this2._button.style.borderColor = 'var(--input-border-color) var(--input-border-color) var(--input-border-color) transparent';\n          _this2._textarea.style.borderRightColor = 'var(--input-border-color)';\n        }\n      });\n\n      if (!!this.autoselect) {\n        this._textarea.addEventListener('focus', function (e) {\n          _this2._textarea.select();\n        });\n      }\n\n      this._wrapper.appendChild(this._button);\n\n      this.shadowRoot.appendChild(this._wrapper);\n\n      this._button.addEventListener('click', function (e) {\n        var handler = _this2.onbuttonclick;\n        if (handler) handler(e);\n      });\n\n      this._textarea.addEventListener('keyup', function (e) {\n        _this2.setAttribute('value', _this2._input.value);\n      });\n\n      this._textarea.addEventListener('change', function (e) {\n        _this2.shadowRoot.dispatchEvent(new CustomEvent('change', {\n          composed: true,\n          bubbles: true\n        }));\n      }); // Redraw on resize\n\n\n      window.addEventListener('resize', function (e) {\n        _this2.dynamicRender();\n      });\n      this.dynamicRender();\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      if (!this._textarea || !this._button) return;\n      this._textarea.value = this.value;\n      this._button.textContent = this.buttontitle;\n      this._textarea.readOnly = !!this.getAttribute('readonly');\n\n      if (!!this.getAttribute('disabled')) {\n        this._textarea.disabled = true;\n        this._button.disabled = true;\n        this._textarea.style.borderColor = 'var(--input-border-color-disabled)';\n        this._textarea.style.color = 'var(--input-text-color-disabled)';\n        this._textarea.style.borderRightColor = 'var(--input-border-color-disabled)';\n        this._button.style.borderColor = 'var(--input-border-color-disabled) var(--input-border-color-disabled) var(--input-border-color-disabled) transparent';\n        this._button.style.color = 'var(--input-text-color-disabled)';\n      } else {\n        this._textarea.disabled = false;\n        this._button.disabled = false;\n        this._textarea.style.borderColor = 'var(--input-border-color)';\n        this._textarea.style.backgroundColor = 'var(--input-bg-color)';\n        this._textarea.style.color = 'var(--input-text-color)';\n        this._textarea.style.borderRightColor = 'var(--input-border-color)';\n        this._button.style.borderColor = 'var(--input-border-color) var(--input-border-color) var(--input-border-color) transparent';\n        this._button.style.backgroundColor = 'var(--page-bg-color)';\n        this._button.style.color = 'var(--page-text-color)';\n      } // Auto-size height according to text content\n\n\n      var scrollHeight = this._textarea.scrollHeight;\n      if (scrollHeight > 200) scrollHeight = 200;\n\n      if (scrollHeight < this._wrapper.clientHeight) {\n        this._textarea.style.height = '100%';\n      } else if (scrollHeight > 10) {\n        this._textarea.style.height = scrollHeight + 'px';\n      }\n    }\n  }, {\n    key: \"textarea\",\n    get: function get() {\n      return this._textarea;\n    }\n  }, {\n    key: \"button\",\n    get: function get() {\n      return this._button;\n    }\n  }, {\n    key: \"buttontitle\",\n    get: function get() {\n      return this.getAttribute('buttontitle');\n    },\n    set: function set(_title) {\n      this.setAttribute(\"buttontitle\", _title);\n      this.dynamicRender();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.getAttribute('value');\n    },\n    set: function set(_val) {\n      this.setAttribute(\"value\", _val);\n      this.dynamicRender();\n    }\n  }, {\n    key: \"autoselect\",\n    get: function get() {\n      return this.getAttribute('autoselect');\n    },\n    set: function set(_autoselect) {\n      this.setAttribute(\"autoselect\", _autoselect);\n    }\n  }, {\n    key: \"onbuttonclick\",\n    get: function get() {\n      return this._onbuttonclick;\n    },\n    set: function set(_handler) {\n      this._onbuttonclick = _handler;\n    }\n  }]);\n\n  return TextareaButton;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(TextareaButton, \"observedAttributes\", ['textarea', 'button', 'buttontitle', 'onbuttonclick', 'value', 'autoselect', 'disabled']);\n\nvar TextareaCopyButton = /*#__PURE__*/function (_TextareaButton) {\n  _inherits(TextareaCopyButton, _TextareaButton);\n\n  var _super2 = _createSuper(TextareaCopyButton);\n\n  function TextareaCopyButton() {\n    var _this3;\n\n    _classCallCheck(this, TextareaCopyButton);\n\n    _this3 = _super2.call(this);\n\n    _this3._onbuttonclick = function (e) {\n      _this3._textarea.select();\n\n      document.execCommand(\"copy\");\n      _this3._button.style.width = '3em'; // Show tick icon\n\n      _this3._button.innerHTML = '&#10003;';\n      window.setTimeout(function () {\n        _this3.button.textContent = _this3.buttontitle;\n        _this3.button.style.width = '3em';\n      }, 2000);\n    };\n\n    return _this3;\n  }\n\n  _createClass(TextareaCopyButton, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      _get(_getPrototypeOf(TextareaCopyButton.prototype), \"connectedCallback\", this).call(this);\n\n      this._button.style.width = '3em';\n      this.buttontitle = \"⧉\";\n    }\n  }]);\n\n  return TextareaCopyButton;\n}(TextareaButton);\n\ncustomElements.define('textarea-button', TextareaButton);\ncustomElements.define('textarea-copy-button', TextareaCopyButton);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/TextareaButton.js\n");

/***/ }),

/***/ "./js/components/ThumbnailImage.js":
/*!*****************************************!*\
  !*** ./js/components/ThumbnailImage.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ThumbnailImage = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(ThumbnailImage, _HTMLElement);\n\n  var _super = _createSuper(ThumbnailImage);\n\n  function ThumbnailImage() {\n    var _this;\n\n    _classCallCheck(this, ThumbnailImage);\n\n    _this = _super.call(this);\n    _this._onCloseHandler = null;\n    _this.reloadCount = 0;\n    return _this;\n  }\n\n  _createClass(ThumbnailImage, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      if (attrName === 'hover-frame' && oldValue !== newValue) {\n        this.loadAndDrawHoverscrubImageForFrameNumber(newValue);\n      } else {\n        var shouldRedraw = false;\n        if (attrName === 'size' || attrName === 'src' || attrName === 'hover-src') shouldRedraw = true;\n        this.dynamicRender(shouldRedraw);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.attachShadow({\n        mode: 'open'\n      }); // Make sure element obeys parent sizing\n\n      this.shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n\n      this._wrapper.classList.add('thumbnail-wrapper');\n\n      this.shadowRoot.appendChild(this._wrapper);\n      this.render();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.obj) {\n        this.obj.removeEventListener('mousemove', this.hoverScrub.bind(this));\n        this.obj = null;\n      }\n    }\n  }, {\n    key: \"hoverScrub\",\n    value: function hoverScrub(event) {\n      if (!this.getAttribute('hover-src')) return; // Get cursor position\n\n      var rect = this._canvas.getBoundingClientRect();\n\n      var pos = event.clientX - rect.left; // Get frame number\n\n      var frameNumber = Math.ceil(pos / this._canvas.clientWidth * 100.0) - 1;\n      if (frameNumber > 99) frameNumber = 99;\n      if (frameNumber < 0) frameNumber = 0;\n      this.loadAndDrawHoverscrubImageForFrameNumber(frameNumber); // Draw playhead\n\n      this._playhead.style.display = \"inline-block\";\n      this._playhead.style.left = frameNumber + \"%\";\n      this._playhead.style.height = this._canvas.clientHeight + \"px\";\n    }\n  }, {\n    key: \"mouseLeave\",\n    value: function mouseLeave(event) {\n      if (!this.getAttribute('hover-src')) return;\n\n      if (this._playhead) {\n        this._playhead.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"drawHoverImageForFrameNumber\",\n    value: function drawHoverImageForFrameNumber(frameNumber) {\n      if (!this.hoverImage) return;\n      var hoverImageWidth = this.hoverImage.naturalWidth;\n      var hoverImageHeight = this.hoverImage.naturalHeight;\n      var xPos = 0;\n      var yPos = 0;\n      var frameWidth = 0;\n      var frameHeight = 0; // Check if it's old-style hoverscrub or new\n\n      if (hoverImageHeight / hoverImageWidth < 0.05) {\n        frameWidth = hoverImageWidth / 100;\n        frameHeight = hoverImageHeight;\n        xPos = frameWidth * frameNumber;\n        yPos = 0;\n      } else {\n        // Row-based format\n        var row = Math.floor(frameNumber / 10);\n        var col = frameNumber - row * 10;\n        frameWidth = hoverImageWidth / 10;\n        frameHeight = hoverImageHeight / 10;\n        xPos = col * frameWidth;\n        yPos = row * frameHeight;\n      }\n\n      this.calculateDimensions(frameWidth, frameHeight, this._canvas.clientWidth, this._canvas.clientHeight);\n\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n\n      this._ctx.drawImage(this.hoverImage, xPos, yPos, frameWidth, frameHeight, this.imageX, this.imageY, this.effectiveWidth, this.effectiveHeight);\n    }\n  }, {\n    key: \"loadAndDrawHoverscrubImageForFrameNumber\",\n    value: function loadAndDrawHoverscrubImageForFrameNumber(frameNumber) {\n      var _this2 = this;\n\n      if (!this.hoverImage) {\n        this.loadImage(this.getAttribute('hover-src')).then(function (image) {\n          _this2.hoverImage = image;\n\n          _this2.drawHoverImageForFrameNumber(frameNumber);\n        });\n      } else {\n        this.drawHoverImageForFrameNumber(frameNumber);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var canvasWidth = 120;\n      var canvasHeight = 68;\n      var size = this.getAttribute('size');\n\n      if (size === 'mini') {\n        canvasWidth = 60;\n        canvasHeight = 34;\n      } else if (size === 'micro') {\n        canvasWidth = 45;\n        canvasHeight = 25;\n      } else if (size === 'large') {\n        canvasWidth = 240;\n        canvasHeight = 136;\n      }\n\n      var canvas = \"<canvas id=\\\"thumbnail\\\" width=\\\"\".concat(canvasWidth, \"\\\" height=\\\"\").concat(canvasHeight, \"\\\"></canvas>\");\n\n      this._wrapper.insertAdjacentHTML('beforeend', canvas);\n\n      this._canvas = this._wrapper.querySelector('#thumbnail');\n      this._ctx = this._canvas.getContext('2d');\n\n      if (this.getAttribute('size') !== 'mini' && this.getAttribute('size') !== 'micro') {\n        if (this.getAttribute('has-audio')) {\n          this._wrapper.insertAdjacentHTML('afterbegin', \"<div class=\\\"has-audio\\\"></div>\");\n        }\n\n        var duration = this.getAttribute('duration');\n\n        if (duration) {\n          this._wrapper.insertAdjacentHTML('afterbegin', \"<div class=\\\"file-duration\\\">\".concat(duration, \"</div>\"));\n        }\n      }\n\n      this.dynamicRender(true);\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender(redrawThumb) {\n      var _this3 = this;\n\n      if (!this._wrapper) return;\n      var src = this.getAttribute('src');\n      var originalSource = src; // Show unknown doc if unspecified\n\n      if (!src && this.getAttribute('file-type') !== 'video') {\n        src = '/img/Unknown_Doc.svg';\n      }\n\n      if (this.getAttribute('size')) this._wrapper.classList.add(this.getAttribute('size'));\n\n      if (redrawThumb) {\n        var canvasWidth = 120;\n        var canvasHeight = 68;\n        var size = this.getAttribute('size');\n\n        if (size === 'mini') {\n          canvasWidth = 60;\n          canvasHeight = 34;\n        } else if (size === 'micro') {\n          canvasWidth = 45;\n          canvasHeight = 25;\n        } else if (size === 'large') {\n          canvasWidth = 240;\n          canvasHeight = 136;\n        }\n\n        this._canvas.setAttribute('width', canvasWidth);\n\n        this._canvas.setAttribute('height', canvasHeight);\n\n        if (!this.getAttribute('hover-frame')) {\n          this.loadImage(src).then(function (image) {\n            _this3.calculateDimensions(image.naturalWidth, image.naturalHeight, _this3._canvas.clientWidth, _this3._canvas.clientHeight);\n\n            _this3._ctx.clearRect(0, 0, _this3._canvas.width, _this3._canvas.height);\n\n            _this3._ctx.drawImage(image, _this3.imageX, _this3.imageY, _this3.effectiveWidth, _this3.effectiveHeight);\n          });\n        }\n\n        if (this.getAttribute('hover-src')) {\n          var playhead = \"<div class=\\\"thumbnail-playhead\\\"></div>\";\n\n          this._wrapper.insertAdjacentHTML('afterbegin', playhead);\n\n          this._playhead = this._wrapper.querySelector('.thumbnail-playhead');\n\n          if (size) {\n            this._playhead.classList.add(this.size);\n          } // Listen for mouse move\n\n\n          if (!this.getAttribute('no-scrub')) {\n            this._wrapper.addEventListener('mousemove', this.hoverScrub.bind(this));\n\n            this._wrapper.addEventListener('mouseleave', this.mouseLeave.bind(this));\n          }\n\n          if (this.getAttribute('hover-frame')) {\n            this.loadAndDrawHoverscrubImageForFrameNumber(this.getAttribute('hover-frame'));\n          }\n        }\n      }\n\n      if (this.getAttribute('file-type') === 'video') {\n        this._wrapper.style.backgroundColor = '#000';\n      } // Fix race condition\n\n\n      if (this.reloadCount === 0 && !originalSource) {\n        window.setTimeout(function () {\n          _this3.reloadCount++;\n\n          _this3.dynamicRender(true);\n        }, 250);\n      }\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(url) {\n      return new Promise(function (resolve) {\n        var image = new Image();\n        image.addEventListener('load', function () {\n          resolve(image);\n        });\n        image.src = url;\n      });\n    }\n  }, {\n    key: \"calculateDimensions\",\n    value: function calculateDimensions(imageWidth, imageHeight, containerWidth, containerHeight) {\n      this.imageWidth = imageWidth;\n      this.imageHeight = imageHeight;\n\n      if (this.imageWidth > this.imageHeight) {\n        this.effectiveWidth = containerWidth;\n        this.effectiveHeight = this.effectiveWidth * (this.imageHeight / this.imageWidth);\n        this.imageX = 0;\n        this.imageY = (containerHeight - this.effectiveHeight) / 2;\n      } else {\n        this.effectiveHeight = containerHeight;\n        this.effectiveWidth = this.effectiveHeight * (this.imageWidth / this.imageHeight);\n        this.imageX = (this._canvas.clientWidth - this.effectiveWidth) / 2;\n        this.imageY = 0;\n      }\n    }\n  }]);\n\n  return ThumbnailImage;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(ThumbnailImage, \"observedAttributes\", ['src', 'hover-src', 'frame-width', 'size', 'file-type', 'hover-frame', 'duration']);\n\ncustomElements.define('thumbnail-image', ThumbnailImage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/ThumbnailImage.js\n");

/***/ }),

/***/ "./js/components/TimecodeInput.js":
/*!****************************************!*\
  !*** ./js/components/TimecodeInput.js ***!
  \****************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar TimecodeInput = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(TimecodeInput, _HTMLElement);\n\n  var _super = _createSuper(TimecodeInput);\n\n  function TimecodeInput() {\n    _classCallCheck(this, TimecodeInput);\n\n    return _super.call(this);\n  }\n\n  _createClass(TimecodeInput, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this[attrName] = newValue;\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this = this;\n\n      this.attachShadow({\n        mode: 'open'\n      }); // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'timecode-input-wrapper';\n      this._wrapper.style.display = 'inline-block';\n\n      for (var i = 0; i < 4; i++) {\n        var element = document.createElement('input');\n        element.className = 'timecode_txt';\n        element.setAttribute('type', 'text');\n        element.setAttribute('autocomplete', 'off');\n\n        this._wrapper.appendChild(element);\n\n        element.addEventListener(\"keydown\", function (e) {\n          return _this.textKeyDown(e);\n        });\n        element.addEventListener(\"keyup\", function (e) {\n          return _this.textKeyUp(e);\n        });\n        element.addEventListener(\"focus\", function (e) {\n          return _this.textboxFocus(e);\n        });\n        element.addEventListener(\"blur\", function (e) {\n          return _this.textboxBlur(e);\n        });\n        element.addEventListener(\"paste\", function (e) {\n          return _this.textboxPaste(e);\n        });\n\n        if (this.size === 'small' || this.size === 'mini') {\n          element.classList.add(this.size);\n        }\n\n        var colon = document.createElement('span');\n        colon.textContent = ':';\n\n        if (i < 3) {\n          this._wrapper.appendChild(colon);\n        }\n\n        switch (i) {\n          case 0:\n            element.id = 'hours';\n            this._hours = element;\n            break;\n\n          case 1:\n            element.id = 'mins';\n            this._mins = element;\n            break;\n\n          case 2:\n            element.id = 'secs';\n            this._secs = element;\n            this._frameColon = colon;\n            break;\n\n          case 3:\n            element.id = 'frames';\n            this._frames = element;\n            break;\n        }\n      }\n\n      this.shadowRoot.appendChild(this._wrapper);\n      this._slot = document.createElement('slot');\n      this.shadowRoot.appendChild(this._slot);\n      this.render();\n      this._hidden_txt = document.createElement('input');\n\n      this._hidden_txt.setAttribute(\"type\", \"hidden\");\n\n      this._hidden_txt.setAttribute(\"value\", this.value);\n\n      if (this.formname) {\n        this._hidden_txt.setAttribute(\"name\", this.formname);\n      }\n\n      this.appendChild(this._hidden_txt);\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {//        this.parseTextInput();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.getAttribute('value');\n    },\n    set: function set(_value) {\n      this.setAttribute(\"value\", _value);\n    }\n  }, {\n    key: \"timebase\",\n    get: function get() {\n      return this.getAttribute(\"timebase\");\n    },\n    set: function set(_timebase) {\n      this.setAttribute(\"timebase\", _timebase);\n    }\n  }, {\n    key: \"formname\",\n    get: function get() {\n      return this.getAttribute(\"form-name\");\n    },\n    set: function set(_formname) {\n      this.setAttribute(\"form-name\", _formname);\n\n      this._hidden_txt.setAttribute(\"name\", _formname);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.getAttribute(\"size\");\n    },\n    set: function set(_size) {\n      this.setAttribute(\"size\", _size);\n    }\n  }, {\n    key: \"dropframe\",\n    get: function get() {\n      return this.getAttribute(\"drop-frame\");\n    },\n    set: function set(_dropframe) {\n      this.setAttribute(\"drop-frame\", _dropframe);\n    }\n  }, {\n    key: \"textboxBlur\",\n    value: function textboxBlur(e) {\n      this.validateTextboxValue(e.target);\n    }\n  }, {\n    key: \"textboxFocus\",\n    value: function textboxFocus(e) {\n      e.target.select();\n    }\n  }, {\n    key: \"validateTextboxValue\",\n    value: function validateTextboxValue(textbox) {\n      var timebase = parseInt(this.timebase);\n      if (isNaN(timebase) || timebase < 1) timebase = 24;\n      var intVal = parseInt(textbox.value);\n      if (isNaN(intVal)) intVal = 0; // Determine correct range\n\n      if (intVal < 0) intVal = 0;\n      var maxVal = 59;\n\n      if (textbox.id === \"frames\") {\n        maxVal = timebase - 1;\n      } else if (textbox.id === \"hours\") {\n        maxVal = 23;\n      }\n\n      if (intVal > maxVal) intVal = maxVal;\n      textbox.value = this.padNumber(intVal);\n      this.updateTimecode();\n    }\n  }, {\n    key: \"textKeyDown\",\n    value: function textKeyDown(e) {\n      var textbox = e.target;\n      var idSequence = [\"hours\", \"mins\", \"secs\", \"frames\"];\n      var allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End', 'Tab', 'Backspace', 'Delete', 'Alt', 'Meta', 'Control', 'Shift'];\n      var isNumericKey = RegExp('[0-9]').test(e.key); // Don't handle if sequence contains ctrl or cmd\n\n      if (e.ctrlKey || e.metaKey) return;\n\n      if (allowedKeys.indexOf(e.key) < 0 && !isNumericKey) {\n        console.log(\"Ignoring key \" + e.key);\n        e.preventDefault();\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowLeft':\n          if (textbox.selectionStart === 0) {\n            // Left-most cursor position\n            var seqPos = idSequence.indexOf(e.target.id);\n\n            if (seqPos > 0) {\n              var newTargetId = idSequence[seqPos - 1];\n              var newTarget = this.shadowRoot.getElementById(newTargetId);\n              newTarget.focus();\n              setTimeout(function () {\n                newTarget.select(); //                            newTarget.setSelectionRange(0, newTarget.value.length);\n              }, 1);\n            }\n          }\n\n          break;\n\n        case 'ArrowRight':\n        case ':':\n          if (textbox.selectionStart >= 2) {\n            // Right-most cursor position\n            var _seqPos = idSequence.indexOf(e.target.id);\n\n            if (_seqPos >= 0 && _seqPos < idSequence.length - 1) {\n              var _newTargetId = idSequence[_seqPos + 1];\n\n              var _newTarget = this.shadowRoot.getElementById(_newTargetId);\n\n              _newTarget.focus();\n\n              setTimeout(function () {\n                _newTarget.setSelectionRange(0, _newTarget.value.length, \"backward\");\n              }, 1);\n            }\n          }\n\n          break;\n\n        case 'ArrowUp':\n          {\n            // Increment field value\n            var val = parseInt(e.target.value);\n            if (isNaN(val)) val = 0;\n            var diff = 1;\n\n            if (e.shiftKey) {\n              diff = 10;\n            }\n\n            val += diff;\n            if (val > 59) val = 59;\n            e.target.value = val;\n            this.validateTextboxValue(e.target);\n            break;\n          }\n\n        case 'ArrowDown':\n          {\n            // Decrement field value\n            var _val = parseInt(e.target.value);\n\n            if (isNaN(_val)) _val = 0;\n            var _diff = 1;\n\n            if (e.shiftKey) {\n              _diff = 10;\n            }\n\n            _val -= _diff;\n            if (_val < 0) _val = 0;\n            e.target.value = _val;\n            this.validateTextboxValue(e.target);\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"textKeyUp\",\n    value: function textKeyUp(e) {\n      var textbox = e.target;\n      var idSequence = [\"hours\", \"mins\", \"secs\", \"frames\"];\n      var allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End', 'Tab', 'Backspace', 'Delete', 'Alt', 'Meta'];\n      var isNumericKey = RegExp('[0-9]').test(e.key);\n\n      if (!isNumericKey) {\n        return;\n      }\n\n      switch (e.key) {\n        default:\n          var textLength = textbox.value.length;\n          var selectionStart = textbox.selectionStart;\n          var seqPos = idSequence.indexOf(e.target.id);\n\n          if (textLength >= 2) {\n            // Go to next text box as you type (only if cursor is at the end)\n            if (selectionStart >= textLength - 1) {\n              // Determine next text box\n              if (seqPos >= 0 && seqPos < idSequence.length - 1) {\n                var newTargetId = idSequence[seqPos + 1];\n                var newTarget = this.shadowRoot.getElementById(newTargetId);\n                textbox.value = textbox.value.substr(0, 2);\n                setTimeout(function () {\n                  newTarget.focus();\n                }, 1);\n              } else if (seqPos === idSequence.length - 1) {\n                var _newTargetId2 = idSequence[idSequence.length - 1];\n\n                var _newTarget2 = this.shadowRoot.getElementById(_newTargetId2);\n\n                setTimeout(function () {\n                  _newTarget2.focus();\n\n                  _newTarget2.setSelectionRange(0, 2);\n                }, 1);\n              }\n            } else {\n              // Truncate if cursor is at start\n              if (isNumericKey) {\n                e.preventDefault();\n                textbox.value = textbox.value.substr(0, 2);\n                textbox.setSelectionRange(selectionStart, selectionStart);\n              }\n            }\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"textboxPaste\",\n    value: function textboxPaste(e) {\n      // Check if user pasted a full timecode string\n      var str = e.clipboardData.getData('Text');\n\n      if (str !== null) {\n        e.preventDefault();\n        var components = str.split(\":\");\n\n        if (components.length === 4) {\n          this.value = str;\n          this.syncTimecodeFields();\n        } else {\n          var val = str;\n          if (val.length > 2) val = val.substr(0, 2);\n          e.target.setAttribute('value', parseInt(val));\n          this.validateTextboxValue(e.target);\n        }\n      }\n    }\n  }, {\n    key: \"syncTimecodeFields\",\n    value: function syncTimecodeFields() {\n      var components = this.value.split(\":\");\n\n      if (components.length === 4) {\n        this._hours.value = components[0];\n        this.validateTextboxValue(this._hours);\n        this._mins.value = components[1];\n        this.validateTextboxValue(this._mins);\n        this._secs.value = components[2];\n        this.validateTextboxValue(this._secs);\n        this._frames.value = components[3];\n        this.validateTextboxValue(this._frames);\n      }\n    }\n  }, {\n    key: \"updateTimecode\",\n    value: function updateTimecode() {\n      var hours = this._hours.value;\n      var mins = this._mins.value;\n      var secs = this._secs.value;\n      var frames = this._frames.value;\n      this.value = hours + \":\" + mins + \":\" + secs + \":\" + frames;\n      this.querySelector(\"input[type=\\\"hidden\\\"]\").value = this.value;\n    }\n  }, {\n    key: \"padNumber\",\n    value: function padNumber(num) {\n      return (num < 10 ? \"0\" : \"\") + num;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.value) this.value = \"00:00:00:00\";\n      var components = this.value.split(\":\");\n\n      if (components.length > 4) {\n        components = components.slice(0, 4);\n      } else if (components.length < 4) {\n        components = [\"00\", \"00\", \"00\", \"00\"];\n      }\n\n      this._hours.setAttribute('value', components[0]);\n\n      this._mins.setAttribute('value', components[1]);\n\n      this._secs.setAttribute('value', components[2]);\n\n      this._frames.setAttribute('value', components[3]);\n\n      this._frameColon.textContent = !!this.dropframe ? ';' : ':';\n    }\n  }], [{\n    key: \"boundAttributes\",\n    get: function get() {\n      return ['value', \"timebase\", \"form-name\", \"size\", \"drop-frame\"];\n    }\n  }]);\n\n  return TimecodeInput;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define('timecode-input', TimecodeInput);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/TimecodeInput.js\n");

/***/ }),

/***/ "./js/components/TokenInput.js":
/*!*************************************!*\
  !*** ./js/components/TokenInput.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar TokenInput = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(TokenInput, _HTMLElement);\n\n  var _super = _createSuper(TokenInput);\n\n  function TokenInput() {\n    var _this;\n\n    _classCallCheck(this, TokenInput);\n\n    _this = _super.call(this);\n    _this.obj = null;\n    return _this;\n  }\n\n  _createClass(TokenInput, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this[attrName] = newValue;\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this2 = this;\n\n      this.attachShadow({\n        mode: \"open\"\n      }); // Make sure element obeys parent sizing\n\n      this.shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'token-input-wrapper';\n      this.shadowRoot.appendChild(this._wrapper);\n      this._ul = document.createElement('ul');\n\n      this._wrapper.appendChild(this._ul);\n\n      if (this.size === \"small\") {\n        this._ul.classList.add('small');\n      } // Select text box if the user clicks anywhere other than on a token\n\n\n      this._ul.addEventListener('click', function (e) {\n        if (e.target.tagName.toLowerCase() !== 'li' && !e.target.classList.contains('.delete')) {\n          _this2._inputText.focus();\n        }\n      });\n\n      this._li_text = document.createElement('li');\n\n      this._ul.appendChild(this._li_text);\n\n      this._inputText = document.createElement('input');\n\n      this._inputText.setAttribute('type', 'text');\n\n      this._inputText.id = 'input_txt';\n      this._inputText.className = 'no-style';\n\n      this._inputText.setAttribute('placeholder', 'Enter tags separated by commas');\n\n      this._li_text.appendChild(this._inputText);\n\n      if (this.name) {\n        this._hiddenText = document.createElement('input');\n\n        this._hiddenText.setAttribute('type', 'hidden');\n\n        this._hiddenText.name = this.name;\n        this.append(this._hiddenText);\n      }\n\n      this._inputText.addEventListener('keyup', function (e) {\n        _this2.parseTextInput(e.key === 'Enter');\n      });\n\n      this._inputText.addEventListener('blur', function (e) {\n        _this2.parseTextInput(true);\n      });\n\n      this.render();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.parseTextInput();\n    }\n  }, {\n    key: \"tokens\",\n    get: function get() {\n      return this.getAttribute('tokens');\n    },\n    set: function set(_tokens) {\n      this.setAttribute(\"tokens\", _tokens);\n      this.syncTokens();\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.getAttribute('name');\n    },\n    set: function set(_name) {\n      this.setAttribute(\"name\", _name);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.getAttribute('size');\n    },\n    set: function set(_size) {\n      this.setAttribute(\"size\", _size);\n    }\n  }, {\n    key: \"tokensAsArray\",\n    value: function tokensAsArray() {\n      if (this.tokens) {\n        return this.tokens.trim().split(\",\");\n      }\n\n      return [];\n    }\n  }, {\n    key: \"removeTokenWithName\",\n    value: function removeTokenWithName(name) {\n      var tokenArray = this.tokensAsArray();\n\n      for (var i = 0; i < tokenArray.length; i++) {\n        if (tokenArray[i] === name) {\n          tokenArray.splice(i, 1);\n          break;\n        }\n      }\n\n      this.tokens = tokenArray.join(\",\");\n    }\n  }, {\n    key: \"parseTextInput\",\n    value: function parseTextInput() {\n      var isFinal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // Locate tokens in text field\n      var textField = this._inputText;\n      var text = textField.value;\n      var matches = text.match(/((\\w|-|\\.| )+,)/);\n\n      if (matches && matches.length > 1) {\n        var tokenName = matches[1];\n        this.addToken(tokenName);\n      } // User lost focus\n\n\n      if (isFinal) {\n        // Get latest value\n        text = textField.value;\n        this.addToken(text);\n      }\n    }\n  }, {\n    key: \"addToken\",\n    value: function addToken(tokenName) {\n      var _this3 = this;\n\n      if (tokenName.length === 0) return;\n      var textField = this._inputText;\n      textField.value = textField.value.replace(tokenName, '');\n      tokenName = tokenName.split(',').join('').trim();\n\n      if (tokenName.length > 0) {\n        var li = document.createElement(\"li\");\n        li.classList.add(\"token\");\n        li.setAttribute(\"data-val\", tokenName);\n        li.innerHTML = tokenName + \"<div class=\\\"delete\\\"></div>\";\n        this.shadowRoot.querySelectorAll(\"ul\")[0].insertBefore(li, textField.parentNode);\n        var deleteBtn = li.querySelector(\".delete\");\n        deleteBtn.addEventListener(\"click\", function (e) {\n          _this3.deleteToken(deleteBtn);\n        });\n        var tokenArray = this.tokensAsArray();\n        tokenArray.push(tokenName);\n        this.tokens = tokenArray.join(\",\");\n      }\n    }\n  }, {\n    key: \"deleteToken\",\n    value: function deleteToken(obj) {\n      var token = obj;\n\n      if (!obj.classList.contains(\"token\") || obj.tagName !== \"li\") {\n        token = obj.closest(\"li\");\n      }\n\n      if (!token) {\n        console.log(\"Unable to delete token - could not locate element.\");\n        return;\n      }\n\n      var tokenName = token.textContent;\n      this.removeTokenWithName(tokenName); // Remove DOM object\n\n      token.remove();\n    }\n  }, {\n    key: \"syncTokens\",\n    value: function syncTokens() {\n      if (this.name && this._hiddenText) {\n        this._hiddenText.value = this.tokens;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      // Remove existing tokens\n      this.shadowRoot.querySelectorAll('li.token').forEach(function (item) {\n        item.remove();\n      });\n      var tokenArray = this.tokensAsArray();\n\n      for (var i = 0; i < tokenArray.length; i++) {\n        var token = tokenArray[i];\n\n        if (token !== '') {\n          (function () {\n            var li = document.createElement('li');\n            li.className = 'token';\n            li.setAttribute('data-val', token);\n            li.textContent = token;\n            var deleteBtn = document.createElement('div');\n            deleteBtn.className = 'delete';\n            li.appendChild(deleteBtn);\n            deleteBtn.addEventListener(\"click\", function (e) {\n              _this4.deleteToken(deleteBtn);\n            });\n\n            _this4._ul.insertBefore(li, _this4._li_text);\n          })();\n        }\n      }\n\n      this.syncTokens();\n\n      if (!!this.getAttribute('autofocus')) {\n        this._inputText.focus();\n      }\n    }\n  }], [{\n    key: \"boundAttributes\",\n    get: function get() {\n      return ['tokens', 'name', 'size'];\n    }\n  }]);\n\n  return TokenInput;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define('token-input', TokenInput);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/TokenInput.js\n");

/***/ }),

/***/ "./js/components/UserAvatar.js":
/*!*************************************!*\
  !*** ./js/components/UserAvatar.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar UserAvatar = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(UserAvatar, _HTMLElement);\n\n  var _super = _createSuper(UserAvatar);\n\n  function UserAvatar() {\n    var _this;\n\n    _classCallCheck(this, UserAvatar);\n\n    _this = _super.call(this);\n    _this._onCheckedHandler = null;\n    return _this;\n  }\n\n  _createClass(UserAvatar, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(attrName, oldValue, newValue) {\n      this.dynamicRender();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.shadowRoot = this.attachShadow({\n        mode: 'open',\n        delegatesFocus: true\n      });\n      this.shadowRoot.host.style.display = 'inline-block'; // Append site stylesheet\n\n      var styleSheet = document.createElement('link');\n      styleSheet.setAttribute('rel', 'stylesheet');\n      styleSheet.setAttribute('href', '/dist/style.css');\n      this.shadowRoot.appendChild(styleSheet);\n      this._wrapper = document.createElement('div');\n      this._wrapper.className = 'avatar-wrapper';\n      this.shadowRoot.appendChild(this._wrapper);\n      this._avatar = document.createElement('div');\n      this._avatar.className = 'avatar-image';\n\n      this._wrapper.appendChild(this._avatar);\n\n      this._name = document.createElement('div');\n      this._name.className = 'avatar-name';\n\n      this._wrapper.appendChild(this._name);\n\n      this.setupEvents();\n      this.dynamicRender();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this2 = this;\n\n      return;\n\n      this._wrapper.addEventListener('keydown', function (e) {\n        if (e.key === ' ') {\n          e.preventDefault();\n\n          _this2.handleClick();\n        }\n      });\n\n      this._square.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n\n      this._text.addEventListener('click', function (e) {\n        _this2.handleClick();\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      if (!!this.getAttribute('disabled')) return;\n\n      if (!!this.getAttribute('checked')) {\n        this.removeAttribute('checked');\n\n        this._square.classList.remove('checked');\n      } else {\n        this.setAttribute('checked', 'checked');\n\n        this._square.classList.add('checked');\n      }\n\n      this.updateFormValue(); // Trigger change event\n\n      this.shadowRoot.dispatchEvent(new CustomEvent('change', {\n        composed: true,\n        bubbles: true\n      }));\n\n      if (this._onCheckedHandler) {\n        this._onCheckedHandler();\n      }\n    }\n  }, {\n    key: \"dynamicRender\",\n    value: function dynamicRender() {\n      var _this$getAttribute, _this$getAttribute2;\n\n      if (!this._wrapper || !this._avatar || !this._name) return;\n      this._name.innerHTML = (_this$getAttribute = this.getAttribute('userName')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '';\n      var imageURL = '../../../html/avatar?name=' + encodeURIComponent((_this$getAttribute2 = this.getAttribute('userName')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : '');\n\n      if (!!this.getAttribute('avatarURL')) {\n        imageURL = this.getAttribute('avatarURL');\n      }\n\n      this._avatar.style.backgroundImage = \"url('\" + imageURL + \"')\";\n    }\n  }, {\n    key: \"onchecked\",\n    get: function get() {\n      return this._onCheckedHandler;\n    },\n    set: function set(f) {\n      this._onCheckedHandler = f;\n    }\n  }]);\n\n  return UserAvatar;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n_defineProperty(UserAvatar, \"observedAttributes\", ['id', 'name', 'text', 'small', 'checked', 'disabled']);\n\ncustomElements.define('user-avatar', UserAvatar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/components/UserAvatar.js\n");

/***/ }),

/***/ "./js/entry.js":
/*!*********************!*\
  !*** ./js/entry.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _html_js_third_party_jquery_1_11_1_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../html/js/third_party/jquery-1.11.1.min.js */ \"./html/js/third_party/jquery-1.11.1.min-exposed.js\");\n/* harmony import */ var _html_js_third_party_jquery_1_11_1_min_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_jquery_1_11_1_min_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _html_js_third_party_jquery_ui_1_10_1_custom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../html/js/third_party/jquery-ui-1.10.1.custom.js */ \"./html/js/third_party/jquery-ui-1.10.1.custom.js\");\n/* harmony import */ var _html_js_third_party_jquery_ui_1_10_1_custom_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_jquery_ui_1_10_1_custom_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _html_js_third_party_jquery_ui_touch_punch_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/js/third_party/jquery.ui.touch-punch.min.js */ \"./html/js/third_party/jquery.ui.touch-punch.min.js\");\n/* harmony import */ var _html_js_third_party_jquery_ui_touch_punch_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_jquery_ui_touch_punch_min_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _html_js_third_party_jquery_tabSlideOut_v1_3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../html/js/third_party/jquery.tabSlideOut.v1.3.js */ \"./html/js/third_party/jquery.tabSlideOut.v1.3.js\");\n/* harmony import */ var _html_js_third_party_jquery_tabSlideOut_v1_3_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_jquery_tabSlideOut_v1_3_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _html_js_third_party_jquery_tipsy_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../html/js/third_party/jquery.tipsy.min.js */ \"./html/js/third_party/jquery.tipsy.min.js\");\n/* harmony import */ var _html_js_third_party_jquery_tipsy_min_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_jquery_tipsy_min_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _html_js_third_party_moment_min_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../html/js/third_party/moment.min.js */ \"./html/js/third_party/moment.min-exposed.js\");\n/* harmony import */ var _html_js_third_party_moment_min_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_html_js_third_party_moment_min_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_twig_twig_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../node_modules/twig/twig.min.js */ \"./node_modules/twig/twig.min-exposed.js\");\n/* harmony import */ var _node_modules_twig_twig_min_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_node_modules_twig_twig_min_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _components_Breadcrumb_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Breadcrumb.js */ \"./js/components/Breadcrumb.js\");\n/* harmony import */ var _components_Breadcrumb_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_components_Breadcrumb_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _components_CheckBox_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/CheckBox.js */ \"./js/components/CheckBox.js\");\n/* harmony import */ var _components_CheckBox_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_components_CheckBox_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _components_CommentTextarea_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/CommentTextarea.js */ \"./js/components/CommentTextarea.js\");\n/* harmony import */ var _components_DialogBox_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/DialogBox.js */ \"./js/components/DialogBox.js\");\n/* harmony import */ var _components_DialogBox_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_components_DialogBox_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _components_FileBrowser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/FileBrowser.js */ \"./js/components/FileBrowser.js\");\n/* harmony import */ var _components_FileBrowserChildContainer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/FileBrowserChildContainer.js */ \"./js/components/FileBrowserChildContainer.js\");\n/* harmony import */ var _components_FileBrowserFile_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/FileBrowserFile.js */ \"./js/components/FileBrowserFile.js\");\n/* harmony import */ var _components_FileBrowserFolder_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/FileBrowserFolder.js */ \"./js/components/FileBrowserFolder.js\");\n/* harmony import */ var _components_FileComment_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/FileComment.js */ \"./js/components/FileComment.js\");\n/* harmony import */ var _components_FileComment_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_components_FileComment_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _components_FileThumb_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/FileThumb.js */ \"./js/components/FileThumb.js\");\n/* harmony import */ var _components_FileThumb_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_components_FileThumb_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _components_FolderBreadcrumb_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/FolderBreadcrumb.js */ \"./js/components/FolderBreadcrumb.js\");\n/* harmony import */ var _components_FolderBreadcrumb_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_components_FolderBreadcrumb_js__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _components_PassStrength_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/PassStrength.js */ \"./js/components/PassStrength.js\");\n/* harmony import */ var _components_PassStrength_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_components_PassStrength_js__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _components_PopOver_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/PopOver.js */ \"./js/components/PopOver.js\");\n/* harmony import */ var _components_ProgressBarCircular_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/ProgressBarCircular.js */ \"./js/components/ProgressBarCircular.js\");\n/* harmony import */ var _components_ProgressBarCircular_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_components_ProgressBarCircular_js__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var _components_TaggableTextarea_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/TaggableTextarea.js */ \"./js/components/TaggableTextarea.js\");\n/* harmony import */ var _components_TextareaButton_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/TextareaButton.js */ \"./js/components/TextareaButton.js\");\n/* harmony import */ var _components_TextareaButton_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_components_TextareaButton_js__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var _components_TextInputButton_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/TextInputButton.js */ \"./js/components/TextInputButton.js\");\n/* harmony import */ var _components_TextInputButton_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_components_TextInputButton_js__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var _components_ThumbnailImage_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/ThumbnailImage.js */ \"./js/components/ThumbnailImage.js\");\n/* harmony import */ var _components_ThumbnailImage_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_components_ThumbnailImage_js__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var _components_TimecodeInput_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/TimecodeInput.js */ \"./js/components/TimecodeInput.js\");\n/* harmony import */ var _components_TimecodeInput_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_components_TimecodeInput_js__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var _components_TokenInput_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/TokenInput.js */ \"./js/components/TokenInput.js\");\n/* harmony import */ var _components_TokenInput_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(_components_TokenInput_js__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var _components_UserAvatar_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/UserAvatar.js */ \"./js/components/UserAvatar.js\");\n/* harmony import */ var _components_UserAvatar_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(_components_UserAvatar_js__WEBPACK_IMPORTED_MODULE_27__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__webpack_require__(/*! ../sass/base/base.scss */ \"./sass/base/base.scss\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9lbnRyeS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1aWxkLy4vanMvZW50cnkuanM/MjJhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LTEuMTEuMS5taW4uanMnO1xuaW1wb3J0ICcuLi9odG1sL2pzL3RoaXJkX3BhcnR5L2pxdWVyeS11aS0xLjEwLjEuY3VzdG9tLmpzJztcbmltcG9ydCAnLi4vaHRtbC9qcy90aGlyZF9wYXJ0eS9qcXVlcnkudWkudG91Y2gtcHVuY2gubWluLmpzJztcbmltcG9ydCAnLi4vaHRtbC9qcy90aGlyZF9wYXJ0eS9qcXVlcnkudGFiU2xpZGVPdXQudjEuMy5qcyc7XG5pbXBvcnQgJy4uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LnRpcHN5Lm1pbi5qcyc7XG5pbXBvcnQgJy4uL2h0bWwvanMvdGhpcmRfcGFydHkvbW9tZW50Lm1pbi5qcyc7XG5pbXBvcnQgJy4uL25vZGVfbW9kdWxlcy90d2lnL3R3aWcubWluLmpzJztcblxuaW1wb3J0ICcuL2NvbXBvbmVudHMvQnJlYWRjcnVtYi5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9DaGVja0JveC5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9Db21tZW50VGV4dGFyZWEuanMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvRGlhbG9nQm94LmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL0ZpbGVCcm93c2VyLmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL0ZpbGVCcm93c2VyQ2hpbGRDb250YWluZXIuanMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvRmlsZUJyb3dzZXJGaWxlLmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL0ZpbGVCcm93c2VyRm9sZGVyLmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL0ZpbGVDb21tZW50LmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL0ZpbGVUaHVtYi5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9Gb2xkZXJCcmVhZGNydW1iLmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL1Bhc3NTdHJlbmd0aC5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9Qb3BPdmVyLmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL1Byb2dyZXNzQmFyQ2lyY3VsYXIuanMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvVGFnZ2FibGVUZXh0YXJlYS5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9UZXh0YXJlYUJ1dHRvbi5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9UZXh0SW5wdXRCdXR0b24uanMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvVGh1bWJuYWlsSW1hZ2UuanMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvVGltZWNvZGVJbnB1dC5qcyc7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9Ub2tlbklucHV0LmpzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL1VzZXJBdmF0YXIuanMnO1xuXG5yZXF1aXJlKCcuLi9zYXNzL2Jhc2UvYmFzZS5zY3NzJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/entry.js\n");

/***/ }),

/***/ "./js/parsers/CommentTagParser.js":
/*!****************************************!*\
  !*** ./js/parsers/CommentTagParser.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CommentTagParser)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CommentTagParser = /*#__PURE__*/function () {\n  function CommentTagParser() {\n    _classCallCheck(this, CommentTagParser);\n  }\n\n  _createClass(CommentTagParser, null, [{\n    key: \"convertTagsToElements\",\n    value: function convertTagsToElements(text) {\n      text = text.replaceAll('&nbsp;', '');\n      var output = '';\n      var lastPos = 0;\n      var tagStart = text.indexOf('|TAG:');\n\n      while (tagStart >= 0) {\n        output += text.substring(lastPos, tagStart); // Get tag end\n\n        var tagEnd = text.indexOf(':TAG|', tagStart);\n        if (tagEnd < 0) return text;\n        var tag = JSON.parse(text.substring(tagStart + 5, tagEnd));\n        output += \"<span class=\\\"user-tag\\\" contentEditable=\\\"false\\\" data-user-id=\\\"\".concat(tag.id, \"\\\">\").concat(tag.name, \"</span>\");\n        lastPos = tagEnd + 5;\n        tagStart = text.indexOf('|TAG:', lastPos);\n      }\n\n      output += text.substring(lastPos);\n      return output;\n    }\n  }, {\n    key: \"stripTags\",\n    value: function stripTags(text) {\n      text = text.replaceAll('&nbsp;', '');\n      var output = '';\n      var lastPos = 0;\n      var tagStart = text.indexOf('|TAG:');\n\n      while (tagStart >= 0) {\n        output += text.substring(lastPos, tagStart); // Get tag end\n\n        var tagEnd = text.indexOf(':TAG|', tagStart);\n        if (tagEnd < 0) return text;\n        var tag = JSON.parse(text.substring(tagStart + 5, tagEnd));\n        output += \"\".concat(tag.name);\n        lastPos = tagEnd + 5;\n        tagStart = text.indexOf('|TAG:', lastPos);\n      }\n\n      output += text.substring(lastPos);\n      return output;\n    }\n  }, {\n    key: \"convertElementsToTags\",\n    value: function convertElementsToTags(text) {\n      text = text.replaceAll('&nbsp;', '');\n      text = text.replaceAll('<br>', \"\\n\");\n      var output = '';\n      var lastPos = 0;\n      var tagStart = text.indexOf('<span class=\"user-tag\"');\n\n      while (tagStart >= 0) {\n        output += text.substring(lastPos, tagStart); // Get tag end\n\n        var tagEnd = text.indexOf('</span>', tagStart);\n        if (tagEnd < 0) return text;\n        var openingTagEnd = text.indexOf('>', tagStart);\n        if (openingTagEnd < 0) return text;\n        var name = text.substring(openingTagEnd + 1, tagEnd); // Strip out empty tags\n\n        if (name.trim().length > 1) {\n          // Get user ID\n          var userIDStart = text.indexOf(' data-user-id=\"', tagStart);\n          if (userIDStart < 0) return text;\n          var userIDEnd = text.indexOf('\"', userIDStart + 15);\n          if (userIDEnd < 0) return text;\n          var userID = text.substring(userIDStart + 15, userIDEnd);\n          var obj = {\n            type: 'user',\n            id: userID,\n            name: name\n          };\n          var json = JSON.stringify(obj);\n          output += '|TAG:' + json + ':TAG|';\n        }\n\n        lastPos = tagEnd + 7;\n        tagStart = text.indexOf('<span class=\"user-tag\"', lastPos);\n      }\n\n      output += text.substring(lastPos);\n      return output;\n    }\n  }]);\n\n  return CommentTagParser;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9wYXJzZXJzL0NvbW1lbnRUYWdQYXJzZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL3BhcnNlcnMvQ29tbWVudFRhZ1BhcnNlci5qcz8yMzU0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1lbnRUYWdQYXJzZXIge1xuICAgIHN0YXRpYyBjb252ZXJ0VGFnc1RvRWxlbWVudHModGV4dCkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKCcmbmJzcDsnLCAnJyk7XG5cbiAgICAgICAgbGV0IG91dHB1dCA9ICcnO1xuXG4gICAgICAgIGxldCBsYXN0UG9zID0gMDtcbiAgICAgICAgbGV0IHRhZ1N0YXJ0ID0gdGV4dC5pbmRleE9mKCd8VEFHOicpO1xuXG4gICAgICAgIHdoaWxlICh0YWdTdGFydCA+PSAwKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gdGV4dC5zdWJzdHJpbmcobGFzdFBvcywgdGFnU3RhcnQpO1xuXG4gICAgICAgICAgICAvLyBHZXQgdGFnIGVuZFxuICAgICAgICAgICAgbGV0IHRhZ0VuZCA9IHRleHQuaW5kZXhPZignOlRBR3wnLCB0YWdTdGFydCk7XG4gICAgICAgICAgICBpZiAodGFnRW5kIDwgMCkgcmV0dXJuIHRleHQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IEpTT04ucGFyc2UodGV4dC5zdWJzdHJpbmcodGFnU3RhcnQgKyA1LCB0YWdFbmQpKTtcbiAgICAgICAgICAgIG91dHB1dCArPSBgPHNwYW4gY2xhc3M9XCJ1c2VyLXRhZ1wiIGNvbnRlbnRFZGl0YWJsZT1cImZhbHNlXCIgZGF0YS11c2VyLWlkPVwiJHt0YWcuaWR9XCI+JHt0YWcubmFtZX08L3NwYW4+YDtcblxuICAgICAgICAgICAgbGFzdFBvcyA9IHRhZ0VuZCArIDU7XG4gICAgICAgICAgICB0YWdTdGFydCA9IHRleHQuaW5kZXhPZignfFRBRzonLCBsYXN0UG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCArPSB0ZXh0LnN1YnN0cmluZyhsYXN0UG9zKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3RyaXBUYWdzKHRleHQpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZUFsbCgnJm5ic3A7JywgJycpO1xuXG4gICAgICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgICAgICBsZXQgbGFzdFBvcyA9IDA7XG4gICAgICAgIGxldCB0YWdTdGFydCA9IHRleHQuaW5kZXhPZignfFRBRzonKTtcblxuICAgICAgICB3aGlsZSAodGFnU3RhcnQgPj0gMCkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IHRleHQuc3Vic3RyaW5nKGxhc3RQb3MsIHRhZ1N0YXJ0KTtcblxuICAgICAgICAgICAgLy8gR2V0IHRhZyBlbmRcbiAgICAgICAgICAgIGxldCB0YWdFbmQgPSB0ZXh0LmluZGV4T2YoJzpUQUd8JywgdGFnU3RhcnQpO1xuICAgICAgICAgICAgaWYgKHRhZ0VuZCA8IDApIHJldHVybiB0ZXh0O1xuXG4gICAgICAgICAgICBjb25zdCB0YWcgPSBKU09OLnBhcnNlKHRleHQuc3Vic3RyaW5nKHRhZ1N0YXJ0ICsgNSwgdGFnRW5kKSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gYCR7dGFnLm5hbWV9YDtcblxuICAgICAgICAgICAgbGFzdFBvcyA9IHRhZ0VuZCArIDU7XG4gICAgICAgICAgICB0YWdTdGFydCA9IHRleHQuaW5kZXhPZignfFRBRzonLCBsYXN0UG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCArPSB0ZXh0LnN1YnN0cmluZyhsYXN0UG9zKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgY29udmVydEVsZW1lbnRzVG9UYWdzKHRleHQpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZUFsbCgnJm5ic3A7JywgJycpO1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKCc8YnI+JywgXCJcXG5cIik7XG5cbiAgICAgICAgbGV0IG91dHB1dCA9ICcnO1xuXG4gICAgICAgIGxldCBsYXN0UG9zID0gMDtcbiAgICAgICAgbGV0IHRhZ1N0YXJ0ID0gdGV4dC5pbmRleE9mKCc8c3BhbiBjbGFzcz1cInVzZXItdGFnXCInKTtcblxuICAgICAgICB3aGlsZSAodGFnU3RhcnQgPj0gMCkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IHRleHQuc3Vic3RyaW5nKGxhc3RQb3MsIHRhZ1N0YXJ0KTtcblxuICAgICAgICAgICAgLy8gR2V0IHRhZyBlbmRcbiAgICAgICAgICAgIGxldCB0YWdFbmQgPSB0ZXh0LmluZGV4T2YoJzwvc3Bhbj4nLCB0YWdTdGFydCk7XG4gICAgICAgICAgICBpZiAodGFnRW5kIDwgMCkgcmV0dXJuIHRleHQ7XG5cbiAgICAgICAgICAgIGxldCBvcGVuaW5nVGFnRW5kID0gdGV4dC5pbmRleE9mKCc+JywgdGFnU3RhcnQpO1xuICAgICAgICAgICAgaWYgKG9wZW5pbmdUYWdFbmQgPCAwKSByZXR1cm4gdGV4dDtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRleHQuc3Vic3RyaW5nKG9wZW5pbmdUYWdFbmQgKyAxLCB0YWdFbmQpO1xuXG4gICAgICAgICAgICAvLyBTdHJpcCBvdXQgZW1wdHkgdGFnc1xuICAgICAgICAgICAgaWYgKG5hbWUudHJpbSgpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdXNlciBJRFxuICAgICAgICAgICAgICAgIGxldCB1c2VySURTdGFydCA9IHRleHQuaW5kZXhPZignIGRhdGEtdXNlci1pZD1cIicsIHRhZ1N0YXJ0KTtcbiAgICAgICAgICAgICAgICBpZiAodXNlcklEU3RhcnQgPCAwKSByZXR1cm4gdGV4dDtcblxuICAgICAgICAgICAgICAgIGxldCB1c2VySURFbmQgPSB0ZXh0LmluZGV4T2YoJ1wiJywgdXNlcklEU3RhcnQgKyAxNSk7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXJJREVuZCA8IDApIHJldHVybiB0ZXh0O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcklEID0gdGV4dC5zdWJzdHJpbmcodXNlcklEU3RhcnQgKyAxNSwgdXNlcklERW5kKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHt0eXBlOiAndXNlcicsIGlkOiB1c2VySUQsIG5hbWU6IG5hbWV9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmopO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICd8VEFHOicgKyBqc29uICsgJzpUQUd8JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdFBvcyA9IHRhZ0VuZCArIDc7XG4gICAgICAgICAgICB0YWdTdGFydCA9IHRleHQuaW5kZXhPZignPHNwYW4gY2xhc3M9XCJ1c2VyLXRhZ1wiJywgbGFzdFBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgKz0gdGV4dC5zdWJzdHJpbmcobGFzdFBvcyk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/parsers/CommentTagParser.js\n");

/***/ }),

/***/ "./js/utils/AttributeParser.js":
/*!*************************************!*\
  !*** ./js/utils/AttributeParser.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AttributeParser)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AttributeParser = /*#__PURE__*/function () {\n  function AttributeParser() {\n    _classCallCheck(this, AttributeParser);\n  }\n\n  _createClass(AttributeParser, null, [{\n    key: \"parseBooleanAttribute\",\n    value: function parseBooleanAttribute(text) {\n      if (typeof text === 'undefined') return false;\n      if (text === null) return false;\n\n      if (typeof text === 'string') {\n        text = text.toLowerCase();\n      }\n\n      if (text === 'true') return true;\n      if (text === 'yes') return true;\n      if (text === '1') return true;\n      if (text === 'false') return false;\n      if (text === 'no') return false;\n      if (text === '0') return false; // Otherwise do truthy conversion\n\n      return !!text;\n    }\n  }]);\n\n  return AttributeParser;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy91dGlscy9BdHRyaWJ1dGVQYXJzZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2pzL3V0aWxzL0F0dHJpYnV0ZVBhcnNlci5qcz85NWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dHJpYnV0ZVBhcnNlciB7XG4gICAgc3RhdGljIHBhcnNlQm9vbGVhbkF0dHJpYnV0ZSh0ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRleHQgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAodHlwZW9mIHRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHQgPT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0ZXh0ID09PSAneWVzJykgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0ZXh0ID09PSAnMScpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGlmICh0ZXh0ID09PSAnZmFsc2UnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0ZXh0ID09PSAnbm8nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0ZXh0ID09PSAnMCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyBPdGhlcndpc2UgZG8gdHJ1dGh5IGNvbnZlcnNpb25cbiAgICAgICAgcmV0dXJuICEhdGV4dDtcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/utils/AttributeParser.js\n");

/***/ }),

/***/ "./html/js/third_party/jquery-1.11.1.min-exposed.js":
/*!**********************************************************!*\
  !*** ./html/js/third_party/jquery-1.11.1.min-exposed.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./jquery-1.11.1.min.js */ \"./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/jquery-1.11.1.min.js\");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ \"./node_modules/expose-loader/dist/runtime/getGlobalThis.js\");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\n___EXPOSE_LOADER_GLOBAL_THIS___[\"$\"] = ___EXPOSE_LOADER_IMPORT___;\n___EXPOSE_LOADER_GLOBAL_THIS___[\"jQuery\"] = ___EXPOSE_LOADER_IMPORT___;\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9odG1sL2pzL3RoaXJkX3BhcnR5L2pxdWVyeS0xLjExLjEubWluLWV4cG9zZWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZC8uL2h0bWwvanMvdGhpcmRfcGFydHkvanF1ZXJ5LTEuMTEuMS5taW4tZXhwb3NlZC5qcz84MGEwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZSEuL2pxdWVyeS0xLjExLjEubWluLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbl9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCIkXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5fX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wialF1ZXJ5XCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./html/js/third_party/jquery-1.11.1.min-exposed.js\n");

/***/ }),

/***/ "./html/js/third_party/moment.min-exposed.js":
/*!***************************************************!*\
  !*** ./html/js/third_party/moment.min-exposed.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./moment.min.js */ \"./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3].use!./html/js/third_party/moment.min.js\");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ \"./node_modules/expose-loader/dist/runtime/getGlobalThis.js\");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\n___EXPOSE_LOADER_GLOBAL_THIS___[\"moment\"] = ___EXPOSE_LOADER_IMPORT___;\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9odG1sL2pzL3RoaXJkX3BhcnR5L21vbWVudC5taW4tZXhwb3NlZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1aWxkLy4vaHRtbC9qcy90aGlyZF9wYXJ0eS9tb21lbnQubWluLWV4cG9zZWQuanM/Y2U2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2UhLi9tb21lbnQubWluLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbl9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJtb21lbnRcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./html/js/third_party/moment.min-exposed.js\n");

/***/ }),

/***/ "./node_modules/twig/twig.min-exposed.js":
/*!***********************************************!*\
  !*** ./node_modules/twig/twig.min-exposed.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!./twig.min.js */ \"./node_modules/twig/twig.min.js\");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../expose-loader/dist/runtime/getGlobalThis.js */ \"./node_modules/expose-loader/dist/runtime/getGlobalThis.js\");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\n___EXPOSE_LOADER_GLOBAL_THIS___[\"Twig\"] = ___EXPOSE_LOADER_IMPORT___;\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpZy90d2lnLm1pbi1leHBvc2VkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVpbGQvLi9ub2RlX21vZHVsZXMvdHdpZy90d2lnLm1pbi1leHBvc2VkLmpzPzY5NDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fID0gcmVxdWlyZShcIi0hLi90d2lnLm1pbi5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbl9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJUd2lnXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twig/twig.min-exposed.js\n");

/***/ }),

/***/ "./node_modules/expose-loader/dist/runtime/getGlobalThis.js":
/*!******************************************************************!*\
  !*** ./node_modules/expose-loader/dist/runtime/getGlobalThis.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// eslint-disable-next-line func-names\nmodule.exports = function () {\n  if (typeof globalThis === \"object\") {\n    return globalThis;\n  }\n\n  var g;\n\n  try {\n    // This works if eval is allowed (see CSP)\n    // eslint-disable-next-line no-new-func\n    g = this || new Function(\"return this\")();\n  } catch (e) {\n    // This works if the window reference is available\n    if (typeof window === \"object\") {\n      return window;\n    } // This works if the self reference is available\n\n\n    if (typeof self === \"object\") {\n      return self;\n    } // This works if the global reference is available\n\n\n    if (typeof __webpack_require__.g !== \"undefined\") {\n      return __webpack_require__.g;\n    }\n  }\n\n  return g;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1aWxkLy4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanM/NjBiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgfVxuXG4gIHZhciBnO1xuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZyA9IHRoaXMgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfSAvLyBUaGlzIHdvcmtzIGlmIHRoZSBzZWxmIHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblxuXG4gICAgaWYgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9IC8vIFRoaXMgd29ya3MgaWYgdGhlIGdsb2JhbCByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnO1xufSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/expose-loader/dist/runtime/getGlobalThis.js\n");

/***/ }),

/***/ "./sass/base/base.scss":
/*!*****************************!*\
  !*** ./sass/base/base.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYXNzL2Jhc2UvYmFzZS5zY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVpbGQvLi9zYXNzL2Jhc2UvYmFzZS5zY3NzPzdhODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm1hcHBpbmdzIjoiO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./sass/base/base.scss\n");

/***/ }),

/***/ "./node_modules/twig/twig.min.js":
/*!***************************************!*\
  !*** ./node_modules/twig/twig.min.js ***!
  \***************************************/
/***/ ((module) => {

eval("/*! For license information please see twig.min.js.LICENSE.txt */\n!function(e,t){ true?module.exports=t():0}(self,(()=>{return e={228:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},646:(e,t,r)=>{var n=r(228);e.exports=function(e){if(Array.isArray(e))return n(e)}},713:e=>{e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}}},860:e=>{e.exports=function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},206:e=>{e.exports=function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}},319:(e,t,r)=>{var n=r(646),o=r(860),i=r(379),s=r(206);e.exports=function(e){return n(e)||o(e)||i(e)||s()}},8:e=>{function t(r){return\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?e.exports=t=function(e){return typeof e}:e.exports=t=function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},t(r)}e.exports=t},379:(e,t,r)=>{var n=r(228);e.exports=function(e,t){if(e){if(\"string\"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===r&&e.constructor&&(r=e.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(e):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},452:e=>{\"use strict\";e.exports=function(e){return e.ParseState.prototype.parseAsync=function(e,t){return this.parse(e,t,!0)},e.expression.parseAsync=function(t,r,n){return e.expression.parse.call(this,t,r,n,!0)},e.logic.parseAsync=function(t,r,n){return e.logic.parse.call(this,t,r,n,!0)},e.Template.prototype.renderAsync=function(e,t){return this.render(e,t,!0)},e.async={},e.isPromise=function(e){return e&&e.then&&\"function\"==typeof e.then},e.async.potentiallyAsync=function(t,r,n){return r?e.Promise.resolve(n.call(t)):function(t,r,n){var o=n.call(t),i=null,s=!0;if(!e.isPromise(o))return o;if(o.then((function(e){o=e,s=!1})).catch((function(e){i=e})),null!==i)throw i;if(s)throw new e.Error(\"You are using Twig.js in sync mode in combination with async extensions.\");return o}(t,0,n)},e.Thenable=function(e,t,r){this.then=e,this._value=r?t:null,this._state=r||0},e.Thenable.prototype.catch=function(e){return 1===this._state?this:this.then(null,e)},e.Thenable.resolvedThen=function(t){try{return e.Promise.resolve(t(this._value))}catch(t){return e.Promise.reject(t)}},e.Thenable.rejectedThen=function(t,r){if(!r||\"function\"!=typeof r)return this;var n,o=this._value;try{n=r(o)}catch(t){n=e.Promise.reject(t)}return e.Promise.resolve(n)},e.Promise=function(t){var r=0,n=null,o=function(e,t){r=e,n=t};return function(e,t,r){try{e(t,r)}catch(e){r(e)}}(t,(function(e){o(1,e)}),(function(e){o(2,e)})),1===r?e.Promise.resolve(n):2===r?e.Promise.reject(n):(o=new e.FullPromise).promise},e.FullPromise=function(){var t=null;function r(e){e(s._value)}function n(e,t){t(s._value)}var o=function(e,r){t=function(e,t,r){var n=[t,r,-2];return e?-2===e[2]?e=[e,n]:e.push(n):e=n,e}(t,e,r)};function i(e,i){if(!s._state&&(s._value=i,s._state=e,o=1===e?r:n,t)){if(-2===t[2])return o(t[0],t[1]),void(t=null);t.forEach((function(e){o(e[0],e[1])})),t=null}}var s=new e.Thenable((function(t,r){var n=\"function\"==typeof t;if(1===s._state&&!n)return e.Promise.resolve(s._value);if(1===s._state)try{return e.Promise.resolve(t(s._value))}catch(t){return e.Promise.reject(t)}var i=\"function\"==typeof r;return new e.Promise((function(e,s){o(n?function(r){try{e(t(r))}catch(e){s(e)}}:e,i?function(t){try{e(r(t))}catch(e){s(e)}}:s)}))}));return i.promise=s,i},e.Promise.defaultResolved=new e.Thenable(e.Thenable.resolvedThen,void 0,1),e.Promise.emptyStringResolved=new e.Thenable(e.Thenable.resolvedThen,\"\",1),e.Promise.resolve=function(t){return 0===arguments.length||void 0===t?e.Promise.defaultResolved:e.isPromise(t)?t:\"\"===t?e.Promise.emptyStringResolved:new e.Thenable(e.Thenable.resolvedThen,t,1)},e.Promise.reject=function(t){return new e.Thenable(e.Thenable.rejectedThen,t,2)},e.Promise.all=function(t){var r=new Array(t.length);return e.async.forEach(t,(function(t,n){if(e.isPromise(t)){if(1!==t._state)return t.then((function(e){r[n]=e}));r[n]=t._value}else r[n]=t})).then((function(){return r}))},e.async.forEach=function(t,r){var n=t?t.length:0,o=0;return function i(){var s=null;do{if(o===n)return e.Promise.resolve();s=r(t[o],o),o++}while(!s||!e.isPromise(s)||1===s._state);return s.then(i)}()},e}},383:e=>{\"use strict\";e.exports=function(e){return e.compiler={module:{}},e.compiler.compile=function(t,r){var n=JSON.stringify(t.tokens),o=t.id,i=null;if(r.module){if(void 0===e.compiler.module[r.module])throw new e.Error(\"Unable to find module type \"+r.module);i=e.compiler.module[r.module](o,n,r.twig)}else i=e.compiler.wrap(o,n);return i},e.compiler.module={amd:function(t,r,n){return'define([\"'+n+'\"], function (Twig) {\\n\\tvar twig, templates;\\ntwig = Twig.twig;\\ntemplates = '+e.compiler.wrap(t,r)+\"\\n\\treturn templates;\\n});\"},node:function(t,r){return'var twig = require(\"twig\").twig;\\nexports.template = '+e.compiler.wrap(t,r)},cjs2:function(t,r,n){return'module.declare([{ twig: \"'+n+'\" }], function (require, exports, module) {\\n\\tvar twig = require(\"twig\").twig;\\n\\texports.template = '+e.compiler.wrap(t,r)+\"\\n});\"}},e.compiler.wrap=function(e,t){return'twig({id:\"'+e.replace('\"','\\\\\"')+'\", data:'+t+\", precompiled: true});\\n\"},e}},181:(e,t,r)=>{\"use strict\";var n=r(318)(r(713));function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){(0,n.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}e.exports=function(e){function t(t,r){if(t.template.options.rethrow)throw\"string\"==typeof r&&(r=new e.Error(r)),\"TwigException\"!==r.type||r.file||(r.file=t.template.id),r;if(e.log.error(\"Error parsing twig template \"+t.template.id+\": \"),r.stack?e.log.error(r.stack):e.log.error(r.toString()),e.debug)return r.toString()}return e.trace=!1,e.debug=!1,e.cache=!0,e.noop=function(){},e.merge=function(e,t,r){return Object.keys(t).forEach((function(n){r&&!(n in e)||(e[n]=t[n])})),e},e.Error=function(e,t){this.message=e,this.name=\"TwigException\",this.type=\"TwigException\",this.file=t},e.Error.prototype.toString=function(){return this.name+\": \"+this.message},e.log={trace:function(){if(e.trace&&console){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];console.log(Array.prototype.slice.call(r))}},debug:function(){if(e.debug&&console){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];console.log(Array.prototype.slice.call(r))}}},\"undefined\"==typeof console?e.log.error=function(){}:void 0!==console.error?e.log.error=function(){var e;(e=console).error.apply(e,arguments)}:void 0!==console.log&&(e.log.error=function(){var e;(e=console).log.apply(e,arguments)}),e.token={},e.token.type={output:\"output\",logic:\"logic\",comment:\"comment\",raw:\"raw\",outputWhitespacePre:\"output_whitespace_pre\",outputWhitespacePost:\"output_whitespace_post\",outputWhitespaceBoth:\"output_whitespace_both\",logicWhitespacePre:\"logic_whitespace_pre\",logicWhitespacePost:\"logic_whitespace_post\",logicWhitespaceBoth:\"logic_whitespace_both\"},e.token.definitions=[{type:e.token.type.raw,open:\"{% raw %}\",close:\"{% endraw %}\"},{type:e.token.type.raw,open:\"{% verbatim %}\",close:\"{% endverbatim %}\"},{type:e.token.type.outputWhitespacePre,open:\"{{-\",close:\"}}\"},{type:e.token.type.outputWhitespacePost,open:\"{{\",close:\"-}}\"},{type:e.token.type.outputWhitespaceBoth,open:\"{{-\",close:\"-}}\"},{type:e.token.type.logicWhitespacePre,open:\"{%-\",close:\"%}\"},{type:e.token.type.logicWhitespacePost,open:\"{%\",close:\"-%}\"},{type:e.token.type.logicWhitespaceBoth,open:\"{%-\",close:\"-%}\"},{type:e.token.type.output,open:\"{{\",close:\"}}\"},{type:e.token.type.logic,open:\"{%\",close:\"%}\"},{type:e.token.type.comment,open:\"{#\",close:\"#}\"}],e.token.strings=['\"',\"'\"],e.token.findStart=function(t){var r,n,o,i,s={position:null,def:null},a=null,p=e.token.definitions.length;for(r=0;r<p;r++)n=e.token.definitions[r],o=t.indexOf(n.open),i=t.indexOf(n.close),e.log.trace(\"Twig.token.findStart: \",\"Searching for \",n.open,\" found at \",o),o>=0&&n.open.length!==n.close.length&&i<0||(o>=0&&(null===s.position||o<s.position)?(s.position=o,s.def=n,a=i):o>=0&&null!==s.position&&o===s.position&&(n.open.length>s.def.open.length?(s.position=o,s.def=n,a=i):n.open.length===s.def.open.length&&(n.close.length,s.def.close.length,i>=0&&i<a&&(s.position=o,s.def=n,a=i))));return s},e.token.findEnd=function(t,r,n){for(var o,i,s=null,a=!1,p=0,c=null,l=null,u=null,h=null,f=null,d=null;!a;){if(c=null,l=null,!((u=t.indexOf(r.close,p))>=0))throw new e.Error(\"Unable to find closing bracket '\"+r.close+\"' opened near template position \"+n);if(s=u,a=!0,r.type===e.token.type.comment)break;if(r.type===e.token.type.raw)break;for(i=e.token.strings.length,o=0;o<i;o+=1)(f=t.indexOf(e.token.strings[o],p))>0&&f<u&&(null===c||f<c)&&(c=f,l=e.token.strings[o]);if(null!==c)for(h=c+1,s=null,a=!1;;){if((d=t.indexOf(l,h))<0)throw e.Error(\"Unclosed string in template\");if(\"\\\\\"!==t.slice(d-1,d)){p=d+1;break}h=d+1}}return s},e.tokenize=function(t){for(var r=[],n=0,o=null,i=null;t.length>0;)if(o=e.token.findStart(t),e.log.trace(\"Twig.tokenize: \",\"Found token: \",o),null===o.position)r.push({type:e.token.type.raw,value:t,position:{start:n,end:n+o.position}}),t=\"\";else{if(o.position>0&&r.push({type:e.token.type.raw,value:t.slice(0,Math.max(0,o.position)),position:{start:n,end:n+Math.max(0,o.position)}}),t=t.slice(o.position+o.def.open.length),n+=o.position+o.def.open.length,i=e.token.findEnd(t,o.def,n),e.log.trace(\"Twig.tokenize: \",\"Token ends at \",i),r.push({type:o.def.type,value:t.slice(0,Math.max(0,i)).trim(),position:{start:n-o.def.open.length,end:n+i+o.def.close.length}}),\"\\n\"===t.slice(i+o.def.close.length,i+o.def.close.length+1))switch(o.def.type){case\"logic_whitespace_pre\":case\"logic_whitespace_post\":case\"logic_whitespace_both\":case\"logic\":i+=1}t=t.slice(i+o.def.close.length),n+=i+o.def.close.length}return r},e.compile=function(t){var r=this;try{for(var n=[],o=[],i=[],s=null,a=null,p=null,c=null,l=null,u=null,h=null,f=null,d=null,y=null,m=null,g=function(t){e.expression.compile.call(r,t),o.length>0?i.push(t):n.push(t)},x=function(t){if((a=e.logic.compile.call(r,t)).position=t.position,d=a.type,y=e.logic.handler[d].open,m=e.logic.handler[d].next,e.log.trace(\"Twig.compile: \",\"Compiled logic token to \",a,\" next is: \",m,\" open is : \",y),void 0!==y&&!y){if(c=o.pop(),!e.logic.handler[c.type].next.includes(d))throw new Error(d+\" not expected after a \"+c.type);c.output=c.output||[],c.output=c.output.concat(i),i=[],f={type:e.token.type.logic,token:c,position:{open:c.position,close:t.position}},o.length>0?i.push(f):n.push(f)}void 0!==m&&m.length>0?(e.log.trace(\"Twig.compile: \",\"Pushing \",a,\" to logic stack.\"),o.length>0&&((c=o.pop()).output=c.output||[],c.output=c.output.concat(i),o.push(c),i=[]),o.push(a)):void 0!==y&&y&&(f={type:e.token.type.logic,token:a,position:a.position},o.length>0?i.push(f):n.push(f))};t.length>0;){switch(s=t.shift(),l=n[n.length-1],u=i[i.length-1],h=t[0],e.log.trace(\"Compiling token \",s),s.type){case e.token.type.raw:o.length>0?i.push(s):n.push(s);break;case e.token.type.logic:x.call(r,s);break;case e.token.type.comment:break;case e.token.type.output:g.call(r,s);break;case e.token.type.logicWhitespacePre:case e.token.type.logicWhitespacePost:case e.token.type.logicWhitespaceBoth:case e.token.type.outputWhitespacePre:case e.token.type.outputWhitespacePost:case e.token.type.outputWhitespaceBoth:switch(s.type!==e.token.type.outputWhitespacePost&&s.type!==e.token.type.logicWhitespacePost&&(l&&l.type===e.token.type.raw&&(n.pop(),l.value=l.value.trimEnd(),n.push(l)),u&&u.type===e.token.type.raw&&(i.pop(),u.value=u.value.trimEnd(),i.push(u))),s.type){case e.token.type.outputWhitespacePre:case e.token.type.outputWhitespacePost:case e.token.type.outputWhitespaceBoth:g.call(r,s);break;case e.token.type.logicWhitespacePre:case e.token.type.logicWhitespacePost:case e.token.type.logicWhitespaceBoth:x.call(r,s)}s.type!==e.token.type.outputWhitespacePre&&s.type!==e.token.type.logicWhitespacePre&&h&&h.type===e.token.type.raw&&(t.shift(),h.value=h.value.trimStart(),t.unshift(h))}e.log.trace(\"Twig.compile: \",\" Output: \",n,\" Logic Stack: \",o,\" Pending Output: \",i)}if(o.length>0)throw p=o.pop(),new Error(\"Unable to find an end tag for \"+p.type+\", expecting one of \"+p.next);return n}catch(t){if(r.options.rethrow)throw\"TwigException\"!==t.type||t.file||(t.file=r.id),t;e.log.error(\"Error compiling twig template \"+r.id+\": \"),t.stack?e.log.error(t.stack):e.log.error(t.toString())}},e.prepare=function(t){e.log.debug(\"Twig.prepare: \",\"Tokenizing \",t);var r=e.tokenize.call(this,t);e.log.debug(\"Twig.prepare: \",\"Compiling \",r);var n=e.compile.call(this,r);return e.log.debug(\"Twig.prepare: \",\"Compiled \",n),n},e.output=function(t){var r=this.options.autoescape;if(!r)return t.join(\"\");var n=\"string\"==typeof r?r:\"html\",o=t.map((function(t){return!t||!0===t.twigMarkup||t.twigMarkup===n||\"html\"===n&&\"html_attr\"===t.twigMarkup||(t=e.filters.escape(t,[n])),t}));if(0===o.length)return\"\";var i=o.join(\"\");return 0===i.length?\"\":new e.Markup(i,!0)},e.Templates={loaders:{},parsers:{},registry:{}},e.validateId=function(t){if(\"prototype\"===t)throw new e.Error(t+\" is not a valid twig identifier\");if(e.cache&&Object.hasOwnProperty.call(e.Templates.registry,t))throw new e.Error(\"There is already a template with the ID \"+t);return!0},e.Templates.registerLoader=function(t,r,n){if(\"function\"!=typeof r)throw new e.Error(\"Unable to add loader for \"+t+\": Invalid function reference given.\");n&&(r=r.bind(n)),this.loaders[t]=r},e.Templates.unRegisterLoader=function(e){this.isRegisteredLoader(e)&&delete this.loaders[e]},e.Templates.isRegisteredLoader=function(e){return Object.hasOwnProperty.call(this.loaders,e)},e.Templates.registerParser=function(t,r,n){if(\"function\"!=typeof r)throw new e.Error(\"Unable to add parser for \"+t+\": Invalid function regerence given.\");n&&(r=r.bind(n)),this.parsers[t]=r},e.Templates.unRegisterParser=function(e){this.isRegisteredParser(e)&&delete this.parsers[e]},e.Templates.isRegisteredParser=function(e){return Object.hasOwnProperty.call(this.parsers,e)},e.Templates.save=function(t){if(void 0===t.id)throw new e.Error(\"Unable to save template with no id\");e.Templates.registry[t.id]=t},e.Templates.load=function(t){return Object.hasOwnProperty.call(e.Templates.registry,t)?e.Templates.registry[t]:null},e.Templates.loadRemote=function(t,r,n,o){var i=void 0===r.id?t:r.id,s=e.Templates.registry[i];return e.cache&&void 0!==s?(\"function\"==typeof n&&n(s),s):(r.parser=r.parser||\"twig\",r.id=i,void 0===r.async&&(r.async=!0),(this.loaders[r.method]||this.loaders.fs).call(this,t,r,n,o))},e.Block=function(e,t){this.template=e,this.token=t},e.Block.prototype.render=function(t,r){var n=t.template;return t.template=this.template,(this.token.expression?e.expression.parseAsync.call(t,this.token.output,r):t.parseAsync(this.token.output,r)).then((function(n){return e.expression.parseAsync.call(t,{type:e.expression.type.string,value:n},r)})).then((function(e){return t.template=n,e}))},e.ParseState=function(e,t,r){this.renderedBlocks={},this.overrideBlocks=void 0===t?{}:t,this.context=void 0===r?{}:r,this.macros={},this.nestingStack=[],this.template=e},e.ParseState.prototype.getBlock=function(e,t){var r;return!0!==t&&(r=this.overrideBlocks[e]),void 0===r&&(r=this.template.getBlock(e,t)),void 0===r&&null!==this.template.parentTemplate&&(r=this.template.parentTemplate.getBlock(e)),r},e.ParseState.prototype.getBlocks=function(e){var t={};return!1!==e&&null!==this.template.parentTemplate&&this.template.parentTemplate!==this.template&&(t=this.template.parentTemplate.getBlocks()),t=i(i(i({},t),this.template.getBlocks()),this.overrideBlocks)},e.ParseState.prototype.getNestingStackToken=function(e){var t;return this.nestingStack.forEach((function(r){void 0===t&&r.type===e&&(t=r)})),t},e.ParseState.prototype.parse=function(r,n,o){var i,s=this,a=[],p=null,c=!0,l=!0;function u(e){a.push(e)}function h(e){void 0!==e.chain&&(l=e.chain),void 0!==e.context&&(s.context=e.context),void 0!==e.output&&a.push(e.output)}if(n&&(s.context=n),i=e.async.forEach(r,(function(t){switch(e.log.debug(\"Twig.ParseState.parse: \",\"Parsing token: \",t),t.type){case e.token.type.raw:a.push(e.filters.raw(t.value));break;case e.token.type.logic:return e.logic.parseAsync.call(s,t.token,s.context,l).then(h);case e.token.type.comment:break;case e.token.type.outputWhitespacePre:case e.token.type.outputWhitespacePost:case e.token.type.outputWhitespaceBoth:case e.token.type.output:return e.log.debug(\"Twig.ParseState.parse: \",\"Output token: \",t.stack),e.expression.parseAsync.call(s,t.stack,s.context).then(u)}})).then((function(){return a=e.output.call(s.template,a),c=!1,a})).catch((function(e){o&&t(s,e),p=e})),o)return i;if(null!==p)return t(s,p);if(c)throw new e.Error(\"You are using Twig.js in sync mode in combination with async extensions.\");return a},e.Template=function(t){var r,n,o,i=t.data,s=t.id,a=t.base,p=t.path,c=t.url,l=t.name,u=t.method,h=t.options;this.base=a,this.blocks={defined:{},imported:{}},this.id=s,this.method=u,this.name=l,this.options=h,this.parentTemplate=null,this.path=p,this.url=c,r=\"String\",n=i,o=Object.prototype.toString.call(n).slice(8,-1),this.tokens=null!=n&&o===r?e.prepare.call(this,i):i,void 0!==s&&e.Templates.save(this)},e.Template.prototype.getBlock=function(e,t){var r,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return!0!==t&&(r=this.blocks.defined[e]),n&&void 0===r&&(r=this.blocks.imported[e]),void 0===r&&null!==this.parentTemplate&&(r=this.parentTemplate.getBlock(e,t,n=!1)),r},e.Template.prototype.getBlocks=function(){var e={};return e=i(i(i({},e),this.blocks.imported),this.blocks.defined)},e.Template.prototype.render=function(t,r,n){var o=this;return r=r||{},e.async.potentiallyAsync(o,n,(function(){var n=new e.ParseState(o,r.blocks,t);return n.parseAsync(o.tokens).then((function(t){var i,s;return null!==o.parentTemplate?(o.options.allowInlineIncludes&&(i=e.Templates.load(o.parentTemplate))&&(i.options=o.options),i||(s=e.path.parsePath(o,o.parentTemplate),i=e.Templates.loadRemote(s,{method:o.getLoaderMethod(),base:o.base,async:!1,id:s,options:o.options})),o.parentTemplate=i,o.parentTemplate.renderAsync(n.context,{blocks:n.getBlocks(!1),isInclude:!0})):!0===r.isInclude?t:t.valueOf()}))}))},e.Template.prototype.importFile=function(t){var r,n=null;if(!this.url&&this.options.allowInlineIncludes){if(t=this.path?e.path.parsePath(this,t):t,!(r=e.Templates.load(t))&&!(r=e.Templates.loadRemote(n,{id:t,method:this.getLoaderMethod(),async:!1,path:t,options:this.options})))throw new e.Error(\"Unable to find the template \"+t);return r.options=this.options,r}return n=e.path.parsePath(this,t),r=e.Templates.loadRemote(n,{method:this.getLoaderMethod(),base:this.base,async:!1,options:this.options,id:n})},e.Template.prototype.getLoaderMethod=function(){return this.path?\"fs\":this.url?\"ajax\":this.method||\"fs\"},e.Template.prototype.compile=function(t){return e.compiler.compile(this,t)},e.Markup=function(e,t){if(\"string\"!=typeof e)return e;var r=new String(e);return r.twigMarkup=void 0===t||t,r},e}},858:e=>{\"use strict\";e.exports=function(e){return e.exports={VERSION:e.VERSION},e.exports.twig=function(t){var r=t.id,n={strictVariables:t.strict_variables||!1,autoescape:null!==t.autoescape&&t.autoescape||!1,allowInlineIncludes:t.allowInlineIncludes||!1,rethrow:t.rethrow||!1,namespaces:t.namespaces};if(e.cache&&r&&e.validateId(r),void 0!==t.debug&&(e.debug=t.debug),void 0!==t.trace&&(e.trace=t.trace),void 0!==t.data)return e.Templates.parsers.twig({data:t.data,path:Object.hasOwnProperty.call(t,\"path\")?t.path:void 0,module:t.module,id:r,options:n});if(void 0!==t.ref){if(void 0!==t.id)throw new e.Error(\"Both ref and id cannot be set on a twig.js template.\");return e.Templates.load(t.ref)}if(void 0!==t.method){if(!e.Templates.isRegisteredLoader(t.method))throw new e.Error('Loader for \"'+t.method+'\" is not defined.');return e.Templates.loadRemote(t.name||t.href||t.path||r||void 0,{id:r,method:t.method,parser:t.parser||\"twig\",base:t.base,module:t.module,precompiled:t.precompiled,async:t.async,options:n},t.load,t.error)}return void 0!==t.href?e.Templates.loadRemote(t.href,{id:r,method:\"ajax\",parser:t.parser||\"twig\",base:t.base,module:t.module,precompiled:t.precompiled,async:t.async,options:n},t.load,t.error):void 0!==t.path?e.Templates.loadRemote(t.path,{id:r,method:\"fs\",parser:t.parser||\"twig\",base:t.base,module:t.module,precompiled:t.precompiled,async:t.async,options:n},t.load,t.error):void 0},e.exports.extendFilter=function(t,r){e.filter.extend(t,r)},e.exports.extendFunction=function(t,r){e._function.extend(t,r)},e.exports.extendTest=function(t,r){e.test.extend(t,r)},e.exports.extendTag=function(t){e.logic.extend(t)},e.exports.extend=function(t){t(e)},e.exports.compile=function(t,r){var n=r.filename,o=r.filename,i=new e.Template({data:t,path:o,id:n,options:r.settings[\"twig options\"]});return function(e){return i.render(e)}},e.exports.renderFile=function(t,r,n){\"function\"==typeof r&&(n=r,r={});var o=(r=r||{}).settings||{},i=o[\"twig options\"],s={path:t,base:o.views,load:function(e){i&&i.allowAsync?e.renderAsync(r).then((function(e){return n(null,e)}),n):n(null,String(e.render(r)))},error:function(e){n(e)}};if(i)for(var a in i)Object.hasOwnProperty.call(i,a)&&(s[a]=i[a]);e.exports.twig(s)},e.exports.__express=e.exports.renderFile,e.exports.cache=function(t){e.cache=t},e.exports.path=e.path,e.exports.filters=e.filters,e.exports.tests=e.tests,e.exports.functions=e.functions,e.exports.Promise=e.Promise,e}},769:(e,t,r)=>{\"use strict\";var n=r(318),o=n(r(8)),i=n(r(319));e.exports=function(e){function t(t,r,n){return r?e.expression.parseAsync.call(t,r,n):e.Promise.resolve(!1)}for(e.expression={},r(35)(e),e.expression.reservedWords=[\"true\",\"false\",\"null\",\"TRUE\",\"FALSE\",\"NULL\",\"_context\",\"and\",\"b-and\",\"or\",\"b-or\",\"b-xor\",\"in\",\"not in\",\"if\",\"matches\",\"starts\",\"ends\",\"with\"],e.expression.type={comma:\"Twig.expression.type.comma\",operator:{unary:\"Twig.expression.type.operator.unary\",binary:\"Twig.expression.type.operator.binary\"},string:\"Twig.expression.type.string\",bool:\"Twig.expression.type.bool\",slice:\"Twig.expression.type.slice\",array:{start:\"Twig.expression.type.array.start\",end:\"Twig.expression.type.array.end\"},object:{start:\"Twig.expression.type.object.start\",end:\"Twig.expression.type.object.end\"},parameter:{start:\"Twig.expression.type.parameter.start\",end:\"Twig.expression.type.parameter.end\"},subexpression:{start:\"Twig.expression.type.subexpression.start\",end:\"Twig.expression.type.subexpression.end\"},key:{period:\"Twig.expression.type.key.period\",brackets:\"Twig.expression.type.key.brackets\"},filter:\"Twig.expression.type.filter\",_function:\"Twig.expression.type._function\",variable:\"Twig.expression.type.variable\",number:\"Twig.expression.type.number\",_null:\"Twig.expression.type.null\",context:\"Twig.expression.type.context\",test:\"Twig.expression.type.test\"},e.expression.set={operations:[e.expression.type.filter,e.expression.type.operator.unary,e.expression.type.operator.binary,e.expression.type.array.end,e.expression.type.object.end,e.expression.type.parameter.end,e.expression.type.subexpression.end,e.expression.type.comma,e.expression.type.test],expressions:[e.expression.type._function,e.expression.type.bool,e.expression.type.string,e.expression.type.variable,e.expression.type.number,e.expression.type._null,e.expression.type.context,e.expression.type.parameter.start,e.expression.type.array.start,e.expression.type.object.start,e.expression.type.subexpression.start,e.expression.type.operator.unary]},e.expression.set.operationsExtended=e.expression.set.operations.concat([e.expression.type.key.period,e.expression.type.key.brackets,e.expression.type.slice]),e.expression.fn={compile:{push:function(e,t,r){r.push(e)},pushBoth:function(e,t,r){r.push(e),t.push(e)}},parse:{push:function(e,t){t.push(e)},pushValue:function(e,t){t.push(e.value)}}},e.expression.definitions=[{type:e.expression.type.test,regex:/^is\\s+(not)?\\s*([a-zA-Z_]\\w*(\\s?(?:as|by))?)/,next:e.expression.set.operations.concat([e.expression.type.parameter.start]),compile:function(e,t,r){e.filter=e.match[2],e.modifier=e.match[1],delete e.match,delete e.value,r.push(e)},parse:function(r,n,o){var i=n.pop();return t(this,r.params,o).then((function(t){var o=e.test(r.filter,i,t);\"not\"===r.modifier?n.push(!o):n.push(o)}))}},{type:e.expression.type.comma,regex:/^,/,next:e.expression.set.expressions.concat([e.expression.type.array.end,e.expression.type.object.end]),compile:function(t,r,n){var o,i=r.length-1;for(delete t.match,delete t.value;i>=0;i--){if((o=r.pop()).type===e.expression.type.object.start||o.type===e.expression.type.parameter.start||o.type===e.expression.type.array.start){r.push(o);break}n.push(o)}n.push(t)}},{type:e.expression.type.number,regex:/^-?\\d+(\\.\\d+)?/,next:e.expression.set.operations,compile:function(e,t,r){e.value=Number(e.value),r.push(e)},parse:e.expression.fn.parse.pushValue},{type:e.expression.type.operator.binary,regex:/(^\\?\\?|^\\?:|^(b-and)|^(b-or)|^(b-xor)|^[+\\-~%?]|^(<=>)|^[:](?!\\d\\])|^[!=]==?|^[!<>]=?|^\\*\\*?|^\\/\\/?|^(and)[(|\\s+]|^(or)[(|\\s+]|^(in)[(|\\s+]|^(not in)[(|\\s+]|^(matches)|^(starts with)|^(ends with)|^\\.\\.)/,next:e.expression.set.expressions,transform:function(e,t){switch(e[0]){case\"and(\":case\"or(\":case\"in(\":case\"not in(\":return t[t.length-1].value=e[2],e[0];default:return\"\"}},compile:function(t,r,n){delete t.match,t.value=t.value.trim();var o=t.value,i=e.expression.operator.lookup(o,t);for(e.log.trace(\"Twig.expression.compile: \",\"Operator: \",i,\" from \",o);r.length>0&&(r[r.length-1].type===e.expression.type.operator.unary||r[r.length-1].type===e.expression.type.operator.binary)&&(i.associativity===e.expression.operator.leftToRight&&i.precidence>=r[r.length-1].precidence||i.associativity===e.expression.operator.rightToLeft&&i.precidence>r[r.length-1].precidence);){var s=r.pop();n.push(s)}if(\":\"===o)if(r[r.length-1]&&\"?\"===r[r.length-1].value);else{var a=n.pop();if(a.type===e.expression.type.string||a.type===e.expression.type.variable)t.key=a.value;else if(a.type===e.expression.type.number)t.key=a.value.toString();else{if(!a.expression||a.type!==e.expression.type.parameter.end&&a.type!==e.expression.type.subexpression.end)throw new e.Error(\"Unexpected value before ':' of \"+a.type+\" = \"+a.value);t.params=a.params}n.push(t)}else r.push(i)},parse:function(t,r,n){if(t.key)r.push(t);else{if(t.params)return e.expression.parseAsync.call(this,t.params,n).then((function(e){t.key=e,r.push(t),n.loop||delete t.params}));e.expression.operator.parse(t.value,r)}}},{type:e.expression.type.operator.unary,regex:/(^not\\s+)/,next:e.expression.set.expressions,compile:function(t,r,n){delete t.match,t.value=t.value.trim();var o=t.value,i=e.expression.operator.lookup(o,t);for(e.log.trace(\"Twig.expression.compile: \",\"Operator: \",i,\" from \",o);r.length>0&&(r[r.length-1].type===e.expression.type.operator.unary||r[r.length-1].type===e.expression.type.operator.binary)&&(i.associativity===e.expression.operator.leftToRight&&i.precidence>=r[r.length-1].precidence||i.associativity===e.expression.operator.rightToLeft&&i.precidence>r[r.length-1].precidence);){var s=r.pop();n.push(s)}r.push(i)},parse:function(t,r){e.expression.operator.parse(t.value,r)}},{type:e.expression.type.string,regex:/^([\"'])(?:(?=(\\\\?))\\2[\\s\\S])*?\\1/,next:e.expression.set.operationsExtended,compile:function(t,r,n){var o=t.value;delete t.match,o='\"'===o.slice(0,1)?o.replace('\\\\\"','\"'):o.replace(\"\\\\'\",\"'\"),t.value=o.slice(1,-1).replace(/\\\\n/g,\"\\n\").replace(/\\\\r/g,\"\\r\"),e.log.trace(\"Twig.expression.compile: \",\"String value: \",t.value),n.push(t)},parse:e.expression.fn.parse.pushValue},{type:e.expression.type.subexpression.start,regex:/^\\(/,next:e.expression.set.expressions.concat([e.expression.type.subexpression.end]),compile:function(e,t,r){e.value=\"(\",r.push(e),t.push(e)},parse:e.expression.fn.parse.push},{type:e.expression.type.subexpression.end,regex:/^\\)/,next:e.expression.set.operationsExtended,validate:function(t,r){for(var n=r.length-1,o=!1,i=!1,s=0;!o&&n>=0;){var a=r[n];(o=a.type===e.expression.type.subexpression.start)&&i&&(i=!1,o=!1),a.type===e.expression.type.parameter.start?s++:a.type===e.expression.type.parameter.end?s--:a.type===e.expression.type.subexpression.end&&(i=!0),n--}return o&&0===s},compile:function(t,r,n){var o,i=t;for(o=r.pop();r.length>0&&o.type!==e.expression.type.subexpression.start;)n.push(o),o=r.pop();for(var s=[];t.type!==e.expression.type.subexpression.start;)s.unshift(t),t=n.pop();s.unshift(t),void 0===(o=r[r.length-1])||o.type!==e.expression.type._function&&o.type!==e.expression.type.filter&&o.type!==e.expression.type.test&&o.type!==e.expression.type.key.brackets?(i.expression=!0,s.pop(),s.shift(),i.params=s,n.push(i)):(i.expression=!1,o.params=s)},parse:function(t,r,n){if(t.expression)return e.expression.parseAsync.call(this,t.params,n).then((function(e){r.push(e)}));throw new e.Error(\"Unexpected subexpression end when token is not marked as an expression\")}},{type:e.expression.type.parameter.start,regex:/^\\(/,next:e.expression.set.expressions.concat([e.expression.type.parameter.end]),validate:function(t,r){var n=r[r.length-1];return n&&!e.expression.reservedWords.includes(n.value.trim())},compile:e.expression.fn.compile.pushBoth,parse:e.expression.fn.parse.push},{type:e.expression.type.parameter.end,regex:/^\\)/,next:e.expression.set.operationsExtended,compile:function(t,r,n){var o,i=t;for(o=r.pop();r.length>0&&o.type!==e.expression.type.parameter.start;)n.push(o),o=r.pop();for(var s=[];t.type!==e.expression.type.parameter.start;)s.unshift(t),t=n.pop();s.unshift(t),void 0===(t=n[n.length-1])||t.type!==e.expression.type._function&&t.type!==e.expression.type.filter&&t.type!==e.expression.type.test&&t.type!==e.expression.type.key.brackets?(i.expression=!0,s.pop(),s.shift(),i.params=s,n.push(i)):(i.expression=!1,t.params=s)},parse:function(t,r,n){var o=[],i=!1,s=null;if(t.expression)return e.expression.parseAsync.call(this,t.params,n).then((function(e){r.push(e)}));for(;r.length>0;){if((s=r.pop())&&s.type&&s.type===e.expression.type.parameter.start){i=!0;break}o.unshift(s)}if(!i)throw new e.Error(\"Expected end of parameter set.\");r.push(o)}},{type:e.expression.type.slice,regex:/^\\[(-?\\w*:-?\\w*)\\]/,next:e.expression.set.operationsExtended,compile:function(e,t,r){var n=e.match[1].split(\":\"),o=n[0],i=n[1];e.value=\"slice\",e.params=[o,i],i||(e.params=[o]),r.push(e)},parse:function(t,r,n){var o=r.pop(),i=t.params,s=this;if(parseInt(i[0],10).toString()===i[0])i[0]=parseInt(i[0],10);else{var a=n[i[0]];if(s.template.options.strictVariables&&void 0===a)throw new e.Error('Variable \"'+i[0]+'\" does not exist.');i[0]=a}if(i[1])if(parseInt(i[1],10).toString()===i[1])i[1]=parseInt(i[1],10);else{var p=n[i[1]];if(s.template.options.strictVariables&&void 0===p)throw new e.Error('Variable \"'+i[1]+'\" does not exist.');void 0===p?i=[i[0]]:i[1]=p}r.push(e.filter.call(s,t.value,o,i))}},{type:e.expression.type.array.start,regex:/^\\[/,next:e.expression.set.expressions.concat([e.expression.type.array.end]),compile:e.expression.fn.compile.pushBoth,parse:e.expression.fn.parse.push},{type:e.expression.type.array.end,regex:/^\\]/,next:e.expression.set.operationsExtended,compile:function(t,r,n){for(var o,i=r.length-1;i>=0&&(o=r.pop()).type!==e.expression.type.array.start;i--)n.push(o);n.push(t)},parse:function(t,r){for(var n=[],o=!1,i=null;r.length>0;){if((i=r.pop())&&i.type&&i.type===e.expression.type.array.start){o=!0;break}n.unshift(i)}if(!o)throw new e.Error(\"Expected end of array.\");r.push(n)}},{type:e.expression.type.object.start,regex:/^\\{/,next:e.expression.set.expressions.concat([e.expression.type.object.end]),compile:e.expression.fn.compile.pushBoth,parse:e.expression.fn.parse.push},{type:e.expression.type.object.end,regex:/^\\}/,next:e.expression.set.operationsExtended,compile:function(t,r,n){for(var o,i=r.length-1;i>=0&&(!(o=r.pop())||o.type!==e.expression.type.object.start);i--)n.push(o);n.push(t)},parse:function(t,r){for(var n={},o=!1,i=null,s=!1,a=null;r.length>0;){if((i=r.pop())&&i.type&&i.type===e.expression.type.object.start){o=!0;break}if(i&&i.type&&(i.type===e.expression.type.operator.binary||i.type===e.expression.type.operator.unary)&&i.key){if(!s)throw new e.Error(\"Missing value for key '\"+i.key+\"' in object definition.\");n[i.key]=a,void 0===n._keys&&(n._keys=[]),n._keys.unshift(i.key),a=null,s=!1}else s=!0,a=i}if(!o)throw new e.Error(\"Unexpected end of object.\");r.push(n)}},{type:e.expression.type.filter,regex:/^\\|\\s?([a-zA-Z_][a-zA-Z0-9_-]*)/,next:e.expression.set.operationsExtended.concat([e.expression.type.parameter.start]),compile:function(e,t,r){e.value=e.match[1],r.push(e)},parse:function(r,n,o){var i=n.pop(),s=this;return t(s,r.params,o).then((function(t){return e.filter.call(s,r.value,i,t)})).then((function(e){n.push(e)}))}},{type:e.expression.type._function,regex:/^([a-zA-Z_]\\w*)\\s*\\(/,next:e.expression.type.parameter.start,validate:function(t){return t[1]&&!e.expression.reservedWords.includes(t[1])},transform:function(){return\"(\"},compile:function(e,t,r){var n=e.match[1];e.fn=n,delete e.match,delete e.value,r.push(e)},parse:function(r,n,o){var s,a=this,p=r.fn;return t(a,r.params,o).then((function(t){if(e.functions[p])s=e.functions[p].apply(a,t);else{if(\"function\"!=typeof o[p])throw new e.Error(p+\" function does not exist and is not defined in the context\");s=o[p].apply(o,(0,i.default)(t))}return s})).then((function(e){n.push(e)}))}},{type:e.expression.type.variable,regex:/^[a-zA-Z_]\\w*/,next:e.expression.set.operationsExtended.concat([e.expression.type.parameter.start]),compile:e.expression.fn.compile.push,validate:function(t){return!e.expression.reservedWords.includes(t[0])},parse:function(t,r,n){var o=this;return e.expression.resolveAsync.call(o,n[t.value],n).then((function(n){if(o.template.options.strictVariables&&void 0===n)throw new e.Error('Variable \"'+t.value+'\" does not exist.');r.push(n)}))}},{type:e.expression.type.key.period,regex:/^\\.(\\w+)/,next:e.expression.set.operationsExtended.concat([e.expression.type.parameter.start]),compile:function(e,t,r){e.key=e.match[1],delete e.match,delete e.value,r.push(e)},parse:function(r,n,i,s){var a,p=this,c=r.key,l=n.pop();if(l&&!Object.prototype.hasOwnProperty.call(l,c)&&p.template.options.strictVariables)throw Object.keys(l).length>0?new e.Error('Key \"'+c+'\" for object with keys \"'+Object.keys(l).join(\", \")+'\" does not exist.'):new e.Error('Key \"'+c+'\" does not exist as the object is empty.');return t(p,r.params,i).then((function(t){if(null==l)a=void 0;else{var r=function(e){return e.slice(0,1).toUpperCase()+e.slice(1)};a=\"object\"===(0,o.default)(l)&&c in l?l[c]:l[\"get\"+r(c)]?l[\"get\"+r(c)]:l[\"is\"+r(c)]?l[\"is\"+r(c)]:void 0}return e.expression.resolveAsync.call(p,a,i,t,s,l)})).then((function(e){n.push(e)}))}},{type:e.expression.type.key.brackets,regex:/^\\[([^\\]]*)\\]/,next:e.expression.set.operationsExtended.concat([e.expression.type.parameter.start]),compile:function(t,r,n){var o=t.match[1];delete t.value,delete t.match,t.stack=e.expression.compile({value:o}).stack,n.push(t)},parse:function(r,n,i,s){var a,p,c=this,l=null;return t(c,r.params,i).then((function(t){return l=t,e.expression.parseAsync.call(c,r.stack,i)})).then((function(t){if((a=n.pop())&&!Object.prototype.hasOwnProperty.call(a,t)&&c.template.options.strictVariables){var r=Object.keys(a);throw r.length>0?new e.Error('Key \"'+t+'\" for array with keys \"'+r.join(\", \")+'\" does not exist.'):new e.Error('Key \"'+t+'\" does not exist as the array is empty.')}return null==a?null:(p=\"object\"===(0,o.default)(a)&&t in a?a[t]:null,e.expression.resolveAsync.call(c,p,a,l,s))})).then((function(e){n.push(e)}))}},{type:e.expression.type._null,regex:/^(null|NULL|none|NONE)/,next:e.expression.set.operations,compile:function(e,t,r){delete e.match,e.value=null,r.push(e)},parse:e.expression.fn.parse.pushValue},{type:e.expression.type.context,regex:/^_context/,next:e.expression.set.operationsExtended.concat([e.expression.type.parameter.start]),compile:e.expression.fn.compile.push,parse:function(e,t,r){t.push(r)}},{type:e.expression.type.bool,regex:/^(true|TRUE|false|FALSE)/,next:e.expression.set.operations,compile:function(e,t,r){e.value=\"true\"===e.match[0].toLowerCase(),delete e.match,r.push(e)},parse:e.expression.fn.parse.pushValue}],e.expression.resolveAsync=function(t,r,n,o,i){var s=this;if(\"function\"!=typeof t)return e.Promise.resolve(t);var a=e.Promise.resolve(n);return o&&o.type===e.expression.type.parameter.end&&(a=a.then((function(){return o.params&&e.expression.parseAsync.call(s,o.params,r,!0)})).then((function(e){return o.cleanup=!0,e}))),a.then((function(e){return t.apply(i||r,e||[])}))},e.expression.resolve=function(t,r,n,o,i){return e.async.potentiallyAsync(this,!1,(function(){return e.expression.resolveAsync.call(this,t,r,n,o,i)}))},e.expression.handler={},e.expression.extendType=function(t){e.expression.type[t]=\"Twig.expression.type.\"+t},e.expression.extend=function(t){if(!t.type)throw new e.Error(\"Unable to extend logic definition. No type provided for \"+t);e.expression.handler[t.type]=t};e.expression.definitions.length>0;)e.expression.extend(e.expression.definitions.shift());return e.expression.tokenize=function(t){var r,n,o,i,s,a=t.value,p=[],c=0,l=null,u=[],h=function(){for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];for(var h=arguments.length-2,f=new Array(h);h-- >0;)f[h]=o[h];if(e.log.trace(\"Twig.expression.tokenize\",\"Matched a \",r,\" regular expression of \",f),l&&!l.includes(r))return u.push(r+\" cannot follow a \"+p[p.length-1].type+\" at template:\"+c+\" near '\"+f[0].slice(0,20)+\"...'\"),f[0];var d=e.expression.handler[r];if(d.validate&&!d.validate(f,p))return f[0];u=[];var y={type:r,value:f[0],match:f};return t.position&&(y.position=t.position),p.push(y),s=!0,l=i,c+=f[0].length,d.transform?d.transform(f,p):\"\"};for(e.log.debug(\"Twig.expression.tokenize\",\"Tokenizing expression \",a);a.length>0;){for(r in a=a.trim(),e.expression.handler)if(Object.hasOwnProperty.call(e.expression.handler,r)){if(i=e.expression.handler[r].next,n=e.expression.handler[r].regex,e.log.trace(\"Checking type \",r,\" on \",a),s=!1,Array.isArray(n))for(o=n.length;o-- >0;)a=a.replace(n[o],h);else a=a.replace(n,h);if(s)break}if(!s)throw u.length>0?new e.Error(u.join(\" OR \")):new e.Error(\"Unable to parse '\"+a+\"' at template position\"+c)}return e.log.trace(\"Twig.expression.tokenize\",\"Tokenized to \",p),p},e.expression.compile=function(t){var r=e.expression.tokenize(t),n=null,o=[],i=[],s=null;for(e.log.trace(\"Twig.expression.compile: \",\"Compiling \",t.value);r.length>0;)n=r.shift(),s=e.expression.handler[n.type],e.log.trace(\"Twig.expression.compile: \",\"Compiling \",n),s.compile(n,i,o),e.log.trace(\"Twig.expression.compile: \",\"Stack is\",i),e.log.trace(\"Twig.expression.compile: \",\"Output is\",o);for(;i.length>0;)o.push(i.pop());return e.log.trace(\"Twig.expression.compile: \",\"Final output is\",o),t.stack=o,delete t.value,t},e.expression.parse=function(t,r,n,o){var i=this;Array.isArray(t)||(t=[t]);var s=[],a=[],p=e.expression.type.operator.binary;return e.async.potentiallyAsync(i,o,(function(){return e.async.forEach(t,(function(n,o){var c,l=null,u=null;if(!n.cleanup)return t.length>o+1&&(u=t[o+1]),(l=e.expression.handler[n.type]).parse&&(c=l.parse.call(i,n,s,r,u)),n.type===p&&r.loop&&a.push(n),c})).then((function(){for(var e=a.length,t=null;e-- >0;)(t=a[e]).params&&t.key&&delete t.key;if(n){var r=s.splice(0);s.push(r)}return s.pop()}))}))},e}},35:e=>{\"use strict\";e.exports=function(e){e.expression.operator={leftToRight:\"leftToRight\",rightToLeft:\"rightToLeft\"};var t=function(e,t){if(null==t)return null;if(void 0!==t.indexOf)return(e===t||\"\"!==e)&&t.includes(e);var r;for(r in t)if(Object.hasOwnProperty.call(t,r)&&t[r]===e)return!0;return!1};return e.expression.operator.lookup=function(t,r){switch(t){case\"..\":r.precidence=20,r.associativity=e.expression.operator.leftToRight;break;case\",\":r.precidence=18,r.associativity=e.expression.operator.leftToRight;break;case\"?:\":case\"?\":case\":\":r.precidence=16,r.associativity=e.expression.operator.rightToLeft;break;case\"??\":r.precidence=15,r.associativity=e.expression.operator.rightToLeft;break;case\"or\":r.precidence=14,r.associativity=e.expression.operator.leftToRight;break;case\"and\":r.precidence=13,r.associativity=e.expression.operator.leftToRight;break;case\"b-or\":r.precidence=12,r.associativity=e.expression.operator.leftToRight;break;case\"b-xor\":r.precidence=11,r.associativity=e.expression.operator.leftToRight;break;case\"b-and\":r.precidence=10,r.associativity=e.expression.operator.leftToRight;break;case\"==\":case\"!=\":case\"<=>\":r.precidence=9,r.associativity=e.expression.operator.leftToRight;break;case\"<\":case\"<=\":case\">\":case\">=\":case\"not in\":case\"in\":case\"matches\":case\"starts with\":case\"ends with\":r.precidence=8,r.associativity=e.expression.operator.leftToRight;break;case\"~\":case\"+\":case\"-\":r.precidence=6,r.associativity=e.expression.operator.leftToRight;break;case\"//\":case\"**\":case\"*\":case\"/\":case\"%\":r.precidence=5,r.associativity=e.expression.operator.leftToRight;break;case\"not\":r.precidence=3,r.associativity=e.expression.operator.rightToLeft;break;default:throw new e.Error(\"Failed to lookup operator: \"+t+\" is an unknown operator.\")}return r.operator=t,r},e.expression.operator.parse=function(r,n){var o,i,s;if(e.log.trace(\"Twig.expression.operator.parse: \",\"Handling \",r),\"?\"===r&&(s=n.pop()),i=n.pop(),\"not\"!==r&&(o=n.pop()),\"in\"!==r&&\"not in\"!==r&&\"??\"!==r&&(o&&Array.isArray(o)&&(o=o.length),\"?\"!==r&&i&&Array.isArray(i)&&(i=i.length)),\"matches\"===r&&i&&\"string\"==typeof i){var a=i.match(/^\\/(.*)\\/([gims]?)$/),p=a[1],c=a[2];i=new RegExp(p,c)}switch(r){case\":\":break;case\"??\":void 0===o&&(o=i,i=s,s=void 0),null!=o?n.push(o):n.push(i);break;case\"?:\":e.lib.boolval(o)?n.push(o):n.push(i);break;case\"?\":void 0===o&&(o=i,i=s,s=void 0),e.lib.boolval(o)?n.push(i):n.push(s);break;case\"+\":i=parseFloat(i),o=parseFloat(o),n.push(o+i);break;case\"-\":i=parseFloat(i),o=parseFloat(o),n.push(o-i);break;case\"*\":i=parseFloat(i),o=parseFloat(o),n.push(o*i);break;case\"/\":i=parseFloat(i),o=parseFloat(o),n.push(o/i);break;case\"//\":i=parseFloat(i),o=parseFloat(o),n.push(Math.floor(o/i));break;case\"%\":i=parseFloat(i),o=parseFloat(o),n.push(o%i);break;case\"~\":n.push((null!=o?o.toString():\"\")+(null!=i?i.toString():\"\"));break;case\"not\":case\"!\":n.push(!e.lib.boolval(i));break;case\"<=>\":n.push(o===i?0:o<i?-1:1);break;case\"<\":n.push(o<i);break;case\"<=\":n.push(o<=i);break;case\">\":n.push(o>i);break;case\">=\":n.push(o>=i);break;case\"===\":n.push(o===i);break;case\"==\":n.push(o==i);break;case\"!==\":n.push(o!==i);break;case\"!=\":n.push(o!=i);break;case\"or\":n.push(e.lib.boolval(o)||e.lib.boolval(i));break;case\"b-or\":n.push(o|i);break;case\"b-xor\":n.push(o^i);break;case\"and\":n.push(e.lib.boolval(o)&&e.lib.boolval(i));break;case\"b-and\":n.push(o&i);break;case\"**\":n.push(Math.pow(o,i));break;case\"not in\":n.push(!t(o,i));break;case\"in\":n.push(t(o,i));break;case\"matches\":n.push(i.test(o));break;case\"starts with\":n.push(\"string\"==typeof o&&0===o.indexOf(i));break;case\"ends with\":n.push(\"string\"==typeof o&&o.includes(i,o.length-i.length));break;case\"..\":n.push(e.functions.range(o,i));break;default:throw new e.Error(\"Failed to parse operator: \"+r+\" is an unknown operator.\")}},e}},617:(e,t,r)=>{\"use strict\";e.exports=function e(){var t={VERSION:\"1.17.1\"};return r(181)(t),r(383)(t),r(769)(t),r(213)(t),r(799)(t),r(773)(t),r(854)(t),r(188)(t),r(341)(t),r(402)(t),r(847)(t),r(148)(t),r(439)(t),r(452)(t),r(858)(t),t.exports.factory=e,t.exports}},213:(e,t,r)=>{\"use strict\";var n=r(318)(r(8));e.exports=function(e){function t(e,t){var r=Object.prototype.toString.call(t).slice(8,-1);return null!=t&&r===e}return e.filters={upper:function(e){return\"string\"!=typeof e?e:e.toUpperCase()},lower:function(e){return\"string\"!=typeof e?e:e.toLowerCase()},capitalize:function(e){return\"string\"!=typeof e?e:e.slice(0,1).toUpperCase()+e.toLowerCase().slice(1)},title:function(e){return\"string\"!=typeof e?e:e.toLowerCase().replace(/(^|\\s)([a-z])/g,(function(e,t,r){return t+r.toUpperCase()}))},length:function(t){return e.lib.is(\"Array\",t)||\"string\"==typeof t?t.length:e.lib.is(\"Object\",t)?void 0===t._keys?Object.keys(t).length:t._keys.length:0},reverse:function(e){if(t(\"Array\",e))return e.reverse();if(t(\"String\",e))return e.split(\"\").reverse().join(\"\");if(t(\"Object\",e)){var r=e._keys||Object.keys(e).reverse();return e._keys=r,e}},sort:function(e){if(t(\"Array\",e))return e.sort();if(t(\"Object\",e)){delete e._keys;var r=Object.keys(e).sort((function(t,r){var n,o;return e[t]>e[r]==!(e[t]<=e[r])?e[t]>e[r]?1:e[t]<e[r]?-1:0:isNaN(n=parseFloat(e[t]))||isNaN(o=parseFloat(e[r]))?\"string\"==typeof e[t]?e[t]>e[r].toString()?1:e[t]<e[r].toString()?-1:0:\"string\"==typeof e[r]?e[t].toString()>e[r]?1:e[t].toString()<e[r]?-1:0:null:n>o?1:n<o?-1:0}));return e._keys=r,e}},keys:function(e){if(null!=e){var t=e._keys||Object.keys(e),r=[];return t.forEach((function(t){\"_keys\"!==t&&Object.hasOwnProperty.call(e,t)&&r.push(t)})),r}},url_encode:function(t){if(null!=t){if(e.lib.is(\"Object\",t))return function t(r,n){var o=[];return(r._keys||Object.keys(r)).forEach((function(i){if(Object.prototype.hasOwnProperty.call(r,i)){var s=n?n+\"[\"+i+\"]\":i,a=r[i];o.push(e.lib.is(\"Object\",a)||Array.isArray(a)?t(a,s):encodeURIComponent(s)+\"=\"+encodeURIComponent(a))}})),o.join(\"&amp;\")}(t);var r=encodeURIComponent(t);return r=r.replace(\"'\",\"%27\")}},join:function(e,r){if(null!=e){var n=\"\",o=[];return r&&r[0]&&(n=r[0]),t(\"Array\",e)?o=e:(e._keys||Object.keys(e)).forEach((function(t){\"_keys\"!==t&&Object.hasOwnProperty.call(e,t)&&o.push(e[t])})),o.join(n)}},default:function(t,r){if(void 0!==r&&r.length>1)throw new e.Error(\"default filter expects one argument\");return null==t||\"\"===t?void 0===r?\"\":r[0]:t},json_encode:function(r){if(null==r)return\"null\";if(\"object\"===(0,n.default)(r)&&t(\"Array\",r)){var o=[];return r.forEach((function(t){o.push(e.filters.json_encode(t))})),\"[\"+o.join(\",\")+\"]\"}if(\"object\"===(0,n.default)(r)&&t(\"Date\",r))return'\"'+r.toISOString()+'\"';if(\"object\"===(0,n.default)(r)){var i=r._keys||Object.keys(r),s=[];return i.forEach((function(t){s.push(JSON.stringify(t)+\":\"+e.filters.json_encode(r[t]))})),\"{\"+s.join(\",\")+\"}\"}return JSON.stringify(r)},merge:function(r,n){var o=[],i=0;if(t(\"Array\",r)?n.forEach((function(e){t(\"Array\",e)||(o={})})):o={},t(\"Array\",o)||(o._keys=[]),t(\"Array\",r)?r.forEach((function(e){o._keys&&o._keys.push(i),o[i]=e,i++})):(r._keys||Object.keys(r)).forEach((function(e){o[e]=r[e],o._keys.push(e);var t=parseInt(e,10);!isNaN(t)&&t>=i&&(i=t+1)})),n.forEach((function(e){t(\"Array\",e)?e.forEach((function(e){o._keys&&o._keys.push(i),o[i]=e,i++})):(e._keys||Object.keys(e)).forEach((function(t){o[t]||o._keys.push(t),o[t]=e[t];var r=parseInt(t,10);!isNaN(r)&&r>=i&&(i=r+1)}))})),0===n.length)throw new e.Error(\"Filter merge expects at least one parameter\");return o},date:function(t,r){var n=e.functions.date(t),o=r&&Boolean(r.length)?r[0]:\"F j, Y H:i\";return e.lib.date(o.replace(/\\\\\\\\/g,\"\\\\\"),n)},date_modify:function(t,r){if(null!=t){if(void 0===r||1!==r.length)throw new e.Error(\"date_modify filter expects 1 argument\");var n,o=r[0];return e.lib.is(\"Date\",t)&&(n=e.lib.strtotime(o,t.getTime()/1e3)),e.lib.is(\"String\",t)&&(n=e.lib.strtotime(o,e.lib.strtotime(t))),e.lib.is(\"Number\",t)&&(n=e.lib.strtotime(o,t)),new Date(1e3*n)}},replace:function(t,r){if(null!=t){var n,o=r[0];for(n in o)Object.hasOwnProperty.call(o,n)&&\"_keys\"!==n&&(t=e.lib.replaceAll(t,n,o[n]));return t}},format:function(t,r){if(null!=t)return e.lib.vsprintf(t,r)},striptags:function(t,r){if(null!=t)return e.lib.stripTags(t,r)},escape:function(t,r){if(null!=t&&\"\"!==t){var n=\"html\";if(r&&Boolean(r.length)&&!0!==r[0]&&(n=r[0]),\"html\"===n){var o=t.toString().replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#039;\");return new e.Markup(o,\"html\")}if(\"js\"===n){for(var i=t.toString(),s=\"\",a=0;a<i.length;a++)if(i[a].match(/^[a-zA-Z0-9,._]$/))s+=i[a];else{var p=i.charAt(a),c=i.charCodeAt(a),l={\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\"};s+=l[p]?l[p]:e.lib.sprintf(\"\\\\u%04s\",c.toString(16).toUpperCase())}return new e.Markup(s,\"js\")}if(\"css\"===n){for(var u=t.toString(),h=\"\",f=0;f<u.length;f++)u[f].match(/^[a-zA-Z0-9]$/)?h+=u[f]:h+=\"\\\\\"+u.charCodeAt(f).toString(16).toUpperCase()+\" \";return new e.Markup(h,\"css\")}if(\"url\"===n){var d=e.filters.url_encode(t);return new e.Markup(d,\"url\")}if(\"html_attr\"===n){for(var y=t.toString(),m=\"\",g=0;g<y.length;g++)if(y[g].match(/^[a-zA-Z0-9,.\\-_]$/))m+=y[g];else if(y[g].match(/^[&<>\"]$/))m+=y[g].replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\");else{var x=y.charCodeAt(g);m+=x<=31&&9!==x&&10!==x&&13!==x?\"&#xFFFD;\":x<128?e.lib.sprintf(\"&#x%02s;\",x.toString(16).toUpperCase()):e.lib.sprintf(\"&#x%04s;\",x.toString(16).toUpperCase())}return new e.Markup(m,\"html_attr\")}throw new e.Error(\"escape strategy unsupported\")}},e:function(t,r){return e.filters.escape(t,r)},nl2br:function(t){if(null!=t&&\"\"!==t){var r=\"BACKSLASH_n_replace\",n=\"<br />\"+r;return t=e.filters.escape(t).replace(/\\r\\n/g,n).replace(/\\r/g,n).replace(/\\n/g,n),t=e.lib.replaceAll(t,r,\"\\n\"),new e.Markup(t)}},number_format:function(e,t){var r=e,n=t&&t[0]?t[0]:void 0,o=t&&void 0!==t[1]?t[1]:\".\",i=t&&void 0!==t[2]?t[2]:\",\";r=String(r).replace(/[^0-9+\\-Ee.]/g,\"\");var s=isFinite(Number(r))?Number(r):0,a=isFinite(Number(n))?Math.abs(n):0,p=\"\";return p=(a?function(e,t){var r=Math.pow(10,t);return String(Math.round(e*r)/r)}(s,a):String(Math.round(s))).split(\".\"),p[0].length>3&&(p[0]=p[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g,i)),(p[1]||\"\").length<a&&(p[1]=p[1]||\"\",p[1]+=new Array(a-p[1].length+1).join(\"0\")),p.join(o)},trim:function(e,t){if(null!=e){var r,n=String(e);r=t&&t[0]?String(t[0]):\" \\n\\r\\t\\f\\v            ​\\u2028\\u2029　\";for(var o=0;o<n.length;o++)if(!r.includes(n.charAt(o))){n=n.slice(Math.max(0,o));break}for(var i=n.length-1;i>=0;i--)if(!r.includes(n.charAt(i))){n=n.slice(0,Math.max(0,i+1));break}return r.includes(n.charAt(0))?\"\":n}},truncate:function(e,t){var r=30,n=!1,o=\"...\";if(e=String(e),t&&(t[0]&&(r=t[0]),t[1]&&(n=t[1]),t[2]&&(o=t[2])),e.length>r){if(n&&-1===(r=e.indexOf(\" \",r)))return e;e=e.slice(0,r)+o}return e},slice:function(t,r){if(null!=t){if(void 0===r||0===r.length)throw new e.Error(\"slice filter expects at least 1 argument\");var n=r[0]||0,o=r.length>1?r[1]:t.length,i=n>=0?n:Math.max(t.length+n,0);if(o<0&&(o=t.length-i+o),e.lib.is(\"Array\",t)){for(var s=[],a=i;a<i+o&&a<t.length;a++)s.push(t[a]);return s}if(e.lib.is(\"String\",t))return t.slice(i,i+o);throw new e.Error(\"slice filter expects value to be an array or string\")}},abs:function(e){if(null!=e)return Math.abs(e)},first:function(e){if(t(\"Array\",e))return e[0];if(t(\"Object\",e)){if(\"_keys\"in e)return e[e._keys[0]]}else if(\"string\"==typeof e)return e.slice(0,1)},split:function(t,r){if(null!=t){if(void 0===r||0===r.length||r.length>2)throw new e.Error(\"split filter expects 1 or 2 argument\");if(e.lib.is(\"String\",t)){var n=r[0],o=r[1],i=t.split(n);if(void 0===o)return i;if(o<0)return t.split(n,i.length+o);var s=[];if(\"\"===n)for(;i.length>0;){for(var a=\"\",p=0;p<o&&i.length>0;p++)a+=i.shift();s.push(a)}else{for(var c=0;c<o-1&&i.length>0;c++)s.push(i.shift());i.length>0&&s.push(i.join(n))}return s}throw new e.Error(\"split filter expects value to be a string\")}},last:function(t){var r;return e.lib.is(\"Object\",t)?t[(r=void 0===t._keys?Object.keys(t):t._keys)[r.length-1]]:e.lib.is(\"Number\",t)?t.toString().slice(-1):t[t.length-1]},raw:function(t){return new e.Markup(t||\"\")},batch:function(t,r){var n,o,i=r.shift(),s=r.shift();if(!e.lib.is(\"Array\",t))throw new e.Error(\"batch filter expects items to be an array\");if(!e.lib.is(\"Number\",i))throw new e.Error(\"batch filter expects size to be a number\");i=Math.ceil(i);var a=e.lib.chunkArray(t,i);if(s&&t.length%i!=0){for(o=i-(n=a.pop()).length;o--;)n.push(s);a.push(n)}return a},round:function(t,r){var n=(r=r||[]).length>0?r[0]:0,o=r.length>1?r[1]:\"common\";if(t=parseFloat(t),n&&!e.lib.is(\"Number\",n))throw new e.Error(\"round filter expects precision to be a number\");if(\"common\"===o)return e.lib.round(t,n);if(!e.lib.is(\"Function\",Math[o]))throw new e.Error(\"round filter expects method to be 'floor', 'ceil', or 'common'\");return Math[o](t*Math.pow(10,n))/Math.pow(10,n)},spaceless:function(e){return e.replace(/>\\s+</g,\"><\").trim()}},e.filter=function(t,r,n){if(!e.filters[t])throw new e.Error(\"Unable to find filter \"+t);return e.filters[t].call(this,r,n)},e.filter.extend=function(t,r){e.filters[t]=r},e}},799:(e,t,r)=>{\"use strict\";var n=r(318)(r(8));e.exports=function(t){return t.functions={range:function(e,t,r){var n,o,i=[],s=r||1,a=!1;if(isNaN(e)||isNaN(t)?isNaN(e)&&isNaN(t)?(a=!0,n=e.charCodeAt(0),o=t.charCodeAt(0)):(n=isNaN(e)?0:e,o=isNaN(t)?0:t):(n=parseInt(e,10),o=parseInt(t,10)),n>o)for(;n>=o;)i.push(a?String.fromCharCode(n):n),n-=s;else for(;n<=o;)i.push(a?String.fromCharCode(n):n),n+=s;return i},cycle:function(e,t){return e[t%e.length]},dump:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=[].concat(t),i=this,s=\"\\n\",a=\"  \",p=0,c=\"\",l=function(e){for(var t=\"\";e>0;)e--,t+=a;return t},u=function(e){c+=l(p),\"object\"===(0,n.default)(e)?h(e):\"function\"==typeof e?c+=\"function()\"+s:\"string\"==typeof e?c+=\"string(\"+e.length+') \"'+e+'\"'+s:\"number\"==typeof e?c+=\"number(\"+e+\")\"+s:\"boolean\"==typeof e&&(c+=\"bool(\"+e+\")\"+s)},h=function(e){var t;if(null===e)c+=\"NULL\"+s;else if(void 0===e)c+=\"undefined\"+s;else if(\"object\"===(0,n.default)(e)){for(t in c+=l(p)+(0,n.default)(e),p++,c+=\"(\"+function(e){var t,r=0;for(t in e)Object.hasOwnProperty.call(e,t)&&r++;return r}(e)+\") {\"+s,e)Object.hasOwnProperty.call(e,t)&&(c+=l(p)+\"[\"+t+\"]=> \"+s,u(e[t]));p--,c+=l(p)+\"}\"+s}else u(e)};return 0===o.length&&o.push(i.context),o.forEach((function(e){h(e)})),c},date:function(e){var r;if(null==e||\"\"===e)r=new Date;else if(t.lib.is(\"Date\",e))r=e;else if(t.lib.is(\"String\",e))r=e.match(/^\\d+$/)?new Date(1e3*e):new Date(1e3*t.lib.strtotime(e));else{if(!t.lib.is(\"Number\",e))throw new t.Error(\"Unable to parse date \"+e);r=new Date(1e3*e)}return r},block:function(e){var t=this,r=t.getBlock(e);if(void 0!==r)return r.render(t,t.context)},parent:function(){var e=this;return e.getBlock(e.getNestingStackToken(t.logic.type.block).blockName,!0).render(e,e.context)},attribute:function(e,r,n){return t.lib.is(\"Object\",e)&&Object.hasOwnProperty.call(e,r)?\"function\"==typeof e[r]?e[r].apply(void 0,n):e[r]:e&&e[r]||void 0},max:function(e){if(t.lib.is(\"Object\",e))return delete e._keys,t.lib.max(e);for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return Reflect.apply(t.lib.max,null,[e].concat(n))},min:function(e){if(t.lib.is(\"Object\",e))return delete e._keys,t.lib.min(e);for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return Reflect.apply(t.lib.min,null,[e].concat(n))},template_from_string:function(e){return void 0===e&&(e=\"\"),t.Templates.parsers.twig({options:this.template.options,data:e})},random:function(e){var r=2147483648;function n(e){var t=Math.floor(Math.random()*r),n=Math.min.call(null,0,e),o=Math.max.call(null,0,e);return n+Math.floor((o-n+1)*t/r)}if(t.lib.is(\"Number\",e))return n(e);if(t.lib.is(\"String\",e))return e.charAt(n(e.length-1));if(t.lib.is(\"Array\",e))return e[n(e.length-1)];if(t.lib.is(\"Object\",e)){var o=Object.keys(e);return e[o[n(o.length-1)]]}return n(2147483647)},source:function(r,o){var i,s=this.template.options.namespaces,a=!1,p=void 0!==e.exports&&\"undefined\"==typeof window,c=r;s&&\"object\"===(0,n.default)(s)&&(c=t.path.expandNamespace(s,c));var l={id:r,path:c,method:p?\"fs\":\"ajax\",parser:\"source\",async:!1,fetchTemplateSource:!0};void 0===o&&(o=!1);try{null==(i=t.Templates.loadRemote(r,l))?i=\"\":a=!0}catch(e){t.log.debug(\"Twig.functions.source: \",\"Problem loading template  \",e)}return a||o?i:'Template \"{name}\" is not defined.'.replace(\"{name}\",r)}},t._function=function(e,r,n){if(!t.functions[e])throw new t.Error(\"Unable to find function \"+e);return t.functions[e](r,n)},t._function.extend=function(e,r){t.functions[e]=r},t}},209:(e,t,r)=>{\"use strict\";e.exports=r(617)()},773:(e,t,r)=>{\"use strict\";e.exports=function(e){return e.lib={},e.lib.sprintf=r(296),e.lib.vsprintf=r(436),e.lib.round=r(718),e.lib.max=r(673),e.lib.min=r(4),e.lib.stripTags=r(359),e.lib.strtotime=r(195),e.lib.date=r(190),e.lib.boolval=r(315),e.lib.is=function(e,t){if(null==t)return!1;switch(e){case\"Array\":return Array.isArray(t);case\"Date\":return t instanceof Date;case\"String\":return\"string\"==typeof t||t instanceof String;case\"Number\":return\"number\"==typeof t||t instanceof Number;case\"Function\":return\"function\"==typeof t;case\"Object\":return t instanceof Object;default:return!1}},e.lib.replaceAll=function(e,t,r){var n=\"string\"==typeof e?e:e.toString(),o=t.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");return n.replace(new RegExp(o,\"g\"),r)},e.lib.chunkArray=function(e,t){var r=[],n=0,o=e.length;if(t<1||!Array.isArray(e))return[];for(;n<o;)r.push(e.slice(n,n+=t));return r},e}},854:e=>{\"use strict\";e.exports=function(e){e.Templates.registerLoader(\"ajax\",(function(t,r,n,o){var i,s=r.precompiled,a=this.parsers[r.parser]||this.parser.twig;if(\"undefined\"==typeof XMLHttpRequest)throw new e.Error('Unsupported platform: Unable to do ajax requests because there is no \"XMLHTTPRequest\" implementation');var p=new XMLHttpRequest;return p.onreadystatechange=function(){var c=null;4===p.readyState&&(200===p.status||window.cordova&&0===p.status?(e.log.debug(\"Got template \",p.responseText),c=!0===s?JSON.parse(p.responseText):p.responseText,r.url=t,r.data=c,i=a.call(this,r),\"function\"==typeof n&&n(i)):\"function\"==typeof o&&o(p))},p.open(\"GET\",t,Boolean(r.async)),p.overrideMimeType(\"text/plain\"),p.send(),!!r.async||i}))}},188:(e,t,r)=>{\"use strict\";e.exports=function(e){var t,n;try{t=r(351),n=r(470)}catch(e){console.warn(\"Missing fs and path modules. \"+e)}e.Templates.registerLoader(\"fs\",(function(r,o,i,s){var a,p,c=o.precompiled,l=this.parsers[o.parser]||this.parser.twig;if(!t||!n)throw new e.Error('Unsupported platform: Unable to load from file because there is no \"fs\" or \"path\" implementation');var u=function(e,t){e?\"function\"==typeof s&&s(e):(!0===c&&(t=JSON.parse(t)),o.data=t,o.path=o.path||r,a=l.call(this,o),\"function\"==typeof i&&i(a))};if(o.path=o.path||r,o.async)return t.stat(o.path,(function(r,n){!r&&n.isFile()?t.readFile(o.path,\"utf8\",u):\"function\"==typeof s&&s(new e.Error(\"Unable to find template file \"+o.path))})),!0;try{if(!t.statSync(o.path).isFile())throw new e.Error(\"Unable to find template file \"+o.path)}catch(t){throw new e.Error(\"Unable to find template file \"+o.path+\". \"+t)}return p=t.readFileSync(o.path,\"utf8\"),u(void 0,p),a}))}},341:(e,t,r)=>{\"use strict\";var n=r(318)(r(713));function o(e,t){var r;if(\"undefined\"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(e){if(\"string\"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===r&&e.constructor&&(r=e.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(e):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var s,a=!0,p=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return a=e.done,e},e:function(e){p=!0,s=e},f:function(){try{a||null==r.return||r.return()}finally{if(p)throw s}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){(0,n.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}e.exports=function(e){for(e.logic={},e.logic.type={if_:\"Twig.logic.type.if\",endif:\"Twig.logic.type.endif\",for_:\"Twig.logic.type.for\",endfor:\"Twig.logic.type.endfor\",else_:\"Twig.logic.type.else\",elseif:\"Twig.logic.type.elseif\",set:\"Twig.logic.type.set\",setcapture:\"Twig.logic.type.setcapture\",endset:\"Twig.logic.type.endset\",filter:\"Twig.logic.type.filter\",endfilter:\"Twig.logic.type.endfilter\",apply:\"Twig.logic.type.apply\",endapply:\"Twig.logic.type.endapply\",do:\"Twig.logic.type.do\",shortblock:\"Twig.logic.type.shortblock\",block:\"Twig.logic.type.block\",endblock:\"Twig.logic.type.endblock\",extends_:\"Twig.logic.type.extends\",use:\"Twig.logic.type.use\",include:\"Twig.logic.type.include\",spaceless:\"Twig.logic.type.spaceless\",endspaceless:\"Twig.logic.type.endspaceless\",macro:\"Twig.logic.type.macro\",endmacro:\"Twig.logic.type.endmacro\",import_:\"Twig.logic.type.import\",from:\"Twig.logic.type.from\",embed:\"Twig.logic.type.embed\",endembed:\"Twig.logic.type.endembed\",with:\"Twig.logic.type.with\",endwith:\"Twig.logic.type.endwith\",deprecated:\"Twig.logic.type.deprecated\"},e.logic.definitions=[{type:e.logic.type.if_,regex:/^if\\s?([\\s\\S]+)$/,next:[e.logic.type.else_,e.logic.type.elseif,e.logic.type.endif],open:!0,compile:function(t){var r=t.match[1];return t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,delete t.match,t},parse:function(t,r,n){var o=this;return e.expression.parseAsync.call(o,t.stack,r).then((function(i){return n=!0,e.lib.boolval(i)?(n=!1,o.parseAsync(t.output,r)):\"\"})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.elseif,regex:/^elseif\\s*([^\\s].*)$/,next:[e.logic.type.else_,e.logic.type.elseif,e.logic.type.endif],open:!1,compile:function(t){var r=t.match[1];return t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,delete t.match,t},parse:function(t,r,n){var o=this;return e.expression.parseAsync.call(o,t.stack,r).then((function(i){return n&&e.lib.boolval(i)?(n=!1,o.parseAsync(t.output,r)):\"\"})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.else_,regex:/^else$/,next:[e.logic.type.endif,e.logic.type.endfor],open:!1,parse:function(t,r,n){var o=e.Promise.resolve(\"\");return n&&(o=this.parseAsync(t.output,r)),o.then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.endif,regex:/^endif$/,next:[],open:!1},{type:e.logic.type.for_,regex:/^for\\s+([a-zA-Z0-9_,\\s]+)\\s+in\\s+([\\S\\s]+?)(?:\\s+if\\s+([^\\s].*))?$/,next:[e.logic.type.else_,e.logic.type.endfor],open:!0,compile:function(t){var r=t.match[1],n=t.match[2],o=t.match[3],i=null;if(t.keyVar=null,t.valueVar=null,r.includes(\",\")){if(2!==(i=r.split(\",\")).length)throw new e.Error(\"Invalid expression in for loop: \"+r);t.keyVar=i[0].trim(),t.valueVar=i[1].trim()}else t.valueVar=r.trim();return t.expression=e.expression.compile.call(this,{type:e.expression.type.expression,value:n}).stack,o&&(t.conditional=e.expression.compile.call(this,{type:e.expression.type.expression,value:o}).stack),delete t.match,t},parse:function(t,r,n){var o,i,s=[],p=0,c=this,l=t.conditional,u=function(n,i){var u=a({},r);return u[t.valueVar]=i,t.keyVar&&(u[t.keyVar]=n),u.loop=function(e,t){var n=void 0!==l;return{index:e+1,index0:e,revindex:n?void 0:t-e,revindex0:n?void 0:t-e-1,first:0===e,last:n?void 0:e===t-1,length:n?void 0:t,parent:r}}(p,o),(void 0===l?e.Promise.resolve(!0):e.expression.parseAsync.call(c,l,u)).then((function(e){if(e)return c.parseAsync(t.output,u).then((function(e){s.push(e),p+=1}))})).then((function(){delete u.loop,delete u[t.valueVar],delete u[t.keyVar],e.merge(r,u,!0)}))};return e.expression.parseAsync.call(c,t.expression,r).then((function(t){return Array.isArray(t)?(o=t.length,e.async.forEach(t,(function(e){return u(p,e)}))):e.lib.is(\"Object\",t)?(i=void 0===t._keys?Object.keys(t):t._keys,o=i.length,e.async.forEach(i,(function(e){if(\"_keys\"!==e)return u(e,t[e])}))):void 0})).then((function(){return{chain:0===s.length,context:r,output:e.output.call(c.template,s)}}))}},{type:e.logic.type.endfor,regex:/^endfor$/,next:[],open:!1},{type:e.logic.type.set,regex:/^set\\s+([a-zA-Z0-9_,\\s]+)\\s*=\\s*([\\s\\S]+)$/,next:[],open:!0,compile:function(t){var r=t.match[1].trim(),n=t.match[2],o=e.expression.compile.call(this,{type:e.expression.type.expression,value:n}).stack;return t.key=r,t.expression=o,delete t.match,t},parse:function(t,r,n){var o=t.key;return e.expression.parseAsync.call(this,t.expression,r).then((function(e){return e===r&&(e=a({},e)),r[o]=e,{chain:n,context:r}}))}},{type:e.logic.type.setcapture,regex:/^set\\s+([a-zA-Z0-9_,\\s]+)$/,next:[e.logic.type.endset],open:!0,compile:function(e){var t=e.match[1].trim();return e.key=t,delete e.match,e},parse:function(e,t,r){var n=this,o=e.key;return n.parseAsync(e.output,t).then((function(e){return n.context[o]=e,t[o]=e,{chain:r,context:t}}))}},{type:e.logic.type.endset,regex:/^endset$/,next:[],open:!1},{type:e.logic.type.filter,regex:/^filter\\s+(.+)$/,next:[e.logic.type.endfilter],open:!0,compile:function(t){var r=\"|\"+t.match[1].trim();return t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,delete t.match,t},parse:function(t,r,n){var o=this;return o.parseAsync(t.output,r).then((function(n){var i=[{type:e.expression.type.string,value:n}].concat(t.stack);return e.expression.parseAsync.call(o,i,r)})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.endfilter,regex:/^endfilter$/,next:[],open:!1},{type:e.logic.type.apply,regex:/^apply\\s+(.+)$/,next:[e.logic.type.endapply],open:!0,compile:function(t){var r=\"|\"+t.match[1].trim();return t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,delete t.match,t},parse:function(t,r,n){var o=this;return o.parseAsync(t.output,r).then((function(n){var i=[{type:e.expression.type.string,value:n}].concat(t.stack);return e.expression.parseAsync.call(o,i,r)})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.endapply,regex:/^endapply$/,next:[],open:!1},{type:e.logic.type.do,regex:/^do\\s+([\\S\\s]+)$/,next:[],open:!0,compile:function(t){var r=t.match[1],n=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack;return t.expression=n,delete t.match,t},parse:function(t,r,n){return e.expression.parseAsync.call(this,t.expression,r).then((function(){return{chain:n,context:r}}))}},{type:e.logic.type.block,regex:/^block\\s+(\\w+)$/,next:[e.logic.type.endblock],open:!0,compile:function(e){return e.blockName=e.match[1].trim(),delete e.match,e},parse:function(t,r,n){var o=this,i=e.Promise.resolve();return o.template.blocks.defined[t.blockName]=new e.Block(o.template,t),(null===o.template.parentTemplate||o.template.parentTemplate instanceof e.Template)&&(i=o.getBlock(t.blockName).render(o,r)),i.then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.shortblock,regex:/^block\\s+(\\w+)\\s+(.+)$/,next:[],open:!0,compile:function(t){return t.expression=t.match[2].trim(),t.output=e.expression.compile({type:e.expression.type.expression,value:t.expression}).stack,e.logic.handler[e.logic.type.block].compile.apply(this,[t])},parse:function(){for(var t=this,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return e.logic.handler[e.logic.type.block].parse.apply(t,n)}},{type:e.logic.type.endblock,regex:/^endblock(?:\\s+(\\w+))?$/,next:[],open:!1},{type:e.logic.type.extends_,regex:/^extends\\s+(.+)$/,next:[],open:!0,compile:function(t){var r=t.match[1].trim();return delete t.match,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,t},parse:function(t,r,n){var o=this;return e.expression.parseAsync.call(o,t.stack,r).then((function(e){if(Array.isArray(e)){var t=e.reverse().reduce((function(e,t){try{return{render:o.template.importFile(t),fileName:t}}catch(t){return e}}),{render:null,fileName:null});null!==t.fileName&&(o.template.parentTemplate=t.fileName)}else o.template.parentTemplate=e;return{chain:n,output:\"\"}}))}},{type:e.logic.type.use,regex:/^use\\s+(.+)$/,next:[],open:!0,compile:function(t){var r=t.match[1].trim();return delete t.match,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,t},parse:function(t,r,n){var o=this;return e.expression.parseAsync.call(o,t.stack,r).then((function(t){var r=o.template.importFile(t),n=new e.ParseState(r);return n.parseAsync(r.tokens).then((function(){o.template.blocks.imported=a(a({},o.template.blocks.imported),n.getBlocks())}))})).then((function(){return{chain:n,output:\"\"}}))}},{type:e.logic.type.include,regex:/^include\\s+(.+?)(?:\\s|$)(ignore missing(?:\\s|$))?(?:with\\s+([\\S\\s]+?))?(?:\\s|$)(only)?$/,next:[],open:!0,compile:function(t){var r=t.match,n=r[1].trim(),o=void 0!==r[2],i=r[3],s=void 0!==r[4]&&r[4].length;return delete t.match,t.only=s,t.ignoreMissing=o,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:n}).stack,void 0!==i&&(t.withStack=e.expression.compile.call(this,{type:e.expression.type.expression,value:i.trim()}).stack),t},parse:function(t,r,n){var o=t.only?{}:a({},r),i=t.ignoreMissing,s=this,p={chain:n,output:\"\"};return(void 0===t.withStack?e.Promise.resolve():e.expression.parseAsync.call(s,t.withStack,r).then((function(e){o=a(a({},o),e)}))).then((function(){return e.expression.parseAsync.call(s,t.stack,r)})).then((function(t){var r=(Array.isArray(t)?t:[t]).reduce((function(t,r){if(null===t.render){if(r instanceof e.Template)return{render:r.renderAsync(o,{isInclude:!0}),lastError:null};try{return{render:s.template.importFile(r).renderAsync(o,{isInclude:!0}),lastError:null}}catch(e){return{render:null,lastError:e}}}return t}),{render:null,lastError:null});if(null!==r.render)return r.render;if(null===r.render&&i)return\"\";throw r.lastError})).then((function(e){return\"\"!==e&&(p.output=e),p}))}},{type:e.logic.type.spaceless,regex:/^spaceless$/,next:[e.logic.type.endspaceless],open:!0,parse:function(t,r,n){return this.parseAsync(t.output,r).then((function(t){var r=t.replace(/>\\s+</g,\"><\").trim();return r=new e.Markup(r),{chain:n,output:r}}))}},{type:e.logic.type.endspaceless,regex:/^endspaceless$/,next:[],open:!1},{type:e.logic.type.macro,regex:/^macro\\s+(\\w+)\\s*\\(\\s*((?:\\w+(?:\\s*=\\s*([\\s\\S]+))?(?:,\\s*)?)*)\\s*\\)$/,next:[e.logic.type.endmacro],open:!0,compile:function(t){var r=t.match[1],n=t.match[2].split(/\\s*,\\s*/),o=n.map((function(e){return e.split(/\\s*=\\s*/)[0]})),i=o.length;if(i>1)for(var s={},a=0;a<i;a++){var p=o[a];if(s[p])throw new e.Error(\"Duplicate arguments for parameter: \"+p);s[p]=1}return t.macroName=r,t.parameters=o,t.defaults=n.reduce((function(t,r){var n=r.split(/\\s*=\\s*/),o=n[0],i=n[1];return t[o]=i?e.expression.compile.call(this,{type:e.expression.type.expression,value:i}).stack:void 0,t}),{}),delete t.match,t},parse:function(t,r,n){var o=this;return o.macros[t.macroName]=function(){for(var n=arguments.length,i=new Array(n),s=0;s<n;s++)i[s]=arguments[s];var p=a(a({},o.context),{},{_self:o.macros});return e.async.forEach(t.parameters,(function(n,o){return void 0!==i[o]?(p[n]=i[o],!0):void 0!==t.defaults[n]?e.expression.parseAsync.call(this,t.defaults[n],r).then((function(t){return p[n]=t,e.Promise.resolve()})):(p[n]=void 0,!0)})).then((function(){return o.parseAsync(t.output,p)}))},{chain:n,output:\"\"}}},{type:e.logic.type.endmacro,regex:/^endmacro$/,next:[],open:!1},{type:e.logic.type.import_,regex:/^import\\s+(.+)\\s+as\\s+(\\w+)$/,next:[],open:!0,compile:function(t){var r=t.match[1].trim(),n=t.match[2].trim();return delete t.match,t.expression=r,t.contextName=n,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:r}).stack,t},parse:function(t,r,n){var o=this,i={chain:n,output:\"\"};return\"_self\"===t.expression?(r[t.contextName]=o.macros,i):e.expression.parseAsync.call(o,t.stack,r).then((function(e){return o.template.importFile(e||t.expression)})).then((function(n){var o=new e.ParseState(n);return o.parseAsync(n.tokens).then((function(){return r[t.contextName]=o.macros,i}))}))}},{type:e.logic.type.from,regex:/^from\\s+(.+)\\s+import\\s+([a-zA-Z0-9_, ]+)$/,next:[],open:!0,compile:function(t){var r,n=t.match[1].trim(),i={},s=o(t.match[2].trim().split(/\\s*,\\s*/));try{for(s.s();!(r=s.n()).done;){var a=r.value,p=a.match(/^(\\w+)\\s+as\\s+(\\w+)$/);p?i[p[1].trim()]=p[2].trim():a.match(/^(\\w+)$/)&&(i[a]=a)}}catch(e){s.e(e)}finally{s.f()}return delete t.match,t.expression=n,t.macroNames=i,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:n}).stack,t},parse:function(t,r,n){var o=this;return(\"_self\"===t.expression?e.Promise.resolve(o.macros):e.expression.parseAsync.call(o,t.stack,r).then((function(e){return o.template.importFile(e||t.expression)})).then((function(t){var r=new e.ParseState(t);return r.parseAsync(t.tokens).then((function(){return r.macros}))}))).then((function(e){for(var o in t.macroNames)void 0!==e[o]&&(r[t.macroNames[o]]=e[o]);return{chain:n,output:\"\"}}))}},{type:e.logic.type.embed,regex:/^embed\\s+(.+?)(?:\\s+(ignore missing))?(?:\\s+with\\s+([\\S\\s]+?))?(?:\\s+(only))?$/,next:[e.logic.type.endembed],open:!0,compile:function(t){var r=t.match,n=r[1].trim(),o=void 0!==r[2],i=r[3],s=void 0!==r[4]&&r[4].length;return delete t.match,t.only=s,t.ignoreMissing=o,t.stack=e.expression.compile.call(this,{type:e.expression.type.expression,value:n}).stack,void 0!==i&&(t.withStack=e.expression.compile.call(this,{type:e.expression.type.expression,value:i.trim()}).stack),t},parse:function(t,r,n){var o={},i=e.Promise.resolve(),s=this;return t.only||(o=a({},r)),void 0!==t.withStack&&(i=e.expression.parseAsync.call(s,t.withStack,r).then((function(e){o=a(a({},o),e)}))),i.then((function(){return e.expression.parseAsync.call(s,t.stack,o)})).then((function(r){var n=new e.Template({data:t.output,base:s.template.base,path:s.template.path,url:s.template.url,name:s.template.name,method:s.template.method,options:s.template.options});try{n.importFile(r)}catch(e){if(t.ignoreMissing)return\"\";throw s=null,e}return n.parentTemplate=r,n.renderAsync(o,{isInclude:!0})})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.endembed,regex:/^endembed$/,next:[],open:!1},{type:e.logic.type.with,regex:/^(?:with(?:\\s+([\\S\\s]+?))?)(?:\\s|$)(only)?$/,next:[e.logic.type.endwith],open:!0,compile:function(t){var r=t.match,n=r[1],o=void 0!==r[2]&&r[2].length;return delete t.match,t.only=o,void 0!==n&&(t.withStack=e.expression.compile.call(this,{type:e.expression.type.expression,value:n.trim()}).stack),t},parse:function(t,r,n){var o,i={},s=e.Promise.resolve();t.only||(i=a({},r)),void 0!==t.withStack&&(s=e.expression.parseAsync.call(this,t.withStack,r).then((function(e){for(o in e)Object.hasOwnProperty.call(e,o)&&(i[o]=e[o])})));var p=new e.ParseState(this.template,void 0,i);return s.then((function(){return p.parseAsync(t.output)})).then((function(e){return{chain:n,output:e}}))}},{type:e.logic.type.endwith,regex:/^endwith$/,next:[],open:!1},{type:e.logic.type.deprecated,regex:/^deprecated\\s+(.+)$/,next:[],open:!0,compile:function(e){return console.warn(\"Deprecation notice: \"+e.match[1]),e},parse:function(){return{}}}],e.logic.handler={},e.logic.extendType=function(t,r){r=r||\"Twig.logic.type\"+t,e.logic.type[t]=r},e.logic.extend=function(t){if(!t.type)throw new e.Error(\"Unable to extend logic definition. No type provided for \"+t);e.logic.extendType(t.type),e.logic.handler[t.type]=t};e.logic.definitions.length>0;)e.logic.extend(e.logic.definitions.shift());return e.logic.compile=function(t){var r=t.value.trim(),n=e.logic.tokenize.call(this,r),o=e.logic.handler[n.type];return o.compile&&(n=o.compile.call(this,n),e.log.trace(\"Twig.logic.compile: \",\"Compiled logic token to \",n)),n},e.logic.tokenize=function(t){var r=null,n=null,o=null,i=null,s=null,a=null,p=null;for(r in t=t.trim(),e.logic.handler)if(Object.hasOwnProperty.call(e.logic.handler,r))for(n=e.logic.handler[r].type,i=o=e.logic.handler[r].regex,Array.isArray(o)||(i=[o]),s=i.length,a=0;a<s;a++)if(null!==(p=i[a].exec(t)))return e.log.trace(\"Twig.logic.tokenize: \",\"Matched a \",n,\" regular expression of \",p),{type:n,match:p};throw new e.Error(\"Unable to parse '\"+t.trim()+\"'\")},e.logic.parse=function(t,r,n,o){return e.async.potentiallyAsync(this,o,(function(){e.log.debug(\"Twig.logic.parse: \",\"Parsing logic token \",t);var o,i=e.logic.handler[t.type],s=this;return i.parse?(s.nestingStack.unshift(t),o=i.parse.call(s,t,r||{},n),e.isPromise(o)?o=o.then((function(e){return s.nestingStack.shift(),e})):s.nestingStack.shift(),o):\"\"}))},e}},402:e=>{\"use strict\";e.exports=function(e){e.Templates.registerParser(\"source\",(function(e){return e.data||\"\"}))}},847:e=>{\"use strict\";e.exports=function(e){e.Templates.registerParser(\"twig\",(function(t){return new e.Template(t)}))}},148:(e,t,r)=>{\"use strict\";var n=r(318)(r(8));e.exports=function(e){return e.path={},e.path.expandNamespace=function(e,t){var r=Object.keys(e),n=new RegExp(\"^(?:@(\".concat(r.join(\"|\"),\")/|(\").concat(r.join(\"|\"),\")::)\"));return t.replace(n,(function(t,r,n){return\"\".concat(e[void 0===r?n:r],\"/\")}))},e.path.parsePath=function(t,r){var o=t.options.namespaces,i=r||\"\",s=o&&\"object\"===(0,n.default)(o)?e.path.expandNamespace(o,i):i;return s===i&&(s=e.path.relativePath(t,i)),s},e.path.relativePath=function(t,n){var o,i,s,a=\"/\",p=[],c=n||\"\";if(t.url)o=void 0===t.base?t.url:t.base.replace(/([^/])$/,\"$1/\");else if(t.path){var l=r(470),u=l.sep||a,h=new RegExp(\"^\\\\.{1,2}\"+u.replace(\"\\\\\",\"\\\\\\\\\"));c=c.replace(/\\//g,u),void 0!==t.base&&null===c.match(h)?(c=c.replace(t.base,\"\"),o=t.base+u):o=l.normalize(t.path),o=o.replace(u+u,u),a=u}else{if(!t.name&&!t.id||!t.method||\"fs\"===t.method||\"ajax\"===t.method)throw new e.Error(\"Cannot extend an inline template.\");o=t.base||t.name||t.id}for((i=o.split(a)).pop(),i=i.concat(c.split(a));i.length>0;)\".\"===(s=i.shift())||(\"..\"===s&&p.length>0&&\"..\"!==p[p.length-1]?p.pop():p.push(s));return p.join(a)},e}},439:e=>{\"use strict\";e.exports=function(e){return e.tests={empty:function(e){if(!0===e)return!1;if(null==e)return!0;if(\"number\"==typeof e)return!1;if(e.length>0)return!1;for(var t in e)if(Object.hasOwnProperty.call(e,t))return!1;return!0},odd:function(e){return e%2==1},even:function(e){return e%2==0},\"divisible by\":function(e,t){return e%t[0]==0},divisibleby:function(t,r){return console.warn(\"`divisibleby` is deprecated use `divisible by`\"),e.tests[\"divisible by\"](t,r)},defined:function(e){return void 0!==e},none:function(e){return null===e},null:function(e){return this.none(e)},\"same as\":function(e,t){return e===t[0]},sameas:function(t,r){return console.warn(\"`sameas` is deprecated use `same as`\"),e.tests[\"same as\"](t,r)},iterable:function(t){return t&&(e.lib.is(\"Array\",t)||e.lib.is(\"Object\",t))}},e.test=function(t,r,n){if(!e.tests[t])throw e.Error(\"Test \"+t+\" is not defined.\");return e.tests[t](r,n)},e.test.extend=function(t,r){e.tests[t]=r},e}},521:e=>{\"use strict\";var t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};e.exports=function(e){switch(void 0===e?\"undefined\":t(e)){case\"boolean\":return e?\"1\":\"\";case\"string\":return e;case\"number\":return isNaN(e)?\"NAN\":isFinite(e)?e+\"\":(e<0?\"-\":\"\")+\"INF\";case\"undefined\":return\"\";case\"object\":return Array.isArray(e)?\"Array\":null!==e?\"Object\":\"\";default:throw new Error(\"Unsupported value type\")}}},892:(e,t,r)=>{\"use strict\";var n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};e.exports=function(e){switch(void 0===e?\"undefined\":n(e)){case\"number\":return e;case\"string\":return parseFloat(e)||0;default:return r(791)(e)}}},791:e=>{\"use strict\";var t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};e.exports=function(e){switch(void 0===e?\"undefined\":t(e)){case\"number\":return isNaN(e)||!isFinite(e)?0:e<0?Math.ceil(e):Math.floor(e);case\"string\":return parseInt(e,10)||0;default:return+!!e}}},190:e=>{\"use strict\";e.exports=function(e,t){var r=void 0,n=void 0,o=[\"Sun\",\"Mon\",\"Tues\",\"Wednes\",\"Thurs\",\"Fri\",\"Satur\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],i=/\\\\?(.?)/gi,s=function(e,t){return n[e]?n[e]():t},a=function(e,t){for(e=String(e);e.length<t;)e=\"0\"+e;return e};return n={d:function(){return a(n.j(),2)},D:function(){return n.l().slice(0,3)},j:function(){return r.getDate()},l:function(){return o[n.w()]+\"day\"},N:function(){return n.w()||7},S:function(){var e=n.j(),t=e%10;return t<=3&&1===parseInt(e%100/10,10)&&(t=0),[\"st\",\"nd\",\"rd\"][t-1]||\"th\"},w:function(){return r.getDay()},z:function(){var e=new Date(n.Y(),n.n()-1,n.j()),t=new Date(n.Y(),0,1);return Math.round((e-t)/864e5)},W:function(){var e=new Date(n.Y(),n.n()-1,n.j()-n.N()+3),t=new Date(e.getFullYear(),0,4);return a(1+Math.round((e-t)/864e5/7),2)},F:function(){return o[6+n.n()]},m:function(){return a(n.n(),2)},M:function(){return n.F().slice(0,3)},n:function(){return r.getMonth()+1},t:function(){return new Date(n.Y(),n.n(),0).getDate()},L:function(){var e=n.Y();return e%4==0&e%100!=0|e%400==0},o:function(){var e=n.n(),t=n.W();return n.Y()+(12===e&&t<9?1:1===e&&t>9?-1:0)},Y:function(){return r.getFullYear()},y:function(){return n.Y().toString().slice(-2)},a:function(){return r.getHours()>11?\"pm\":\"am\"},A:function(){return n.a().toUpperCase()},B:function(){var e=3600*r.getUTCHours(),t=60*r.getUTCMinutes(),n=r.getUTCSeconds();return a(Math.floor((e+t+n+3600)/86.4)%1e3,3)},g:function(){return n.G()%12||12},G:function(){return r.getHours()},h:function(){return a(n.g(),2)},H:function(){return a(n.G(),2)},i:function(){return a(r.getMinutes(),2)},s:function(){return a(r.getSeconds(),2)},u:function(){return a(1e3*r.getMilliseconds(),6)},e:function(){throw new Error(\"Not supported (see source code of date() for timezone on how to add support)\")},I:function(){return new Date(n.Y(),0)-Date.UTC(n.Y(),0)!=new Date(n.Y(),6)-Date.UTC(n.Y(),6)?1:0},O:function(){var e=r.getTimezoneOffset(),t=Math.abs(e);return(e>0?\"-\":\"+\")+a(100*Math.floor(t/60)+t%60,4)},P:function(){var e=n.O();return e.substr(0,3)+\":\"+e.substr(3,2)},T:function(){return\"UTC\"},Z:function(){return 60*-r.getTimezoneOffset()},c:function(){return\"Y-m-d\\\\TH:i:sP\".replace(i,s)},r:function(){return\"D, d M Y H:i:s O\".replace(i,s)},U:function(){return r/1e3|0}},function(e,t){return r=void 0===t?new Date:t instanceof Date?new Date(t):new Date(1e3*t),e.replace(i,s)}(e,t)}},195:e=>{\"use strict\";var t=\"[ \\\\t]+\",r=\"[ \\\\t]*\",n=\"(?:([ap])\\\\.?m\\\\.?([\\\\t ]|$))\",o=\"(2[0-4]|[01]?[0-9])\",i=\"([01][0-9]|2[0-4])\",s=\"(0?[1-9]|1[0-2])\",a=\"([0-5]?[0-9])\",p=\"([0-5][0-9])\",c=\"(60|[0-5]?[0-9])\",l=\"(60|[0-5][0-9])\",u=\"(?:\\\\.([0-9]+))\",h=\"sunday|monday|tuesday|wednesday|thursday|friday|saturday\",f=\"sun|mon|tue|wed|thu|fri|sat\",d=h+\"|\"+f+\"|weekdays?\",y=\"first|second|third|fourth|fifth|sixth|seventh|eighth?|ninth|tenth|eleventh|twelfth\",m=\"next|last|previous|this\",g=\"(?:second|sec|minute|min|hour|day|fortnight|forthnight|month|year)s?|weeks|\"+d,x=\"([0-9]{1,4})\",b=\"([0-9]{4})\",v=\"(1[0-2]|0?[0-9])\",w=\"(0[0-9]|1[0-2])\",k=\"(?:(3[01]|[0-2]?[0-9])(?:st|nd|rd|th)?)\",T=\"(0[0-9]|[1-2][0-9]|3[01])\",A=\"january|february|march|april|may|june|july|august|september|october|november|december\",S=\"jan|feb|mar|apr|may|jun|jul|aug|sept?|oct|nov|dec\",E=\"(\"+A+\"|\"+S+\"|i[vx]|vi{0,3}|xi{0,2}|i{1,3})\",j=\"((?:GMT)?([+-])\"+o+\":?\"+a+\"?)\",O=E+\"[ .\\\\t-]*\"+k+\"[,.stndrh\\\\t ]*\";function N(e,t){switch(t=t&&t.toLowerCase()){case\"a\":e+=12===e?-12:0;break;case\"p\":e+=12!==e?12:0}return e}function P(e){var t=+e;return e.length<4&&t<100&&(t+=t<70?2e3:1900),t}function _(e){return{jan:0,january:0,i:0,feb:1,february:1,ii:1,mar:2,march:2,iii:2,apr:3,april:3,iv:3,may:4,v:4,jun:5,june:5,vi:5,jul:6,july:6,vii:6,aug:7,august:7,viii:7,sep:8,sept:8,september:8,ix:8,oct:9,october:9,x:9,nov:10,november:10,xi:10,dec:11,december:11,xii:11}[e.toLowerCase()]}function R(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r={mon:1,monday:1,tue:2,tuesday:2,wed:3,wednesday:3,thu:4,thursday:4,fri:5,friday:5,sat:6,saturday:6,sun:0,sunday:0};return r[e.toLowerCase()]||t}function M(e,t){if(!(e=e&&e.match(/(?:GMT)?([+-])(\\d+)(:?)(\\d{0,2})/i)))return t;var r=\"-\"===e[1]?-1:1,n=+e[2],o=+e[4];return e[4]||e[3]||(o=Math.floor(n%100),n=Math.floor(n/100)),r*(60*n+o)*60}var C={acdt:37800,acst:34200,addt:-7200,adt:-10800,aedt:39600,aest:36e3,ahdt:-32400,ahst:-36e3,akdt:-28800,akst:-32400,amt:-13840,apt:-10800,ast:-14400,awdt:32400,awst:28800,awt:-10800,bdst:7200,bdt:-36e3,bmt:-14309,bst:3600,cast:34200,cat:7200,cddt:-14400,cdt:-18e3,cemt:10800,cest:7200,cet:3600,cmt:-15408,cpt:-18e3,cst:-21600,cwt:-18e3,chst:36e3,dmt:-1521,eat:10800,eddt:-10800,edt:-14400,eest:10800,eet:7200,emt:-26248,ept:-14400,est:-18e3,ewt:-14400,ffmt:-14660,fmt:-4056,gdt:39600,gmt:0,gst:36e3,hdt:-34200,hkst:32400,hkt:28800,hmt:-19776,hpt:-34200,hst:-36e3,hwt:-34200,iddt:14400,idt:10800,imt:25025,ist:7200,jdt:36e3,jmt:8440,jst:32400,kdt:36e3,kmt:5736,kst:30600,lst:9394,mddt:-18e3,mdst:16279,mdt:-21600,mest:7200,met:3600,mmt:9017,mpt:-21600,msd:14400,msk:10800,mst:-25200,mwt:-21600,nddt:-5400,ndt:-9052,npt:-9e3,nst:-12600,nwt:-9e3,nzdt:46800,nzmt:41400,nzst:43200,pddt:-21600,pdt:-25200,pkst:21600,pkt:18e3,plmt:25590,pmt:-13236,ppmt:-17340,ppt:-25200,pst:-28800,pwt:-25200,qmt:-18840,rmt:5794,sast:7200,sdmt:-16800,sjmt:-20173,smt:-13884,sst:-39600,tbmt:10751,tmt:12344,uct:0,utc:0,wast:7200,wat:3600,wemt:7200,west:3600,wet:0,wib:25200,wita:28800,wit:32400,wmt:5040,yddt:-25200,ydt:-28800,ypt:-28800,yst:-32400,ywt:-28800,a:3600,b:7200,c:10800,d:14400,e:18e3,f:21600,g:25200,h:28800,i:32400,k:36e3,l:39600,m:43200,n:-3600,o:-7200,p:-10800,q:-14400,r:-18e3,s:-21600,t:-25200,u:-28800,v:-32400,w:-36e3,x:-39600,y:-43200,z:0},D={yesterday:{regex:/^yesterday/i,name:\"yesterday\",callback:function(){return this.rd-=1,this.resetTime()}},now:{regex:/^now/i,name:\"now\"},noon:{regex:/^noon/i,name:\"noon\",callback:function(){return this.resetTime()&&this.time(12,0,0,0)}},midnightOrToday:{regex:/^(midnight|today)/i,name:\"midnight | today\",callback:function(){return this.resetTime()}},tomorrow:{regex:/^tomorrow/i,name:\"tomorrow\",callback:function(){return this.rd+=1,this.resetTime()}},timestamp:{regex:/^@(-?\\d+)/i,name:\"timestamp\",callback:function(e,t){return this.rs+=+t,this.y=1970,this.m=0,this.d=1,this.dates=0,this.resetTime()&&this.zone(0)}},firstOrLastDay:{regex:/^(first|last) day of/i,name:\"firstdayof | lastdayof\",callback:function(e,t){\"first\"===t.toLowerCase()?this.firstOrLastDayOfMonth=1:this.firstOrLastDayOfMonth=-1}},backOrFrontOf:{regex:RegExp(\"^(back|front) of \"+o+r+n+\"?\",\"i\"),name:\"backof | frontof\",callback:function(e,t,r,n){var o=+r,i=15;return\"back\"===t.toLowerCase()||(o-=1,i=45),o=N(o,n),this.resetTime()&&this.time(o,i,0,0)}},weekdayOf:{regex:RegExp(\"^(\"+y+\"|\"+m+\")\"+t+\"(\"+h+\"|\"+f+\")\"+t+\"of\",\"i\"),name:\"weekdayof\"},mssqltime:{regex:RegExp(\"^\"+s+\":\"+p+\":\"+l+\"[:.]([0-9]+)\"+n,\"i\"),name:\"mssqltime\",callback:function(e,t,r,n,o,i){return this.time(N(+t,i),+r,+n,+o.substr(0,3))}},timeLong12:{regex:RegExp(\"^\"+s+\"[:.]\"+a+\"[:.]\"+l+r+n,\"i\"),name:\"timelong12\",callback:function(e,t,r,n,o){return this.time(N(+t,o),+r,+n,0)}},timeShort12:{regex:RegExp(\"^\"+s+\"[:.]\"+p+r+n,\"i\"),name:\"timeshort12\",callback:function(e,t,r,n){return this.time(N(+t,n),+r,0,0)}},timeTiny12:{regex:RegExp(\"^\"+s+r+n,\"i\"),name:\"timetiny12\",callback:function(e,t,r){return this.time(N(+t,r),0,0,0)}},soap:{regex:RegExp(\"^\"+b+\"-\"+w+\"-\"+T+\"T\"+i+\":\"+p+\":\"+l+u+j+\"?\",\"i\"),name:\"soap\",callback:function(e,t,r,n,o,i,s,a,p){return this.ymd(+t,r-1,+n)&&this.time(+o,+i,+s,+a.substr(0,3))&&this.zone(M(p))}},wddx:{regex:RegExp(\"^\"+b+\"-\"+v+\"-\"+k+\"T\"+o+\":\"+a+\":\"+c),name:\"wddx\",callback:function(e,t,r,n,o,i,s){return this.ymd(+t,r-1,+n)&&this.time(+o,+i,+s,0)}},exif:{regex:RegExp(\"^\"+b+\":\"+w+\":\"+T+\" \"+i+\":\"+p+\":\"+l,\"i\"),name:\"exif\",callback:function(e,t,r,n,o,i,s){return this.ymd(+t,r-1,+n)&&this.time(+o,+i,+s,0)}},xmlRpc:{regex:RegExp(\"^\"+b+w+T+\"T\"+o+\":\"+p+\":\"+l),name:\"xmlrpc\",callback:function(e,t,r,n,o,i,s){return this.ymd(+t,r-1,+n)&&this.time(+o,+i,+s,0)}},xmlRpcNoColon:{regex:RegExp(\"^\"+b+w+T+\"[Tt]\"+o+p+l),name:\"xmlrpcnocolon\",callback:function(e,t,r,n,o,i,s){return this.ymd(+t,r-1,+n)&&this.time(+o,+i,+s,0)}},clf:{regex:RegExp(\"^\"+k+\"/(\"+S+\")/\"+b+\":\"+i+\":\"+p+\":\"+l+t+j,\"i\"),name:\"clf\",callback:function(e,t,r,n,o,i,s,a){return this.ymd(+n,_(r),+t)&&this.time(+o,+i,+s,0)&&this.zone(M(a))}},iso8601long:{regex:RegExp(\"^t?\"+o+\"[:.]\"+a+\"[:.]\"+c+u,\"i\"),name:\"iso8601long\",callback:function(e,t,r,n,o){return this.time(+t,+r,+n,+o.substr(0,3))}},dateTextual:{regex:RegExp(\"^\"+E+\"[ .\\\\t-]*\"+k+\"[,.stndrh\\\\t ]+\"+x,\"i\"),name:\"datetextual\",callback:function(e,t,r,n){return this.ymd(P(n),_(t),+r)}},pointedDate4:{regex:RegExp(\"^\"+k+\"[.\\\\t-]\"+v+\"[.-]\"+b),name:\"pointeddate4\",callback:function(e,t,r,n){return this.ymd(+n,r-1,+t)}},pointedDate2:{regex:RegExp(\"^\"+k+\"[.\\\\t]\"+v+\"\\\\.([0-9]{2})\"),name:\"pointeddate2\",callback:function(e,t,r,n){return this.ymd(P(n),r-1,+t)}},timeLong24:{regex:RegExp(\"^t?\"+o+\"[:.]\"+a+\"[:.]\"+c),name:\"timelong24\",callback:function(e,t,r,n){return this.time(+t,+r,+n,0)}},dateNoColon:{regex:RegExp(\"^\"+b+w+T),name:\"datenocolon\",callback:function(e,t,r,n){return this.ymd(+t,r-1,+n)}},pgydotd:{regex:RegExp(\"^\"+b+\"\\\\.?(00[1-9]|0[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|36[0-6])\"),name:\"pgydotd\",callback:function(e,t,r){return this.ymd(+t,0,+r)}},timeShort24:{regex:RegExp(\"^t?\"+o+\"[:.]\"+a,\"i\"),name:\"timeshort24\",callback:function(e,t,r){return this.time(+t,+r,0,0)}},iso8601noColon:{regex:RegExp(\"^t?\"+i+p+l,\"i\"),name:\"iso8601nocolon\",callback:function(e,t,r,n){return this.time(+t,+r,+n,0)}},iso8601dateSlash:{regex:RegExp(\"^\"+b+\"/\"+w+\"/\"+T+\"/\"),name:\"iso8601dateslash\",callback:function(e,t,r,n){return this.ymd(+t,r-1,+n)}},dateSlash:{regex:RegExp(\"^\"+b+\"/\"+v+\"/\"+k),name:\"dateslash\",callback:function(e,t,r,n){return this.ymd(+t,r-1,+n)}},american:{regex:RegExp(\"^\"+v+\"/\"+k+\"/\"+x),name:\"american\",callback:function(e,t,r,n){return this.ymd(P(n),t-1,+r)}},americanShort:{regex:RegExp(\"^\"+v+\"/\"+k),name:\"americanshort\",callback:function(e,t,r){return this.ymd(this.y,t-1,+r)}},gnuDateShortOrIso8601date2:{regex:RegExp(\"^\"+x+\"-\"+v+\"-\"+k),name:\"gnudateshort | iso8601date2\",callback:function(e,t,r,n){return this.ymd(P(t),r-1,+n)}},iso8601date4:{regex:RegExp(\"^([+-]?[0-9]{4})-\"+w+\"-\"+T),name:\"iso8601date4\",callback:function(e,t,r,n){return this.ymd(+t,r-1,+n)}},gnuNoColon:{regex:RegExp(\"^t?\"+i+p,\"i\"),name:\"gnunocolon\",callback:function(e,t,r){switch(this.times){case 0:return this.time(+t,+r,0,this.f);case 1:return this.y=100*t+ +r,this.times++,!0;default:return!1}}},gnuDateShorter:{regex:RegExp(\"^\"+b+\"-\"+v),name:\"gnudateshorter\",callback:function(e,t,r){return this.ymd(+t,r-1,1)}},pgTextReverse:{regex:RegExp(\"^(\\\\d{3,4}|[4-9]\\\\d|3[2-9])-(\"+S+\")-\"+T,\"i\"),name:\"pgtextreverse\",callback:function(e,t,r,n){return this.ymd(P(t),_(r),+n)}},dateFull:{regex:RegExp(\"^\"+k+\"[ \\\\t.-]*\"+E+\"[ \\\\t.-]*\"+x,\"i\"),name:\"datefull\",callback:function(e,t,r,n){return this.ymd(P(n),_(r),+t)}},dateNoDay:{regex:RegExp(\"^\"+E+\"[ .\\\\t-]*\"+b,\"i\"),name:\"datenoday\",callback:function(e,t,r){return this.ymd(+r,_(t),1)}},dateNoDayRev:{regex:RegExp(\"^\"+b+\"[ .\\\\t-]*\"+E,\"i\"),name:\"datenodayrev\",callback:function(e,t,r){return this.ymd(+t,_(r),1)}},pgTextShort:{regex:RegExp(\"^(\"+S+\")-\"+T+\"-\"+x,\"i\"),name:\"pgtextshort\",callback:function(e,t,r,n){return this.ymd(P(n),_(t),+r)}},dateNoYear:{regex:RegExp(\"^\"+O,\"i\"),name:\"datenoyear\",callback:function(e,t,r){return this.ymd(this.y,_(t),+r)}},dateNoYearRev:{regex:RegExp(\"^\"+k+\"[ .\\\\t-]*\"+E,\"i\"),name:\"datenoyearrev\",callback:function(e,t,r){return this.ymd(this.y,_(r),+t)}},isoWeekDay:{regex:RegExp(\"^\"+b+\"-?W(0[1-9]|[1-4][0-9]|5[0-3])(?:-?([0-7]))?\"),name:\"isoweekday | isoweek\",callback:function(e,t,r,n){if(n=n?+n:1,!this.ymd(+t,0,1))return!1;var o=new Date(this.y,this.m,this.d).getDay();o=0-(o>4?o-7:o),this.rd+=o+7*(r-1)+n}},relativeText:{regex:RegExp(\"^(\"+y+\"|\"+m+\")\"+t+\"(\"+g+\")\",\"i\"),name:\"relativetext\",callback:function(e,t,r){var n,o={amount:{last:-1,previous:-1,this:0,first:1,next:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eight:8,eighth:8,ninth:9,tenth:10,eleventh:11,twelfth:12}[n=t.toLowerCase()],behavior:{this:1}[n]||0},i=o.amount;switch(r.toLowerCase()){case\"sec\":case\"secs\":case\"second\":case\"seconds\":this.rs+=i;break;case\"min\":case\"mins\":case\"minute\":case\"minutes\":this.ri+=i;break;case\"hour\":case\"hours\":this.rh+=i;break;case\"day\":case\"days\":this.rd+=i;break;case\"fortnight\":case\"fortnights\":case\"forthnight\":case\"forthnights\":this.rd+=14*i;break;case\"week\":case\"weeks\":this.rd+=7*i;break;case\"month\":case\"months\":this.rm+=i;break;case\"year\":case\"years\":this.ry+=i;break;case\"mon\":case\"monday\":case\"tue\":case\"tuesday\":case\"wed\":case\"wednesday\":case\"thu\":case\"thursday\":case\"fri\":case\"friday\":case\"sat\":case\"saturday\":case\"sun\":case\"sunday\":this.resetTime(),this.weekday=R(r,7),this.weekdayBehavior=1,this.rd+=7*(i>0?i-1:i)}}},relative:{regex:RegExp(\"^([+-]*)[ \\\\t]*(\\\\d+)\"+r+\"(\"+g+\"|week)\",\"i\"),name:\"relative\",callback:function(e,t,r,n){var o=t.replace(/[^-]/g,\"\").length,i=+r*Math.pow(-1,o);switch(n.toLowerCase()){case\"sec\":case\"secs\":case\"second\":case\"seconds\":this.rs+=i;break;case\"min\":case\"mins\":case\"minute\":case\"minutes\":this.ri+=i;break;case\"hour\":case\"hours\":this.rh+=i;break;case\"day\":case\"days\":this.rd+=i;break;case\"fortnight\":case\"fortnights\":case\"forthnight\":case\"forthnights\":this.rd+=14*i;break;case\"week\":case\"weeks\":this.rd+=7*i;break;case\"month\":case\"months\":this.rm+=i;break;case\"year\":case\"years\":this.ry+=i;break;case\"mon\":case\"monday\":case\"tue\":case\"tuesday\":case\"wed\":case\"wednesday\":case\"thu\":case\"thursday\":case\"fri\":case\"friday\":case\"sat\":case\"saturday\":case\"sun\":case\"sunday\":this.resetTime(),this.weekday=R(n,7),this.weekdayBehavior=1,this.rd+=7*(i>0?i-1:i)}}},dayText:{regex:RegExp(\"^(\"+d+\")\",\"i\"),name:\"daytext\",callback:function(e,t){this.resetTime(),this.weekday=R(t,0),2!==this.weekdayBehavior&&(this.weekdayBehavior=1)}},relativeTextWeek:{regex:RegExp(\"^(\"+m+\")\"+t+\"week\",\"i\"),name:\"relativetextweek\",callback:function(e,t){switch(this.weekdayBehavior=2,t.toLowerCase()){case\"this\":this.rd+=0;break;case\"next\":this.rd+=7;break;case\"last\":case\"previous\":this.rd-=7}isNaN(this.weekday)&&(this.weekday=1)}},monthFullOrMonthAbbr:{regex:RegExp(\"^(\"+A+\"|\"+S+\")\",\"i\"),name:\"monthfull | monthabbr\",callback:function(e,t){return this.ymd(this.y,_(t),this.d)}},tzCorrection:{regex:RegExp(\"^\"+j,\"i\"),name:\"tzcorrection\",callback:function(e){return this.zone(M(e))}},tzAbbr:{regex:RegExp(\"^\\\\(?([a-zA-Z]{1,6})\\\\)?\"),name:\"tzabbr\",callback:function(e,t){var r=C[t.toLowerCase()];return!isNaN(r)&&this.zone(r)}},ago:{regex:/^ago/i,name:\"ago\",callback:function(){this.ry=-this.ry,this.rm=-this.rm,this.rd=-this.rd,this.rh=-this.rh,this.ri=-this.ri,this.rs=-this.rs,this.rf=-this.rf}},year4:{regex:RegExp(\"^\"+b),name:\"year4\",callback:function(e,t){return this.y=+t,!0}},whitespace:{regex:/^[ .,\\t]+/,name:\"whitespace\"},dateShortWithTimeLong:{regex:RegExp(\"^\"+O+\"t?\"+o+\"[:.]\"+a+\"[:.]\"+c,\"i\"),name:\"dateshortwithtimelong\",callback:function(e,t,r,n,o,i){return this.ymd(this.y,_(t),+r)&&this.time(+n,+o,+i,0)}},dateShortWithTimeLong12:{regex:RegExp(\"^\"+O+s+\"[:.]\"+a+\"[:.]\"+l+r+n,\"i\"),name:\"dateshortwithtimelong12\",callback:function(e,t,r,n,o,i,s){return this.ymd(this.y,_(t),+r)&&this.time(N(+n,s),+o,+i,0)}},dateShortWithTimeShort:{regex:RegExp(\"^\"+O+\"t?\"+o+\"[:.]\"+a,\"i\"),name:\"dateshortwithtimeshort\",callback:function(e,t,r,n,o){return this.ymd(this.y,_(t),+r)&&this.time(+n,+o,0,0)}},dateShortWithTimeShort12:{regex:RegExp(\"^\"+O+s+\"[:.]\"+p+r+n,\"i\"),name:\"dateshortwithtimeshort12\",callback:function(e,t,r,n,o,i){return this.ymd(this.y,_(t),+r)&&this.time(N(+n,i),+o,0,0)}}},F={y:NaN,m:NaN,d:NaN,h:NaN,i:NaN,s:NaN,f:NaN,ry:0,rm:0,rd:0,rh:0,ri:0,rs:0,rf:0,weekday:NaN,weekdayBehavior:0,firstOrLastDayOfMonth:0,z:NaN,dates:0,times:0,zones:0,ymd:function(e,t,r){return!(this.dates>0||(this.dates++,this.y=e,this.m=t,this.d=r,0))},time:function(e,t,r,n){return!(this.times>0||(this.times++,this.h=e,this.i=t,this.s=r,this.f=n,0))},resetTime:function(){return this.h=0,this.i=0,this.s=0,this.f=0,this.times=0,!0},zone:function(e){return this.zones<=1&&(this.zones++,this.z=e,!0)},toDate:function(e){switch(this.dates&&!this.times&&(this.h=this.i=this.s=this.f=0),isNaN(this.y)&&(this.y=e.getFullYear()),isNaN(this.m)&&(this.m=e.getMonth()),isNaN(this.d)&&(this.d=e.getDate()),isNaN(this.h)&&(this.h=e.getHours()),isNaN(this.i)&&(this.i=e.getMinutes()),isNaN(this.s)&&(this.s=e.getSeconds()),isNaN(this.f)&&(this.f=e.getMilliseconds()),this.firstOrLastDayOfMonth){case 1:this.d=1;break;case-1:this.d=0,this.m+=1}if(!isNaN(this.weekday)){var t=new Date(e.getTime());t.setFullYear(this.y,this.m,this.d),t.setHours(this.h,this.i,this.s,this.f);var r=t.getDay();if(2===this.weekdayBehavior)0===r&&0!==this.weekday&&(this.weekday=-6),0===this.weekday&&0!==r&&(this.weekday=7),this.d-=r,this.d+=this.weekday;else{var n=this.weekday-r;(this.rd<0&&n<0||this.rd>=0&&n<=-this.weekdayBehavior)&&(n+=7),this.weekday>=0?this.d+=n:this.d-=7-(Math.abs(this.weekday)-r),this.weekday=NaN}}this.y+=this.ry,this.m+=this.rm,this.d+=this.rd,this.h+=this.rh,this.i+=this.ri,this.s+=this.rs,this.f+=this.rf,this.ry=this.rm=this.rd=0,this.rh=this.ri=this.rs=this.rf=0;var o=new Date(e.getTime());switch(o.setFullYear(this.y,this.m,this.d),o.setHours(this.h,this.i,this.s,this.f),this.firstOrLastDayOfMonth){case 1:o.setDate(1);break;case-1:o.setMonth(o.getMonth()+1,0)}return isNaN(this.z)||o.getTimezoneOffset()===this.z||(o.setUTCFullYear(o.getFullYear(),o.getMonth(),o.getDate()),o.setUTCHours(o.getHours(),o.getMinutes(),o.getSeconds()-this.z,o.getMilliseconds())),o}};e.exports=function(e,t){null==t&&(t=Math.floor(Date.now()/1e3));for(var r=[D.yesterday,D.now,D.noon,D.midnightOrToday,D.tomorrow,D.timestamp,D.firstOrLastDay,D.backOrFrontOf,D.timeTiny12,D.timeShort12,D.timeLong12,D.mssqltime,D.timeShort24,D.timeLong24,D.iso8601long,D.gnuNoColon,D.iso8601noColon,D.americanShort,D.american,D.iso8601date4,D.iso8601dateSlash,D.dateSlash,D.gnuDateShortOrIso8601date2,D.gnuDateShorter,D.dateFull,D.pointedDate4,D.pointedDate2,D.dateNoDay,D.dateNoDayRev,D.dateTextual,D.dateNoYear,D.dateNoYearRev,D.dateNoColon,D.xmlRpc,D.xmlRpcNoColon,D.soap,D.wddx,D.exif,D.pgydotd,D.isoWeekDay,D.pgTextShort,D.pgTextReverse,D.clf,D.year4,D.ago,D.dayText,D.relativeTextWeek,D.relativeText,D.monthFullOrMonthAbbr,D.tzCorrection,D.tzAbbr,D.dateShortWithTimeShort12,D.dateShortWithTimeLong12,D.dateShortWithTimeShort,D.dateShortWithTimeLong,D.relative,D.whitespace],n=Object.create(F);e.length;){for(var o=null,i=null,s=0,a=r.length;s<a;s++){var p=r[s],c=e.match(p.regex);c&&(!o||c[0].length>o[0].length)&&(o=c,i=p)}if(!i||i.callback&&!1===i.callback.apply(n,o))return!1;e=e.substr(o[0].length),i=null,o=null}return Math.floor(n.toDate(new Date(1e3*t))/1e3)}},673:e=>{\"use strict\";var t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};e.exports=function(){var e=void 0,r=void 0,n=0,o=0,i=arguments,s=i.length,a=function(e){if(\"[object Array]\"===Object.prototype.toString.call(e))return e;var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(e[r]);return t},p=function e(r,n){var o=0,i=0,s=0,p=0,c=0;if(r===n)return 0;if(\"object\"===(void 0===r?\"undefined\":t(r))){if(\"object\"===(void 0===n?\"undefined\":t(n))){if(r=a(r),n=a(n),c=r.length,(p=n.length)>c)return 1;if(p<c)return-1;for(o=0,i=c;o<i;++o){if(1===(s=e(r[o],n[o])))return 1;if(-1===s)return-1}return 0}return-1}return\"object\"===(void 0===n?\"undefined\":t(n))?1:isNaN(n)&&!isNaN(r)?0===r?0:r<0?1:-1:isNaN(r)&&!isNaN(n)?0===n?0:n>0?1:-1:n===r?0:n>r?1:-1};if(0===s)throw new Error(\"At least one value should be passed to max()\");if(1===s){if(\"object\"!==t(i[0]))throw new Error(\"Wrong parameter count for max()\");if(0===(e=a(i[0])).length)throw new Error(\"Array must contain at least one element for max()\")}else e=i;for(r=e[0],n=1,o=e.length;n<o;++n)1===p(r,e[n])&&(r=e[n]);return r}},4:e=>{\"use strict\";var t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};e.exports=function(){var e=void 0,r=void 0,n=0,o=0,i=arguments,s=i.length,a=function(e){if(\"[object Array]\"===Object.prototype.toString.call(e))return e;var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(e[r]);return t},p=function e(r,n){var o=0,i=0,s=0,p=0,c=0;if(r===n)return 0;if(\"object\"===(void 0===r?\"undefined\":t(r))){if(\"object\"===(void 0===n?\"undefined\":t(n))){if(r=a(r),n=a(n),c=r.length,(p=n.length)>c)return 1;if(p<c)return-1;for(o=0,i=c;o<i;++o){if(1===(s=e(r[o],n[o])))return 1;if(-1===s)return-1}return 0}return-1}return\"object\"===(void 0===n?\"undefined\":t(n))?1:isNaN(n)&&!isNaN(r)?0===r?0:r<0?1:-1:isNaN(r)&&!isNaN(n)?0===n?0:n>0?1:-1:n===r?0:n>r?1:-1};if(0===s)throw new Error(\"At least one value should be passed to min()\");if(1===s){if(\"object\"!==t(i[0]))throw new Error(\"Wrong parameter count for min()\");if(0===(e=a(i[0])).length)throw new Error(\"Array must contain at least one element for min()\")}else e=i;for(r=e[0],n=1,o=e.length;n<o;++n)-1===p(r,e[n])&&(r=e[n]);return r}},718:(e,t,r)=>{\"use strict\";function n(e,t){var r=Math.floor(Math.abs(e)+.5);return(\"PHP_ROUND_HALF_DOWN\"===t&&e===r-.5||\"PHP_ROUND_HALF_EVEN\"===t&&e===.5+2*Math.floor(r/2)||\"PHP_ROUND_HALF_ODD\"===t&&e===.5+2*Math.floor(r/2)-1)&&(r-=1),e<0?-r:r}e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"PHP_ROUND_HALF_UP\",i=r(892),s=r(791),a=void 0;if(e=i(e),t=s(t),a=Math.pow(10,t),isNaN(e)||!isFinite(e))return e;if(Math.trunc(e)===e&&t>=0)return e;var p=14-Math.floor(Math.log10(Math.abs(e)));return p>t&&p-15<t?(e=n(e*Math.pow(10,p),o),e/=Math.pow(10,Math.abs(t-p))):e*=a,(e=n(e,o))/a}},296:e=>{\"use strict\";e.exports=function(){var e=/%%|%(?:(\\d+)\\$)?((?:[-+#0 ]|'[\\s\\S])*)(\\d+)?(?:\\.(\\d*))?([\\s\\S])/g,t=arguments,r=0,n=t[r++],o=function(e,t,r,n){r||(r=\" \");var o=e.length>=t?\"\":new Array(1+t-e.length>>>0).join(r);return n?e+o:o+e},i=function(e,t,r,n,i){var s=n-e.length;return s>0&&(e=r||\"0\"!==i?o(e,n,i,r):[e.slice(0,t.length),o(\"\",s,\"0\",!0),e.slice(t.length)].join(\"\")),e},s=function(e,t,r,n,s,a){return e=o((e>>>0).toString(t),s||0,\"0\",!1),i(e,\"\",r,n,a)},a=function(e,t,r,n,o){return null!=n&&(e=e.slice(0,n)),i(e,\"\",t,r,o)},p=function(e,n,p,c,l,u){var h=void 0,f=void 0,d=void 0,y=void 0,m=void 0;if(\"%%\"===e)return\"%\";var g,x=\" \",b=!1,v=\"\",w=void 0;for(w=0,g=p.length;w<g;w++)switch(p.charAt(w)){case\" \":case\"0\":x=p.charAt(w);break;case\"+\":v=\"+\";break;case\"-\":b=!0;break;case\"'\":w+1<g&&(x=p.charAt(w+1),w++)}if(c=c?+c:0,!isFinite(c))throw new Error(\"Width must be finite\");if(l=l?+l:\"d\"===u?0:\"fFeE\".indexOf(u)>-1?6:void 0,n&&0==+n)throw new Error(\"Argument number must be greater than zero\");if(n&&+n>=t.length)throw new Error(\"Too few arguments\");switch(m=n?t[+n]:t[r++],u){case\"%\":return\"%\";case\"s\":return a(m+\"\",b,c,l,x);case\"c\":return a(String.fromCharCode(+m),b,c,l,x);case\"b\":return s(m,2,b,c,l,x);case\"o\":return s(m,8,b,c,l,x);case\"x\":return s(m,16,b,c,l,x);case\"X\":return s(m,16,b,c,l,x).toUpperCase();case\"u\":return s(m,10,b,c,l,x);case\"i\":case\"d\":return h=+m||0,m=(f=(h=Math.round(h-h%1))<0?\"-\":v)+o(String(Math.abs(h)),l,\"0\",!1),b&&\"0\"===x&&(x=\" \"),i(m,f,b,c,x);case\"e\":case\"E\":case\"f\":case\"F\":case\"g\":case\"G\":return f=(h=+m)<0?\"-\":v,d=[\"toExponential\",\"toFixed\",\"toPrecision\"][\"efg\".indexOf(u.toLowerCase())],y=[\"toString\",\"toUpperCase\"][\"eEfFgG\".indexOf(u)%2],m=f+Math.abs(h)[d](l),i(m,f,b,c,x)[y]();default:return\"\"}};try{return n.replace(e,p)}catch(e){return!1}}},359:(e,t,r)=>{\"use strict\";e.exports=function(e,t){var n=r(521);t=(((t||\"\")+\"\").toLowerCase().match(/<[a-z][a-z0-9]*>/g)||[]).join(\"\");var o=/<\\/?([a-z0-9]*)\\b[^>]*>?/gi,i=/<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi,s=n(e);for(s=\"<\"===s.substring(s.length-1)?s.substring(0,s.length-1):s;;){var a=s;if(s=a.replace(i,\"\").replace(o,(function(e,r){return t.indexOf(\"<\"+r.toLowerCase()+\">\")>-1?e:\"\"})),a===s)return s}}},436:(e,t,r)=>{\"use strict\";e.exports=function(e,t){return r(296).apply(this,[e].concat(t))}},315:e=>{\"use strict\";e.exports=function(e){return!1!==e&&0!==e&&0!==e&&\"\"!==e&&\"0\"!==e&&(!Array.isArray(e)||0!==e.length)&&null!=e}},470:e=>{\"use strict\";function t(e){if(\"string\"!=typeof e)throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}function r(e,t){for(var r,n=\"\",o=0,i=-1,s=0,a=0;a<=e.length;++a){if(a<e.length)r=e.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(i===a-1||1===s);else if(i!==a-1&&2===s){if(n.length<2||2!==o||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var p=n.lastIndexOf(\"/\");if(p!==n.length-1){-1===p?(n=\"\",o=0):o=(n=n.slice(0,p)).length-1-n.lastIndexOf(\"/\"),i=a,s=0;continue}}else if(2===n.length||1===n.length){n=\"\",o=0,i=a,s=0;continue}t&&(n.length>0?n+=\"/..\":n=\"..\",o=2)}else n.length>0?n+=\"/\"+e.slice(i+1,a):n=e.slice(i+1,a),o=a-i-1;i=a,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var e,n=\"\",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var s;i>=0?s=arguments[i]:(void 0===e&&(e=process.cwd()),s=e),t(s),0!==s.length&&(n=s+\"/\"+n,o=47===s.charCodeAt(0))}return n=r(n,!o),o?n.length>0?\"/\"+n:\"/\":n.length>0?n:\".\"},normalize:function(e){if(t(e),0===e.length)return\".\";var n=47===e.charCodeAt(0),o=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!n)).length||n||(e=\".\"),e.length>0&&o&&(e+=\"/\"),n?\"/\"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return\".\";for(var e,r=0;r<arguments.length;++r){var o=arguments[r];t(o),o.length>0&&(void 0===e?e=o:e+=\"/\"+o)}return void 0===e?\".\":n.normalize(e)},relative:function(e,r){if(t(e),t(r),e===r)return\"\";if((e=n.resolve(e))===(r=n.resolve(r)))return\"\";for(var o=1;o<e.length&&47===e.charCodeAt(o);++o);for(var i=e.length,s=i-o,a=1;a<r.length&&47===r.charCodeAt(a);++a);for(var p=r.length-a,c=s<p?s:p,l=-1,u=0;u<=c;++u){if(u===c){if(p>c){if(47===r.charCodeAt(a+u))return r.slice(a+u+1);if(0===u)return r.slice(a+u)}else s>c&&(47===e.charCodeAt(o+u)?l=u:0===u&&(l=0));break}var h=e.charCodeAt(o+u);if(h!==r.charCodeAt(a+u))break;47===h&&(l=u)}var f=\"\";for(u=o+l+1;u<=i;++u)u!==i&&47!==e.charCodeAt(u)||(0===f.length?f+=\"..\":f+=\"/..\");return f.length>0?f+r.slice(a+l):(a+=l,47===r.charCodeAt(a)&&++a,r.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return\".\";for(var r=e.charCodeAt(0),n=47===r,o=-1,i=!0,s=e.length-1;s>=1;--s)if(47===(r=e.charCodeAt(s))){if(!i){o=s;break}}else i=!1;return-1===o?n?\"/\":\".\":n&&1===o?\"//\":e.slice(0,o)},basename:function(e,r){if(void 0!==r&&\"string\"!=typeof r)throw new TypeError('\"ext\" argument must be a string');t(e);var n,o=0,i=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var a=r.length-1,p=-1;for(n=e.length-1;n>=0;--n){var c=e.charCodeAt(n);if(47===c){if(!s){o=n+1;break}}else-1===p&&(s=!1,p=n+1),a>=0&&(c===r.charCodeAt(a)?-1==--a&&(i=n):(a=-1,i=p))}return o===i?i=p:-1===i&&(i=e.length),e.slice(o,i)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!s){o=n+1;break}}else-1===i&&(s=!1,i=n+1);return-1===i?\"\":e.slice(o,i)},extname:function(e){t(e);for(var r=-1,n=0,o=-1,i=!0,s=0,a=e.length-1;a>=0;--a){var p=e.charCodeAt(a);if(47!==p)-1===o&&(i=!1,o=a+1),46===p?-1===r?r=a:1!==s&&(s=1):-1!==r&&(s=-1);else if(!i){n=a+1;break}}return-1===r||-1===o||0===s||1===s&&r===o-1&&r===n+1?\"\":e.slice(r,o)},format:function(e){if(null===e||\"object\"!=typeof e)throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e);return function(e,t){var r=t.dir||t.root,n=t.base||(t.name||\"\")+(t.ext||\"\");return r?r===t.root?r+n:r+e+n:n}(\"/\",e)},parse:function(e){t(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(0===e.length)return r;var n,o=e.charCodeAt(0),i=47===o;i?(r.root=\"/\",n=1):n=0;for(var s=-1,a=0,p=-1,c=!0,l=e.length-1,u=0;l>=n;--l)if(47!==(o=e.charCodeAt(l)))-1===p&&(c=!1,p=l+1),46===o?-1===s?s=l:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){a=l+1;break}return-1===s||-1===p||0===u||1===u&&s===p-1&&s===a+1?-1!==p&&(r.base=r.name=0===a&&i?e.slice(1,p):e.slice(a,p)):(0===a&&i?(r.name=e.slice(1,s),r.base=e.slice(1,p)):(r.name=e.slice(a,s),r.base=e.slice(a,p)),r.ext=e.slice(s,p)),a>0?r.dir=e.slice(0,a-1):i&&(r.dir=\"/\"),r},sep:\"/\",delimiter:\":\",win32:null,posix:null};n.posix=n,e.exports=n},351:()=>{}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}(209);var e,t}));\n//# sourceMappingURL=twig.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twig/twig.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/entry.js");
/******/ 	
/******/ })()
;